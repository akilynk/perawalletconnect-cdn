(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/@walletconnect/window-getters/dist/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
      function getFromWindow2(name) {
        let res = void 0;
        if (typeof window !== "undefined" && typeof window[name] !== "undefined") {
          res = window[name];
        }
        return res;
      }
      exports.getFromWindow = getFromWindow2;
      function getFromWindowOrThrow2(name) {
        const res = getFromWindow2(name);
        if (!res) {
          throw new Error(`${name} is not defined in Window`);
        }
        return res;
      }
      exports.getFromWindowOrThrow = getFromWindowOrThrow2;
      function getDocumentOrThrow2() {
        return getFromWindowOrThrow2("document");
      }
      exports.getDocumentOrThrow = getDocumentOrThrow2;
      function getDocument2() {
        return getFromWindow2("document");
      }
      exports.getDocument = getDocument2;
      function getNavigatorOrThrow2() {
        return getFromWindowOrThrow2("navigator");
      }
      exports.getNavigatorOrThrow = getNavigatorOrThrow2;
      function getNavigator3() {
        return getFromWindow2("navigator");
      }
      exports.getNavigator = getNavigator3;
      function getLocationOrThrow2() {
        return getFromWindowOrThrow2("location");
      }
      exports.getLocationOrThrow = getLocationOrThrow2;
      function getLocation3() {
        return getFromWindow2("location");
      }
      exports.getLocation = getLocation3;
      function getCryptoOrThrow2() {
        return getFromWindowOrThrow2("crypto");
      }
      exports.getCryptoOrThrow = getCryptoOrThrow2;
      function getCrypto2() {
        return getFromWindow2("crypto");
      }
      exports.getCrypto = getCrypto2;
      function getLocalStorageOrThrow2() {
        return getFromWindowOrThrow2("localStorage");
      }
      exports.getLocalStorageOrThrow = getLocalStorageOrThrow2;
      function getLocalStorage3() {
        return getFromWindow2("localStorage");
      }
      exports.getLocalStorage = getLocalStorage3;
    }
  });

  // node_modules/@walletconnect/window-metadata/dist/cjs/index.js
  var require_cjs2 = __commonJS({
    "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getWindowMetadata = void 0;
      var window_getters_1 = require_cjs();
      function getWindowMetadata2() {
        let doc;
        let loc;
        try {
          doc = window_getters_1.getDocumentOrThrow();
          loc = window_getters_1.getLocationOrThrow();
        } catch (e) {
          return null;
        }
        function getIcons() {
          const links = doc.getElementsByTagName("link");
          const icons2 = [];
          for (let i = 0; i < links.length; i++) {
            const link = links[i];
            const rel = link.getAttribute("rel");
            if (rel) {
              if (rel.toLowerCase().indexOf("icon") > -1) {
                const href = link.getAttribute("href");
                if (href) {
                  if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                    let absoluteHref = loc.protocol + "//" + loc.host;
                    if (href.indexOf("/") === 0) {
                      absoluteHref += href;
                    } else {
                      const path = loc.pathname.split("/");
                      path.pop();
                      const finalPath = path.join("/");
                      absoluteHref += finalPath + "/" + href;
                    }
                    icons2.push(absoluteHref);
                  } else if (href.indexOf("//") === 0) {
                    const absoluteUrl = loc.protocol + href;
                    icons2.push(absoluteUrl);
                  } else {
                    icons2.push(href);
                  }
                }
              }
            }
          }
          return icons2;
        }
        function getWindowMetadataOfAny(...args) {
          const metaTags = doc.getElementsByTagName("meta");
          for (let i = 0; i < metaTags.length; i++) {
            const tag = metaTags[i];
            const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
              if (attr) {
                return args.includes(attr);
              }
              return false;
            });
            if (attributes.length && attributes) {
              const content = tag.getAttribute("content");
              if (content) {
                return content;
              }
            }
          }
          return "";
        }
        function getName() {
          let name2 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
          if (!name2) {
            name2 = doc.title;
          }
          return name2;
        }
        function getDescription() {
          const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
          return description2;
        }
        const name = getName();
        const description = getDescription();
        const url = loc.origin;
        const icons = getIcons();
        const meta = {
          description,
          url,
          icons,
          name
        };
        return meta;
      }
      exports.getWindowMetadata = getWindowMetadata2;
    }
  });

  // node_modules/detect-browser/es/index.js
  function detect(userAgent) {
    if (!!userAgent) {
      return parseUserAgent(userAgent);
    }
    if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
      return new ReactNativeInfo();
    }
    if (typeof navigator !== "undefined") {
      return parseUserAgent(navigator.userAgent);
    }
    return getNodeVersion();
  }
  function matchUserAgent(ua) {
    return ua !== "" && userAgentRules.reduce(function(matched, _a) {
      var browser = _a[0], regex = _a[1];
      if (matched) {
        return matched;
      }
      var uaMatch = regex.exec(ua);
      return !!uaMatch && [browser, uaMatch];
    }, false);
  }
  function parseUserAgent(ua) {
    var matchedRule = matchUserAgent(ua);
    if (!matchedRule) {
      return null;
    }
    var name = matchedRule[0], match = matchedRule[1];
    if (name === "searchbot") {
      return new BotInfo();
    }
    var versionParts = match[1] && match[1].split(/[._]/).slice(0, 3);
    if (versionParts) {
      if (versionParts.length < REQUIRED_VERSION_PARTS) {
        versionParts = __spreadArrays(versionParts, createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length));
      }
    } else {
      versionParts = [];
    }
    var version = versionParts.join(".");
    var os = detectOS(ua);
    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
    if (searchBotMatch && searchBotMatch[1]) {
      return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
    }
    return new BrowserInfo(name, version, os);
  }
  function detectOS(ua) {
    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
      var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
      var match = regex.exec(ua);
      if (match) {
        return os;
      }
    }
    return null;
  }
  function getNodeVersion() {
    var isNode3 = typeof process !== "undefined" && process.version;
    return isNode3 ? new NodeInfo(process.version.slice(1)) : null;
  }
  function createVersionParts(count) {
    var output = [];
    for (var ii = 0; ii < count; ii++) {
      output.push("0");
    }
    return output;
  }
  var __spreadArrays, BrowserInfo, NodeInfo, SearchBotDeviceInfo, BotInfo, ReactNativeInfo, SEARCHBOX_UA_REGEX, SEARCHBOT_OS_REGEX, REQUIRED_VERSION_PARTS, userAgentRules, operatingSystemRules;
  var init_es = __esm({
    "node_modules/detect-browser/es/index.js"() {
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      BrowserInfo = /** @class */
      function() {
        function BrowserInfo2(name, version, os) {
          this.name = name;
          this.version = version;
          this.os = os;
          this.type = "browser";
        }
        return BrowserInfo2;
      }();
      NodeInfo = /** @class */
      function() {
        function NodeInfo2(version) {
          this.version = version;
          this.type = "node";
          this.name = "node";
          this.os = process.platform;
        }
        return NodeInfo2;
      }();
      SearchBotDeviceInfo = /** @class */
      function() {
        function SearchBotDeviceInfo2(name, version, os, bot) {
          this.name = name;
          this.version = version;
          this.os = os;
          this.bot = bot;
          this.type = "bot-device";
        }
        return SearchBotDeviceInfo2;
      }();
      BotInfo = /** @class */
      function() {
        function BotInfo2() {
          this.type = "bot";
          this.bot = true;
          this.name = "bot";
          this.version = null;
          this.os = null;
        }
        return BotInfo2;
      }();
      ReactNativeInfo = /** @class */
      function() {
        function ReactNativeInfo2() {
          this.type = "react-native";
          this.name = "react-native";
          this.version = null;
          this.os = null;
        }
        return ReactNativeInfo2;
      }();
      SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
      SEARCHBOT_OS_REGEX = /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
      REQUIRED_VERSION_PARTS = 3;
      userAgentRules = [
        ["aol", /AOLShield\/([0-9\._]+)/],
        ["edge", /Edge\/([0-9\._]+)/],
        ["edge-ios", /EdgiOS\/([0-9\._]+)/],
        ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
        ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
        ["samsung", /SamsungBrowser\/([0-9\.]+)/],
        ["silk", /\bSilk\/([0-9._-]+)\b/],
        ["miui", /MiuiBrowser\/([0-9\.]+)$/],
        ["beaker", /BeakerBrowser\/([0-9\.]+)/],
        ["edge-chromium", /EdgA?\/([0-9\.]+)/],
        [
          "chromium-webview",
          /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
        ],
        ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
        ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
        ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
        ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
        ["fxios", /FxiOS\/([0-9\.]+)/],
        ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
        ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
        ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
        ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
        ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
        ["ie", /MSIE\s(7\.0)/],
        ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
        ["android", /Android\s([0-9\.]+)/],
        ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
        ["safari", /Version\/([0-9\._]+).*Safari/],
        ["facebook", /FBAV\/([0-9\.]+)/],
        ["instagram", /Instagram\s([0-9\.]+)/],
        ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
        ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
        ["searchbot", SEARCHBOX_UA_REGEX]
      ];
      operatingSystemRules = [
        ["iOS", /iP(hone|od|ad)/],
        ["Android OS", /Android/],
        ["BlackBerry OS", /BlackBerry|BB10/],
        ["Windows Mobile", /IEMobile/],
        ["Amazon OS", /Kindle/],
        ["Windows 3.11", /Win16/],
        ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
        ["Windows 98", /(Windows 98)|(Win98)/],
        ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
        ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
        ["Windows Server 2003", /(Windows NT 5.2)/],
        ["Windows Vista", /(Windows NT 6.0)/],
        ["Windows 7", /(Windows NT 6.1)/],
        ["Windows 8", /(Windows NT 6.2)/],
        ["Windows 8.1", /(Windows NT 6.3)/],
        ["Windows 10", /(Windows NT 10.0)/],
        ["Windows ME", /Windows ME/],
        ["Open BSD", /OpenBSD/],
        ["Sun OS", /SunOS/],
        ["Chrome OS", /CrOS/],
        ["Linux", /(Linux)|(X11)/],
        ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
        ["QNX", /QNX/],
        ["BeOS", /BeOS/],
        ["OS/2", /OS\/2/]
      ];
    }
  });

  // node_modules/@walletconnect/browser-utils/dist/esm/browser.js
  function detectEnv(userAgent) {
    return detect(userAgent);
  }
  function detectOS2() {
    const env3 = detectEnv();
    return env3 && env3.os ? env3.os : void 0;
  }
  function isAndroid() {
    const os = detectOS2();
    return os ? os.toLowerCase().includes("android") : false;
  }
  function isIOS() {
    const os = detectOS2();
    return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
  }
  function isMobile() {
    const os = detectOS2();
    return os ? isAndroid() || isIOS() : false;
  }
  function isNode() {
    const env3 = detectEnv();
    const result = env3 && env3.name ? env3.name.toLowerCase() === "node" : false;
    return result;
  }
  function isBrowser() {
    const result = !isNode() && !!getNavigator2();
    return result;
  }
  function getClientMeta() {
    return windowMetadata.getWindowMetadata();
  }
  var windowMetadata, windowGetters, getNavigator2, getLocation2, getLocalStorage2;
  var init_browser = __esm({
    "node_modules/@walletconnect/browser-utils/dist/esm/browser.js"() {
      windowMetadata = __toESM(require_cjs2());
      windowGetters = __toESM(require_cjs());
      init_es();
      getNavigator2 = windowGetters.getNavigator;
      getLocation2 = windowGetters.getLocation;
      getLocalStorage2 = windowGetters.getLocalStorage;
    }
  });

  // node_modules/@walletconnect/safe-json/dist/esm/index.js
  function safeJsonParse(value) {
    if (typeof value !== "string") {
      throw new Error(`Cannot safe json parse value of type ${typeof value}`);
    }
    try {
      return JSON.parse(value);
    } catch (_a) {
      return value;
    }
  }
  function safeJsonStringify(value) {
    return typeof value === "string" ? value : JSON.stringify(value);
  }
  var init_esm = __esm({
    "node_modules/@walletconnect/safe-json/dist/esm/index.js"() {
    }
  });

  // node_modules/@walletconnect/browser-utils/dist/esm/json.js
  var safeJsonParse2, safeJsonStringify2;
  var init_json = __esm({
    "node_modules/@walletconnect/browser-utils/dist/esm/json.js"() {
      init_esm();
      safeJsonParse2 = safeJsonParse;
      safeJsonStringify2 = safeJsonStringify;
    }
  });

  // node_modules/@walletconnect/browser-utils/dist/esm/local.js
  function setLocal(key, data) {
    const raw = safeJsonStringify2(data);
    const local = getLocalStorage2();
    if (local) {
      local.setItem(key, raw);
    }
  }
  function getLocal(key) {
    let data = null;
    let raw = null;
    const local = getLocalStorage2();
    if (local) {
      raw = local.getItem(key);
    }
    data = raw ? safeJsonParse2(raw) : raw;
    return data;
  }
  function removeLocal(key) {
    const local = getLocalStorage2();
    if (local) {
      local.removeItem(key);
    }
  }
  var init_local = __esm({
    "node_modules/@walletconnect/browser-utils/dist/esm/local.js"() {
      init_json();
      init_browser();
    }
  });

  // node_modules/@walletconnect/browser-utils/dist/esm/mobile.js
  var mobileLinkChoiceKey;
  var init_mobile = __esm({
    "node_modules/@walletconnect/browser-utils/dist/esm/mobile.js"() {
      init_local();
      mobileLinkChoiceKey = "WALLETCONNECT_DEEPLINK_CHOICE";
    }
  });

  // node_modules/@walletconnect/browser-utils/dist/esm/registry.js
  var init_registry = __esm({
    "node_modules/@walletconnect/browser-utils/dist/esm/registry.js"() {
    }
  });

  // node_modules/@walletconnect/browser-utils/dist/esm/index.js
  var init_esm2 = __esm({
    "node_modules/@walletconnect/browser-utils/dist/esm/index.js"() {
      init_browser();
      init_json();
      init_local();
      init_mobile();
      init_registry();
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/constants.js
  var reservedEvents, signingMethods;
  var init_constants = __esm({
    "node_modules/@walletconnect/utils/dist/esm/constants.js"() {
      reservedEvents = [
        "session_request",
        "session_update",
        "exchange_key",
        "connect",
        "disconnect",
        "display_uri",
        "modal_closed",
        "transport_open",
        "transport_close",
        "transport_error"
      ];
      signingMethods = [
        "eth_sendTransaction",
        "eth_signTransaction",
        "eth_sign",
        "eth_signTypedData",
        "eth_signTypedData_v1",
        "eth_signTypedData_v2",
        "eth_signTypedData_v3",
        "eth_signTypedData_v4",
        "personal_sign",
        "wallet_addEthereumChain",
        "wallet_switchEthereumChain",
        "wallet_getPermissions",
        "wallet_requestPermissions",
        "wallet_registerOnboarding",
        "wallet_watchAsset",
        "wallet_scanQRCode"
      ];
    }
  });

  // (disabled):node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "(disabled):node_modules/buffer/index.js"() {
    }
  });

  // node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "node_modules/bn.js/lib/bn.js"(exports, module) {
      (function(module2, exports2) {
        "use strict";
        function assert2(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number, base, endian) {
          if (BN2.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base === "le" || base === "be") {
              endian = base;
              base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer2;
        try {
          Buffer2 = require_buffer().Buffer;
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max(left, right) {
          if (left.cmp(right) > 0)
            return left;
          return right;
        };
        BN2.min = function min(left, right) {
          if (left.cmp(right) < 0)
            return left;
          return right;
        };
        BN2.prototype._init = function init(number, base, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base, endian);
          }
          if (base === "hex") {
            base = 16;
          }
          assert2(base === (base | 0) && base >= 2 && base <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
          }
          if (base === 16) {
            this._parseHex(number, start);
          } else {
            this._parseBase(number, base, start);
          }
          if (number[0] === "-") {
            this.negative = 1;
          }
          this.strip();
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base, endian);
        };
        BN2.prototype._initNumber = function _initNumber(number, base, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert2(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base, endian);
        };
        BN2.prototype._initArray = function _initArray(number, base, endian) {
          assert2(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this.strip();
        };
        function parseHex(str, start, end) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r <<= 4;
            if (c >= 49 && c <= 54) {
              r |= c - 49 + 10;
            } else if (c >= 17 && c <= 22) {
              r |= c - 17 + 10;
            } else {
              r |= c & 15;
            }
          }
          return r;
        }
        BN2.prototype._parseHex = function _parseHex(number, start) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off = 0;
          for (i = number.length - 6, j = 0; i >= start; i -= 6) {
            w = parseHex(number, i, i + 6);
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] |= w >>> 26 - off & 4194303;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
          if (i + 6 !== start) {
            w = parseHex(number, start, i + 6);
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] |= w >>> 26 - off & 4194303;
          }
          this.strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              r += c - 49 + 10;
            } else if (c >= 17) {
              r += c - 17 + 10;
            } else {
              r += c;
            }
          }
          return r;
        }
        BN2.prototype._parseBase = function _parseBase(number, base, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for (i = 0; i < mod; i++) {
              pow *= base;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
        };
        BN2.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        BN2.prototype.clone = function clone() {
          var r = new BN2(null);
          this.copy(r);
          return r;
        };
        BN2.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype.strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        BN2.prototype.inspect = function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString(base, padding) {
          base = base || 10;
          padding = padding | 0 || 1;
          var out;
          if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base === (base | 0) && base >= 2 && base <= 36) {
            var groupSize = groupSizes[base];
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modn(groupBase).toString(base);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert2(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert2(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16);
        };
        BN2.prototype.toBuffer = function toBuffer(endian, length) {
          assert2(typeof Buffer2 !== "undefined");
          return this.toArrayLike(Buffer2, endian, length);
        };
        BN2.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert2(byteLength <= reqLength, "byte array longer than desired length");
          assert2(reqLength > 0, "Requested array length <= 0");
          this.strip();
          var littleEndian = endian === "le";
          var res = new ArrayType(reqLength);
          var b, i;
          var q = this.clone();
          if (!littleEndian) {
            for (i = 0; i < reqLength - byteLength; i++) {
              res[i] = 0;
            }
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[reqLength - i - 1] = b;
            }
          } else {
            for (i = 0; !q.isZero(); i++) {
              b = q.andln(255);
              q.iushrn(8);
              res[i] = b;
            }
            for (; i < reqLength; i++) {
              res[i] = 0;
            }
          }
          return res;
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0)
            return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero())
            return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26)
              break;
          }
          return r;
        };
        BN2.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this.strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length)
            return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length)
            return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this.strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length)
            return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length)
            return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this.strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert2((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor(num) {
          if (this.length > num.length)
            return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length)
            return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert2(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this.strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert2(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this.strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN2.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length)
            return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this.strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out.strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out.strip();
        }
        function jumboMulTo(self2, num, out) {
          var fftm = new FFTM();
          return fftm.mulp(self2, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN2.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1)
            return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1)
            return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert2(carry === 0);
          assert2((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out.strip();
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0)
            return new BN2(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0)
              break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0)
                continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this.strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
          assert2(this.negative === 0);
          return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert2(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this.strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert2(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
          assert2(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s)
            return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
          assert2(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert2(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this.strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0)
            return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert2(typeof num === "number");
          assert2(num < 67108864);
          if (num < 0)
            return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this.strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0)
            return this.strip();
          assert2(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this.strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q.strip();
          }
          a.strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert2(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero())
            return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0)
            return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modn = function modn(num) {
          assert2(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return acc;
        };
        BN2.prototype.idivn = function idivn(num) {
          assert2(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          return this.strip();
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert2(p.negative === 0);
          assert2(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd(num) {
          if (this.isZero())
            return num.abs();
          if (num.isZero())
            return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert2(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative)
            return -1;
          if (this.negative === 0 && negative)
            return 1;
          this.strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert2(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0)
            return -1;
          if (this.negative === 0 && num.negative !== 0)
            return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length)
            return 1;
          if (this.length < num.length)
            return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b)
              continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          assert2(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert2(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert2(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert2(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert2(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert2(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert2(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert2(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert2(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert2(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert2(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert2(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert2(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert2(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert2(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p) {
          this.name = name;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            r.strip();
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime(name) {
          if (primes[name])
            return primes[name];
          var prime2;
          if (name === "k256") {
            prime2 = new K256();
          } else if (name === "p224") {
            prime2 = new P224();
          } else if (name === "p192") {
            prime2 = new P192();
          } else if (name === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN2._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert2(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert2(a.negative === 0, "red works only with positives");
          assert2(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert2((a.negative | b.negative) === 0, "red works only with positives");
          assert2(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime)
            return this.prime.ireduce(a)._forceRed(this);
          return a.umod(this.m)._forceRed(this);
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero())
            return a.clone();
          var mod3 = this.m.andln(3);
          assert2(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert2(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert2(i < m);
            var b = this.pow(c, new BN2(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero())
            return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0)
            return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0))
                continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero())
            return new BN2(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/is-typedarray/index.js
  var require_is_typedarray = __commonJS({
    "node_modules/is-typedarray/index.js"(exports, module) {
      module.exports = isTypedArray2;
      isTypedArray2.strict = isStrictTypedArray;
      isTypedArray2.loose = isLooseTypedArray;
      var toString = Object.prototype.toString;
      var names = {
        "[object Int8Array]": true,
        "[object Int16Array]": true,
        "[object Int32Array]": true,
        "[object Uint8Array]": true,
        "[object Uint8ClampedArray]": true,
        "[object Uint16Array]": true,
        "[object Uint32Array]": true,
        "[object Float32Array]": true,
        "[object Float64Array]": true
      };
      function isTypedArray2(arr) {
        return isStrictTypedArray(arr) || isLooseTypedArray(arr);
      }
      function isStrictTypedArray(arr) {
        return arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array;
      }
      function isLooseTypedArray(arr) {
        return names[toString.call(arr)];
      }
    }
  });

  // node_modules/typedarray-to-buffer/index.js
  var require_typedarray_to_buffer = __commonJS({
    "node_modules/typedarray-to-buffer/index.js"(exports, module) {
      var isTypedArray2 = require_is_typedarray().strict;
      module.exports = function typedarrayToBuffer(arr) {
        if (isTypedArray2(arr)) {
          var buf = Buffer.from(arr.buffer);
          if (arr.byteLength !== arr.buffer.byteLength) {
            buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);
          }
          return buf;
        } else {
          return Buffer.from(arr);
        }
      };
    }
  });

  // node_modules/@walletconnect/encoding/dist/esm/index.js
  function bufferToArray(buf) {
    return new Uint8Array(buf);
  }
  function bufferToHex(buf, prefixed = false) {
    const hex = buf.toString(ENC_HEX);
    return prefixed ? addHexPrefix(hex) : hex;
  }
  function bufferToUtf8(buf) {
    return buf.toString(ENC_UTF8);
  }
  function arrayToBuffer(arr) {
    return (0, import_typedarray_to_buffer.default)(arr);
  }
  function arrayToHex(arr, prefixed = false) {
    return bufferToHex(arrayToBuffer(arr), prefixed);
  }
  function arrayToUtf8(arr) {
    return bufferToUtf8(arrayToBuffer(arr));
  }
  function hexToBuffer(hex) {
    return Buffer.from(removeHexPrefix(hex), ENC_HEX);
  }
  function hexToArray(hex) {
    return bufferToArray(hexToBuffer(hex));
  }
  function utf8ToBuffer(utf8) {
    return Buffer.from(utf8, ENC_UTF8);
  }
  function utf8ToArray(utf8) {
    return bufferToArray(utf8ToBuffer(utf8));
  }
  function utf8ToHex(utf8, prefixed = false) {
    return bufferToHex(utf8ToBuffer(utf8), prefixed);
  }
  function isHexString(str, length) {
    if (typeof str !== "string" || !str.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && str.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  function concatArrays(...args) {
    let result = [];
    args.forEach((arg) => result = result.concat(Array.from(arg)));
    return new Uint8Array([...result]);
  }
  function calcByteLength(length, byteSize = 8) {
    const remainder = length % byteSize;
    return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;
  }
  function sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {
    return padLeft(str, calcByteLength(str.length, byteSize), padding);
  }
  function padLeft(str, length, padding = STRING_ZERO) {
    return padString(str, length, true, padding);
  }
  function removeHexPrefix(hex) {
    return hex.replace(/^0x/, "");
  }
  function addHexPrefix(hex) {
    return hex.startsWith("0x") ? hex : `0x${hex}`;
  }
  function sanitizeHex(hex) {
    hex = removeHexPrefix(hex);
    hex = sanitizeBytes(hex, 2);
    if (hex) {
      hex = addHexPrefix(hex);
    }
    return hex;
  }
  function removeHexLeadingZeros(hex) {
    const prefixed = hex.startsWith("0x");
    hex = removeHexPrefix(hex);
    hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;
    return prefixed ? addHexPrefix(hex) : hex;
  }
  function padString(str, length, left, padding = STRING_ZERO) {
    const diff = length - str.length;
    let result = str;
    if (diff > 0) {
      const pad = padding.repeat(diff);
      result = left ? pad + str : str + pad;
    }
    return result;
  }
  var import_is_typedarray, import_typedarray_to_buffer, ENC_HEX, ENC_UTF8, STRING_ZERO;
  var init_esm3 = __esm({
    "node_modules/@walletconnect/encoding/dist/esm/index.js"() {
      import_is_typedarray = __toESM(require_is_typedarray());
      import_typedarray_to_buffer = __toESM(require_typedarray_to_buffer());
      ENC_HEX = "hex";
      ENC_UTF8 = "utf8";
      STRING_ZERO = "0";
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/encoding.js
  function convertArrayBufferToBuffer(arrBuf) {
    return arrayToBuffer(new Uint8Array(arrBuf));
  }
  function convertArrayBufferToHex(arrBuf, noPrefix) {
    return arrayToHex(new Uint8Array(arrBuf), !noPrefix);
  }
  function convertBufferToArrayBuffer(buf) {
    return bufferToArray(buf).buffer;
  }
  function convertUtf8ToBuffer(utf8) {
    return utf8ToBuffer(utf8);
  }
  function convertUtf8ToHex(utf8, noPrefix) {
    return utf8ToHex(utf8, !noPrefix);
  }
  function convertHexToArrayBuffer(hex) {
    return hexToArray(hex).buffer;
  }
  function convertNumberToHex(num, noPrefix) {
    const hex = removeHexPrefix(sanitizeHex(new import_bn.default(num).toString(16)));
    return noPrefix ? hex : addHexPrefix(hex);
  }
  var import_bn;
  var init_encoding = __esm({
    "node_modules/@walletconnect/utils/dist/esm/encoding.js"() {
      import_bn = __toESM(require_bn());
      init_esm3();
    }
  });

  // node_modules/js-sha3/src/sha3.js
  var require_sha3 = __commonJS({
    "node_modules/js-sha3/src/sha3.js"(exports, module) {
      (function() {
        "use strict";
        var INPUT_ERROR = "input is invalid type";
        var FINALIZE_ERROR = "finalize already called";
        var WINDOW = typeof window === "object";
        var root = WINDOW ? window : {};
        if (root.JS_SHA3_NO_WINDOW) {
          WINDOW = false;
        }
        var WEB_WORKER = !WINDOW && typeof self === "object";
        var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
          root = window;
        } else if (WEB_WORKER) {
          root = self;
        }
        var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
        var AMD = typeof define === "function" && define.amd;
        var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING2 = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1,
          0,
          32898,
          0,
          32906,
          2147483648,
          2147516416,
          2147483648,
          32907,
          0,
          2147483649,
          0,
          2147516545,
          2147483648,
          32777,
          2147483648,
          138,
          0,
          136,
          0,
          2147516425,
          0,
          2147483658,
          0,
          2147516555,
          0,
          139,
          2147483648,
          32905,
          2147483648,
          32771,
          2147483648,
          32770,
          2147483648,
          128,
          2147483648,
          32778,
          0,
          2147483658,
          2147483648,
          2147516545,
          2147483648,
          32896,
          2147483648,
          2147483649,
          0,
          2147516424,
          2147483648
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
        var CSHAKE_BYTEPAD = {
          "128": 168,
          "256": 136
        };
        if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
          Array.isArray = function(obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
          };
        }
        if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
          ArrayBuffer.isView = function(obj) {
            return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
          };
        }
        var createOutputMethod = function(bits2, padding, outputType) {
          return function(message) {
            return new Keccak(bits2, padding, bits2).update(message)[outputType]();
          };
        };
        var createShakeOutputMethod = function(bits2, padding, outputType) {
          return function(message, outputBits) {
            return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
          };
        };
        var createCshakeOutputMethod = function(bits2, padding, outputType) {
          return function(message, outputBits, n, s) {
            return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
          };
        };
        var createKmacOutputMethod = function(bits2, padding, outputType) {
          return function(key, message, outputBits, s) {
            return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
          };
        };
        var createOutputMethods = function(method, createMethod2, bits2, padding) {
          for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
            var type = OUTPUT_TYPES[i2];
            method[type] = createMethod2(bits2, padding, type);
          }
          return method;
        };
        var createMethod = function(bits2, padding) {
          var method = createOutputMethod(bits2, padding, "hex");
          method.create = function() {
            return new Keccak(bits2, padding, bits2);
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          return createOutputMethods(method, createOutputMethod, bits2, padding);
        };
        var createShakeMethod = function(bits2, padding) {
          var method = createShakeOutputMethod(bits2, padding, "hex");
          method.create = function(outputBits) {
            return new Keccak(bits2, padding, outputBits);
          };
          method.update = function(message, outputBits) {
            return method.create(outputBits).update(message);
          };
          return createOutputMethods(method, createShakeOutputMethod, bits2, padding);
        };
        var createCshakeMethod = function(bits2, padding) {
          var w = CSHAKE_BYTEPAD[bits2];
          var method = createCshakeOutputMethod(bits2, padding, "hex");
          method.create = function(outputBits, n, s) {
            if (!n && !s) {
              return methods["shake" + bits2].create(outputBits);
            } else {
              return new Keccak(bits2, padding, outputBits).bytepad([n, s], w);
            }
          };
          method.update = function(message, outputBits, n, s) {
            return method.create(outputBits, n, s).update(message);
          };
          return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);
        };
        var createKmacMethod = function(bits2, padding) {
          var w = CSHAKE_BYTEPAD[bits2];
          var method = createKmacOutputMethod(bits2, padding, "hex");
          method.create = function(key, outputBits, s) {
            return new Kmac(bits2, padding, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
          };
          method.update = function(key, message, outputBits, s) {
            return method.create(key, outputBits, s).update(message);
          };
          return createOutputMethods(method, createKmacOutputMethod, bits2, padding);
        };
        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
          { name: "sha3", padding: PADDING2, bits: BITS, createMethod },
          { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
          { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
          { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
        ];
        var methods = {}, methodNames = [];
        for (var i = 0; i < algorithms.length; ++i) {
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for (var j = 0; j < bits.length; ++j) {
            var methodName = algorithm.name + "_" + bits[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
            if (algorithm.name !== "sha3") {
              var newMethodName = algorithm.name + bits[j];
              methodNames.push(newMethodName);
              methods[newMethodName] = methods[methodName];
            }
          }
        }
        function Keccak(bits2, padding, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding;
          this.outputBits = outputBits;
          this.reset = true;
          this.finalized = false;
          this.block = 0;
          this.start = 0;
          this.blockCount = 1600 - (bits2 << 1) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;
          for (var i2 = 0; i2 < 50; ++i2) {
            this.s[i2] = 0;
          }
        }
        Keccak.prototype.update = function(message) {
          if (this.finalized) {
            throw new Error(FINALIZE_ERROR);
          }
          var notString, type = typeof message;
          if (type !== "string") {
            if (type === "object") {
              if (message === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                message = new Uint8Array(message);
              } else if (!Array.isArray(message)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
          while (index < length) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i2 = 1; i2 < blockCount + 1; ++i2) {
                blocks[i2] = 0;
              }
            }
            if (notString) {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
              }
            } else {
              for (i2 = this.start; index < length && i2 < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
                } else if (code < 2048) {
                  blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                  blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                }
              }
            }
            this.lastByteIndex = i2;
            if (i2 >= byteCount) {
              this.start = i2 - byteCount;
              this.block = blocks[blockCount];
              for (i2 = 0; i2 < blockCount; ++i2) {
                s[i2] ^= blocks[i2];
              }
              f(s);
              this.reset = true;
            } else {
              this.start = i2;
            }
          }
          return this;
        };
        Keccak.prototype.encode = function(x, right) {
          var o = x & 255, n = 1;
          var bytes = [o];
          x = x >> 8;
          o = x & 255;
          while (o > 0) {
            bytes.unshift(o);
            x = x >> 8;
            o = x & 255;
            ++n;
          }
          if (right) {
            bytes.push(n);
          } else {
            bytes.unshift(n);
          }
          this.update(bytes);
          return bytes.length;
        };
        Keccak.prototype.encodeString = function(str) {
          var notString, type = typeof str;
          if (type !== "string") {
            if (type === "object") {
              if (str === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                str = new Uint8Array(str);
              } else if (!Array.isArray(str)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var bytes = 0, length = str.length;
          if (notString) {
            bytes = length;
          } else {
            for (var i2 = 0; i2 < str.length; ++i2) {
              var code = str.charCodeAt(i2);
              if (code < 128) {
                bytes += 1;
              } else if (code < 2048) {
                bytes += 2;
              } else if (code < 55296 || code >= 57344) {
                bytes += 3;
              } else {
                code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
                bytes += 4;
              }
            }
          }
          bytes += this.encode(bytes * 8);
          this.update(str);
          return bytes;
        };
        Keccak.prototype.bytepad = function(strs, w) {
          var bytes = this.encode(w);
          for (var i2 = 0; i2 < strs.length; ++i2) {
            bytes += this.encodeString(strs[i2]);
          }
          var paddingBytes = w - bytes % w;
          var zeros = [];
          zeros.length = paddingBytes;
          this.update(zeros);
          return this;
        };
        Keccak.prototype.finalize = function() {
          if (this.finalized) {
            return;
          }
          this.finalized = true;
          var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
          blocks[i2 >> 2] |= this.padding[i2 & 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          blocks[blockCount - 1] |= 2147483648;
          for (i2 = 0; i2 < blockCount; ++i2) {
            s[i2] ^= blocks[i2];
          }
          f(s);
        };
        Keccak.prototype.toString = Keccak.prototype.hex = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var hex = "", block;
          while (j2 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
              block = s[i2];
              hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
            }
            if (j2 % blockCount === 0) {
              f(s);
              i2 = 0;
            }
          }
          if (extraBytes) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
            if (extraBytes > 1) {
              hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
            }
            if (extraBytes > 2) {
              hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
            }
          }
          return hex;
        };
        Keccak.prototype.arrayBuffer = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var bytes = this.outputBits >> 3;
          var buffer;
          if (extraBytes) {
            buffer = new ArrayBuffer(outputBlocks + 1 << 2);
          } else {
            buffer = new ArrayBuffer(bytes);
          }
          var array = new Uint32Array(buffer);
          while (j2 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
              array[j2] = s[i2];
            }
            if (j2 % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            array[i2] = s[i2];
            buffer = buffer.slice(0, bytes);
          }
          return buffer;
        };
        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
        Keccak.prototype.digest = Keccak.prototype.array = function() {
          this.finalize();
          var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
          var array = [], offset, block;
          while (j2 < outputBlocks) {
            for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
              offset = j2 << 2;
              block = s[i2];
              array[offset] = block & 255;
              array[offset + 1] = block >> 8 & 255;
              array[offset + 2] = block >> 16 & 255;
              array[offset + 3] = block >> 24 & 255;
            }
            if (j2 % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            if (extraBytes > 1) {
              array[offset + 1] = block >> 8 & 255;
            }
            if (extraBytes > 2) {
              array[offset + 2] = block >> 16 & 255;
            }
          }
          return array;
        };
        function Kmac(bits2, padding, outputBits) {
          Keccak.call(this, bits2, padding, outputBits);
        }
        Kmac.prototype = new Keccak();
        Kmac.prototype.finalize = function() {
          this.encode(this.outputBits, true);
          return Keccak.prototype.finalize.call(this);
        };
        var f = function(s) {
          var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
          for (n = 0; n < 48; n += 2) {
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
            h = c8 ^ (c2 << 1 | c3 >>> 31);
            l = c9 ^ (c3 << 1 | c2 >>> 31);
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ (c4 << 1 | c5 >>> 31);
            l = c1 ^ (c5 << 1 | c4 >>> 31);
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ (c6 << 1 | c7 >>> 31);
            l = c3 ^ (c7 << 1 | c6 >>> 31);
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ (c8 << 1 | c9 >>> 31);
            l = c5 ^ (c9 << 1 | c8 >>> 31);
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ (c0 << 1 | c1 >>> 31);
            l = c7 ^ (c1 << 1 | c0 >>> 31);
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;
            b0 = s[0];
            b1 = s[1];
            b32 = s[11] << 4 | s[10] >>> 28;
            b33 = s[10] << 4 | s[11] >>> 28;
            b14 = s[20] << 3 | s[21] >>> 29;
            b15 = s[21] << 3 | s[20] >>> 29;
            b46 = s[31] << 9 | s[30] >>> 23;
            b47 = s[30] << 9 | s[31] >>> 23;
            b28 = s[40] << 18 | s[41] >>> 14;
            b29 = s[41] << 18 | s[40] >>> 14;
            b20 = s[2] << 1 | s[3] >>> 31;
            b21 = s[3] << 1 | s[2] >>> 31;
            b2 = s[13] << 12 | s[12] >>> 20;
            b3 = s[12] << 12 | s[13] >>> 20;
            b34 = s[22] << 10 | s[23] >>> 22;
            b35 = s[23] << 10 | s[22] >>> 22;
            b16 = s[33] << 13 | s[32] >>> 19;
            b17 = s[32] << 13 | s[33] >>> 19;
            b48 = s[42] << 2 | s[43] >>> 30;
            b49 = s[43] << 2 | s[42] >>> 30;
            b40 = s[5] << 30 | s[4] >>> 2;
            b41 = s[4] << 30 | s[5] >>> 2;
            b22 = s[14] << 6 | s[15] >>> 26;
            b23 = s[15] << 6 | s[14] >>> 26;
            b4 = s[25] << 11 | s[24] >>> 21;
            b5 = s[24] << 11 | s[25] >>> 21;
            b36 = s[34] << 15 | s[35] >>> 17;
            b37 = s[35] << 15 | s[34] >>> 17;
            b18 = s[45] << 29 | s[44] >>> 3;
            b19 = s[44] << 29 | s[45] >>> 3;
            b10 = s[6] << 28 | s[7] >>> 4;
            b11 = s[7] << 28 | s[6] >>> 4;
            b42 = s[17] << 23 | s[16] >>> 9;
            b43 = s[16] << 23 | s[17] >>> 9;
            b24 = s[26] << 25 | s[27] >>> 7;
            b25 = s[27] << 25 | s[26] >>> 7;
            b6 = s[36] << 21 | s[37] >>> 11;
            b7 = s[37] << 21 | s[36] >>> 11;
            b38 = s[47] << 24 | s[46] >>> 8;
            b39 = s[46] << 24 | s[47] >>> 8;
            b30 = s[8] << 27 | s[9] >>> 5;
            b31 = s[9] << 27 | s[8] >>> 5;
            b12 = s[18] << 20 | s[19] >>> 12;
            b13 = s[19] << 20 | s[18] >>> 12;
            b44 = s[29] << 7 | s[28] >>> 25;
            b45 = s[28] << 7 | s[29] >>> 25;
            b26 = s[38] << 8 | s[39] >>> 24;
            b27 = s[39] << 8 | s[38] >>> 24;
            b8 = s[48] << 14 | s[49] >>> 18;
            b9 = s[49] << 14 | s[48] >>> 18;
            s[0] = b0 ^ ~b2 & b4;
            s[1] = b1 ^ ~b3 & b5;
            s[10] = b10 ^ ~b12 & b14;
            s[11] = b11 ^ ~b13 & b15;
            s[20] = b20 ^ ~b22 & b24;
            s[21] = b21 ^ ~b23 & b25;
            s[30] = b30 ^ ~b32 & b34;
            s[31] = b31 ^ ~b33 & b35;
            s[40] = b40 ^ ~b42 & b44;
            s[41] = b41 ^ ~b43 & b45;
            s[2] = b2 ^ ~b4 & b6;
            s[3] = b3 ^ ~b5 & b7;
            s[12] = b12 ^ ~b14 & b16;
            s[13] = b13 ^ ~b15 & b17;
            s[22] = b22 ^ ~b24 & b26;
            s[23] = b23 ^ ~b25 & b27;
            s[32] = b32 ^ ~b34 & b36;
            s[33] = b33 ^ ~b35 & b37;
            s[42] = b42 ^ ~b44 & b46;
            s[43] = b43 ^ ~b45 & b47;
            s[4] = b4 ^ ~b6 & b8;
            s[5] = b5 ^ ~b7 & b9;
            s[14] = b14 ^ ~b16 & b18;
            s[15] = b15 ^ ~b17 & b19;
            s[24] = b24 ^ ~b26 & b28;
            s[25] = b25 ^ ~b27 & b29;
            s[34] = b34 ^ ~b36 & b38;
            s[35] = b35 ^ ~b37 & b39;
            s[44] = b44 ^ ~b46 & b48;
            s[45] = b45 ^ ~b47 & b49;
            s[6] = b6 ^ ~b8 & b0;
            s[7] = b7 ^ ~b9 & b1;
            s[16] = b16 ^ ~b18 & b10;
            s[17] = b17 ^ ~b19 & b11;
            s[26] = b26 ^ ~b28 & b20;
            s[27] = b27 ^ ~b29 & b21;
            s[36] = b36 ^ ~b38 & b30;
            s[37] = b37 ^ ~b39 & b31;
            s[46] = b46 ^ ~b48 & b40;
            s[47] = b47 ^ ~b49 & b41;
            s[8] = b8 ^ ~b0 & b2;
            s[9] = b9 ^ ~b1 & b3;
            s[18] = b18 ^ ~b10 & b12;
            s[19] = b19 ^ ~b11 & b13;
            s[28] = b28 ^ ~b20 & b22;
            s[29] = b29 ^ ~b21 & b23;
            s[38] = b38 ^ ~b30 & b32;
            s[39] = b39 ^ ~b31 & b33;
            s[48] = b48 ^ ~b40 & b42;
            s[49] = b49 ^ ~b41 & b43;
            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
          }
        };
        if (COMMON_JS) {
          module.exports = methods;
        } else {
          for (i = 0; i < methodNames.length; ++i) {
            root[methodNames[i]] = methods[methodNames[i]];
          }
          if (AMD) {
            define(function() {
              return methods;
            });
          }
        }
      })();
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
  var PARSE_ERROR, INVALID_REQUEST, METHOD_NOT_FOUND, INVALID_PARAMS, INTERNAL_ERROR, SERVER_ERROR, RESERVED_ERROR_CODES, SERVER_ERROR_CODE_RANGE, STANDARD_ERROR_MAP, DEFAULT_ERROR;
  var init_constants2 = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js"() {
      PARSE_ERROR = "PARSE_ERROR";
      INVALID_REQUEST = "INVALID_REQUEST";
      METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
      INVALID_PARAMS = "INVALID_PARAMS";
      INTERNAL_ERROR = "INTERNAL_ERROR";
      SERVER_ERROR = "SERVER_ERROR";
      RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
      SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
      STANDARD_ERROR_MAP = {
        [PARSE_ERROR]: { code: -32700, message: "Parse error" },
        [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
        [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
        [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
        [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
        [SERVER_ERROR]: { code: -32e3, message: "Server error" }
      };
      DEFAULT_ERROR = SERVER_ERROR;
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
  function isServerErrorCode(code) {
    return code <= SERVER_ERROR_CODE_RANGE[0] && code >= SERVER_ERROR_CODE_RANGE[1];
  }
  function isReservedErrorCode(code) {
    return RESERVED_ERROR_CODES.includes(code);
  }
  function isValidErrorCode(code) {
    return typeof code === "number";
  }
  function getError(type) {
    if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
      return STANDARD_ERROR_MAP[DEFAULT_ERROR];
    }
    return STANDARD_ERROR_MAP[type];
  }
  function getErrorByCode(code) {
    const match = Object.values(STANDARD_ERROR_MAP).find((e) => e.code === code);
    if (!match) {
      return STANDARD_ERROR_MAP[DEFAULT_ERROR];
    }
    return match;
  }
  function validateJsonRpcError(response) {
    if (typeof response.error.code === "undefined") {
      return { valid: false, error: "Missing code for JSON-RPC error" };
    }
    if (typeof response.error.message === "undefined") {
      return { valid: false, error: "Missing message for JSON-RPC error" };
    }
    if (!isValidErrorCode(response.error.code)) {
      return {
        valid: false,
        error: `Invalid error code type for JSON-RPC: ${response.error.code}`
      };
    }
    if (isReservedErrorCode(response.error.code)) {
      const error = getErrorByCode(response.error.code);
      if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
        return {
          valid: false,
          error: `Invalid error code message for JSON-RPC: ${response.error.code}`
        };
      }
    }
    return { valid: true };
  }
  function parseConnectionError(e, url, type) {
    return e.message.includes("getaddrinfo ENOTFOUND") || e.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;
  }
  var init_error = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js"() {
      init_constants2();
    }
  });

  // node_modules/tslib/tslib.es6.js
  var tslib_es6_exports = {};
  __export(tslib_es6_exports, {
    __assign: () => __assign,
    __asyncDelegator: () => __asyncDelegator,
    __asyncGenerator: () => __asyncGenerator,
    __asyncValues: () => __asyncValues,
    __await: () => __await,
    __awaiter: () => __awaiter,
    __classPrivateFieldGet: () => __classPrivateFieldGet,
    __classPrivateFieldSet: () => __classPrivateFieldSet,
    __createBinding: () => __createBinding,
    __decorate: () => __decorate,
    __exportStar: () => __exportStar,
    __extends: () => __extends,
    __generator: () => __generator,
    __importDefault: () => __importDefault,
    __importStar: () => __importStar,
    __makeTemplateObject: () => __makeTemplateObject,
    __metadata: () => __metadata,
    __param: () => __param,
    __read: () => __read,
    __rest: () => __rest,
    __spread: () => __spread,
    __spreadArrays: () => __spreadArrays2,
    __values: () => __values2
  });
  function __extends(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __rest(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (_)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __createBinding(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  }
  function __exportStar(m, exports) {
    for (var p in m)
      if (p !== "default" && !exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  function __values2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
    return ar;
  }
  function __spreadArrays2() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
      s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
        r[k] = a[j];
    return r;
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
      } : f;
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", { value: raw });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  function __importStar(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (Object.hasOwnProperty.call(mod, k))
          result[k] = mod[k];
    }
    result.default = mod;
    return result;
  }
  function __importDefault(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
  }
  function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
  }
  var extendStatics, __assign;
  var init_tslib_es6 = __esm({
    "node_modules/tslib/tslib.es6.js"() {
      extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
    }
  });

  // node_modules/@walletconnect/environment/dist/cjs/crypto.js
  var require_crypto = __commonJS({
    "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
      function getBrowerCrypto2() {
        return (window === null || window === void 0 ? void 0 : window.crypto) || (window === null || window === void 0 ? void 0 : window.msCrypto) || {};
      }
      exports.getBrowerCrypto = getBrowerCrypto2;
      function getSubtleCrypto2() {
        const browserCrypto = getBrowerCrypto2();
        return browserCrypto.subtle || browserCrypto.webkitSubtle;
      }
      exports.getSubtleCrypto = getSubtleCrypto2;
      function isBrowserCryptoAvailable() {
        return !!getBrowerCrypto2() && !!getSubtleCrypto2();
      }
      exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
    }
  });

  // node_modules/@walletconnect/environment/dist/cjs/env.js
  var require_env = __commonJS({
    "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
      function isReactNative() {
        return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
      }
      exports.isReactNative = isReactNative;
      function isNode3() {
        return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
      }
      exports.isNode = isNode3;
      function isBrowser2() {
        return !isReactNative() && !isNode3();
      }
      exports.isBrowser = isBrowser2;
    }
  });

  // node_modules/@walletconnect/environment/dist/cjs/index.js
  var require_cjs3 = __commonJS({
    "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      tslib_1.__exportStar(require_crypto(), exports);
      tslib_1.__exportStar(require_env(), exports);
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
  var env_exports = {};
  __export(env_exports, {
    isNodeJs: () => isNodeJs
  });
  var import_environment, isNodeJs;
  var init_env = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js"() {
      import_environment = __toESM(require_cjs3());
      __reExport(env_exports, __toESM(require_cjs3()));
      isNodeJs = import_environment.isNode;
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
  function payloadId(entropy = 3) {
    const date = Date.now() * Math.pow(10, entropy);
    const extra = Math.floor(Math.random() * Math.pow(10, entropy));
    return date + extra;
  }
  function getBigIntRpcId(entropy = 6) {
    return BigInt(payloadId(entropy));
  }
  function formatJsonRpcRequest(method, params, id) {
    return {
      id: id || payloadId(),
      jsonrpc: "2.0",
      method,
      params
    };
  }
  function formatJsonRpcResult(id, result) {
    return {
      id,
      jsonrpc: "2.0",
      result
    };
  }
  function formatJsonRpcError(id, error, data) {
    return {
      id,
      jsonrpc: "2.0",
      error: formatErrorMessage(error, data)
    };
  }
  function formatErrorMessage(error, data) {
    if (typeof error === "undefined") {
      return getError(INTERNAL_ERROR);
    }
    if (typeof error === "string") {
      error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
    }
    if (typeof data !== "undefined") {
      error.data = data;
    }
    if (isReservedErrorCode(error.code)) {
      error = getErrorByCode(error.code);
    }
    return error;
  }
  var init_format = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js"() {
      init_error();
      init_constants2();
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
  function isValidRoute(route) {
    if (route.includes("*")) {
      return isValidWildcardRoute(route);
    }
    if (/\W/g.test(route)) {
      return false;
    }
    return true;
  }
  function isValidDefaultRoute(route) {
    return route === "*";
  }
  function isValidWildcardRoute(route) {
    if (isValidDefaultRoute(route)) {
      return true;
    }
    if (!route.includes("*")) {
      return false;
    }
    if (route.split("*").length !== 2) {
      return false;
    }
    if (route.split("*").filter((x) => x.trim() === "").length !== 1) {
      return false;
    }
    return true;
  }
  function isValidLeadingWildcardRoute(route) {
    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
  }
  function isValidTrailingWildcardRoute(route) {
    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
  }
  var init_routing = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js"() {
    }
  });

  // node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js
  var init_jsonrpc = __esm({
    "node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js"() {
    }
  });

  // node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js
  var IEvents;
  var init_misc = __esm({
    "node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js"() {
      IEvents = class {
      };
    }
  });

  // node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js
  var IJsonRpcConnection, IBaseJsonRpcProvider, IJsonRpcProvider;
  var init_provider = __esm({
    "node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js"() {
      init_misc();
      IJsonRpcConnection = class extends IEvents {
        constructor(opts) {
          super();
        }
      };
      IBaseJsonRpcProvider = class extends IEvents {
        constructor() {
          super();
        }
      };
      IJsonRpcProvider = class extends IBaseJsonRpcProvider {
        constructor(connection) {
          super();
        }
      };
    }
  });

  // node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js
  var init_validator = __esm({
    "node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js"() {
    }
  });

  // node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js
  var init_esm4 = __esm({
    "node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js"() {
      init_jsonrpc();
      init_misc();
      init_provider();
      init_validator();
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js
  var init_types = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js"() {
      init_esm4();
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
  function getUrlProtocol(url) {
    const matches = url.match(new RegExp(/^\w+:/, "gi"));
    if (!matches || !matches.length)
      return;
    return matches[0];
  }
  function matchRegexProtocol(url, regex) {
    const protocol = getUrlProtocol(url);
    if (typeof protocol === "undefined")
      return false;
    return new RegExp(regex).test(protocol);
  }
  function isHttpUrl(url) {
    return matchRegexProtocol(url, HTTP_REGEX);
  }
  function isWsUrl(url) {
    return matchRegexProtocol(url, WS_REGEX);
  }
  function isLocalhostUrl(url) {
    return new RegExp("wss?://localhost(:d{2,5})?").test(url);
  }
  var HTTP_REGEX, WS_REGEX;
  var init_url = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js"() {
      HTTP_REGEX = "^https?:";
      WS_REGEX = "^wss?:";
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
  function isJsonRpcPayload(payload) {
    return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
  }
  function isJsonRpcRequest(payload) {
    return isJsonRpcPayload(payload) && "method" in payload;
  }
  function isJsonRpcResponse(payload) {
    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
  }
  function isJsonRpcResult(payload) {
    return "result" in payload;
  }
  function isJsonRpcError(payload) {
    return "error" in payload;
  }
  function isJsonRpcValidationInvalid(validation) {
    return "error" in validation && validation.valid === false;
  }
  var init_validators = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js"() {
    }
  });

  // node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
  var esm_exports3 = {};
  __export(esm_exports3, {
    DEFAULT_ERROR: () => DEFAULT_ERROR,
    IBaseJsonRpcProvider: () => IBaseJsonRpcProvider,
    IEvents: () => IEvents,
    IJsonRpcConnection: () => IJsonRpcConnection,
    IJsonRpcProvider: () => IJsonRpcProvider,
    INTERNAL_ERROR: () => INTERNAL_ERROR,
    INVALID_PARAMS: () => INVALID_PARAMS,
    INVALID_REQUEST: () => INVALID_REQUEST,
    METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
    PARSE_ERROR: () => PARSE_ERROR,
    RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
    SERVER_ERROR: () => SERVER_ERROR,
    SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
    STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
    formatErrorMessage: () => formatErrorMessage,
    formatJsonRpcError: () => formatJsonRpcError,
    formatJsonRpcRequest: () => formatJsonRpcRequest,
    formatJsonRpcResult: () => formatJsonRpcResult,
    getBigIntRpcId: () => getBigIntRpcId,
    getError: () => getError,
    getErrorByCode: () => getErrorByCode,
    isHttpUrl: () => isHttpUrl,
    isJsonRpcError: () => isJsonRpcError,
    isJsonRpcPayload: () => isJsonRpcPayload,
    isJsonRpcRequest: () => isJsonRpcRequest,
    isJsonRpcResponse: () => isJsonRpcResponse,
    isJsonRpcResult: () => isJsonRpcResult,
    isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
    isLocalhostUrl: () => isLocalhostUrl,
    isNodeJs: () => isNodeJs,
    isReservedErrorCode: () => isReservedErrorCode,
    isServerErrorCode: () => isServerErrorCode,
    isValidDefaultRoute: () => isValidDefaultRoute,
    isValidErrorCode: () => isValidErrorCode,
    isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
    isValidRoute: () => isValidRoute,
    isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
    isValidWildcardRoute: () => isValidWildcardRoute,
    isWsUrl: () => isWsUrl,
    parseConnectionError: () => parseConnectionError,
    payloadId: () => payloadId,
    validateJsonRpcError: () => validateJsonRpcError
  });
  var init_esm5 = __esm({
    "node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js"() {
      init_constants2();
      init_error();
      init_env();
      __reExport(esm_exports3, env_exports);
      init_format();
      init_routing();
      init_types();
      init_url();
      init_validators();
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/misc.js
  function sanitizeHex2(hex) {
    return sanitizeHex(hex);
  }
  function removeHexLeadingZeros2(hex) {
    return removeHexLeadingZeros(addHexPrefix(hex));
  }
  function uuid() {
    const result = ((a, b) => {
      for (b = a = ""; a++ < 36; b += a * 51 & 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : "-") {
      }
      return b;
    })();
    return result;
  }
  var payloadId2;
  var init_misc2 = __esm({
    "node_modules/@walletconnect/utils/dist/esm/misc.js"() {
      init_esm3();
      init_esm5();
      init_constants();
      payloadId2 = payloadId;
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/validators.js
  function isEmptyString(value) {
    return value === "" || typeof value === "string" && value.trim() === "";
  }
  function isEmptyArray(array) {
    return !(array && array.length);
  }
  function isHexString2(value, length) {
    return isHexString(value, length);
  }
  function isJsonRpcRequest2(object) {
    return typeof object.method !== "undefined";
  }
  function isJsonRpcResponseSuccess(object) {
    return typeof object.result !== "undefined";
  }
  function isJsonRpcResponseError(object) {
    return typeof object.error !== "undefined";
  }
  function isInternalEvent(object) {
    return typeof object.event !== "undefined";
  }
  function isReservedEvent(event) {
    return reservedEvents.includes(event) || event.startsWith("wc_");
  }
  function isSilentPayload(request) {
    if (request.method.startsWith("wc_")) {
      return true;
    }
    if (signingMethods.includes(request.method)) {
      return false;
    }
    return true;
  }
  var init_validators2 = __esm({
    "node_modules/@walletconnect/utils/dist/esm/validators.js"() {
      init_esm3();
      init_constants();
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/ethereum.js
  function toChecksumAddress(address) {
    address = removeHexPrefix(address.toLowerCase());
    const hash = removeHexPrefix((0, import_js_sha3.keccak_256)(convertUtf8ToBuffer(address)));
    let checksum = "";
    for (let i = 0; i < address.length; i++) {
      if (parseInt(hash[i], 16) > 7) {
        checksum += address[i].toUpperCase();
      } else {
        checksum += address[i];
      }
    }
    return addHexPrefix(checksum);
  }
  function parsePersonalSign(params) {
    if (!isEmptyArray(params) && !isHexString2(params[0])) {
      params[0] = convertUtf8ToHex(params[0]);
    }
    return params;
  }
  function parseTransactionData(txData) {
    if (typeof txData.type !== "undefined" && txData.type !== "0")
      return txData;
    if (typeof txData.from === "undefined" || !isValidAddress(txData.from)) {
      throw new Error(`Transaction object must include a valid 'from' value.`);
    }
    function parseHexValues(value) {
      let result = value;
      if (typeof value === "number" || typeof value === "string" && !isEmptyString(value)) {
        if (!isHexString2(value)) {
          result = convertNumberToHex(value);
        } else if (typeof value === "string") {
          result = sanitizeHex2(value);
        }
      }
      if (typeof result === "string") {
        result = removeHexLeadingZeros2(result);
      }
      return result;
    }
    const txDataRPC = {
      from: sanitizeHex2(txData.from),
      to: typeof txData.to === "undefined" ? void 0 : sanitizeHex2(txData.to),
      gasPrice: typeof txData.gasPrice === "undefined" ? "" : parseHexValues(txData.gasPrice),
      gas: typeof txData.gas === "undefined" ? typeof txData.gasLimit === "undefined" ? "" : parseHexValues(txData.gasLimit) : parseHexValues(txData.gas),
      value: typeof txData.value === "undefined" ? "" : parseHexValues(txData.value),
      nonce: typeof txData.nonce === "undefined" ? "" : parseHexValues(txData.nonce),
      data: typeof txData.data === "undefined" ? "" : sanitizeHex2(txData.data) || "0x"
    };
    const prunable = ["gasPrice", "gas", "value", "nonce"];
    Object.keys(txDataRPC).forEach((key) => {
      if ((typeof txDataRPC[key] === "undefined" || typeof txDataRPC[key] === "string" && !txDataRPC[key].trim().length) && prunable.includes(key)) {
        delete txDataRPC[key];
      }
    });
    return txDataRPC;
  }
  var import_js_sha3, isValidAddress;
  var init_ethereum = __esm({
    "node_modules/@walletconnect/utils/dist/esm/ethereum.js"() {
      import_js_sha3 = __toESM(require_sha3());
      init_esm3();
      init_encoding();
      init_misc2();
      init_validators2();
      isValidAddress = (address) => {
        if (!address) {
          return false;
        } else if (address.toLowerCase().substring(0, 2) !== "0x") {
          return false;
        } else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
        } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
          return true;
        } else {
          return address === toChecksumAddress(address);
        }
      };
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/payload.js
  function formatRpcError(error) {
    const message = error.message || "Failed or Rejected Request";
    let code = -32e3;
    if (error && !error.code) {
      switch (message) {
        case "Parse error":
          code = -32700;
          break;
        case "Invalid request":
          code = -32600;
          break;
        case "Method not found":
          code = -32601;
          break;
        case "Invalid params":
          code = -32602;
          break;
        case "Internal error":
          code = -32603;
          break;
        default:
          code = -32e3;
          break;
      }
    }
    const result = {
      code,
      message
    };
    if (error.data) {
      result.data = error.data;
    }
    return result;
  }
  var init_payload = __esm({
    "node_modules/@walletconnect/utils/dist/esm/payload.js"() {
    }
  });

  // node_modules/strict-uri-encode/index.js
  var require_strict_uri_encode = __commonJS({
    "node_modules/strict-uri-encode/index.js"(exports, module) {
      "use strict";
      module.exports = (str) => encodeURIComponent(str).replace(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);
    }
  });

  // node_modules/decode-uri-component/index.js
  var require_decode_uri_component = __commonJS({
    "node_modules/decode-uri-component/index.js"(exports, module) {
      "use strict";
      var token = "%[a-f0-9]{2}";
      var singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");
      var multiMatcher = new RegExp("(" + token + ")+", "gi");
      function decodeComponents(components, split) {
        try {
          return [decodeURIComponent(components.join(""))];
        } catch (err) {
        }
        if (components.length === 1) {
          return components;
        }
        split = split || 1;
        var left = components.slice(0, split);
        var right = components.slice(split);
        return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
      }
      function decode(input) {
        try {
          return decodeURIComponent(input);
        } catch (err) {
          var tokens = input.match(singleMatcher) || [];
          for (var i = 1; i < tokens.length; i++) {
            input = decodeComponents(tokens, i).join("");
            tokens = input.match(singleMatcher) || [];
          }
          return input;
        }
      }
      function customDecodeURIComponent(input) {
        var replaceMap = {
          "%FE%FF": "\uFFFD\uFFFD",
          "%FF%FE": "\uFFFD\uFFFD"
        };
        var match = multiMatcher.exec(input);
        while (match) {
          try {
            replaceMap[match[0]] = decodeURIComponent(match[0]);
          } catch (err) {
            var result = decode(match[0]);
            if (result !== match[0]) {
              replaceMap[match[0]] = result;
            }
          }
          match = multiMatcher.exec(input);
        }
        replaceMap["%C2"] = "\uFFFD";
        var entries = Object.keys(replaceMap);
        for (var i = 0; i < entries.length; i++) {
          var key = entries[i];
          input = input.replace(new RegExp(key, "g"), replaceMap[key]);
        }
        return input;
      }
      module.exports = function(encodedURI) {
        if (typeof encodedURI !== "string") {
          throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
        }
        try {
          encodedURI = encodedURI.replace(/\+/g, " ");
          return decodeURIComponent(encodedURI);
        } catch (err) {
          return customDecodeURIComponent(encodedURI);
        }
      };
    }
  });

  // node_modules/split-on-first/index.js
  var require_split_on_first = __commonJS({
    "node_modules/split-on-first/index.js"(exports, module) {
      "use strict";
      module.exports = (string, separator) => {
        if (!(typeof string === "string" && typeof separator === "string")) {
          throw new TypeError("Expected the arguments to be of type `string`");
        }
        if (separator === "") {
          return [string];
        }
        const separatorIndex = string.indexOf(separator);
        if (separatorIndex === -1) {
          return [string];
        }
        return [
          string.slice(0, separatorIndex),
          string.slice(separatorIndex + separator.length)
        ];
      };
    }
  });

  // node_modules/query-string/index.js
  var require_query_string = __commonJS({
    "node_modules/query-string/index.js"(exports) {
      "use strict";
      var strictUriEncode = require_strict_uri_encode();
      var decodeComponent = require_decode_uri_component();
      var splitOnFirst = require_split_on_first();
      var isNullOrUndefined = (value) => value === null || value === void 0;
      function encoderForArrayFormat(options) {
        switch (options.arrayFormat) {
          case "index":
            return (key) => (result, value) => {
              const index = result.length;
              if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
                return result;
              }
              if (value === null) {
                return [...result, [encode(key, options), "[", index, "]"].join("")];
              }
              return [
                ...result,
                [encode(key, options), "[", encode(index, options), "]=", encode(value, options)].join("")
              ];
            };
          case "bracket":
            return (key) => (result, value) => {
              if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
                return result;
              }
              if (value === null) {
                return [...result, [encode(key, options), "[]"].join("")];
              }
              return [...result, [encode(key, options), "[]=", encode(value, options)].join("")];
            };
          case "comma":
          case "separator":
            return (key) => (result, value) => {
              if (value === null || value === void 0 || value.length === 0) {
                return result;
              }
              if (result.length === 0) {
                return [[encode(key, options), "=", encode(value, options)].join("")];
              }
              return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
            };
          default:
            return (key) => (result, value) => {
              if (value === void 0 || options.skipNull && value === null || options.skipEmptyString && value === "") {
                return result;
              }
              if (value === null) {
                return [...result, encode(key, options)];
              }
              return [...result, [encode(key, options), "=", encode(value, options)].join("")];
            };
        }
      }
      function parserForArrayFormat(options) {
        let result;
        switch (options.arrayFormat) {
          case "index":
            return (key, value, accumulator) => {
              result = /\[(\d*)\]$/.exec(key);
              key = key.replace(/\[\d*\]$/, "");
              if (!result) {
                accumulator[key] = value;
                return;
              }
              if (accumulator[key] === void 0) {
                accumulator[key] = {};
              }
              accumulator[key][result[1]] = value;
            };
          case "bracket":
            return (key, value, accumulator) => {
              result = /(\[\])$/.exec(key);
              key = key.replace(/\[\]$/, "");
              if (!result) {
                accumulator[key] = value;
                return;
              }
              if (accumulator[key] === void 0) {
                accumulator[key] = [value];
                return;
              }
              accumulator[key] = [].concat(accumulator[key], value);
            };
          case "comma":
          case "separator":
            return (key, value, accumulator) => {
              const isArray = typeof value === "string" && value.split("").indexOf(options.arrayFormatSeparator) > -1;
              const newValue = isArray ? value.split(options.arrayFormatSeparator).map((item) => decode(item, options)) : value === null ? value : decode(value, options);
              accumulator[key] = newValue;
            };
          default:
            return (key, value, accumulator) => {
              if (accumulator[key] === void 0) {
                accumulator[key] = value;
                return;
              }
              accumulator[key] = [].concat(accumulator[key], value);
            };
        }
      }
      function validateArrayFormatSeparator(value) {
        if (typeof value !== "string" || value.length !== 1) {
          throw new TypeError("arrayFormatSeparator must be single character string");
        }
      }
      function encode(value, options) {
        if (options.encode) {
          return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
        }
        return value;
      }
      function decode(value, options) {
        if (options.decode) {
          return decodeComponent(value);
        }
        return value;
      }
      function keysSorter(input) {
        if (Array.isArray(input)) {
          return input.sort();
        }
        if (typeof input === "object") {
          return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map((key) => input[key]);
        }
        return input;
      }
      function removeHash(input) {
        const hashStart = input.indexOf("#");
        if (hashStart !== -1) {
          input = input.slice(0, hashStart);
        }
        return input;
      }
      function getHash(url) {
        let hash = "";
        const hashStart = url.indexOf("#");
        if (hashStart !== -1) {
          hash = url.slice(hashStart);
        }
        return hash;
      }
      function extract(input) {
        input = removeHash(input);
        const queryStart = input.indexOf("?");
        if (queryStart === -1) {
          return "";
        }
        return input.slice(queryStart + 1);
      }
      function parseValue(value, options) {
        if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === "string" && value.trim() !== "")) {
          value = Number(value);
        } else if (options.parseBooleans && value !== null && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
          value = value.toLowerCase() === "true";
        }
        return value;
      }
      function parse2(input, options) {
        options = Object.assign({
          decode: true,
          sort: true,
          arrayFormat: "none",
          arrayFormatSeparator: ",",
          parseNumbers: false,
          parseBooleans: false
        }, options);
        validateArrayFormatSeparator(options.arrayFormatSeparator);
        const formatter = parserForArrayFormat(options);
        const ret = /* @__PURE__ */ Object.create(null);
        if (typeof input !== "string") {
          return ret;
        }
        input = input.trim().replace(/^[?#&]/, "");
        if (!input) {
          return ret;
        }
        for (const param of input.split("&")) {
          let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, " ") : param, "=");
          value = value === void 0 ? null : ["comma", "separator"].includes(options.arrayFormat) ? value : decode(value, options);
          formatter(decode(key, options), value, ret);
        }
        for (const key of Object.keys(ret)) {
          const value = ret[key];
          if (typeof value === "object" && value !== null) {
            for (const k of Object.keys(value)) {
              value[k] = parseValue(value[k], options);
            }
          } else {
            ret[key] = parseValue(value, options);
          }
        }
        if (options.sort === false) {
          return ret;
        }
        return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
          const value = ret[key];
          if (Boolean(value) && typeof value === "object" && !Array.isArray(value)) {
            result[key] = keysSorter(value);
          } else {
            result[key] = value;
          }
          return result;
        }, /* @__PURE__ */ Object.create(null));
      }
      exports.extract = extract;
      exports.parse = parse2;
      exports.stringify = (object, options) => {
        if (!object) {
          return "";
        }
        options = Object.assign({
          encode: true,
          strict: true,
          arrayFormat: "none",
          arrayFormatSeparator: ","
        }, options);
        validateArrayFormatSeparator(options.arrayFormatSeparator);
        const shouldFilter = (key) => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === "";
        const formatter = encoderForArrayFormat(options);
        const objectCopy = {};
        for (const key of Object.keys(object)) {
          if (!shouldFilter(key)) {
            objectCopy[key] = object[key];
          }
        }
        const keys = Object.keys(objectCopy);
        if (options.sort !== false) {
          keys.sort(options.sort);
        }
        return keys.map((key) => {
          const value = object[key];
          if (value === void 0) {
            return "";
          }
          if (value === null) {
            return encode(key, options);
          }
          if (Array.isArray(value)) {
            return value.reduce(formatter(key), []).join("&");
          }
          return encode(key, options) + "=" + encode(value, options);
        }).filter((x) => x.length > 0).join("&");
      };
      exports.parseUrl = (input, options) => {
        options = Object.assign({
          decode: true
        }, options);
        const [url, hash] = splitOnFirst(input, "#");
        return Object.assign(
          {
            url: url.split("?")[0] || "",
            query: parse2(extract(input), options)
          },
          options && options.parseFragmentIdentifier && hash ? { fragmentIdentifier: decode(hash, options) } : {}
        );
      };
      exports.stringifyUrl = (input, options) => {
        options = Object.assign({
          encode: true,
          strict: true
        }, options);
        const url = removeHash(input.url).split("?")[0] || "";
        const queryFromUrl = exports.extract(input.url);
        const parsedQueryFromUrl = exports.parse(queryFromUrl, { sort: false });
        const query = Object.assign(parsedQueryFromUrl, input.query);
        let queryString = exports.stringify(query, options);
        if (queryString) {
          queryString = `?${queryString}`;
        }
        let hash = getHash(input.url);
        if (input.fragmentIdentifier) {
          hash = `#${encode(input.fragmentIdentifier, options)}`;
        }
        return `${url}${queryString}${hash}`;
      };
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/url.js
  function getQueryString(url) {
    const pathEnd = url.indexOf("?") !== -1 ? url.indexOf("?") : void 0;
    const queryString = typeof pathEnd !== "undefined" ? url.substr(pathEnd) : "";
    return queryString;
  }
  function appendToQueryString(queryString, newQueryParams) {
    let queryParams = parseQueryString(queryString);
    queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);
    queryString = formatQueryString(queryParams);
    return queryString;
  }
  function parseQueryString(queryString) {
    return queryStringUtils.parse(queryString);
  }
  function formatQueryString(queryParams) {
    return queryStringUtils.stringify(queryParams);
  }
  var queryStringUtils;
  var init_url2 = __esm({
    "node_modules/@walletconnect/utils/dist/esm/url.js"() {
      queryStringUtils = __toESM(require_query_string());
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/session.js
  function isWalletConnectSession(object) {
    return typeof object.bridge !== "undefined";
  }
  function parseWalletConnectUri(str) {
    const pathStart = str.indexOf(":");
    const pathEnd = str.indexOf("?") !== -1 ? str.indexOf("?") : void 0;
    const protocol = str.substring(0, pathStart);
    const path = str.substring(pathStart + 1, pathEnd);
    function parseRequiredParams(path2) {
      const separator = "@";
      const values = path2.split(separator);
      const requiredParams2 = {
        handshakeTopic: values[0],
        version: parseInt(values[1], 10)
      };
      return requiredParams2;
    }
    const requiredParams = parseRequiredParams(path);
    const queryString = typeof pathEnd !== "undefined" ? str.substr(pathEnd) : "";
    function parseQueryParams(queryString2) {
      const result2 = parseQueryString(queryString2);
      const parameters = {
        key: result2.key || "",
        bridge: result2.bridge || ""
      };
      return parameters;
    }
    const queryParams = parseQueryParams(queryString);
    const result = Object.assign(Object.assign({ protocol }, requiredParams), queryParams);
    return result;
  }
  var init_session = __esm({
    "node_modules/@walletconnect/utils/dist/esm/session.js"() {
      init_url2();
    }
  });

  // node_modules/@walletconnect/utils/dist/esm/index.js
  var init_esm6 = __esm({
    "node_modules/@walletconnect/utils/dist/esm/index.js"() {
      init_esm2();
      init_constants();
      init_encoding();
      init_ethereum();
      init_misc2();
      init_payload();
      init_session();
      init_url2();
      init_validators2();
    }
  });

  // node_modules/@walletconnect/socket-transport/dist/esm/network.js
  var NetworkMonitor, network_default;
  var init_network = __esm({
    "node_modules/@walletconnect/socket-transport/dist/esm/network.js"() {
      NetworkMonitor = class {
        constructor() {
          this._eventEmitters = [];
          if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
            window.addEventListener("online", () => this.trigger("online"));
            window.addEventListener("offline", () => this.trigger("offline"));
          }
        }
        on(event, callback) {
          this._eventEmitters.push({
            event,
            callback
          });
        }
        trigger(event) {
          let eventEmitters = [];
          if (event) {
            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);
          }
          eventEmitters.forEach((eventEmitter) => {
            eventEmitter.callback();
          });
        }
      };
      network_default = NetworkMonitor;
    }
  });

  // node_modules/ws/browser.js
  var require_browser = __commonJS({
    "node_modules/ws/browser.js"(exports, module) {
      "use strict";
      module.exports = function() {
        throw new Error(
          "ws does not work in the browser. Browser clients must use the native WebSocket object"
        );
      };
    }
  });

  // node_modules/@walletconnect/socket-transport/dist/esm/index.js
  function getWebSocketUrl(_url, protocol, version) {
    var _a, _b;
    const url = _url.startsWith("https") ? _url.replace("https", "wss") : _url.startsWith("http") ? _url.replace("http", "ws") : _url;
    const splitUrl = url.split("?");
    const params = isBrowser() ? {
      protocol,
      version,
      env: "browser",
      host: ((_a = getLocation2()) === null || _a === void 0 ? void 0 : _a.host) || ""
    } : {
      protocol,
      version,
      env: ((_b = detectEnv()) === null || _b === void 0 ? void 0 : _b.name) || ""
    };
    const queryString = appendToQueryString(getQueryString(splitUrl[1] || ""), params);
    return splitUrl[0] + "?" + queryString;
  }
  var WS, SocketTransport, esm_default;
  var init_esm7 = __esm({
    "node_modules/@walletconnect/socket-transport/dist/esm/index.js"() {
      init_esm6();
      init_network();
      WS = typeof window.WebSocket !== "undefined" ? window.WebSocket : require_browser();
      SocketTransport = class {
        constructor(opts) {
          this.opts = opts;
          this._queue = [];
          this._events = [];
          this._subscriptions = [];
          this._protocol = opts.protocol;
          this._version = opts.version;
          this._url = "";
          this._netMonitor = null;
          this._socket = null;
          this._nextSocket = null;
          this._subscriptions = opts.subscriptions || [];
          this._netMonitor = opts.netMonitor || new network_default();
          if (!opts.url || typeof opts.url !== "string") {
            throw new Error("Missing or invalid WebSocket url");
          }
          this._url = opts.url;
          this._netMonitor.on("online", () => this._socketCreate());
        }
        set readyState(value) {
        }
        get readyState() {
          return this._socket ? this._socket.readyState : -1;
        }
        set connecting(value) {
        }
        get connecting() {
          return this.readyState === 0;
        }
        set connected(value) {
        }
        get connected() {
          return this.readyState === 1;
        }
        set closing(value) {
        }
        get closing() {
          return this.readyState === 2;
        }
        set closed(value) {
        }
        get closed() {
          return this.readyState === 3;
        }
        open() {
          this._socketCreate();
        }
        close() {
          this._socketClose();
        }
        send(message, topic, silent) {
          if (!topic || typeof topic !== "string") {
            throw new Error("Missing or invalid topic field");
          }
          this._socketSend({
            topic,
            type: "pub",
            payload: message,
            silent: !!silent
          });
        }
        subscribe(topic) {
          this._socketSend({
            topic,
            type: "sub",
            payload: "",
            silent: true
          });
        }
        on(event, callback) {
          this._events.push({ event, callback });
        }
        _socketCreate() {
          if (this._nextSocket) {
            return;
          }
          const url = getWebSocketUrl(this._url, this._protocol, this._version);
          this._nextSocket = new WS(url);
          if (!this._nextSocket) {
            throw new Error("Failed to create socket");
          }
          this._nextSocket.onmessage = (event) => this._socketReceive(event);
          this._nextSocket.onopen = () => this._socketOpen();
          this._nextSocket.onerror = (event) => this._socketError(event);
          this._nextSocket.onclose = () => {
            setTimeout(() => {
              this._nextSocket = null;
              this._socketCreate();
            }, 1e3);
          };
        }
        _socketOpen() {
          this._socketClose();
          this._socket = this._nextSocket;
          this._nextSocket = null;
          this._queueSubscriptions();
          this._pushQueue();
        }
        _socketClose() {
          if (this._socket) {
            this._socket.onclose = () => {
            };
            this._socket.close();
          }
        }
        _socketSend(socketMessage) {
          const message = JSON.stringify(socketMessage);
          if (this._socket && this._socket.readyState === 1) {
            this._socket.send(message);
          } else {
            this._setToQueue(socketMessage);
            this._socketCreate();
          }
        }
        async _socketReceive(event) {
          let socketMessage;
          try {
            socketMessage = JSON.parse(event.data);
          } catch (error) {
            return;
          }
          this._socketSend({
            topic: socketMessage.topic,
            type: "ack",
            payload: "",
            silent: true
          });
          if (this._socket && this._socket.readyState === 1) {
            const events = this._events.filter((event2) => event2.event === "message");
            if (events && events.length) {
              events.forEach((event2) => event2.callback(socketMessage));
            }
          }
        }
        _socketError(e) {
          const events = this._events.filter((event) => event.event === "error");
          if (events && events.length) {
            events.forEach((event) => event.callback(e));
          }
        }
        _queueSubscriptions() {
          const subscriptions = this._subscriptions;
          subscriptions.forEach((topic) => this._queue.push({
            topic,
            type: "sub",
            payload: "",
            silent: true
          }));
          this._subscriptions = this.opts.subscriptions || [];
        }
        _setToQueue(socketMessage) {
          this._queue.push(socketMessage);
        }
        _pushQueue() {
          const queue = this._queue;
          queue.forEach((socketMessage) => this._socketSend(socketMessage));
          this._queue = [];
        }
      };
      esm_default = SocketTransport;
    }
  });

  // node_modules/@walletconnect/core/dist/esm/errors.js
  var ERROR_SESSION_CONNECTED, ERROR_SESSION_DISCONNECTED, ERROR_SESSION_REJECTED, ERROR_MISSING_JSON_RPC, ERROR_MISSING_RESULT, ERROR_MISSING_ERROR, ERROR_MISSING_METHOD, ERROR_MISSING_ID, ERROR_MISSING_REQUIRED, ERROR_INVALID_RESPONSE, ERROR_INVALID_URI, ERROR_QRCODE_MODAL_NOT_PROVIDED, ERROR_QRCODE_MODAL_USER_CLOSED;
  var init_errors = __esm({
    "node_modules/@walletconnect/core/dist/esm/errors.js"() {
      ERROR_SESSION_CONNECTED = "Session currently connected";
      ERROR_SESSION_DISCONNECTED = "Session currently disconnected";
      ERROR_SESSION_REJECTED = "Session Rejected";
      ERROR_MISSING_JSON_RPC = "Missing JSON RPC response";
      ERROR_MISSING_RESULT = `JSON-RPC success response must include "result" field`;
      ERROR_MISSING_ERROR = `JSON-RPC error response must include "error" field`;
      ERROR_MISSING_METHOD = `JSON RPC request must have valid "method" value`;
      ERROR_MISSING_ID = `JSON RPC request must have valid "id" value`;
      ERROR_MISSING_REQUIRED = "Missing one of the required parameters: bridge / uri / session";
      ERROR_INVALID_RESPONSE = "JSON RPC response format is invalid";
      ERROR_INVALID_URI = "URI format is invalid";
      ERROR_QRCODE_MODAL_NOT_PROVIDED = "QRCode Modal not provided";
      ERROR_QRCODE_MODAL_USER_CLOSED = "User close QRCode Modal";
    }
  });

  // node_modules/@walletconnect/core/dist/esm/events.js
  var EventManager, events_default;
  var init_events = __esm({
    "node_modules/@walletconnect/core/dist/esm/events.js"() {
      init_esm6();
      EventManager = class {
        constructor() {
          this._eventEmitters = [];
        }
        subscribe(eventEmitter) {
          this._eventEmitters.push(eventEmitter);
        }
        unsubscribe(event) {
          this._eventEmitters = this._eventEmitters.filter((x) => x.event !== event);
        }
        trigger(payload) {
          let eventEmitters = [];
          let event;
          if (isJsonRpcRequest2(payload)) {
            event = payload.method;
          } else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {
            event = `response:${payload.id}`;
          } else if (isInternalEvent(payload)) {
            event = payload.event;
          } else {
            event = "";
          }
          if (event) {
            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);
          }
          if ((!eventEmitters || !eventEmitters.length) && !isReservedEvent(event) && !isInternalEvent(event)) {
            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === "call_request");
          }
          eventEmitters.forEach((eventEmitter) => {
            if (isJsonRpcResponseError(payload)) {
              const error = new Error(payload.error.message);
              eventEmitter.callback(error, null);
            } else {
              eventEmitter.callback(null, payload);
            }
          });
        }
      };
      events_default = EventManager;
    }
  });

  // node_modules/@walletconnect/core/dist/esm/storage.js
  var SessionStorage, storage_default;
  var init_storage = __esm({
    "node_modules/@walletconnect/core/dist/esm/storage.js"() {
      init_esm6();
      SessionStorage = class {
        constructor(storageId = "walletconnect") {
          this.storageId = storageId;
        }
        getSession() {
          let session = null;
          const json = getLocal(this.storageId);
          if (json && isWalletConnectSession(json)) {
            session = json;
          }
          return session;
        }
        setSession(session) {
          setLocal(this.storageId, session);
          return session;
        }
        removeSession() {
          removeLocal(this.storageId);
        }
      };
      storage_default = SessionStorage;
    }
  });

  // node_modules/@walletconnect/core/dist/esm/url.js
  function extractHostname(url) {
    let hostname = url.indexOf("//") > -1 ? url.split("/")[2] : url.split("/")[0];
    hostname = hostname.split(":")[0];
    hostname = hostname.split("?")[0];
    return hostname;
  }
  function extractRootDomain(url) {
    return extractHostname(url).split(".").slice(-2).join(".");
  }
  function randomBridgeIndex() {
    return Math.floor(Math.random() * bridges.length);
  }
  function selectRandomBridgeUrl() {
    return bridges[randomBridgeIndex()];
  }
  function shouldSelectRandomly(url) {
    return extractRootDomain(url) === domain;
  }
  function getBridgeUrl(url) {
    if (shouldSelectRandomly(url)) {
      return selectRandomBridgeUrl();
    }
    return url;
  }
  var domain, alphanumerical, bridges;
  var init_url3 = __esm({
    "node_modules/@walletconnect/core/dist/esm/url.js"() {
      domain = "walletconnect.org";
      alphanumerical = "abcdefghijklmnopqrstuvwxyz0123456789";
      bridges = alphanumerical.split("").map((char) => `https://${char}.bridge.walletconnect.org`);
    }
  });

  // node_modules/@walletconnect/core/dist/esm/index.js
  var Connector, esm_default2;
  var init_esm8 = __esm({
    "node_modules/@walletconnect/core/dist/esm/index.js"() {
      init_esm6();
      init_esm7();
      init_errors();
      init_events();
      init_storage();
      init_url3();
      Connector = class {
        constructor(opts) {
          this.protocol = "wc";
          this.version = 1;
          this._bridge = "";
          this._key = null;
          this._clientId = "";
          this._clientMeta = null;
          this._peerId = "";
          this._peerMeta = null;
          this._handshakeId = 0;
          this._handshakeTopic = "";
          this._connected = false;
          this._accounts = [];
          this._chainId = 0;
          this._networkId = 0;
          this._rpcUrl = "";
          this._eventManager = new events_default();
          this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;
          this._cryptoLib = opts.cryptoLib;
          this._sessionStorage = opts.sessionStorage || new storage_default(opts.connectorOpts.storageId);
          this._qrcodeModal = opts.connectorOpts.qrcodeModal;
          this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;
          this._signingMethods = [...signingMethods, ...opts.connectorOpts.signingMethods || []];
          if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {
            throw new Error(ERROR_MISSING_REQUIRED);
          }
          if (opts.connectorOpts.bridge) {
            this.bridge = getBridgeUrl(opts.connectorOpts.bridge);
          }
          if (opts.connectorOpts.uri) {
            this.uri = opts.connectorOpts.uri;
          }
          const session = opts.connectorOpts.session || this._getStorageSession();
          if (session) {
            this.session = session;
          }
          if (this.handshakeId) {
            this._subscribeToSessionResponse(this.handshakeId, "Session request rejected");
          }
          this._transport = opts.transport || new esm_default({
            protocol: this.protocol,
            version: this.version,
            url: this.bridge,
            subscriptions: [this.clientId]
          });
          this._subscribeToInternalEvents();
          this._initTransport();
          if (opts.connectorOpts.uri) {
            this._subscribeToSessionRequest();
          }
          if (opts.pushServerOpts) {
            this._registerPushServer(opts.pushServerOpts);
          }
        }
        set bridge(value) {
          if (!value) {
            return;
          }
          this._bridge = value;
        }
        get bridge() {
          return this._bridge;
        }
        set key(value) {
          if (!value) {
            return;
          }
          const key = convertHexToArrayBuffer(value);
          this._key = key;
        }
        get key() {
          if (this._key) {
            const key = convertArrayBufferToHex(this._key, true);
            return key;
          }
          return "";
        }
        set clientId(value) {
          if (!value) {
            return;
          }
          this._clientId = value;
        }
        get clientId() {
          let clientId = this._clientId;
          if (!clientId) {
            clientId = this._clientId = uuid();
          }
          return this._clientId;
        }
        set peerId(value) {
          if (!value) {
            return;
          }
          this._peerId = value;
        }
        get peerId() {
          return this._peerId;
        }
        set clientMeta(value) {
        }
        get clientMeta() {
          let clientMeta = this._clientMeta;
          if (!clientMeta) {
            clientMeta = this._clientMeta = getClientMeta();
          }
          return clientMeta;
        }
        set peerMeta(value) {
          this._peerMeta = value;
        }
        get peerMeta() {
          const peerMeta = this._peerMeta;
          return peerMeta;
        }
        set handshakeTopic(value) {
          if (!value) {
            return;
          }
          this._handshakeTopic = value;
        }
        get handshakeTopic() {
          return this._handshakeTopic;
        }
        set handshakeId(value) {
          if (!value) {
            return;
          }
          this._handshakeId = value;
        }
        get handshakeId() {
          return this._handshakeId;
        }
        get uri() {
          const _uri = this._formatUri();
          return _uri;
        }
        set uri(value) {
          if (!value) {
            return;
          }
          const { handshakeTopic, bridge, key } = this._parseUri(value);
          this.handshakeTopic = handshakeTopic;
          this.bridge = bridge;
          this.key = key;
        }
        set chainId(value) {
          this._chainId = value;
        }
        get chainId() {
          const chainId = this._chainId;
          return chainId;
        }
        set networkId(value) {
          this._networkId = value;
        }
        get networkId() {
          const networkId = this._networkId;
          return networkId;
        }
        set accounts(value) {
          this._accounts = value;
        }
        get accounts() {
          const accounts = this._accounts;
          return accounts;
        }
        set rpcUrl(value) {
          this._rpcUrl = value;
        }
        get rpcUrl() {
          const rpcUrl = this._rpcUrl;
          return rpcUrl;
        }
        set connected(value) {
        }
        get connected() {
          return this._connected;
        }
        set pending(value) {
        }
        get pending() {
          return !!this._handshakeTopic;
        }
        get session() {
          return {
            connected: this.connected,
            accounts: this.accounts,
            chainId: this.chainId,
            bridge: this.bridge,
            key: this.key,
            clientId: this.clientId,
            clientMeta: this.clientMeta,
            peerId: this.peerId,
            peerMeta: this.peerMeta,
            handshakeId: this.handshakeId,
            handshakeTopic: this.handshakeTopic
          };
        }
        set session(value) {
          if (!value) {
            return;
          }
          this._connected = value.connected;
          this.accounts = value.accounts;
          this.chainId = value.chainId;
          this.bridge = value.bridge;
          this.key = value.key;
          this.clientId = value.clientId;
          this.clientMeta = value.clientMeta;
          this.peerId = value.peerId;
          this.peerMeta = value.peerMeta;
          this.handshakeId = value.handshakeId;
          this.handshakeTopic = value.handshakeTopic;
        }
        on(event, callback) {
          const eventEmitter = {
            event,
            callback
          };
          this._eventManager.subscribe(eventEmitter);
        }
        off(event) {
          this._eventManager.unsubscribe(event);
        }
        async createInstantRequest(instantRequest) {
          this._key = await this._generateKey();
          const request = this._formatRequest({
            method: "wc_instantRequest",
            params: [
              {
                peerId: this.clientId,
                peerMeta: this.clientMeta,
                request: this._formatRequest(instantRequest)
              }
            ]
          });
          this.handshakeId = request.id;
          this.handshakeTopic = uuid();
          this._eventManager.trigger({
            event: "display_uri",
            params: [this.uri]
          });
          this.on("modal_closed", () => {
            throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);
          });
          const endInstantRequest = () => {
            this.killSession();
          };
          try {
            const result = await this._sendCallRequest(request);
            if (result) {
              endInstantRequest();
            }
            return result;
          } catch (error) {
            endInstantRequest();
            throw error;
          }
        }
        async connect(opts) {
          if (!this._qrcodeModal) {
            throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);
          }
          if (this.connected) {
            return {
              chainId: this.chainId,
              accounts: this.accounts
            };
          }
          await this.createSession(opts);
          return new Promise(async (resolve, reject) => {
            this.on("modal_closed", () => reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)));
            this.on("connect", (error, payload) => {
              if (error) {
                return reject(error);
              }
              resolve(payload.params[0]);
            });
          });
        }
        async createSession(opts) {
          if (this._connected) {
            throw new Error(ERROR_SESSION_CONNECTED);
          }
          if (this.pending) {
            return;
          }
          this._key = await this._generateKey();
          const request = this._formatRequest({
            method: "wc_sessionRequest",
            params: [
              {
                peerId: this.clientId,
                peerMeta: this.clientMeta,
                chainId: opts && opts.chainId ? opts.chainId : null
              }
            ]
          });
          this.handshakeId = request.id;
          this.handshakeTopic = uuid();
          this._sendSessionRequest(request, "Session update rejected", {
            topic: this.handshakeTopic
          });
          this._eventManager.trigger({
            event: "display_uri",
            params: [this.uri]
          });
        }
        approveSession(sessionStatus) {
          if (this._connected) {
            throw new Error(ERROR_SESSION_CONNECTED);
          }
          this.chainId = sessionStatus.chainId;
          this.accounts = sessionStatus.accounts;
          this.networkId = sessionStatus.networkId || 0;
          this.rpcUrl = sessionStatus.rpcUrl || "";
          const sessionParams = {
            approved: true,
            chainId: this.chainId,
            networkId: this.networkId,
            accounts: this.accounts,
            rpcUrl: this.rpcUrl,
            peerId: this.clientId,
            peerMeta: this.clientMeta
          };
          const response = {
            id: this.handshakeId,
            jsonrpc: "2.0",
            result: sessionParams
          };
          this._sendResponse(response);
          this._connected = true;
          this._setStorageSession();
          this._eventManager.trigger({
            event: "connect",
            params: [
              {
                peerId: this.peerId,
                peerMeta: this.peerMeta,
                chainId: this.chainId,
                accounts: this.accounts
              }
            ]
          });
        }
        rejectSession(sessionError) {
          if (this._connected) {
            throw new Error(ERROR_SESSION_CONNECTED);
          }
          const message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;
          const response = this._formatResponse({
            id: this.handshakeId,
            error: { message }
          });
          this._sendResponse(response);
          this._connected = false;
          this._eventManager.trigger({
            event: "disconnect",
            params: [{ message }]
          });
          this._removeStorageSession();
        }
        updateSession(sessionStatus) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          this.chainId = sessionStatus.chainId;
          this.accounts = sessionStatus.accounts;
          this.networkId = sessionStatus.networkId || 0;
          this.rpcUrl = sessionStatus.rpcUrl || "";
          const sessionParams = {
            approved: true,
            chainId: this.chainId,
            networkId: this.networkId,
            accounts: this.accounts,
            rpcUrl: this.rpcUrl
          };
          const request = this._formatRequest({
            method: "wc_sessionUpdate",
            params: [sessionParams]
          });
          this._sendSessionRequest(request, "Session update rejected");
          this._eventManager.trigger({
            event: "session_update",
            params: [
              {
                chainId: this.chainId,
                accounts: this.accounts
              }
            ]
          });
          this._manageStorageSession();
        }
        async killSession(sessionError) {
          const message = sessionError ? sessionError.message : "Session Disconnected";
          const sessionParams = {
            approved: false,
            chainId: null,
            networkId: null,
            accounts: null
          };
          const request = this._formatRequest({
            method: "wc_sessionUpdate",
            params: [sessionParams]
          });
          await this._sendRequest(request);
          this._handleSessionDisconnect(message);
        }
        async sendTransaction(tx) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          const parsedTx = parseTransactionData(tx);
          const request = this._formatRequest({
            method: "eth_sendTransaction",
            params: [parsedTx]
          });
          const result = await this._sendCallRequest(request);
          return result;
        }
        async signTransaction(tx) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          const parsedTx = parseTransactionData(tx);
          const request = this._formatRequest({
            method: "eth_signTransaction",
            params: [parsedTx]
          });
          const result = await this._sendCallRequest(request);
          return result;
        }
        async signMessage(params) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          const request = this._formatRequest({
            method: "eth_sign",
            params
          });
          const result = await this._sendCallRequest(request);
          return result;
        }
        async signPersonalMessage(params) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          params = parsePersonalSign(params);
          const request = this._formatRequest({
            method: "personal_sign",
            params
          });
          const result = await this._sendCallRequest(request);
          return result;
        }
        async signTypedData(params) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          const request = this._formatRequest({
            method: "eth_signTypedData",
            params
          });
          const result = await this._sendCallRequest(request);
          return result;
        }
        async updateChain(chainParams) {
          if (!this._connected) {
            throw new Error("Session currently disconnected");
          }
          const request = this._formatRequest({
            method: "wallet_updateChain",
            params: [chainParams]
          });
          const result = await this._sendCallRequest(request);
          return result;
        }
        unsafeSend(request, options) {
          this._sendRequest(request, options);
          this._eventManager.trigger({
            event: "call_request_sent",
            params: [{ request, options }]
          });
          return new Promise((resolve, reject) => {
            this._subscribeToResponse(request.id, (error, payload) => {
              if (error) {
                reject(error);
                return;
              }
              if (!payload) {
                throw new Error(ERROR_MISSING_JSON_RPC);
              }
              resolve(payload);
            });
          });
        }
        async sendCustomRequest(request, options) {
          if (!this._connected) {
            throw new Error(ERROR_SESSION_DISCONNECTED);
          }
          switch (request.method) {
            case "eth_accounts":
              return this.accounts;
            case "eth_chainId":
              return convertNumberToHex(this.chainId);
            case "eth_sendTransaction":
            case "eth_signTransaction":
              if (request.params) {
                request.params[0] = parseTransactionData(request.params[0]);
              }
              break;
            case "personal_sign":
              if (request.params) {
                request.params = parsePersonalSign(request.params);
              }
              break;
            default:
              break;
          }
          const formattedRequest = this._formatRequest(request);
          const result = await this._sendCallRequest(formattedRequest, options);
          return result;
        }
        approveRequest(response) {
          if (isJsonRpcResponseSuccess(response)) {
            const formattedResponse = this._formatResponse(response);
            this._sendResponse(formattedResponse);
          } else {
            throw new Error(ERROR_MISSING_RESULT);
          }
        }
        rejectRequest(response) {
          if (isJsonRpcResponseError(response)) {
            const formattedResponse = this._formatResponse(response);
            this._sendResponse(formattedResponse);
          } else {
            throw new Error(ERROR_MISSING_ERROR);
          }
        }
        transportClose() {
          this._transport.close();
        }
        async _sendRequest(request, options) {
          const callRequest = this._formatRequest(request);
          const encryptionPayload = await this._encrypt(callRequest);
          const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== "undefined" ? options.topic : this.peerId;
          const payload = JSON.stringify(encryptionPayload);
          const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== "undefined" ? !options.forcePushNotification : isSilentPayload(callRequest);
          this._transport.send(payload, topic, silent);
        }
        async _sendResponse(response) {
          const encryptionPayload = await this._encrypt(response);
          const topic = this.peerId;
          const payload = JSON.stringify(encryptionPayload);
          const silent = true;
          this._transport.send(payload, topic, silent);
        }
        async _sendSessionRequest(request, errorMsg, options) {
          this._sendRequest(request, options);
          this._subscribeToSessionResponse(request.id, errorMsg);
        }
        _sendCallRequest(request, options) {
          this._sendRequest(request, options);
          this._eventManager.trigger({
            event: "call_request_sent",
            params: [{ request, options }]
          });
          return this._subscribeToCallResponse(request.id);
        }
        _formatRequest(request) {
          if (typeof request.method === "undefined") {
            throw new Error(ERROR_MISSING_METHOD);
          }
          const formattedRequest = {
            id: typeof request.id === "undefined" ? payloadId2() : request.id,
            jsonrpc: "2.0",
            method: request.method,
            params: typeof request.params === "undefined" ? [] : request.params
          };
          return formattedRequest;
        }
        _formatResponse(response) {
          if (typeof response.id === "undefined") {
            throw new Error(ERROR_MISSING_ID);
          }
          const baseResponse = { id: response.id, jsonrpc: "2.0" };
          if (isJsonRpcResponseError(response)) {
            const error = formatRpcError(response.error);
            const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), { error });
            return errorResponse;
          } else if (isJsonRpcResponseSuccess(response)) {
            const successResponse = Object.assign(Object.assign({}, baseResponse), response);
            return successResponse;
          }
          throw new Error(ERROR_INVALID_RESPONSE);
        }
        _handleSessionDisconnect(errorMsg) {
          const message = errorMsg || "Session Disconnected";
          if (!this._connected) {
            if (this._qrcodeModal) {
              this._qrcodeModal.close();
            }
            removeLocal(mobileLinkChoiceKey);
          }
          if (this._connected) {
            this._connected = false;
          }
          if (this._handshakeId) {
            this._handshakeId = 0;
          }
          if (this._handshakeTopic) {
            this._handshakeTopic = "";
          }
          if (this._peerId) {
            this._peerId = "";
          }
          this._eventManager.trigger({
            event: "disconnect",
            params: [{ message }]
          });
          this._removeStorageSession();
          this.transportClose();
        }
        _handleSessionResponse(errorMsg, sessionParams) {
          if (sessionParams) {
            if (sessionParams.approved) {
              if (!this._connected) {
                this._connected = true;
                if (sessionParams.chainId) {
                  this.chainId = sessionParams.chainId;
                }
                if (sessionParams.accounts) {
                  this.accounts = sessionParams.accounts;
                }
                if (sessionParams.peerId && !this.peerId) {
                  this.peerId = sessionParams.peerId;
                }
                if (sessionParams.peerMeta && !this.peerMeta) {
                  this.peerMeta = sessionParams.peerMeta;
                }
                this._eventManager.trigger({
                  event: "connect",
                  params: [
                    {
                      peerId: this.peerId,
                      peerMeta: this.peerMeta,
                      chainId: this.chainId,
                      accounts: this.accounts
                    }
                  ]
                });
              } else {
                if (sessionParams.chainId) {
                  this.chainId = sessionParams.chainId;
                }
                if (sessionParams.accounts) {
                  this.accounts = sessionParams.accounts;
                }
                this._eventManager.trigger({
                  event: "session_update",
                  params: [
                    {
                      chainId: this.chainId,
                      accounts: this.accounts
                    }
                  ]
                });
              }
              this._manageStorageSession();
            } else {
              this._handleSessionDisconnect(errorMsg);
            }
          } else {
            this._handleSessionDisconnect(errorMsg);
          }
        }
        async _handleIncomingMessages(socketMessage) {
          const activeTopics = [this.clientId, this.handshakeTopic];
          if (!activeTopics.includes(socketMessage.topic)) {
            return;
          }
          let encryptionPayload;
          try {
            encryptionPayload = JSON.parse(socketMessage.payload);
          } catch (error) {
            return;
          }
          const payload = await this._decrypt(encryptionPayload);
          if (payload) {
            this._eventManager.trigger(payload);
          }
        }
        _subscribeToSessionRequest() {
          this._transport.subscribe(this.handshakeTopic);
        }
        _subscribeToResponse(id, callback) {
          this.on(`response:${id}`, callback);
        }
        _subscribeToSessionResponse(id, errorMsg) {
          this._subscribeToResponse(id, (error, payload) => {
            if (error) {
              this._handleSessionResponse(error.message);
              return;
            }
            if (isJsonRpcResponseSuccess(payload)) {
              this._handleSessionResponse(errorMsg, payload.result);
            } else if (payload.error && payload.error.message) {
              this._handleSessionResponse(payload.error.message);
            } else {
              this._handleSessionResponse(errorMsg);
            }
          });
        }
        _subscribeToCallResponse(id) {
          return new Promise((resolve, reject) => {
            this._subscribeToResponse(id, (error, payload) => {
              if (error) {
                reject(error);
                return;
              }
              if (isJsonRpcResponseSuccess(payload)) {
                resolve(payload.result);
              } else if (payload.error && payload.error.message) {
                reject(payload.error);
              } else {
                reject(new Error(ERROR_INVALID_RESPONSE));
              }
            });
          });
        }
        _subscribeToInternalEvents() {
          this.on("display_uri", () => {
            if (this._qrcodeModal) {
              this._qrcodeModal.open(this.uri, () => {
                this._eventManager.trigger({
                  event: "modal_closed",
                  params: []
                });
              }, this._qrcodeModalOptions);
            }
          });
          this.on("connect", () => {
            if (this._qrcodeModal) {
              this._qrcodeModal.close();
            }
          });
          this.on("call_request_sent", (error, payload) => {
            const { request } = payload.params[0];
            if (isMobile() && this._signingMethods.includes(request.method)) {
              const mobileLinkUrl = getLocal(mobileLinkChoiceKey);
              if (mobileLinkUrl) {
                window.location.href = mobileLinkUrl.href;
              }
            }
          });
          this.on("wc_sessionRequest", (error, payload) => {
            if (error) {
              this._eventManager.trigger({
                event: "error",
                params: [
                  {
                    code: "SESSION_REQUEST_ERROR",
                    message: error.toString()
                  }
                ]
              });
            }
            this.handshakeId = payload.id;
            this.peerId = payload.params[0].peerId;
            this.peerMeta = payload.params[0].peerMeta;
            const internalPayload = Object.assign(Object.assign({}, payload), { method: "session_request" });
            this._eventManager.trigger(internalPayload);
          });
          this.on("wc_sessionUpdate", (error, payload) => {
            if (error) {
              this._handleSessionResponse(error.message);
            }
            this._handleSessionResponse("Session disconnected", payload.params[0]);
          });
        }
        _initTransport() {
          this._transport.on("message", (socketMessage) => this._handleIncomingMessages(socketMessage));
          this._transport.on("open", () => this._eventManager.trigger({ event: "transport_open", params: [] }));
          this._transport.on("close", () => this._eventManager.trigger({ event: "transport_close", params: [] }));
          this._transport.on("error", () => this._eventManager.trigger({
            event: "transport_error",
            params: ["Websocket connection failed"]
          }));
          this._transport.open();
        }
        _formatUri() {
          const protocol = this.protocol;
          const handshakeTopic = this.handshakeTopic;
          const version = this.version;
          const bridge = encodeURIComponent(this.bridge);
          const key = this.key;
          const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;
          return uri;
        }
        _parseUri(uri) {
          const result = parseWalletConnectUri(uri);
          if (result.protocol === this.protocol) {
            if (!result.handshakeTopic) {
              throw Error("Invalid or missing handshakeTopic parameter value");
            }
            const handshakeTopic = result.handshakeTopic;
            if (!result.bridge) {
              throw Error("Invalid or missing bridge url parameter value");
            }
            const bridge = decodeURIComponent(result.bridge);
            if (!result.key) {
              throw Error("Invalid or missing key parameter value");
            }
            const key = result.key;
            return { handshakeTopic, bridge, key };
          } else {
            throw new Error(ERROR_INVALID_URI);
          }
        }
        async _generateKey() {
          if (this._cryptoLib) {
            const result = await this._cryptoLib.generateKey();
            return result;
          }
          return null;
        }
        async _encrypt(data) {
          const key = this._key;
          if (this._cryptoLib && key) {
            const result = await this._cryptoLib.encrypt(data, key);
            return result;
          }
          return null;
        }
        async _decrypt(payload) {
          const key = this._key;
          if (this._cryptoLib && key) {
            const result = await this._cryptoLib.decrypt(payload, key);
            return result;
          }
          return null;
        }
        _getStorageSession() {
          let result = null;
          if (this._sessionStorage) {
            result = this._sessionStorage.getSession();
          }
          return result;
        }
        _setStorageSession() {
          if (this._sessionStorage) {
            this._sessionStorage.setSession(this.session);
          }
        }
        _removeStorageSession() {
          if (this._sessionStorage) {
            this._sessionStorage.removeSession();
          }
        }
        _manageStorageSession() {
          if (this._connected) {
            this._setStorageSession();
          } else {
            this._removeStorageSession();
          }
        }
        _registerPushServer(pushServerOpts) {
          if (!pushServerOpts.url || typeof pushServerOpts.url !== "string") {
            throw Error("Invalid or missing pushServerOpts.url parameter value");
          }
          if (!pushServerOpts.type || typeof pushServerOpts.type !== "string") {
            throw Error("Invalid or missing pushServerOpts.type parameter value");
          }
          if (!pushServerOpts.token || typeof pushServerOpts.token !== "string") {
            throw Error("Invalid or missing pushServerOpts.token parameter value");
          }
          const pushSubscription = {
            bridge: this.bridge,
            topic: this.clientId,
            type: pushServerOpts.type,
            token: pushServerOpts.token,
            peerName: "",
            language: pushServerOpts.language || ""
          };
          this.on("connect", async (error, payload) => {
            if (error) {
              throw error;
            }
            if (pushServerOpts.peerMeta) {
              const peerName = payload.params[0].peerMeta.name;
              pushSubscription.peerName = peerName;
            }
            try {
              const response = await fetch(`${pushServerOpts.url}/new`, {
                method: "POST",
                headers: {
                  Accept: "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify(pushSubscription)
              });
              const json = await response.json();
              if (!json.success) {
                throw Error("Failed to register in Push Server");
              }
            } catch (error2) {
              throw Error("Failed to register in Push Server");
            }
          });
        }
      };
      esm_default2 = Connector;
    }
  });

  // node_modules/@walletconnect/randombytes/dist/esm/browser/index.js
  function randomBytes(length) {
    const browserCrypto = env.getBrowerCrypto();
    return browserCrypto.getRandomValues(new Uint8Array(length));
  }
  var env;
  var init_browser2 = __esm({
    "node_modules/@walletconnect/randombytes/dist/esm/browser/index.js"() {
      env = __toESM(require_cjs3());
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/constants/length.js
  var LENGTH_0, LENGTH_1, LENGTH_16, LENGTH_32, LENGTH_64, LENGTH_128, LENGTH_256, LENGTH_512, LENGTH_1024;
  var init_length = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/constants/length.js"() {
      LENGTH_0 = 0;
      LENGTH_1 = 1;
      LENGTH_16 = 16;
      LENGTH_32 = 32;
      LENGTH_64 = 64;
      LENGTH_128 = 128;
      LENGTH_256 = 256;
      LENGTH_512 = 512;
      LENGTH_1024 = 1024;
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/constants/default.js
  var AES_LENGTH, HMAC_LENGTH, AES_BROWSER_ALGO, HMAC_BROWSER_ALGO, HMAC_BROWSER, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, AES_NODE_ALGO, HMAC_NODE_ALGO, SHA256_NODE_ALGO, SHA512_NODE_ALGO, RIPEMD160_NODE_ALGO, PREFIX_LENGTH, KEY_LENGTH, IV_LENGTH, MAC_LENGTH;
  var init_default = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/constants/default.js"() {
      init_length();
      AES_LENGTH = LENGTH_256;
      HMAC_LENGTH = LENGTH_256;
      AES_BROWSER_ALGO = "AES-CBC";
      HMAC_BROWSER_ALGO = `SHA-${AES_LENGTH}`;
      HMAC_BROWSER = "HMAC";
      SHA256_BROWSER_ALGO = "SHA-256";
      SHA512_BROWSER_ALGO = "SHA-512";
      AES_NODE_ALGO = `aes-${AES_LENGTH}-cbc`;
      HMAC_NODE_ALGO = `sha${HMAC_LENGTH}`;
      SHA256_NODE_ALGO = "sha256";
      SHA512_NODE_ALGO = "sha512";
      RIPEMD160_NODE_ALGO = "ripemd160";
      PREFIX_LENGTH = LENGTH_1;
      KEY_LENGTH = LENGTH_32;
      IV_LENGTH = LENGTH_16;
      MAC_LENGTH = LENGTH_32;
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/constants/encoding.js
  var HEX_ENC, UTF8_ENC;
  var init_encoding2 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/constants/encoding.js"() {
      HEX_ENC = "hex";
      UTF8_ENC = "utf8";
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/constants/error.js
  var ERROR_BAD_MAC;
  var init_error2 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/constants/error.js"() {
      ERROR_BAD_MAC = "Bad MAC";
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/constants/operations.js
  var ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP;
  var init_operations = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/constants/operations.js"() {
      ENCRYPT_OP = "encrypt";
      DECRYPT_OP = "decrypt";
      SIGN_OP = "sign";
      VERIFY_OP = "verify";
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/constants/index.js
  var init_constants3 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/constants/index.js"() {
      init_default();
      init_encoding2();
      init_error2();
      init_length();
      init_operations();
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/lib/browser.js
  function getAlgo(type) {
    return type === AES_BROWSER_ALGO ? { length: AES_LENGTH, name: AES_BROWSER_ALGO } : {
      hash: { name: HMAC_BROWSER_ALGO },
      name: HMAC_BROWSER
    };
  }
  function getOps(type) {
    return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];
  }
  async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {
    return env2.getSubtleCrypto().importKey("raw", buffer, getAlgo(type), true, getOps(type));
  }
  async function browserAesEncrypt(iv, key, data) {
    const subtle = env2.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);
    const result = await subtle.encrypt({
      iv,
      name: AES_BROWSER_ALGO
    }, cryptoKey, data);
    return new Uint8Array(result);
  }
  async function browserAesDecrypt(iv, key, data) {
    const subtle = env2.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);
    const result = await subtle.decrypt({
      iv,
      name: AES_BROWSER_ALGO
    }, cryptoKey, data);
    return new Uint8Array(result);
  }
  async function browserHmacSha256Sign(key, data) {
    const subtle = env2.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);
    const signature = await subtle.sign({
      length: HMAC_LENGTH,
      name: HMAC_BROWSER
    }, cryptoKey, data);
    return new Uint8Array(signature);
  }
  async function browserHmacSha512Sign(key, data) {
    const subtle = env2.getSubtleCrypto();
    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);
    const signature = await subtle.sign({
      length: LENGTH_512,
      name: HMAC_BROWSER
    }, cryptoKey, data);
    return new Uint8Array(signature);
  }
  async function browserSha256(data) {
    const subtle = env2.getSubtleCrypto();
    const result = await subtle.digest({
      name: SHA256_BROWSER_ALGO
    }, data);
    return new Uint8Array(result);
  }
  async function browserSha512(data) {
    const subtle = env2.getSubtleCrypto();
    const result = await subtle.digest({
      name: SHA512_BROWSER_ALGO
    }, data);
    return new Uint8Array(result);
  }
  var env2;
  var init_browser3 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/lib/browser.js"() {
      env2 = __toESM(require_cjs3());
      init_constants3();
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/browser/aes.js
  function aesCbcEncrypt(iv, key, data) {
    return browserAesEncrypt(iv, key, data);
  }
  function aesCbcDecrypt(iv, key, data) {
    return browserAesDecrypt(iv, key, data);
  }
  var init_aes = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/browser/aes.js"() {
      init_browser3();
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/helpers/env.js
  var env_exports2 = {};
  var init_env2 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/helpers/env.js"() {
      __reExport(env_exports2, __toESM(require_cjs3()));
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/helpers/pkcs7.js
  var PADDING, pkcs7;
  var init_pkcs7 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/helpers/pkcs7.js"() {
      PADDING = [
        [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15],
        [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
        [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13],
        [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
        [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11],
        [10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
        [9, 9, 9, 9, 9, 9, 9, 9, 9],
        [8, 8, 8, 8, 8, 8, 8, 8],
        [7, 7, 7, 7, 7, 7, 7],
        [6, 6, 6, 6, 6, 6],
        [5, 5, 5, 5, 5],
        [4, 4, 4, 4],
        [3, 3, 3],
        [2, 2],
        [1]
      ];
      pkcs7 = {
        pad(plaintext) {
          const padding = PADDING[plaintext.byteLength % 16 || 0];
          const result = new Uint8Array(plaintext.byteLength + padding.length);
          result.set(plaintext);
          result.set(padding, plaintext.byteLength);
          return result;
        },
        unpad(padded) {
          return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
        }
      };
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/helpers/types.js
  var init_types2 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/helpers/types.js"() {
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/helpers/validators.js
  function assert(condition, message) {
    if (!condition) {
      throw new Error(message || "Assertion failed");
    }
  }
  function isConstantTime(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }
    let res = 0;
    for (let i = 0; i < arr1.length; i++) {
      res |= arr1[i] ^ arr2[i];
    }
    return res === 0;
  }
  var init_validators3 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/helpers/validators.js"() {
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/helpers/index.js
  var helpers_exports = {};
  __export(helpers_exports, {
    assert: () => assert,
    isConstantTime: () => isConstantTime,
    pkcs7: () => pkcs7
  });
  var init_helpers = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/helpers/index.js"() {
      init_env2();
      __reExport(helpers_exports, env_exports2);
      init_pkcs7();
      init_types2();
      init_validators3();
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/browser/hmac.js
  async function hmacSha256Sign(key, msg) {
    const result = await browserHmacSha256Sign(key, msg);
    return result;
  }
  async function hmacSha256Verify(key, msg, sig) {
    const expectedSig = await browserHmacSha256Sign(key, msg);
    const result = isConstantTime(expectedSig, sig);
    return result;
  }
  async function hmacSha512Sign(key, msg) {
    const result = await browserHmacSha512Sign(key, msg);
    return result;
  }
  async function hmacSha512Verify(key, msg, sig) {
    const expectedSig = await browserHmacSha512Sign(key, msg);
    const result = isConstantTime(expectedSig, sig);
    return result;
  }
  var init_hmac = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/browser/hmac.js"() {
      init_browser3();
      init_helpers();
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/browser/sha2.js
  async function sha256(msg) {
    const result = await browserSha256(msg);
    return result;
  }
  async function sha512(msg) {
    const result = await browserSha512(msg);
    return result;
  }
  async function ripemd160(msg) {
    throw new Error("Not supported for Browser async methods, use sync instead!");
  }
  var init_sha2 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/browser/sha2.js"() {
      init_browser3();
    }
  });

  // node_modules/@walletconnect/crypto/dist/esm/browser/index.js
  var browser_exports = {};
  __export(browser_exports, {
    AES_BROWSER_ALGO: () => AES_BROWSER_ALGO,
    AES_LENGTH: () => AES_LENGTH,
    AES_NODE_ALGO: () => AES_NODE_ALGO,
    DECRYPT_OP: () => DECRYPT_OP,
    ENCRYPT_OP: () => ENCRYPT_OP,
    ERROR_BAD_MAC: () => ERROR_BAD_MAC,
    HEX_ENC: () => HEX_ENC,
    HMAC_BROWSER: () => HMAC_BROWSER,
    HMAC_BROWSER_ALGO: () => HMAC_BROWSER_ALGO,
    HMAC_LENGTH: () => HMAC_LENGTH,
    HMAC_NODE_ALGO: () => HMAC_NODE_ALGO,
    IV_LENGTH: () => IV_LENGTH,
    KEY_LENGTH: () => KEY_LENGTH,
    LENGTH_0: () => LENGTH_0,
    LENGTH_1: () => LENGTH_1,
    LENGTH_1024: () => LENGTH_1024,
    LENGTH_128: () => LENGTH_128,
    LENGTH_16: () => LENGTH_16,
    LENGTH_256: () => LENGTH_256,
    LENGTH_32: () => LENGTH_32,
    LENGTH_512: () => LENGTH_512,
    LENGTH_64: () => LENGTH_64,
    MAC_LENGTH: () => MAC_LENGTH,
    PREFIX_LENGTH: () => PREFIX_LENGTH,
    RIPEMD160_NODE_ALGO: () => RIPEMD160_NODE_ALGO,
    SHA256_BROWSER_ALGO: () => SHA256_BROWSER_ALGO,
    SHA256_NODE_ALGO: () => SHA256_NODE_ALGO,
    SHA512_BROWSER_ALGO: () => SHA512_BROWSER_ALGO,
    SHA512_NODE_ALGO: () => SHA512_NODE_ALGO,
    SIGN_OP: () => SIGN_OP,
    UTF8_ENC: () => UTF8_ENC,
    VERIFY_OP: () => VERIFY_OP,
    aesCbcDecrypt: () => aesCbcDecrypt,
    aesCbcEncrypt: () => aesCbcEncrypt,
    assert: () => assert,
    hmacSha256Sign: () => hmacSha256Sign,
    hmacSha256Verify: () => hmacSha256Verify,
    hmacSha512Sign: () => hmacSha512Sign,
    hmacSha512Verify: () => hmacSha512Verify,
    isConstantTime: () => isConstantTime,
    pkcs7: () => pkcs7,
    randomBytes: () => randomBytes,
    ripemd160: () => ripemd160,
    sha256: () => sha256,
    sha512: () => sha512
  });
  var init_browser4 = __esm({
    "node_modules/@walletconnect/crypto/dist/esm/browser/index.js"() {
      init_browser2();
      init_aes();
      init_hmac();
      init_sha2();
      init_helpers();
      __reExport(browser_exports, helpers_exports);
      init_constants3();
    }
  });

  // node_modules/@walletconnect/iso-crypto/dist/esm/index.js
  var esm_exports4 = {};
  __export(esm_exports4, {
    decrypt: () => decrypt,
    encrypt: () => encrypt,
    generateKey: () => generateKey,
    verifyHmac: () => verifyHmac
  });
  async function generateKey(length) {
    const _length = (length || 256) / 8;
    const bytes = randomBytes(_length);
    const result = convertBufferToArrayBuffer(arrayToBuffer(bytes));
    return result;
  }
  async function verifyHmac(payload, key) {
    const cipherText = hexToArray(payload.data);
    const iv = hexToArray(payload.iv);
    const hmac = hexToArray(payload.hmac);
    const hmacHex = arrayToHex(hmac, false);
    const unsigned = concatArrays(cipherText, iv);
    const chmac = await hmacSha256Sign(key, unsigned);
    const chmacHex = arrayToHex(chmac, false);
    if (removeHexPrefix(hmacHex) === removeHexPrefix(chmacHex)) {
      return true;
    }
    return false;
  }
  async function encrypt(data, key, providedIv) {
    const _key = bufferToArray(convertArrayBufferToBuffer(key));
    const ivArrayBuffer = providedIv || await generateKey(128);
    const iv = bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));
    const ivHex = arrayToHex(iv, false);
    const contentString = JSON.stringify(data);
    const content = utf8ToArray(contentString);
    const cipherText = await aesCbcEncrypt(iv, _key, content);
    const cipherTextHex = arrayToHex(cipherText, false);
    const unsigned = concatArrays(cipherText, iv);
    const hmac = await hmacSha256Sign(_key, unsigned);
    const hmacHex = arrayToHex(hmac, false);
    return {
      data: cipherTextHex,
      hmac: hmacHex,
      iv: ivHex
    };
  }
  async function decrypt(payload, key) {
    const _key = bufferToArray(convertArrayBufferToBuffer(key));
    if (!_key) {
      throw new Error("Missing key: required for decryption");
    }
    const verified = await verifyHmac(payload, _key);
    if (!verified) {
      return null;
    }
    const cipherText = hexToArray(payload.data);
    const iv = hexToArray(payload.iv);
    const buffer = await aesCbcDecrypt(iv, _key, cipherText);
    const utf8 = arrayToUtf8(buffer);
    let data;
    try {
      data = JSON.parse(utf8);
    } catch (error) {
      return null;
    }
    return data;
  }
  var init_esm9 = __esm({
    "node_modules/@walletconnect/iso-crypto/dist/esm/index.js"() {
      init_browser4();
      init_esm3();
      init_esm6();
    }
  });

  // node_modules/@walletconnect/client/dist/esm/index.js
  var esm_exports5 = {};
  __export(esm_exports5, {
    default: () => esm_default3
  });
  var WalletConnect, esm_default3;
  var init_esm10 = __esm({
    "node_modules/@walletconnect/client/dist/esm/index.js"() {
      init_esm8();
      init_esm9();
      WalletConnect = class extends esm_default2 {
        constructor(connectorOpts, pushServerOpts) {
          super({
            cryptoLib: esm_exports4,
            connectorOpts,
            pushServerOpts
          });
        }
      };
      esm_default3 = WalletConnect;
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer2 = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer2(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // (disabled):crypto
  var require_crypto2 = __commonJS({
    "(disabled):crypto"() {
    }
  });

  // node_modules/tweetnacl/nacl-fast.js
  var require_nacl_fast = __commonJS({
    "node_modules/tweetnacl/nacl-fast.js"(exports, module) {
      (function(nacl) {
        "use strict";
        var gf = function(init) {
          var i, r = new Float64Array(16);
          if (init)
            for (i = 0; i < init.length; i++)
              r[i] = init[i];
          return r;
        };
        var randombytes = function() {
          throw new Error("no PRNG");
        };
        var _0 = new Uint8Array(16);
        var _9 = new Uint8Array(32);
        _9[0] = 9;
        var gf0 = gf(), gf1 = gf([1]), _121665 = gf([56129, 1]), D = gf([30883, 4953, 19914, 30187, 55467, 16705, 2637, 112, 59544, 30585, 16505, 36039, 65139, 11119, 27886, 20995]), D2 = gf([61785, 9906, 39828, 60374, 45398, 33411, 5274, 224, 53552, 61171, 33010, 6542, 64743, 22239, 55772, 9222]), X = gf([54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553]), Y = gf([26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214]), I = gf([41136, 18958, 6951, 50414, 58488, 44335, 6150, 12099, 55207, 15867, 153, 11085, 57099, 20417, 9344, 11139]);
        function ts64(x, i, h, l) {
          x[i] = h >> 24 & 255;
          x[i + 1] = h >> 16 & 255;
          x[i + 2] = h >> 8 & 255;
          x[i + 3] = h & 255;
          x[i + 4] = l >> 24 & 255;
          x[i + 5] = l >> 16 & 255;
          x[i + 6] = l >> 8 & 255;
          x[i + 7] = l & 255;
        }
        function vn(x, xi, y, yi, n) {
          var i, d = 0;
          for (i = 0; i < n; i++)
            d |= x[xi + i] ^ y[yi + i];
          return (1 & d - 1 >>> 8) - 1;
        }
        function crypto_verify_16(x, xi, y, yi) {
          return vn(x, xi, y, yi, 16);
        }
        function crypto_verify_32(x, xi, y, yi) {
          return vn(x, xi, y, yi, 32);
        }
        function core_salsa20(o, p, k, c) {
          var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
          var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
          for (var i = 0; i < 20; i += 2) {
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 32 - 7;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 32 - 13;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 32 - 7;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 32 - 13;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 32 - 7;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 32 - 13;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 32 - 7;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 32 - 13;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 32 - 7;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 32 - 13;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 32 - 7;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 32 - 13;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 32 - 7;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 32 - 13;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 32 - 7;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 32 - 13;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
          }
          x0 = x0 + j0 | 0;
          x1 = x1 + j1 | 0;
          x2 = x2 + j2 | 0;
          x3 = x3 + j3 | 0;
          x4 = x4 + j4 | 0;
          x5 = x5 + j5 | 0;
          x6 = x6 + j6 | 0;
          x7 = x7 + j7 | 0;
          x8 = x8 + j8 | 0;
          x9 = x9 + j9 | 0;
          x10 = x10 + j10 | 0;
          x11 = x11 + j11 | 0;
          x12 = x12 + j12 | 0;
          x13 = x13 + j13 | 0;
          x14 = x14 + j14 | 0;
          x15 = x15 + j15 | 0;
          o[0] = x0 >>> 0 & 255;
          o[1] = x0 >>> 8 & 255;
          o[2] = x0 >>> 16 & 255;
          o[3] = x0 >>> 24 & 255;
          o[4] = x1 >>> 0 & 255;
          o[5] = x1 >>> 8 & 255;
          o[6] = x1 >>> 16 & 255;
          o[7] = x1 >>> 24 & 255;
          o[8] = x2 >>> 0 & 255;
          o[9] = x2 >>> 8 & 255;
          o[10] = x2 >>> 16 & 255;
          o[11] = x2 >>> 24 & 255;
          o[12] = x3 >>> 0 & 255;
          o[13] = x3 >>> 8 & 255;
          o[14] = x3 >>> 16 & 255;
          o[15] = x3 >>> 24 & 255;
          o[16] = x4 >>> 0 & 255;
          o[17] = x4 >>> 8 & 255;
          o[18] = x4 >>> 16 & 255;
          o[19] = x4 >>> 24 & 255;
          o[20] = x5 >>> 0 & 255;
          o[21] = x5 >>> 8 & 255;
          o[22] = x5 >>> 16 & 255;
          o[23] = x5 >>> 24 & 255;
          o[24] = x6 >>> 0 & 255;
          o[25] = x6 >>> 8 & 255;
          o[26] = x6 >>> 16 & 255;
          o[27] = x6 >>> 24 & 255;
          o[28] = x7 >>> 0 & 255;
          o[29] = x7 >>> 8 & 255;
          o[30] = x7 >>> 16 & 255;
          o[31] = x7 >>> 24 & 255;
          o[32] = x8 >>> 0 & 255;
          o[33] = x8 >>> 8 & 255;
          o[34] = x8 >>> 16 & 255;
          o[35] = x8 >>> 24 & 255;
          o[36] = x9 >>> 0 & 255;
          o[37] = x9 >>> 8 & 255;
          o[38] = x9 >>> 16 & 255;
          o[39] = x9 >>> 24 & 255;
          o[40] = x10 >>> 0 & 255;
          o[41] = x10 >>> 8 & 255;
          o[42] = x10 >>> 16 & 255;
          o[43] = x10 >>> 24 & 255;
          o[44] = x11 >>> 0 & 255;
          o[45] = x11 >>> 8 & 255;
          o[46] = x11 >>> 16 & 255;
          o[47] = x11 >>> 24 & 255;
          o[48] = x12 >>> 0 & 255;
          o[49] = x12 >>> 8 & 255;
          o[50] = x12 >>> 16 & 255;
          o[51] = x12 >>> 24 & 255;
          o[52] = x13 >>> 0 & 255;
          o[53] = x13 >>> 8 & 255;
          o[54] = x13 >>> 16 & 255;
          o[55] = x13 >>> 24 & 255;
          o[56] = x14 >>> 0 & 255;
          o[57] = x14 >>> 8 & 255;
          o[58] = x14 >>> 16 & 255;
          o[59] = x14 >>> 24 & 255;
          o[60] = x15 >>> 0 & 255;
          o[61] = x15 >>> 8 & 255;
          o[62] = x15 >>> 16 & 255;
          o[63] = x15 >>> 24 & 255;
        }
        function core_hsalsa20(o, p, k, c) {
          var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
          var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
          for (var i = 0; i < 20; i += 2) {
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 32 - 7;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 32 - 13;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 32 - 7;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 32 - 13;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 32 - 7;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 32 - 13;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 32 - 7;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 32 - 13;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 32 - 7;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 32 - 9;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 32 - 13;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 32 - 18;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 32 - 7;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 32 - 9;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 32 - 13;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 32 - 18;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 32 - 7;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 32 - 9;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 32 - 13;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 32 - 18;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 32 - 7;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 32 - 9;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 32 - 13;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 32 - 18;
          }
          o[0] = x0 >>> 0 & 255;
          o[1] = x0 >>> 8 & 255;
          o[2] = x0 >>> 16 & 255;
          o[3] = x0 >>> 24 & 255;
          o[4] = x5 >>> 0 & 255;
          o[5] = x5 >>> 8 & 255;
          o[6] = x5 >>> 16 & 255;
          o[7] = x5 >>> 24 & 255;
          o[8] = x10 >>> 0 & 255;
          o[9] = x10 >>> 8 & 255;
          o[10] = x10 >>> 16 & 255;
          o[11] = x10 >>> 24 & 255;
          o[12] = x15 >>> 0 & 255;
          o[13] = x15 >>> 8 & 255;
          o[14] = x15 >>> 16 & 255;
          o[15] = x15 >>> 24 & 255;
          o[16] = x6 >>> 0 & 255;
          o[17] = x6 >>> 8 & 255;
          o[18] = x6 >>> 16 & 255;
          o[19] = x6 >>> 24 & 255;
          o[20] = x7 >>> 0 & 255;
          o[21] = x7 >>> 8 & 255;
          o[22] = x7 >>> 16 & 255;
          o[23] = x7 >>> 24 & 255;
          o[24] = x8 >>> 0 & 255;
          o[25] = x8 >>> 8 & 255;
          o[26] = x8 >>> 16 & 255;
          o[27] = x8 >>> 24 & 255;
          o[28] = x9 >>> 0 & 255;
          o[29] = x9 >>> 8 & 255;
          o[30] = x9 >>> 16 & 255;
          o[31] = x9 >>> 24 & 255;
        }
        function crypto_core_salsa20(out, inp, k, c) {
          core_salsa20(out, inp, k, c);
        }
        function crypto_core_hsalsa20(out, inp, k, c) {
          core_hsalsa20(out, inp, k, c);
        }
        var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
        function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
          var z = new Uint8Array(16), x = new Uint8Array(64);
          var u, i;
          for (i = 0; i < 16; i++)
            z[i] = 0;
          for (i = 0; i < 8; i++)
            z[i] = n[i];
          while (b >= 64) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < 64; i++)
              c[cpos + i] = m[mpos + i] ^ x[i];
            u = 1;
            for (i = 8; i < 16; i++) {
              u = u + (z[i] & 255) | 0;
              z[i] = u & 255;
              u >>>= 8;
            }
            b -= 64;
            cpos += 64;
            mpos += 64;
          }
          if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < b; i++)
              c[cpos + i] = m[mpos + i] ^ x[i];
          }
          return 0;
        }
        function crypto_stream_salsa20(c, cpos, b, n, k) {
          var z = new Uint8Array(16), x = new Uint8Array(64);
          var u, i;
          for (i = 0; i < 16; i++)
            z[i] = 0;
          for (i = 0; i < 8; i++)
            z[i] = n[i];
          while (b >= 64) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < 64; i++)
              c[cpos + i] = x[i];
            u = 1;
            for (i = 8; i < 16; i++) {
              u = u + (z[i] & 255) | 0;
              z[i] = u & 255;
              u >>>= 8;
            }
            b -= 64;
            cpos += 64;
          }
          if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for (i = 0; i < b; i++)
              c[cpos + i] = x[i];
          }
          return 0;
        }
        function crypto_stream(c, cpos, d, n, k) {
          var s = new Uint8Array(32);
          crypto_core_hsalsa20(s, n, k, sigma);
          var sn = new Uint8Array(8);
          for (var i = 0; i < 8; i++)
            sn[i] = n[i + 16];
          return crypto_stream_salsa20(c, cpos, d, sn, s);
        }
        function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
          var s = new Uint8Array(32);
          crypto_core_hsalsa20(s, n, k, sigma);
          var sn = new Uint8Array(8);
          for (var i = 0; i < 8; i++)
            sn[i] = n[i + 16];
          return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
        }
        var poly1305 = function(key) {
          this.buffer = new Uint8Array(16);
          this.r = new Uint16Array(10);
          this.h = new Uint16Array(10);
          this.pad = new Uint16Array(8);
          this.leftover = 0;
          this.fin = 0;
          var t0, t1, t2, t3, t4, t5, t6, t7;
          t0 = key[0] & 255 | (key[1] & 255) << 8;
          this.r[0] = t0 & 8191;
          t1 = key[2] & 255 | (key[3] & 255) << 8;
          this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
          t2 = key[4] & 255 | (key[5] & 255) << 8;
          this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
          t3 = key[6] & 255 | (key[7] & 255) << 8;
          this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
          t4 = key[8] & 255 | (key[9] & 255) << 8;
          this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
          this.r[5] = t4 >>> 1 & 8190;
          t5 = key[10] & 255 | (key[11] & 255) << 8;
          this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
          t6 = key[12] & 255 | (key[13] & 255) << 8;
          this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
          t7 = key[14] & 255 | (key[15] & 255) << 8;
          this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
          this.r[9] = t7 >>> 5 & 127;
          this.pad[0] = key[16] & 255 | (key[17] & 255) << 8;
          this.pad[1] = key[18] & 255 | (key[19] & 255) << 8;
          this.pad[2] = key[20] & 255 | (key[21] & 255) << 8;
          this.pad[3] = key[22] & 255 | (key[23] & 255) << 8;
          this.pad[4] = key[24] & 255 | (key[25] & 255) << 8;
          this.pad[5] = key[26] & 255 | (key[27] & 255) << 8;
          this.pad[6] = key[28] & 255 | (key[29] & 255) << 8;
          this.pad[7] = key[30] & 255 | (key[31] & 255) << 8;
        };
        poly1305.prototype.blocks = function(m, mpos, bytes) {
          var hibit = this.fin ? 0 : 1 << 11;
          var t0, t1, t2, t3, t4, t5, t6, t7, c;
          var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
          var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
          var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
          while (bytes >= 16) {
            t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
            h0 += t0 & 8191;
            t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 8191;
            t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
            h2 += (t1 >>> 10 | t2 << 6) & 8191;
            t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
            h3 += (t2 >>> 7 | t3 << 9) & 8191;
            t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
            h4 += (t3 >>> 4 | t4 << 12) & 8191;
            h5 += t4 >>> 1 & 8191;
            t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 8191;
            t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 8191;
            t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 8191;
            h9 += t7 >>> 5 | hibit;
            c = 0;
            d0 = c;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c = d0 >>> 13;
            d0 &= 8191;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c += d0 >>> 13;
            d0 &= 8191;
            d1 = c;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c = d1 >>> 13;
            d1 &= 8191;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c += d1 >>> 13;
            d1 &= 8191;
            d2 = c;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c = d2 >>> 13;
            d2 &= 8191;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c += d2 >>> 13;
            d2 &= 8191;
            d3 = c;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c = d3 >>> 13;
            d3 &= 8191;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c += d3 >>> 13;
            d3 &= 8191;
            d4 = c;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c = d4 >>> 13;
            d4 &= 8191;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c += d4 >>> 13;
            d4 &= 8191;
            d5 = c;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c = d5 >>> 13;
            d5 &= 8191;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c += d5 >>> 13;
            d5 &= 8191;
            d6 = c;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c = d6 >>> 13;
            d6 &= 8191;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c += d6 >>> 13;
            d6 &= 8191;
            d7 = c;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c = d7 >>> 13;
            d7 &= 8191;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c += d7 >>> 13;
            d7 &= 8191;
            d8 = c;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c = d8 >>> 13;
            d8 &= 8191;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c += d8 >>> 13;
            d8 &= 8191;
            d9 = c;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c = d9 >>> 13;
            d9 &= 8191;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c += d9 >>> 13;
            d9 &= 8191;
            c = (c << 2) + c | 0;
            c = c + d0 | 0;
            d0 = c & 8191;
            c = c >>> 13;
            d1 += c;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
          }
          this.h[0] = h0;
          this.h[1] = h1;
          this.h[2] = h2;
          this.h[3] = h3;
          this.h[4] = h4;
          this.h[5] = h5;
          this.h[6] = h6;
          this.h[7] = h7;
          this.h[8] = h8;
          this.h[9] = h9;
        };
        poly1305.prototype.finish = function(mac, macpos) {
          var g = new Uint16Array(10);
          var c, mask, f, i;
          if (this.leftover) {
            i = this.leftover;
            this.buffer[i++] = 1;
            for (; i < 16; i++)
              this.buffer[i] = 0;
            this.fin = 1;
            this.blocks(this.buffer, 0, 16);
          }
          c = this.h[1] >>> 13;
          this.h[1] &= 8191;
          for (i = 2; i < 10; i++) {
            this.h[i] += c;
            c = this.h[i] >>> 13;
            this.h[i] &= 8191;
          }
          this.h[0] += c * 5;
          c = this.h[0] >>> 13;
          this.h[0] &= 8191;
          this.h[1] += c;
          c = this.h[1] >>> 13;
          this.h[1] &= 8191;
          this.h[2] += c;
          g[0] = this.h[0] + 5;
          c = g[0] >>> 13;
          g[0] &= 8191;
          for (i = 1; i < 10; i++) {
            g[i] = this.h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 8191;
          }
          g[9] -= 1 << 13;
          mask = (c ^ 1) - 1;
          for (i = 0; i < 10; i++)
            g[i] &= mask;
          mask = ~mask;
          for (i = 0; i < 10; i++)
            this.h[i] = this.h[i] & mask | g[i];
          this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
          this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
          this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
          this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
          this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
          this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
          this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
          this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
          f = this.h[0] + this.pad[0];
          this.h[0] = f & 65535;
          for (i = 1; i < 8; i++) {
            f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
            this.h[i] = f & 65535;
          }
          mac[macpos + 0] = this.h[0] >>> 0 & 255;
          mac[macpos + 1] = this.h[0] >>> 8 & 255;
          mac[macpos + 2] = this.h[1] >>> 0 & 255;
          mac[macpos + 3] = this.h[1] >>> 8 & 255;
          mac[macpos + 4] = this.h[2] >>> 0 & 255;
          mac[macpos + 5] = this.h[2] >>> 8 & 255;
          mac[macpos + 6] = this.h[3] >>> 0 & 255;
          mac[macpos + 7] = this.h[3] >>> 8 & 255;
          mac[macpos + 8] = this.h[4] >>> 0 & 255;
          mac[macpos + 9] = this.h[4] >>> 8 & 255;
          mac[macpos + 10] = this.h[5] >>> 0 & 255;
          mac[macpos + 11] = this.h[5] >>> 8 & 255;
          mac[macpos + 12] = this.h[6] >>> 0 & 255;
          mac[macpos + 13] = this.h[6] >>> 8 & 255;
          mac[macpos + 14] = this.h[7] >>> 0 & 255;
          mac[macpos + 15] = this.h[7] >>> 8 & 255;
        };
        poly1305.prototype.update = function(m, mpos, bytes) {
          var i, want;
          if (this.leftover) {
            want = 16 - this.leftover;
            if (want > bytes)
              want = bytes;
            for (i = 0; i < want; i++)
              this.buffer[this.leftover + i] = m[mpos + i];
            bytes -= want;
            mpos += want;
            this.leftover += want;
            if (this.leftover < 16)
              return;
            this.blocks(this.buffer, 0, 16);
            this.leftover = 0;
          }
          if (bytes >= 16) {
            want = bytes - bytes % 16;
            this.blocks(m, mpos, want);
            mpos += want;
            bytes -= want;
          }
          if (bytes) {
            for (i = 0; i < bytes; i++)
              this.buffer[this.leftover + i] = m[mpos + i];
            this.leftover += bytes;
          }
        };
        function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
          var s = new poly1305(k);
          s.update(m, mpos, n);
          s.finish(out, outpos);
          return 0;
        }
        function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
          var x = new Uint8Array(16);
          crypto_onetimeauth(x, 0, m, mpos, n, k);
          return crypto_verify_16(h, hpos, x, 0);
        }
        function crypto_secretbox(c, m, d, n, k) {
          var i;
          if (d < 32)
            return -1;
          crypto_stream_xor(c, 0, m, 0, d, n, k);
          crypto_onetimeauth(c, 16, c, 32, d - 32, c);
          for (i = 0; i < 16; i++)
            c[i] = 0;
          return 0;
        }
        function crypto_secretbox_open(m, c, d, n, k) {
          var i;
          var x = new Uint8Array(32);
          if (d < 32)
            return -1;
          crypto_stream(x, 0, 32, n, k);
          if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0)
            return -1;
          crypto_stream_xor(m, 0, c, 0, d, n, k);
          for (i = 0; i < 32; i++)
            m[i] = 0;
          return 0;
        }
        function set25519(r, a) {
          var i;
          for (i = 0; i < 16; i++)
            r[i] = a[i] | 0;
        }
        function car25519(o) {
          var i, v, c = 1;
          for (i = 0; i < 16; i++) {
            v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
          }
          o[0] += c - 1 + 37 * (c - 1);
        }
        function sel25519(p, q, b) {
          var t, c = ~(b - 1);
          for (var i = 0; i < 16; i++) {
            t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
          }
        }
        function pack25519(o, n) {
          var i, j, b;
          var m = gf(), t = gf();
          for (i = 0; i < 16; i++)
            t[i] = n[i];
          car25519(t);
          car25519(t);
          car25519(t);
          for (j = 0; j < 2; j++) {
            m[0] = t[0] - 65517;
            for (i = 1; i < 15; i++) {
              m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
              m[i - 1] &= 65535;
            }
            m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
            b = m[15] >> 16 & 1;
            m[14] &= 65535;
            sel25519(t, m, 1 - b);
          }
          for (i = 0; i < 16; i++) {
            o[2 * i] = t[i] & 255;
            o[2 * i + 1] = t[i] >> 8;
          }
        }
        function neq25519(a, b) {
          var c = new Uint8Array(32), d = new Uint8Array(32);
          pack25519(c, a);
          pack25519(d, b);
          return crypto_verify_32(c, 0, d, 0);
        }
        function par25519(a) {
          var d = new Uint8Array(32);
          pack25519(d, a);
          return d[0] & 1;
        }
        function unpack25519(o, n) {
          var i;
          for (i = 0; i < 16; i++)
            o[i] = n[2 * i] + (n[2 * i + 1] << 8);
          o[15] &= 32767;
        }
        function A(o, a, b) {
          for (var i = 0; i < 16; i++)
            o[i] = a[i] + b[i];
        }
        function Z(o, a, b) {
          for (var i = 0; i < 16; i++)
            o[i] = a[i] - b[i];
        }
        function M(o, a, b) {
          var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
          v = a[0];
          t0 += v * b0;
          t1 += v * b1;
          t2 += v * b2;
          t3 += v * b3;
          t4 += v * b4;
          t5 += v * b5;
          t6 += v * b6;
          t7 += v * b7;
          t8 += v * b8;
          t9 += v * b9;
          t10 += v * b10;
          t11 += v * b11;
          t12 += v * b12;
          t13 += v * b13;
          t14 += v * b14;
          t15 += v * b15;
          v = a[1];
          t1 += v * b0;
          t2 += v * b1;
          t3 += v * b2;
          t4 += v * b3;
          t5 += v * b4;
          t6 += v * b5;
          t7 += v * b6;
          t8 += v * b7;
          t9 += v * b8;
          t10 += v * b9;
          t11 += v * b10;
          t12 += v * b11;
          t13 += v * b12;
          t14 += v * b13;
          t15 += v * b14;
          t16 += v * b15;
          v = a[2];
          t2 += v * b0;
          t3 += v * b1;
          t4 += v * b2;
          t5 += v * b3;
          t6 += v * b4;
          t7 += v * b5;
          t8 += v * b6;
          t9 += v * b7;
          t10 += v * b8;
          t11 += v * b9;
          t12 += v * b10;
          t13 += v * b11;
          t14 += v * b12;
          t15 += v * b13;
          t16 += v * b14;
          t17 += v * b15;
          v = a[3];
          t3 += v * b0;
          t4 += v * b1;
          t5 += v * b2;
          t6 += v * b3;
          t7 += v * b4;
          t8 += v * b5;
          t9 += v * b6;
          t10 += v * b7;
          t11 += v * b8;
          t12 += v * b9;
          t13 += v * b10;
          t14 += v * b11;
          t15 += v * b12;
          t16 += v * b13;
          t17 += v * b14;
          t18 += v * b15;
          v = a[4];
          t4 += v * b0;
          t5 += v * b1;
          t6 += v * b2;
          t7 += v * b3;
          t8 += v * b4;
          t9 += v * b5;
          t10 += v * b6;
          t11 += v * b7;
          t12 += v * b8;
          t13 += v * b9;
          t14 += v * b10;
          t15 += v * b11;
          t16 += v * b12;
          t17 += v * b13;
          t18 += v * b14;
          t19 += v * b15;
          v = a[5];
          t5 += v * b0;
          t6 += v * b1;
          t7 += v * b2;
          t8 += v * b3;
          t9 += v * b4;
          t10 += v * b5;
          t11 += v * b6;
          t12 += v * b7;
          t13 += v * b8;
          t14 += v * b9;
          t15 += v * b10;
          t16 += v * b11;
          t17 += v * b12;
          t18 += v * b13;
          t19 += v * b14;
          t20 += v * b15;
          v = a[6];
          t6 += v * b0;
          t7 += v * b1;
          t8 += v * b2;
          t9 += v * b3;
          t10 += v * b4;
          t11 += v * b5;
          t12 += v * b6;
          t13 += v * b7;
          t14 += v * b8;
          t15 += v * b9;
          t16 += v * b10;
          t17 += v * b11;
          t18 += v * b12;
          t19 += v * b13;
          t20 += v * b14;
          t21 += v * b15;
          v = a[7];
          t7 += v * b0;
          t8 += v * b1;
          t9 += v * b2;
          t10 += v * b3;
          t11 += v * b4;
          t12 += v * b5;
          t13 += v * b6;
          t14 += v * b7;
          t15 += v * b8;
          t16 += v * b9;
          t17 += v * b10;
          t18 += v * b11;
          t19 += v * b12;
          t20 += v * b13;
          t21 += v * b14;
          t22 += v * b15;
          v = a[8];
          t8 += v * b0;
          t9 += v * b1;
          t10 += v * b2;
          t11 += v * b3;
          t12 += v * b4;
          t13 += v * b5;
          t14 += v * b6;
          t15 += v * b7;
          t16 += v * b8;
          t17 += v * b9;
          t18 += v * b10;
          t19 += v * b11;
          t20 += v * b12;
          t21 += v * b13;
          t22 += v * b14;
          t23 += v * b15;
          v = a[9];
          t9 += v * b0;
          t10 += v * b1;
          t11 += v * b2;
          t12 += v * b3;
          t13 += v * b4;
          t14 += v * b5;
          t15 += v * b6;
          t16 += v * b7;
          t17 += v * b8;
          t18 += v * b9;
          t19 += v * b10;
          t20 += v * b11;
          t21 += v * b12;
          t22 += v * b13;
          t23 += v * b14;
          t24 += v * b15;
          v = a[10];
          t10 += v * b0;
          t11 += v * b1;
          t12 += v * b2;
          t13 += v * b3;
          t14 += v * b4;
          t15 += v * b5;
          t16 += v * b6;
          t17 += v * b7;
          t18 += v * b8;
          t19 += v * b9;
          t20 += v * b10;
          t21 += v * b11;
          t22 += v * b12;
          t23 += v * b13;
          t24 += v * b14;
          t25 += v * b15;
          v = a[11];
          t11 += v * b0;
          t12 += v * b1;
          t13 += v * b2;
          t14 += v * b3;
          t15 += v * b4;
          t16 += v * b5;
          t17 += v * b6;
          t18 += v * b7;
          t19 += v * b8;
          t20 += v * b9;
          t21 += v * b10;
          t22 += v * b11;
          t23 += v * b12;
          t24 += v * b13;
          t25 += v * b14;
          t26 += v * b15;
          v = a[12];
          t12 += v * b0;
          t13 += v * b1;
          t14 += v * b2;
          t15 += v * b3;
          t16 += v * b4;
          t17 += v * b5;
          t18 += v * b6;
          t19 += v * b7;
          t20 += v * b8;
          t21 += v * b9;
          t22 += v * b10;
          t23 += v * b11;
          t24 += v * b12;
          t25 += v * b13;
          t26 += v * b14;
          t27 += v * b15;
          v = a[13];
          t13 += v * b0;
          t14 += v * b1;
          t15 += v * b2;
          t16 += v * b3;
          t17 += v * b4;
          t18 += v * b5;
          t19 += v * b6;
          t20 += v * b7;
          t21 += v * b8;
          t22 += v * b9;
          t23 += v * b10;
          t24 += v * b11;
          t25 += v * b12;
          t26 += v * b13;
          t27 += v * b14;
          t28 += v * b15;
          v = a[14];
          t14 += v * b0;
          t15 += v * b1;
          t16 += v * b2;
          t17 += v * b3;
          t18 += v * b4;
          t19 += v * b5;
          t20 += v * b6;
          t21 += v * b7;
          t22 += v * b8;
          t23 += v * b9;
          t24 += v * b10;
          t25 += v * b11;
          t26 += v * b12;
          t27 += v * b13;
          t28 += v * b14;
          t29 += v * b15;
          v = a[15];
          t15 += v * b0;
          t16 += v * b1;
          t17 += v * b2;
          t18 += v * b3;
          t19 += v * b4;
          t20 += v * b5;
          t21 += v * b6;
          t22 += v * b7;
          t23 += v * b8;
          t24 += v * b9;
          t25 += v * b10;
          t26 += v * b11;
          t27 += v * b12;
          t28 += v * b13;
          t29 += v * b14;
          t30 += v * b15;
          t0 += 38 * t16;
          t1 += 38 * t17;
          t2 += 38 * t18;
          t3 += 38 * t19;
          t4 += 38 * t20;
          t5 += 38 * t21;
          t6 += 38 * t22;
          t7 += 38 * t23;
          t8 += 38 * t24;
          t9 += 38 * t25;
          t10 += 38 * t26;
          t11 += 38 * t27;
          t12 += 38 * t28;
          t13 += 38 * t29;
          t14 += 38 * t30;
          c = 1;
          v = t0 + c + 65535;
          c = Math.floor(v / 65536);
          t0 = v - c * 65536;
          v = t1 + c + 65535;
          c = Math.floor(v / 65536);
          t1 = v - c * 65536;
          v = t2 + c + 65535;
          c = Math.floor(v / 65536);
          t2 = v - c * 65536;
          v = t3 + c + 65535;
          c = Math.floor(v / 65536);
          t3 = v - c * 65536;
          v = t4 + c + 65535;
          c = Math.floor(v / 65536);
          t4 = v - c * 65536;
          v = t5 + c + 65535;
          c = Math.floor(v / 65536);
          t5 = v - c * 65536;
          v = t6 + c + 65535;
          c = Math.floor(v / 65536);
          t6 = v - c * 65536;
          v = t7 + c + 65535;
          c = Math.floor(v / 65536);
          t7 = v - c * 65536;
          v = t8 + c + 65535;
          c = Math.floor(v / 65536);
          t8 = v - c * 65536;
          v = t9 + c + 65535;
          c = Math.floor(v / 65536);
          t9 = v - c * 65536;
          v = t10 + c + 65535;
          c = Math.floor(v / 65536);
          t10 = v - c * 65536;
          v = t11 + c + 65535;
          c = Math.floor(v / 65536);
          t11 = v - c * 65536;
          v = t12 + c + 65535;
          c = Math.floor(v / 65536);
          t12 = v - c * 65536;
          v = t13 + c + 65535;
          c = Math.floor(v / 65536);
          t13 = v - c * 65536;
          v = t14 + c + 65535;
          c = Math.floor(v / 65536);
          t14 = v - c * 65536;
          v = t15 + c + 65535;
          c = Math.floor(v / 65536);
          t15 = v - c * 65536;
          t0 += c - 1 + 37 * (c - 1);
          c = 1;
          v = t0 + c + 65535;
          c = Math.floor(v / 65536);
          t0 = v - c * 65536;
          v = t1 + c + 65535;
          c = Math.floor(v / 65536);
          t1 = v - c * 65536;
          v = t2 + c + 65535;
          c = Math.floor(v / 65536);
          t2 = v - c * 65536;
          v = t3 + c + 65535;
          c = Math.floor(v / 65536);
          t3 = v - c * 65536;
          v = t4 + c + 65535;
          c = Math.floor(v / 65536);
          t4 = v - c * 65536;
          v = t5 + c + 65535;
          c = Math.floor(v / 65536);
          t5 = v - c * 65536;
          v = t6 + c + 65535;
          c = Math.floor(v / 65536);
          t6 = v - c * 65536;
          v = t7 + c + 65535;
          c = Math.floor(v / 65536);
          t7 = v - c * 65536;
          v = t8 + c + 65535;
          c = Math.floor(v / 65536);
          t8 = v - c * 65536;
          v = t9 + c + 65535;
          c = Math.floor(v / 65536);
          t9 = v - c * 65536;
          v = t10 + c + 65535;
          c = Math.floor(v / 65536);
          t10 = v - c * 65536;
          v = t11 + c + 65535;
          c = Math.floor(v / 65536);
          t11 = v - c * 65536;
          v = t12 + c + 65535;
          c = Math.floor(v / 65536);
          t12 = v - c * 65536;
          v = t13 + c + 65535;
          c = Math.floor(v / 65536);
          t13 = v - c * 65536;
          v = t14 + c + 65535;
          c = Math.floor(v / 65536);
          t14 = v - c * 65536;
          v = t15 + c + 65535;
          c = Math.floor(v / 65536);
          t15 = v - c * 65536;
          t0 += c - 1 + 37 * (c - 1);
          o[0] = t0;
          o[1] = t1;
          o[2] = t2;
          o[3] = t3;
          o[4] = t4;
          o[5] = t5;
          o[6] = t6;
          o[7] = t7;
          o[8] = t8;
          o[9] = t9;
          o[10] = t10;
          o[11] = t11;
          o[12] = t12;
          o[13] = t13;
          o[14] = t14;
          o[15] = t15;
        }
        function S(o, a) {
          M(o, a, a);
        }
        function inv25519(o, i) {
          var c = gf();
          var a;
          for (a = 0; a < 16; a++)
            c[a] = i[a];
          for (a = 253; a >= 0; a--) {
            S(c, c);
            if (a !== 2 && a !== 4)
              M(c, c, i);
          }
          for (a = 0; a < 16; a++)
            o[a] = c[a];
        }
        function pow2523(o, i) {
          var c = gf();
          var a;
          for (a = 0; a < 16; a++)
            c[a] = i[a];
          for (a = 250; a >= 0; a--) {
            S(c, c);
            if (a !== 1)
              M(c, c, i);
          }
          for (a = 0; a < 16; a++)
            o[a] = c[a];
        }
        function crypto_scalarmult(q, n, p) {
          var z = new Uint8Array(32);
          var x = new Float64Array(80), r, i;
          var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
          for (i = 0; i < 31; i++)
            z[i] = n[i];
          z[31] = n[31] & 127 | 64;
          z[0] &= 248;
          unpack25519(x, p);
          for (i = 0; i < 16; i++) {
            b[i] = x[i];
            d[i] = a[i] = c[i] = 0;
          }
          a[0] = d[0] = 1;
          for (i = 254; i >= 0; --i) {
            r = z[i >>> 3] >>> (i & 7) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            A(e, a, c);
            Z(a, a, c);
            A(c, b, d);
            Z(b, b, d);
            S(d, e);
            S(f, a);
            M(a, c, a);
            M(c, b, e);
            A(e, a, c);
            Z(a, a, c);
            S(b, a);
            Z(c, d, f);
            M(a, c, _121665);
            A(a, a, d);
            M(c, c, a);
            M(a, d, f);
            M(d, b, x);
            S(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
          }
          for (i = 0; i < 16; i++) {
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
          }
          var x32 = x.subarray(32);
          var x16 = x.subarray(16);
          inv25519(x32, x32);
          M(x16, x16, x32);
          pack25519(q, x16);
          return 0;
        }
        function crypto_scalarmult_base(q, n) {
          return crypto_scalarmult(q, n, _9);
        }
        function crypto_box_keypair(y, x) {
          randombytes(x, 32);
          return crypto_scalarmult_base(y, x);
        }
        function crypto_box_beforenm(k, y, x) {
          var s = new Uint8Array(32);
          crypto_scalarmult(s, x, y);
          return crypto_core_hsalsa20(k, _0, s, sigma);
        }
        var crypto_box_afternm = crypto_secretbox;
        var crypto_box_open_afternm = crypto_secretbox_open;
        function crypto_box(c, m, d, n, y, x) {
          var k = new Uint8Array(32);
          crypto_box_beforenm(k, y, x);
          return crypto_box_afternm(c, m, d, n, k);
        }
        function crypto_box_open(m, c, d, n, y, x) {
          var k = new Uint8Array(32);
          crypto_box_beforenm(k, y, x);
          return crypto_box_open_afternm(m, c, d, n, k);
        }
        var K = [
          1116352408,
          3609767458,
          1899447441,
          602891725,
          3049323471,
          3964484399,
          3921009573,
          2173295548,
          961987163,
          4081628472,
          1508970993,
          3053834265,
          2453635748,
          2937671579,
          2870763221,
          3664609560,
          3624381080,
          2734883394,
          310598401,
          1164996542,
          607225278,
          1323610764,
          1426881987,
          3590304994,
          1925078388,
          4068182383,
          2162078206,
          991336113,
          2614888103,
          633803317,
          3248222580,
          3479774868,
          3835390401,
          2666613458,
          4022224774,
          944711139,
          264347078,
          2341262773,
          604807628,
          2007800933,
          770255983,
          1495990901,
          1249150122,
          1856431235,
          1555081692,
          3175218132,
          1996064986,
          2198950837,
          2554220882,
          3999719339,
          2821834349,
          766784016,
          2952996808,
          2566594879,
          3210313671,
          3203337956,
          3336571891,
          1034457026,
          3584528711,
          2466948901,
          113926993,
          3758326383,
          338241895,
          168717936,
          666307205,
          1188179964,
          773529912,
          1546045734,
          1294757372,
          1522805485,
          1396182291,
          2643833823,
          1695183700,
          2343527390,
          1986661051,
          1014477480,
          2177026350,
          1206759142,
          2456956037,
          344077627,
          2730485921,
          1290863460,
          2820302411,
          3158454273,
          3259730800,
          3505952657,
          3345764771,
          106217008,
          3516065817,
          3606008344,
          3600352804,
          1432725776,
          4094571909,
          1467031594,
          275423344,
          851169720,
          430227734,
          3100823752,
          506948616,
          1363258195,
          659060556,
          3750685593,
          883997877,
          3785050280,
          958139571,
          3318307427,
          1322822218,
          3812723403,
          1537002063,
          2003034995,
          1747873779,
          3602036899,
          1955562222,
          1575990012,
          2024104815,
          1125592928,
          2227730452,
          2716904306,
          2361852424,
          442776044,
          2428436474,
          593698344,
          2756734187,
          3733110249,
          3204031479,
          2999351573,
          3329325298,
          3815920427,
          3391569614,
          3928383900,
          3515267271,
          566280711,
          3940187606,
          3454069534,
          4118630271,
          4000239992,
          116418474,
          1914138554,
          174292421,
          2731055270,
          289380356,
          3203993006,
          460393269,
          320620315,
          685471733,
          587496836,
          852142971,
          1086792851,
          1017036298,
          365543100,
          1126000580,
          2618297676,
          1288033470,
          3409855158,
          1501505948,
          4234509866,
          1607167915,
          987167468,
          1816402316,
          1246189591
        ];
        function crypto_hashblocks_hl(hh, hl, m, n) {
          var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
          var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
          var pos = 0;
          while (n >= 128) {
            for (i = 0; i < 16; i++) {
              j = 8 * i + pos;
              wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
              wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
            }
            for (i = 0; i < 80; i++) {
              bh0 = ah0;
              bh1 = ah1;
              bh2 = ah2;
              bh3 = ah3;
              bh4 = ah4;
              bh5 = ah5;
              bh6 = ah6;
              bh7 = ah7;
              bl0 = al0;
              bl1 = al1;
              bl2 = al2;
              bl3 = al3;
              bl4 = al4;
              bl5 = al5;
              bl6 = al6;
              bl7 = al7;
              h = ah7;
              l = al7;
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
              l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = ah4 & ah5 ^ ~ah4 & ah6;
              l = al4 & al5 ^ ~al4 & al6;
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = K[i * 2];
              l = K[i * 2 + 1];
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = wh[i % 16];
              l = wl[i % 16];
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              th = c & 65535 | d << 16;
              tl = a & 65535 | b << 16;
              h = th;
              l = tl;
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
              l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
              l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              bh7 = c & 65535 | d << 16;
              bl7 = a & 65535 | b << 16;
              h = bh3;
              l = bl3;
              a = l & 65535;
              b = l >>> 16;
              c = h & 65535;
              d = h >>> 16;
              h = th;
              l = tl;
              a += l & 65535;
              b += l >>> 16;
              c += h & 65535;
              d += h >>> 16;
              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;
              bh3 = c & 65535 | d << 16;
              bl3 = a & 65535 | b << 16;
              ah1 = bh0;
              ah2 = bh1;
              ah3 = bh2;
              ah4 = bh3;
              ah5 = bh4;
              ah6 = bh5;
              ah7 = bh6;
              ah0 = bh7;
              al1 = bl0;
              al2 = bl1;
              al3 = bl2;
              al4 = bl3;
              al5 = bl4;
              al6 = bl5;
              al7 = bl6;
              al0 = bl7;
              if (i % 16 === 15) {
                for (j = 0; j < 16; j++) {
                  h = wh[j];
                  l = wl[j];
                  a = l & 65535;
                  b = l >>> 16;
                  c = h & 65535;
                  d = h >>> 16;
                  h = wh[(j + 9) % 16];
                  l = wl[(j + 9) % 16];
                  a += l & 65535;
                  b += l >>> 16;
                  c += h & 65535;
                  d += h >>> 16;
                  th = wh[(j + 1) % 16];
                  tl = wl[(j + 1) % 16];
                  h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                  l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                  a += l & 65535;
                  b += l >>> 16;
                  c += h & 65535;
                  d += h >>> 16;
                  th = wh[(j + 14) % 16];
                  tl = wl[(j + 14) % 16];
                  h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                  l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                  a += l & 65535;
                  b += l >>> 16;
                  c += h & 65535;
                  d += h >>> 16;
                  b += a >>> 16;
                  c += b >>> 16;
                  d += c >>> 16;
                  wh[j] = c & 65535 | d << 16;
                  wl[j] = a & 65535 | b << 16;
                }
              }
            }
            h = ah0;
            l = al0;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = c & 65535 | d << 16;
            hl[0] = al0 = a & 65535 | b << 16;
            h = ah1;
            l = al1;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = c & 65535 | d << 16;
            hl[1] = al1 = a & 65535 | b << 16;
            h = ah2;
            l = al2;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = c & 65535 | d << 16;
            hl[2] = al2 = a & 65535 | b << 16;
            h = ah3;
            l = al3;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = c & 65535 | d << 16;
            hl[3] = al3 = a & 65535 | b << 16;
            h = ah4;
            l = al4;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = c & 65535 | d << 16;
            hl[4] = al4 = a & 65535 | b << 16;
            h = ah5;
            l = al5;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = c & 65535 | d << 16;
            hl[5] = al5 = a & 65535 | b << 16;
            h = ah6;
            l = al6;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = c & 65535 | d << 16;
            hl[6] = al6 = a & 65535 | b << 16;
            h = ah7;
            l = al7;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = c & 65535 | d << 16;
            hl[7] = al7 = a & 65535 | b << 16;
            pos += 128;
            n -= 128;
          }
          return n;
        }
        function crypto_hash(out, m, n) {
          var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
          hh[0] = 1779033703;
          hh[1] = 3144134277;
          hh[2] = 1013904242;
          hh[3] = 2773480762;
          hh[4] = 1359893119;
          hh[5] = 2600822924;
          hh[6] = 528734635;
          hh[7] = 1541459225;
          hl[0] = 4089235720;
          hl[1] = 2227873595;
          hl[2] = 4271175723;
          hl[3] = 1595750129;
          hl[4] = 2917565137;
          hl[5] = 725511199;
          hl[6] = 4215389547;
          hl[7] = 327033209;
          crypto_hashblocks_hl(hh, hl, m, n);
          n %= 128;
          for (i = 0; i < n; i++)
            x[i] = m[b - n + i];
          x[n] = 128;
          n = 256 - 128 * (n < 112 ? 1 : 0);
          x[n - 9] = 0;
          ts64(x, n - 8, b / 536870912 | 0, b << 3);
          crypto_hashblocks_hl(hh, hl, x, n);
          for (i = 0; i < 8; i++)
            ts64(out, 8 * i, hh[i], hl[i]);
          return 0;
        }
        function add(p, q) {
          var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
          Z(a, p[1], p[0]);
          Z(t, q[1], q[0]);
          M(a, a, t);
          A(b, p[0], p[1]);
          A(t, q[0], q[1]);
          M(b, b, t);
          M(c, p[3], q[3]);
          M(c, c, D2);
          M(d, p[2], q[2]);
          A(d, d, d);
          Z(e, b, a);
          Z(f, d, c);
          A(g, d, c);
          A(h, b, a);
          M(p[0], e, f);
          M(p[1], h, g);
          M(p[2], g, f);
          M(p[3], e, h);
        }
        function cswap(p, q, b) {
          var i;
          for (i = 0; i < 4; i++) {
            sel25519(p[i], q[i], b);
          }
        }
        function pack(r, p) {
          var tx = gf(), ty = gf(), zi = gf();
          inv25519(zi, p[2]);
          M(tx, p[0], zi);
          M(ty, p[1], zi);
          pack25519(r, ty);
          r[31] ^= par25519(tx) << 7;
        }
        function scalarmult(p, q, s) {
          var b, i;
          set25519(p[0], gf0);
          set25519(p[1], gf1);
          set25519(p[2], gf1);
          set25519(p[3], gf0);
          for (i = 255; i >= 0; --i) {
            b = s[i / 8 | 0] >> (i & 7) & 1;
            cswap(p, q, b);
            add(q, p);
            add(p, p);
            cswap(p, q, b);
          }
        }
        function scalarbase(p, s) {
          var q = [gf(), gf(), gf(), gf()];
          set25519(q[0], X);
          set25519(q[1], Y);
          set25519(q[2], gf1);
          M(q[3], X, Y);
          scalarmult(p, q, s);
        }
        function crypto_sign_keypair(pk, sk, seeded) {
          var d = new Uint8Array(64);
          var p = [gf(), gf(), gf(), gf()];
          var i;
          if (!seeded)
            randombytes(sk, 32);
          crypto_hash(d, sk, 32);
          d[0] &= 248;
          d[31] &= 127;
          d[31] |= 64;
          scalarbase(p, d);
          pack(pk, p);
          for (i = 0; i < 32; i++)
            sk[i + 32] = pk[i];
          return 0;
        }
        var L = new Float64Array([237, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]);
        function modL(r, x) {
          var carry, i, j, k;
          for (i = 63; i >= 32; --i) {
            carry = 0;
            for (j = i - 32, k = i - 12; j < k; ++j) {
              x[j] += carry - 16 * x[i] * L[j - (i - 32)];
              carry = Math.floor((x[j] + 128) / 256);
              x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
          }
          carry = 0;
          for (j = 0; j < 32; j++) {
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
          }
          for (j = 0; j < 32; j++)
            x[j] -= carry * L[j];
          for (i = 0; i < 32; i++) {
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
          }
        }
        function reduce(r) {
          var x = new Float64Array(64), i;
          for (i = 0; i < 64; i++)
            x[i] = r[i];
          for (i = 0; i < 64; i++)
            r[i] = 0;
          modL(r, x);
        }
        function crypto_sign(sm, m, n, sk) {
          var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
          var i, j, x = new Float64Array(64);
          var p = [gf(), gf(), gf(), gf()];
          crypto_hash(d, sk, 32);
          d[0] &= 248;
          d[31] &= 127;
          d[31] |= 64;
          var smlen = n + 64;
          for (i = 0; i < n; i++)
            sm[64 + i] = m[i];
          for (i = 0; i < 32; i++)
            sm[32 + i] = d[32 + i];
          crypto_hash(r, sm.subarray(32), n + 32);
          reduce(r);
          scalarbase(p, r);
          pack(sm, p);
          for (i = 32; i < 64; i++)
            sm[i] = sk[i];
          crypto_hash(h, sm, n + 64);
          reduce(h);
          for (i = 0; i < 64; i++)
            x[i] = 0;
          for (i = 0; i < 32; i++)
            x[i] = r[i];
          for (i = 0; i < 32; i++) {
            for (j = 0; j < 32; j++) {
              x[i + j] += h[i] * d[j];
            }
          }
          modL(sm.subarray(32), x);
          return smlen;
        }
        function unpackneg(r, p) {
          var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
          set25519(r[2], gf1);
          unpack25519(r[1], p);
          S(num, r[1]);
          M(den, num, D);
          Z(num, num, r[2]);
          A(den, r[2], den);
          S(den2, den);
          S(den4, den2);
          M(den6, den4, den2);
          M(t, den6, num);
          M(t, t, den);
          pow2523(t, t);
          M(t, t, num);
          M(t, t, den);
          M(t, t, den);
          M(r[0], t, den);
          S(chk, r[0]);
          M(chk, chk, den);
          if (neq25519(chk, num))
            M(r[0], r[0], I);
          S(chk, r[0]);
          M(chk, chk, den);
          if (neq25519(chk, num))
            return -1;
          if (par25519(r[0]) === p[31] >> 7)
            Z(r[0], gf0, r[0]);
          M(r[3], r[0], r[1]);
          return 0;
        }
        function crypto_sign_open(m, sm, n, pk) {
          var i;
          var t = new Uint8Array(32), h = new Uint8Array(64);
          var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];
          if (n < 64)
            return -1;
          if (unpackneg(q, pk))
            return -1;
          for (i = 0; i < n; i++)
            m[i] = sm[i];
          for (i = 0; i < 32; i++)
            m[i + 32] = pk[i];
          crypto_hash(h, m, n);
          reduce(h);
          scalarmult(p, q, h);
          scalarbase(q, sm.subarray(32));
          add(p, q);
          pack(t, p);
          n -= 64;
          if (crypto_verify_32(sm, 0, t, 0)) {
            for (i = 0; i < n; i++)
              m[i] = 0;
            return -1;
          }
          for (i = 0; i < n; i++)
            m[i] = sm[i + 64];
          return n;
        }
        var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
        nacl.lowlevel = {
          crypto_core_hsalsa20,
          crypto_stream_xor,
          crypto_stream,
          crypto_stream_salsa20_xor,
          crypto_stream_salsa20,
          crypto_onetimeauth,
          crypto_onetimeauth_verify,
          crypto_verify_16,
          crypto_verify_32,
          crypto_secretbox,
          crypto_secretbox_open,
          crypto_scalarmult,
          crypto_scalarmult_base,
          crypto_box_beforenm,
          crypto_box_afternm,
          crypto_box,
          crypto_box_open,
          crypto_box_keypair,
          crypto_hash,
          crypto_sign,
          crypto_sign_keypair,
          crypto_sign_open,
          crypto_secretbox_KEYBYTES,
          crypto_secretbox_NONCEBYTES,
          crypto_secretbox_ZEROBYTES,
          crypto_secretbox_BOXZEROBYTES,
          crypto_scalarmult_BYTES,
          crypto_scalarmult_SCALARBYTES,
          crypto_box_PUBLICKEYBYTES,
          crypto_box_SECRETKEYBYTES,
          crypto_box_BEFORENMBYTES,
          crypto_box_NONCEBYTES,
          crypto_box_ZEROBYTES,
          crypto_box_BOXZEROBYTES,
          crypto_sign_BYTES,
          crypto_sign_PUBLICKEYBYTES,
          crypto_sign_SECRETKEYBYTES,
          crypto_sign_SEEDBYTES,
          crypto_hash_BYTES,
          gf,
          D,
          L,
          pack25519,
          unpack25519,
          M,
          A,
          S,
          Z,
          pow2523,
          add,
          set25519,
          modL,
          scalarmult,
          scalarbase
        };
        function checkLengths(k, n) {
          if (k.length !== crypto_secretbox_KEYBYTES)
            throw new Error("bad key size");
          if (n.length !== crypto_secretbox_NONCEBYTES)
            throw new Error("bad nonce size");
        }
        function checkBoxLengths(pk, sk) {
          if (pk.length !== crypto_box_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          if (sk.length !== crypto_box_SECRETKEYBYTES)
            throw new Error("bad secret key size");
        }
        function checkArrayTypes() {
          for (var i = 0; i < arguments.length; i++) {
            if (!(arguments[i] instanceof Uint8Array))
              throw new TypeError("unexpected type, use Uint8Array");
          }
        }
        function cleanup(arr) {
          for (var i = 0; i < arr.length; i++)
            arr[i] = 0;
        }
        nacl.randomBytes = function(n) {
          var b = new Uint8Array(n);
          randombytes(b, n);
          return b;
        };
        nacl.secretbox = function(msg, nonce, key) {
          checkArrayTypes(msg, nonce, key);
          checkLengths(key, nonce);
          var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
          var c = new Uint8Array(m.length);
          for (var i = 0; i < msg.length; i++)
            m[i + crypto_secretbox_ZEROBYTES] = msg[i];
          crypto_secretbox(c, m, m.length, nonce, key);
          return c.subarray(crypto_secretbox_BOXZEROBYTES);
        };
        nacl.secretbox.open = function(box, nonce, key) {
          checkArrayTypes(box, nonce, key);
          checkLengths(key, nonce);
          var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
          var m = new Uint8Array(c.length);
          for (var i = 0; i < box.length; i++)
            c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
          if (c.length < 32)
            return null;
          if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0)
            return null;
          return m.subarray(crypto_secretbox_ZEROBYTES);
        };
        nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
        nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
        nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
        nacl.scalarMult = function(n, p) {
          checkArrayTypes(n, p);
          if (n.length !== crypto_scalarmult_SCALARBYTES)
            throw new Error("bad n size");
          if (p.length !== crypto_scalarmult_BYTES)
            throw new Error("bad p size");
          var q = new Uint8Array(crypto_scalarmult_BYTES);
          crypto_scalarmult(q, n, p);
          return q;
        };
        nacl.scalarMult.base = function(n) {
          checkArrayTypes(n);
          if (n.length !== crypto_scalarmult_SCALARBYTES)
            throw new Error("bad n size");
          var q = new Uint8Array(crypto_scalarmult_BYTES);
          crypto_scalarmult_base(q, n);
          return q;
        };
        nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
        nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
        nacl.box = function(msg, nonce, publicKey, secretKey) {
          var k = nacl.box.before(publicKey, secretKey);
          return nacl.secretbox(msg, nonce, k);
        };
        nacl.box.before = function(publicKey, secretKey) {
          checkArrayTypes(publicKey, secretKey);
          checkBoxLengths(publicKey, secretKey);
          var k = new Uint8Array(crypto_box_BEFORENMBYTES);
          crypto_box_beforenm(k, publicKey, secretKey);
          return k;
        };
        nacl.box.after = nacl.secretbox;
        nacl.box.open = function(msg, nonce, publicKey, secretKey) {
          var k = nacl.box.before(publicKey, secretKey);
          return nacl.secretbox.open(msg, nonce, k);
        };
        nacl.box.open.after = nacl.secretbox.open;
        nacl.box.keyPair = function() {
          var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
          crypto_box_keypair(pk, sk);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.box.keyPair.fromSecretKey = function(secretKey) {
          checkArrayTypes(secretKey);
          if (secretKey.length !== crypto_box_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
          crypto_scalarmult_base(pk, secretKey);
          return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
        };
        nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
        nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
        nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
        nacl.box.nonceLength = crypto_box_NONCEBYTES;
        nacl.box.overheadLength = nacl.secretbox.overheadLength;
        nacl.sign = function(msg, secretKey) {
          checkArrayTypes(msg, secretKey);
          if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
          crypto_sign(signedMsg, msg, msg.length, secretKey);
          return signedMsg;
        };
        nacl.sign.open = function(signedMsg, publicKey) {
          checkArrayTypes(signedMsg, publicKey);
          if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          var tmp = new Uint8Array(signedMsg.length);
          var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
          if (mlen < 0)
            return null;
          var m = new Uint8Array(mlen);
          for (var i = 0; i < m.length; i++)
            m[i] = tmp[i];
          return m;
        };
        nacl.sign.detached = function(msg, secretKey) {
          var signedMsg = nacl.sign(msg, secretKey);
          var sig = new Uint8Array(crypto_sign_BYTES);
          for (var i = 0; i < sig.length; i++)
            sig[i] = signedMsg[i];
          return sig;
        };
        nacl.sign.detached.verify = function(msg, sig, publicKey) {
          checkArrayTypes(msg, sig, publicKey);
          if (sig.length !== crypto_sign_BYTES)
            throw new Error("bad signature size");
          if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
            throw new Error("bad public key size");
          var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
          var m = new Uint8Array(crypto_sign_BYTES + msg.length);
          var i;
          for (i = 0; i < crypto_sign_BYTES; i++)
            sm[i] = sig[i];
          for (i = 0; i < msg.length; i++)
            sm[i + crypto_sign_BYTES] = msg[i];
          return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
        };
        nacl.sign.keyPair = function() {
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
          crypto_sign_keypair(pk, sk);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.sign.keyPair.fromSecretKey = function(secretKey) {
          checkArrayTypes(secretKey);
          if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
            throw new Error("bad secret key size");
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          for (var i = 0; i < pk.length; i++)
            pk[i] = secretKey[32 + i];
          return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
        };
        nacl.sign.keyPair.fromSeed = function(seed) {
          checkArrayTypes(seed);
          if (seed.length !== crypto_sign_SEEDBYTES)
            throw new Error("bad seed size");
          var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
          var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
          for (var i = 0; i < 32; i++)
            sk[i] = seed[i];
          crypto_sign_keypair(pk, sk, true);
          return { publicKey: pk, secretKey: sk };
        };
        nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
        nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
        nacl.sign.seedLength = crypto_sign_SEEDBYTES;
        nacl.sign.signatureLength = crypto_sign_BYTES;
        nacl.hash = function(msg) {
          checkArrayTypes(msg);
          var h = new Uint8Array(crypto_hash_BYTES);
          crypto_hash(h, msg, msg.length);
          return h;
        };
        nacl.hash.hashLength = crypto_hash_BYTES;
        nacl.verify = function(x, y) {
          checkArrayTypes(x, y);
          if (x.length === 0 || y.length === 0)
            return false;
          if (x.length !== y.length)
            return false;
          return vn(x, 0, y, 0, x.length) === 0 ? true : false;
        };
        nacl.setPRNG = function(fn) {
          randombytes = fn;
        };
        (function() {
          var crypto2 = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
          if (crypto2 && crypto2.getRandomValues) {
            var QUOTA = 65536;
            nacl.setPRNG(function(x, n) {
              var i, v = new Uint8Array(n);
              for (i = 0; i < n; i += QUOTA) {
                crypto2.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
              }
              for (i = 0; i < n; i++)
                x[i] = v[i];
              cleanup(v);
            });
          } else if (typeof __require !== "undefined") {
            crypto2 = require_crypto2();
            if (crypto2 && crypto2.randomBytes) {
              nacl.setPRNG(function(x, n) {
                var i, v = crypto2.randomBytes(n);
                for (i = 0; i < n; i++)
                  x[i] = v[i];
                cleanup(v);
              });
            }
          }
        })();
      })(typeof module !== "undefined" && module.exports ? module.exports : self.nacl = self.nacl || {});
    }
  });

  // node_modules/js-sha512/src/sha512.js
  var require_sha512 = __commonJS({
    "node_modules/js-sha512/src/sha512.js"(exports, module) {
      (function() {
        "use strict";
        var INPUT_ERROR = "input is invalid type";
        var FINALIZE_ERROR = "finalize already called";
        var WINDOW = typeof window === "object";
        var root = WINDOW ? window : {};
        if (root.JS_SHA512_NO_WINDOW) {
          WINDOW = false;
        }
        var WEB_WORKER = !WINDOW && typeof self === "object";
        var NODE_JS = !root.JS_SHA512_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
          root = window;
        } else if (WEB_WORKER) {
          root = self;
        }
        var COMMON_JS = !root.JS_SHA512_NO_COMMON_JS && typeof module === "object" && module.exports;
        var AMD = typeof define === "function" && define.amd;
        var ARRAY_BUFFER = !root.JS_SHA512_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
        var HEX_CHARS = "0123456789abcdef".split("");
        var EXTRA = [-2147483648, 8388608, 32768, 128];
        var SHIFT = [24, 16, 8, 0];
        var K = [
          1116352408,
          3609767458,
          1899447441,
          602891725,
          3049323471,
          3964484399,
          3921009573,
          2173295548,
          961987163,
          4081628472,
          1508970993,
          3053834265,
          2453635748,
          2937671579,
          2870763221,
          3664609560,
          3624381080,
          2734883394,
          310598401,
          1164996542,
          607225278,
          1323610764,
          1426881987,
          3590304994,
          1925078388,
          4068182383,
          2162078206,
          991336113,
          2614888103,
          633803317,
          3248222580,
          3479774868,
          3835390401,
          2666613458,
          4022224774,
          944711139,
          264347078,
          2341262773,
          604807628,
          2007800933,
          770255983,
          1495990901,
          1249150122,
          1856431235,
          1555081692,
          3175218132,
          1996064986,
          2198950837,
          2554220882,
          3999719339,
          2821834349,
          766784016,
          2952996808,
          2566594879,
          3210313671,
          3203337956,
          3336571891,
          1034457026,
          3584528711,
          2466948901,
          113926993,
          3758326383,
          338241895,
          168717936,
          666307205,
          1188179964,
          773529912,
          1546045734,
          1294757372,
          1522805485,
          1396182291,
          2643833823,
          1695183700,
          2343527390,
          1986661051,
          1014477480,
          2177026350,
          1206759142,
          2456956037,
          344077627,
          2730485921,
          1290863460,
          2820302411,
          3158454273,
          3259730800,
          3505952657,
          3345764771,
          106217008,
          3516065817,
          3606008344,
          3600352804,
          1432725776,
          4094571909,
          1467031594,
          275423344,
          851169720,
          430227734,
          3100823752,
          506948616,
          1363258195,
          659060556,
          3750685593,
          883997877,
          3785050280,
          958139571,
          3318307427,
          1322822218,
          3812723403,
          1537002063,
          2003034995,
          1747873779,
          3602036899,
          1955562222,
          1575990012,
          2024104815,
          1125592928,
          2227730452,
          2716904306,
          2361852424,
          442776044,
          2428436474,
          593698344,
          2756734187,
          3733110249,
          3204031479,
          2999351573,
          3329325298,
          3815920427,
          3391569614,
          3928383900,
          3515267271,
          566280711,
          3940187606,
          3454069534,
          4118630271,
          4000239992,
          116418474,
          1914138554,
          174292421,
          2731055270,
          289380356,
          3203993006,
          460393269,
          320620315,
          685471733,
          587496836,
          852142971,
          1086792851,
          1017036298,
          365543100,
          1126000580,
          2618297676,
          1288033470,
          3409855158,
          1501505948,
          4234509866,
          1607167915,
          987167468,
          1816402316,
          1246189591
        ];
        var OUTPUT_TYPES = ["hex", "array", "digest", "arrayBuffer"];
        var blocks = [];
        if (root.JS_SHA512_NO_NODE_JS || !Array.isArray) {
          Array.isArray = function(obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
          };
        }
        if (ARRAY_BUFFER && (root.JS_SHA512_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
          ArrayBuffer.isView = function(obj) {
            return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
          };
        }
        var createOutputMethod = function(outputType, bits) {
          return function(message) {
            return new Sha512(bits, true).update(message)[outputType]();
          };
        };
        var createMethod = function(bits) {
          var method = createOutputMethod("hex", bits);
          method.create = function() {
            return new Sha512(bits);
          };
          method.update = function(message) {
            return method.create().update(message);
          };
          for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
            var type = OUTPUT_TYPES[i];
            method[type] = createOutputMethod(type, bits);
          }
          return method;
        };
        var createHmacOutputMethod = function(outputType, bits) {
          return function(key, message) {
            return new HmacSha512(key, bits, true).update(message)[outputType]();
          };
        };
        var createHmacMethod = function(bits) {
          var method = createHmacOutputMethod("hex", bits);
          method.create = function(key) {
            return new HmacSha512(key, bits);
          };
          method.update = function(key, message) {
            return method.create(key).update(message);
          };
          for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
            var type = OUTPUT_TYPES[i];
            method[type] = createHmacOutputMethod(type, bits);
          }
          return method;
        };
        function Sha512(bits, sharedMemory) {
          if (sharedMemory) {
            blocks[0] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = blocks[16] = blocks[17] = blocks[18] = blocks[19] = blocks[20] = blocks[21] = blocks[22] = blocks[23] = blocks[24] = blocks[25] = blocks[26] = blocks[27] = blocks[28] = blocks[29] = blocks[30] = blocks[31] = blocks[32] = 0;
            this.blocks = blocks;
          } else {
            this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          }
          if (bits == 384) {
            this.h0h = 3418070365;
            this.h0l = 3238371032;
            this.h1h = 1654270250;
            this.h1l = 914150663;
            this.h2h = 2438529370;
            this.h2l = 812702999;
            this.h3h = 355462360;
            this.h3l = 4144912697;
            this.h4h = 1731405415;
            this.h4l = 4290775857;
            this.h5h = 2394180231;
            this.h5l = 1750603025;
            this.h6h = 3675008525;
            this.h6l = 1694076839;
            this.h7h = 1203062813;
            this.h7l = 3204075428;
          } else if (bits == 256) {
            this.h0h = 573645204;
            this.h0l = 4230739756;
            this.h1h = 2673172387;
            this.h1l = 3360449730;
            this.h2h = 596883563;
            this.h2l = 1867755857;
            this.h3h = 2520282905;
            this.h3l = 1497426621;
            this.h4h = 2519219938;
            this.h4l = 2827943907;
            this.h5h = 3193839141;
            this.h5l = 1401305490;
            this.h6h = 721525244;
            this.h6l = 746961066;
            this.h7h = 246885852;
            this.h7l = 2177182882;
          } else if (bits == 224) {
            this.h0h = 2352822216;
            this.h0l = 424955298;
            this.h1h = 1944164710;
            this.h1l = 2312950998;
            this.h2h = 502970286;
            this.h2l = 855612546;
            this.h3h = 1738396948;
            this.h3l = 1479516111;
            this.h4h = 258812777;
            this.h4l = 2077511080;
            this.h5h = 2011393907;
            this.h5l = 79989058;
            this.h6h = 1067287976;
            this.h6l = 1780299464;
            this.h7h = 286451373;
            this.h7l = 2446758561;
          } else {
            this.h0h = 1779033703;
            this.h0l = 4089235720;
            this.h1h = 3144134277;
            this.h1l = 2227873595;
            this.h2h = 1013904242;
            this.h2l = 4271175723;
            this.h3h = 2773480762;
            this.h3l = 1595750129;
            this.h4h = 1359893119;
            this.h4l = 2917565137;
            this.h5h = 2600822924;
            this.h5l = 725511199;
            this.h6h = 528734635;
            this.h6l = 4215389547;
            this.h7h = 1541459225;
            this.h7l = 327033209;
          }
          this.bits = bits;
          this.block = this.start = this.bytes = this.hBytes = 0;
          this.finalized = this.hashed = false;
        }
        Sha512.prototype.update = function(message) {
          if (this.finalized) {
            throw new Error(FINALIZE_ERROR);
          }
          var notString, type = typeof message;
          if (type !== "string") {
            if (type === "object") {
              if (message === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                message = new Uint8Array(message);
              } else if (!Array.isArray(message)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var code, index = 0, i, length = message.length, blocks2 = this.blocks;
          while (index < length) {
            if (this.hashed) {
              this.hashed = false;
              blocks2[0] = this.block;
              blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = blocks2[16] = blocks2[17] = blocks2[18] = blocks2[19] = blocks2[20] = blocks2[21] = blocks2[22] = blocks2[23] = blocks2[24] = blocks2[25] = blocks2[26] = blocks2[27] = blocks2[28] = blocks2[29] = blocks2[30] = blocks2[31] = blocks2[32] = 0;
            }
            if (notString) {
              for (i = this.start; index < length && i < 128; ++index) {
                blocks2[i >> 2] |= message[index] << SHIFT[i++ & 3];
              }
            } else {
              for (i = this.start; index < length && i < 128; ++index) {
                code = message.charCodeAt(index);
                if (code < 128) {
                  blocks2[i >> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 2048) {
                  blocks2[i >> 2] |= (192 | code >> 6) << SHIFT[i++ & 3];
                  blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks2[i >> 2] |= (224 | code >> 12) << SHIFT[i++ & 3];
                  blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
                  blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                  blocks2[i >> 2] |= (240 | code >> 18) << SHIFT[i++ & 3];
                  blocks2[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[i++ & 3];
                  blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
                  blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
                }
              }
            }
            this.lastByteIndex = i;
            this.bytes += i - this.start;
            if (i >= 128) {
              this.block = blocks2[32];
              this.start = i - 128;
              this.hash();
              this.hashed = true;
            } else {
              this.start = i;
            }
          }
          if (this.bytes > 4294967295) {
            this.hBytes += this.bytes / 4294967296 << 0;
            this.bytes = this.bytes % 4294967296;
          }
          return this;
        };
        Sha512.prototype.finalize = function() {
          if (this.finalized) {
            return;
          }
          this.finalized = true;
          var blocks2 = this.blocks, i = this.lastByteIndex;
          blocks2[32] = this.block;
          blocks2[i >> 2] |= EXTRA[i & 3];
          this.block = blocks2[32];
          if (i >= 112) {
            if (!this.hashed) {
              this.hash();
            }
            blocks2[0] = this.block;
            blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = blocks2[16] = blocks2[17] = blocks2[18] = blocks2[19] = blocks2[20] = blocks2[21] = blocks2[22] = blocks2[23] = blocks2[24] = blocks2[25] = blocks2[26] = blocks2[27] = blocks2[28] = blocks2[29] = blocks2[30] = blocks2[31] = blocks2[32] = 0;
          }
          blocks2[30] = this.hBytes << 3 | this.bytes >>> 29;
          blocks2[31] = this.bytes << 3;
          this.hash();
        };
        Sha512.prototype.hash = function() {
          var h0h = this.h0h, h0l = this.h0l, h1h = this.h1h, h1l = this.h1l, h2h = this.h2h, h2l = this.h2l, h3h = this.h3h, h3l = this.h3l, h4h = this.h4h, h4l = this.h4l, h5h = this.h5h, h5l = this.h5l, h6h = this.h6h, h6l = this.h6l, h7h = this.h7h, h7l = this.h7l, blocks2 = this.blocks, j, s0h, s0l, s1h, s1l, c1, c2, c3, c4, abh, abl, dah, dal, cdh, cdl, bch, bcl, majh, majl, t1h, t1l, t2h, t2l, chh, chl;
          for (j = 32; j < 160; j += 2) {
            t1h = blocks2[j - 30];
            t1l = blocks2[j - 29];
            s0h = (t1h >>> 1 | t1l << 31) ^ (t1h >>> 8 | t1l << 24) ^ t1h >>> 7;
            s0l = (t1l >>> 1 | t1h << 31) ^ (t1l >>> 8 | t1h << 24) ^ (t1l >>> 7 | t1h << 25);
            t1h = blocks2[j - 4];
            t1l = blocks2[j - 3];
            s1h = (t1h >>> 19 | t1l << 13) ^ (t1l >>> 29 | t1h << 3) ^ t1h >>> 6;
            s1l = (t1l >>> 19 | t1h << 13) ^ (t1h >>> 29 | t1l << 3) ^ (t1l >>> 6 | t1h << 26);
            t1h = blocks2[j - 32];
            t1l = blocks2[j - 31];
            t2h = blocks2[j - 14];
            t2l = blocks2[j - 13];
            c1 = (t2l & 65535) + (t1l & 65535) + (s0l & 65535) + (s1l & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (s0l >>> 16) + (s1l >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (s0h & 65535) + (s1h & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (s0h >>> 16) + (s1h >>> 16) + (c3 >>> 16);
            blocks2[j] = c4 << 16 | c3 & 65535;
            blocks2[j + 1] = c2 << 16 | c1 & 65535;
          }
          var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;
          bch = bh & ch;
          bcl = bl & cl;
          for (j = 0; j < 160; j += 8) {
            s0h = (ah >>> 28 | al << 4) ^ (al >>> 2 | ah << 30) ^ (al >>> 7 | ah << 25);
            s0l = (al >>> 28 | ah << 4) ^ (ah >>> 2 | al << 30) ^ (ah >>> 7 | al << 25);
            s1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (el >>> 9 | eh << 23);
            s1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (eh >>> 9 | el << 23);
            abh = ah & bh;
            abl = al & bl;
            majh = abh ^ ah & ch ^ bch;
            majl = abl ^ al & cl ^ bcl;
            chh = eh & fh ^ ~eh & gh;
            chl = el & fl ^ ~el & gl;
            t1h = blocks2[j];
            t1l = blocks2[j + 1];
            t2h = K[j];
            t2l = K[j + 1];
            c1 = (t2l & 65535) + (t1l & 65535) + (chl & 65535) + (s1l & 65535) + (hl & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (hl >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (chh & 65535) + (s1h & 65535) + (hh & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (hh >>> 16) + (c3 >>> 16);
            t1h = c4 << 16 | c3 & 65535;
            t1l = c2 << 16 | c1 & 65535;
            c1 = (majl & 65535) + (s0l & 65535);
            c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
            c3 = (majh & 65535) + (s0h & 65535) + (c2 >>> 16);
            c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);
            t2h = c4 << 16 | c3 & 65535;
            t2l = c2 << 16 | c1 & 65535;
            c1 = (dl & 65535) + (t1l & 65535);
            c2 = (dl >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (dh & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (dh >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            hh = c4 << 16 | c3 & 65535;
            hl = c2 << 16 | c1 & 65535;
            c1 = (t2l & 65535) + (t1l & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            dh = c4 << 16 | c3 & 65535;
            dl = c2 << 16 | c1 & 65535;
            s0h = (dh >>> 28 | dl << 4) ^ (dl >>> 2 | dh << 30) ^ (dl >>> 7 | dh << 25);
            s0l = (dl >>> 28 | dh << 4) ^ (dh >>> 2 | dl << 30) ^ (dh >>> 7 | dl << 25);
            s1h = (hh >>> 14 | hl << 18) ^ (hh >>> 18 | hl << 14) ^ (hl >>> 9 | hh << 23);
            s1l = (hl >>> 14 | hh << 18) ^ (hl >>> 18 | hh << 14) ^ (hh >>> 9 | hl << 23);
            dah = dh & ah;
            dal = dl & al;
            majh = dah ^ dh & bh ^ abh;
            majl = dal ^ dl & bl ^ abl;
            chh = hh & eh ^ ~hh & fh;
            chl = hl & el ^ ~hl & fl;
            t1h = blocks2[j + 2];
            t1l = blocks2[j + 3];
            t2h = K[j + 2];
            t2l = K[j + 3];
            c1 = (t2l & 65535) + (t1l & 65535) + (chl & 65535) + (s1l & 65535) + (gl & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (gl >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (chh & 65535) + (s1h & 65535) + (gh & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (gh >>> 16) + (c3 >>> 16);
            t1h = c4 << 16 | c3 & 65535;
            t1l = c2 << 16 | c1 & 65535;
            c1 = (majl & 65535) + (s0l & 65535);
            c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
            c3 = (majh & 65535) + (s0h & 65535) + (c2 >>> 16);
            c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);
            t2h = c4 << 16 | c3 & 65535;
            t2l = c2 << 16 | c1 & 65535;
            c1 = (cl & 65535) + (t1l & 65535);
            c2 = (cl >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (ch & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (ch >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            gh = c4 << 16 | c3 & 65535;
            gl = c2 << 16 | c1 & 65535;
            c1 = (t2l & 65535) + (t1l & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            ch = c4 << 16 | c3 & 65535;
            cl = c2 << 16 | c1 & 65535;
            s0h = (ch >>> 28 | cl << 4) ^ (cl >>> 2 | ch << 30) ^ (cl >>> 7 | ch << 25);
            s0l = (cl >>> 28 | ch << 4) ^ (ch >>> 2 | cl << 30) ^ (ch >>> 7 | cl << 25);
            s1h = (gh >>> 14 | gl << 18) ^ (gh >>> 18 | gl << 14) ^ (gl >>> 9 | gh << 23);
            s1l = (gl >>> 14 | gh << 18) ^ (gl >>> 18 | gh << 14) ^ (gh >>> 9 | gl << 23);
            cdh = ch & dh;
            cdl = cl & dl;
            majh = cdh ^ ch & ah ^ dah;
            majl = cdl ^ cl & al ^ dal;
            chh = gh & hh ^ ~gh & eh;
            chl = gl & hl ^ ~gl & el;
            t1h = blocks2[j + 4];
            t1l = blocks2[j + 5];
            t2h = K[j + 4];
            t2l = K[j + 5];
            c1 = (t2l & 65535) + (t1l & 65535) + (chl & 65535) + (s1l & 65535) + (fl & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (fl >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (chh & 65535) + (s1h & 65535) + (fh & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (fh >>> 16) + (c3 >>> 16);
            t1h = c4 << 16 | c3 & 65535;
            t1l = c2 << 16 | c1 & 65535;
            c1 = (majl & 65535) + (s0l & 65535);
            c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
            c3 = (majh & 65535) + (s0h & 65535) + (c2 >>> 16);
            c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);
            t2h = c4 << 16 | c3 & 65535;
            t2l = c2 << 16 | c1 & 65535;
            c1 = (bl & 65535) + (t1l & 65535);
            c2 = (bl >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (bh & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (bh >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            fh = c4 << 16 | c3 & 65535;
            fl = c2 << 16 | c1 & 65535;
            c1 = (t2l & 65535) + (t1l & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            bh = c4 << 16 | c3 & 65535;
            bl = c2 << 16 | c1 & 65535;
            s0h = (bh >>> 28 | bl << 4) ^ (bl >>> 2 | bh << 30) ^ (bl >>> 7 | bh << 25);
            s0l = (bl >>> 28 | bh << 4) ^ (bh >>> 2 | bl << 30) ^ (bh >>> 7 | bl << 25);
            s1h = (fh >>> 14 | fl << 18) ^ (fh >>> 18 | fl << 14) ^ (fl >>> 9 | fh << 23);
            s1l = (fl >>> 14 | fh << 18) ^ (fl >>> 18 | fh << 14) ^ (fh >>> 9 | fl << 23);
            bch = bh & ch;
            bcl = bl & cl;
            majh = bch ^ bh & dh ^ cdh;
            majl = bcl ^ bl & dl ^ cdl;
            chh = fh & gh ^ ~fh & hh;
            chl = fl & gl ^ ~fl & hl;
            t1h = blocks2[j + 6];
            t1l = blocks2[j + 7];
            t2h = K[j + 6];
            t2l = K[j + 7];
            c1 = (t2l & 65535) + (t1l & 65535) + (chl & 65535) + (s1l & 65535) + (el & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (chl >>> 16) + (s1l >>> 16) + (el >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (chh & 65535) + (s1h & 65535) + (eh & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (chh >>> 16) + (s1h >>> 16) + (eh >>> 16) + (c3 >>> 16);
            t1h = c4 << 16 | c3 & 65535;
            t1l = c2 << 16 | c1 & 65535;
            c1 = (majl & 65535) + (s0l & 65535);
            c2 = (majl >>> 16) + (s0l >>> 16) + (c1 >>> 16);
            c3 = (majh & 65535) + (s0h & 65535) + (c2 >>> 16);
            c4 = (majh >>> 16) + (s0h >>> 16) + (c3 >>> 16);
            t2h = c4 << 16 | c3 & 65535;
            t2l = c2 << 16 | c1 & 65535;
            c1 = (al & 65535) + (t1l & 65535);
            c2 = (al >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (ah & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (ah >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            eh = c4 << 16 | c3 & 65535;
            el = c2 << 16 | c1 & 65535;
            c1 = (t2l & 65535) + (t1l & 65535);
            c2 = (t2l >>> 16) + (t1l >>> 16) + (c1 >>> 16);
            c3 = (t2h & 65535) + (t1h & 65535) + (c2 >>> 16);
            c4 = (t2h >>> 16) + (t1h >>> 16) + (c3 >>> 16);
            ah = c4 << 16 | c3 & 65535;
            al = c2 << 16 | c1 & 65535;
          }
          c1 = (h0l & 65535) + (al & 65535);
          c2 = (h0l >>> 16) + (al >>> 16) + (c1 >>> 16);
          c3 = (h0h & 65535) + (ah & 65535) + (c2 >>> 16);
          c4 = (h0h >>> 16) + (ah >>> 16) + (c3 >>> 16);
          this.h0h = c4 << 16 | c3 & 65535;
          this.h0l = c2 << 16 | c1 & 65535;
          c1 = (h1l & 65535) + (bl & 65535);
          c2 = (h1l >>> 16) + (bl >>> 16) + (c1 >>> 16);
          c3 = (h1h & 65535) + (bh & 65535) + (c2 >>> 16);
          c4 = (h1h >>> 16) + (bh >>> 16) + (c3 >>> 16);
          this.h1h = c4 << 16 | c3 & 65535;
          this.h1l = c2 << 16 | c1 & 65535;
          c1 = (h2l & 65535) + (cl & 65535);
          c2 = (h2l >>> 16) + (cl >>> 16) + (c1 >>> 16);
          c3 = (h2h & 65535) + (ch & 65535) + (c2 >>> 16);
          c4 = (h2h >>> 16) + (ch >>> 16) + (c3 >>> 16);
          this.h2h = c4 << 16 | c3 & 65535;
          this.h2l = c2 << 16 | c1 & 65535;
          c1 = (h3l & 65535) + (dl & 65535);
          c2 = (h3l >>> 16) + (dl >>> 16) + (c1 >>> 16);
          c3 = (h3h & 65535) + (dh & 65535) + (c2 >>> 16);
          c4 = (h3h >>> 16) + (dh >>> 16) + (c3 >>> 16);
          this.h3h = c4 << 16 | c3 & 65535;
          this.h3l = c2 << 16 | c1 & 65535;
          c1 = (h4l & 65535) + (el & 65535);
          c2 = (h4l >>> 16) + (el >>> 16) + (c1 >>> 16);
          c3 = (h4h & 65535) + (eh & 65535) + (c2 >>> 16);
          c4 = (h4h >>> 16) + (eh >>> 16) + (c3 >>> 16);
          this.h4h = c4 << 16 | c3 & 65535;
          this.h4l = c2 << 16 | c1 & 65535;
          c1 = (h5l & 65535) + (fl & 65535);
          c2 = (h5l >>> 16) + (fl >>> 16) + (c1 >>> 16);
          c3 = (h5h & 65535) + (fh & 65535) + (c2 >>> 16);
          c4 = (h5h >>> 16) + (fh >>> 16) + (c3 >>> 16);
          this.h5h = c4 << 16 | c3 & 65535;
          this.h5l = c2 << 16 | c1 & 65535;
          c1 = (h6l & 65535) + (gl & 65535);
          c2 = (h6l >>> 16) + (gl >>> 16) + (c1 >>> 16);
          c3 = (h6h & 65535) + (gh & 65535) + (c2 >>> 16);
          c4 = (h6h >>> 16) + (gh >>> 16) + (c3 >>> 16);
          this.h6h = c4 << 16 | c3 & 65535;
          this.h6l = c2 << 16 | c1 & 65535;
          c1 = (h7l & 65535) + (hl & 65535);
          c2 = (h7l >>> 16) + (hl >>> 16) + (c1 >>> 16);
          c3 = (h7h & 65535) + (hh & 65535) + (c2 >>> 16);
          c4 = (h7h >>> 16) + (hh >>> 16) + (c3 >>> 16);
          this.h7h = c4 << 16 | c3 & 65535;
          this.h7l = c2 << 16 | c1 & 65535;
        };
        Sha512.prototype.hex = function() {
          this.finalize();
          var h0h = this.h0h, h0l = this.h0l, h1h = this.h1h, h1l = this.h1l, h2h = this.h2h, h2l = this.h2l, h3h = this.h3h, h3l = this.h3l, h4h = this.h4h, h4l = this.h4l, h5h = this.h5h, h5l = this.h5l, h6h = this.h6h, h6l = this.h6l, h7h = this.h7h, h7l = this.h7l, bits = this.bits;
          var hex = HEX_CHARS[h0h >> 28 & 15] + HEX_CHARS[h0h >> 24 & 15] + HEX_CHARS[h0h >> 20 & 15] + HEX_CHARS[h0h >> 16 & 15] + HEX_CHARS[h0h >> 12 & 15] + HEX_CHARS[h0h >> 8 & 15] + HEX_CHARS[h0h >> 4 & 15] + HEX_CHARS[h0h & 15] + HEX_CHARS[h0l >> 28 & 15] + HEX_CHARS[h0l >> 24 & 15] + HEX_CHARS[h0l >> 20 & 15] + HEX_CHARS[h0l >> 16 & 15] + HEX_CHARS[h0l >> 12 & 15] + HEX_CHARS[h0l >> 8 & 15] + HEX_CHARS[h0l >> 4 & 15] + HEX_CHARS[h0l & 15] + HEX_CHARS[h1h >> 28 & 15] + HEX_CHARS[h1h >> 24 & 15] + HEX_CHARS[h1h >> 20 & 15] + HEX_CHARS[h1h >> 16 & 15] + HEX_CHARS[h1h >> 12 & 15] + HEX_CHARS[h1h >> 8 & 15] + HEX_CHARS[h1h >> 4 & 15] + HEX_CHARS[h1h & 15] + HEX_CHARS[h1l >> 28 & 15] + HEX_CHARS[h1l >> 24 & 15] + HEX_CHARS[h1l >> 20 & 15] + HEX_CHARS[h1l >> 16 & 15] + HEX_CHARS[h1l >> 12 & 15] + HEX_CHARS[h1l >> 8 & 15] + HEX_CHARS[h1l >> 4 & 15] + HEX_CHARS[h1l & 15] + HEX_CHARS[h2h >> 28 & 15] + HEX_CHARS[h2h >> 24 & 15] + HEX_CHARS[h2h >> 20 & 15] + HEX_CHARS[h2h >> 16 & 15] + HEX_CHARS[h2h >> 12 & 15] + HEX_CHARS[h2h >> 8 & 15] + HEX_CHARS[h2h >> 4 & 15] + HEX_CHARS[h2h & 15] + HEX_CHARS[h2l >> 28 & 15] + HEX_CHARS[h2l >> 24 & 15] + HEX_CHARS[h2l >> 20 & 15] + HEX_CHARS[h2l >> 16 & 15] + HEX_CHARS[h2l >> 12 & 15] + HEX_CHARS[h2l >> 8 & 15] + HEX_CHARS[h2l >> 4 & 15] + HEX_CHARS[h2l & 15] + HEX_CHARS[h3h >> 28 & 15] + HEX_CHARS[h3h >> 24 & 15] + HEX_CHARS[h3h >> 20 & 15] + HEX_CHARS[h3h >> 16 & 15] + HEX_CHARS[h3h >> 12 & 15] + HEX_CHARS[h3h >> 8 & 15] + HEX_CHARS[h3h >> 4 & 15] + HEX_CHARS[h3h & 15];
          if (bits >= 256) {
            hex += HEX_CHARS[h3l >> 28 & 15] + HEX_CHARS[h3l >> 24 & 15] + HEX_CHARS[h3l >> 20 & 15] + HEX_CHARS[h3l >> 16 & 15] + HEX_CHARS[h3l >> 12 & 15] + HEX_CHARS[h3l >> 8 & 15] + HEX_CHARS[h3l >> 4 & 15] + HEX_CHARS[h3l & 15];
          }
          if (bits >= 384) {
            hex += HEX_CHARS[h4h >> 28 & 15] + HEX_CHARS[h4h >> 24 & 15] + HEX_CHARS[h4h >> 20 & 15] + HEX_CHARS[h4h >> 16 & 15] + HEX_CHARS[h4h >> 12 & 15] + HEX_CHARS[h4h >> 8 & 15] + HEX_CHARS[h4h >> 4 & 15] + HEX_CHARS[h4h & 15] + HEX_CHARS[h4l >> 28 & 15] + HEX_CHARS[h4l >> 24 & 15] + HEX_CHARS[h4l >> 20 & 15] + HEX_CHARS[h4l >> 16 & 15] + HEX_CHARS[h4l >> 12 & 15] + HEX_CHARS[h4l >> 8 & 15] + HEX_CHARS[h4l >> 4 & 15] + HEX_CHARS[h4l & 15] + HEX_CHARS[h5h >> 28 & 15] + HEX_CHARS[h5h >> 24 & 15] + HEX_CHARS[h5h >> 20 & 15] + HEX_CHARS[h5h >> 16 & 15] + HEX_CHARS[h5h >> 12 & 15] + HEX_CHARS[h5h >> 8 & 15] + HEX_CHARS[h5h >> 4 & 15] + HEX_CHARS[h5h & 15] + HEX_CHARS[h5l >> 28 & 15] + HEX_CHARS[h5l >> 24 & 15] + HEX_CHARS[h5l >> 20 & 15] + HEX_CHARS[h5l >> 16 & 15] + HEX_CHARS[h5l >> 12 & 15] + HEX_CHARS[h5l >> 8 & 15] + HEX_CHARS[h5l >> 4 & 15] + HEX_CHARS[h5l & 15];
          }
          if (bits == 512) {
            hex += HEX_CHARS[h6h >> 28 & 15] + HEX_CHARS[h6h >> 24 & 15] + HEX_CHARS[h6h >> 20 & 15] + HEX_CHARS[h6h >> 16 & 15] + HEX_CHARS[h6h >> 12 & 15] + HEX_CHARS[h6h >> 8 & 15] + HEX_CHARS[h6h >> 4 & 15] + HEX_CHARS[h6h & 15] + HEX_CHARS[h6l >> 28 & 15] + HEX_CHARS[h6l >> 24 & 15] + HEX_CHARS[h6l >> 20 & 15] + HEX_CHARS[h6l >> 16 & 15] + HEX_CHARS[h6l >> 12 & 15] + HEX_CHARS[h6l >> 8 & 15] + HEX_CHARS[h6l >> 4 & 15] + HEX_CHARS[h6l & 15] + HEX_CHARS[h7h >> 28 & 15] + HEX_CHARS[h7h >> 24 & 15] + HEX_CHARS[h7h >> 20 & 15] + HEX_CHARS[h7h >> 16 & 15] + HEX_CHARS[h7h >> 12 & 15] + HEX_CHARS[h7h >> 8 & 15] + HEX_CHARS[h7h >> 4 & 15] + HEX_CHARS[h7h & 15] + HEX_CHARS[h7l >> 28 & 15] + HEX_CHARS[h7l >> 24 & 15] + HEX_CHARS[h7l >> 20 & 15] + HEX_CHARS[h7l >> 16 & 15] + HEX_CHARS[h7l >> 12 & 15] + HEX_CHARS[h7l >> 8 & 15] + HEX_CHARS[h7l >> 4 & 15] + HEX_CHARS[h7l & 15];
          }
          return hex;
        };
        Sha512.prototype.toString = Sha512.prototype.hex;
        Sha512.prototype.digest = function() {
          this.finalize();
          var h0h = this.h0h, h0l = this.h0l, h1h = this.h1h, h1l = this.h1l, h2h = this.h2h, h2l = this.h2l, h3h = this.h3h, h3l = this.h3l, h4h = this.h4h, h4l = this.h4l, h5h = this.h5h, h5l = this.h5l, h6h = this.h6h, h6l = this.h6l, h7h = this.h7h, h7l = this.h7l, bits = this.bits;
          var arr = [
            h0h >> 24 & 255,
            h0h >> 16 & 255,
            h0h >> 8 & 255,
            h0h & 255,
            h0l >> 24 & 255,
            h0l >> 16 & 255,
            h0l >> 8 & 255,
            h0l & 255,
            h1h >> 24 & 255,
            h1h >> 16 & 255,
            h1h >> 8 & 255,
            h1h & 255,
            h1l >> 24 & 255,
            h1l >> 16 & 255,
            h1l >> 8 & 255,
            h1l & 255,
            h2h >> 24 & 255,
            h2h >> 16 & 255,
            h2h >> 8 & 255,
            h2h & 255,
            h2l >> 24 & 255,
            h2l >> 16 & 255,
            h2l >> 8 & 255,
            h2l & 255,
            h3h >> 24 & 255,
            h3h >> 16 & 255,
            h3h >> 8 & 255,
            h3h & 255
          ];
          if (bits >= 256) {
            arr.push(h3l >> 24 & 255, h3l >> 16 & 255, h3l >> 8 & 255, h3l & 255);
          }
          if (bits >= 384) {
            arr.push(
              h4h >> 24 & 255,
              h4h >> 16 & 255,
              h4h >> 8 & 255,
              h4h & 255,
              h4l >> 24 & 255,
              h4l >> 16 & 255,
              h4l >> 8 & 255,
              h4l & 255,
              h5h >> 24 & 255,
              h5h >> 16 & 255,
              h5h >> 8 & 255,
              h5h & 255,
              h5l >> 24 & 255,
              h5l >> 16 & 255,
              h5l >> 8 & 255,
              h5l & 255
            );
          }
          if (bits == 512) {
            arr.push(
              h6h >> 24 & 255,
              h6h >> 16 & 255,
              h6h >> 8 & 255,
              h6h & 255,
              h6l >> 24 & 255,
              h6l >> 16 & 255,
              h6l >> 8 & 255,
              h6l & 255,
              h7h >> 24 & 255,
              h7h >> 16 & 255,
              h7h >> 8 & 255,
              h7h & 255,
              h7l >> 24 & 255,
              h7l >> 16 & 255,
              h7l >> 8 & 255,
              h7l & 255
            );
          }
          return arr;
        };
        Sha512.prototype.array = Sha512.prototype.digest;
        Sha512.prototype.arrayBuffer = function() {
          this.finalize();
          var bits = this.bits;
          var buffer = new ArrayBuffer(bits / 8);
          var dataView = new DataView(buffer);
          dataView.setUint32(0, this.h0h);
          dataView.setUint32(4, this.h0l);
          dataView.setUint32(8, this.h1h);
          dataView.setUint32(12, this.h1l);
          dataView.setUint32(16, this.h2h);
          dataView.setUint32(20, this.h2l);
          dataView.setUint32(24, this.h3h);
          if (bits >= 256) {
            dataView.setUint32(28, this.h3l);
          }
          if (bits >= 384) {
            dataView.setUint32(32, this.h4h);
            dataView.setUint32(36, this.h4l);
            dataView.setUint32(40, this.h5h);
            dataView.setUint32(44, this.h5l);
          }
          if (bits == 512) {
            dataView.setUint32(48, this.h6h);
            dataView.setUint32(52, this.h6l);
            dataView.setUint32(56, this.h7h);
            dataView.setUint32(60, this.h7l);
          }
          return buffer;
        };
        Sha512.prototype.clone = function() {
          var hash = new Sha512(this.bits, false);
          this.copyTo(hash);
          return hash;
        };
        Sha512.prototype.copyTo = function(hash) {
          var i = 0, attrs = [
            "h0h",
            "h0l",
            "h1h",
            "h1l",
            "h2h",
            "h2l",
            "h3h",
            "h3l",
            "h4h",
            "h4l",
            "h5h",
            "h5l",
            "h6h",
            "h6l",
            "h7h",
            "h7l",
            "start",
            "bytes",
            "hBytes",
            "finalized",
            "hashed",
            "lastByteIndex"
          ];
          for (i = 0; i < attrs.length; ++i) {
            hash[attrs[i]] = this[attrs[i]];
          }
          for (i = 0; i < this.blocks.length; ++i) {
            hash.blocks[i] = this.blocks[i];
          }
        };
        function HmacSha512(key, bits, sharedMemory) {
          var notString, type = typeof key;
          if (type !== "string") {
            if (type === "object") {
              if (key === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
                key = new Uint8Array(key);
              } else if (!Array.isArray(key)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var length = key.length;
          if (!notString) {
            var bytes = [], length = key.length, index = 0, code;
            for (var i = 0; i < length; ++i) {
              code = key.charCodeAt(i);
              if (code < 128) {
                bytes[index++] = code;
              } else if (code < 2048) {
                bytes[index++] = 192 | code >> 6;
                bytes[index++] = 128 | code & 63;
              } else if (code < 55296 || code >= 57344) {
                bytes[index++] = 224 | code >> 12;
                bytes[index++] = 128 | code >> 6 & 63;
                bytes[index++] = 128 | code & 63;
              } else {
                code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i) & 1023);
                bytes[index++] = 240 | code >> 18;
                bytes[index++] = 128 | code >> 12 & 63;
                bytes[index++] = 128 | code >> 6 & 63;
                bytes[index++] = 128 | code & 63;
              }
            }
            key = bytes;
          }
          if (key.length > 128) {
            key = new Sha512(bits, true).update(key).array();
          }
          var oKeyPad = [], iKeyPad = [];
          for (var i = 0; i < 128; ++i) {
            var b = key[i] || 0;
            oKeyPad[i] = 92 ^ b;
            iKeyPad[i] = 54 ^ b;
          }
          Sha512.call(this, bits, sharedMemory);
          this.update(iKeyPad);
          this.oKeyPad = oKeyPad;
          this.inner = true;
          this.sharedMemory = sharedMemory;
        }
        HmacSha512.prototype = new Sha512();
        HmacSha512.prototype.finalize = function() {
          Sha512.prototype.finalize.call(this);
          if (this.inner) {
            this.inner = false;
            var innerHash = this.array();
            Sha512.call(this, this.bits, this.sharedMemory);
            this.update(this.oKeyPad);
            this.update(innerHash);
            Sha512.prototype.finalize.call(this);
          }
        };
        HmacSha512.prototype.clone = function() {
          var hash = new HmacSha512([], this.bits, false);
          this.copyTo(hash);
          hash.inner = this.inner;
          for (var i = 0; i < this.oKeyPad.length; ++i) {
            hash.oKeyPad[i] = this.oKeyPad[i];
          }
          return hash;
        };
        var exports2 = createMethod(512);
        exports2.sha512 = exports2;
        exports2.sha384 = createMethod(384);
        exports2.sha512_256 = createMethod(256);
        exports2.sha512_224 = createMethod(224);
        exports2.sha512.hmac = createHmacMethod(512);
        exports2.sha384.hmac = createHmacMethod(384);
        exports2.sha512_256.hmac = createHmacMethod(256);
        exports2.sha512_224.hmac = createHmacMethod(224);
        if (COMMON_JS) {
          module.exports = exports2;
        } else {
          root.sha512 = exports2.sha512;
          root.sha384 = exports2.sha384;
          root.sha512_256 = exports2.sha512_256;
          root.sha512_224 = exports2.sha512_224;
          if (AMD) {
            define(function() {
              return exports2;
            });
          }
        }
      })();
    }
  });

  // node_modules/bignumber.js/bignumber.js
  var require_bignumber = __commonJS({
    "node_modules/bignumber.js/bignumber.js"(exports, module) {
      (function(globalObject) {
        "use strict";
        var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
        function clone(configObject) {
          var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
            prefix: "",
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ",",
            decimalSeparator: ".",
            fractionGroupSize: 0,
            fractionGroupSeparator: "\xA0",
            // non-breaking space
            suffix: ""
          }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
          function BigNumber2(v, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
            if (!(x instanceof BigNumber2))
              return new BigNumber2(v, b);
            if (b == null) {
              if (v && v._isBigNumber === true) {
                x.s = v.s;
                if (!v.c || v.e > MAX_EXP) {
                  x.c = x.e = null;
                } else if (v.e < MIN_EXP) {
                  x.c = [x.e = 0];
                } else {
                  x.e = v.e;
                  x.c = v.c.slice();
                }
                return;
              }
              if ((isNum = typeof v == "number") && v * 0 == 0) {
                x.s = 1 / v < 0 ? (v = -v, -1) : 1;
                if (v === ~~v) {
                  for (e = 0, i = v; i >= 10; i /= 10, e++)
                    ;
                  if (e > MAX_EXP) {
                    x.c = x.e = null;
                  } else {
                    x.e = e;
                    x.c = [v];
                  }
                  return;
                }
                str = String(v);
              } else {
                if (!isNumeric.test(str = String(v)))
                  return parseNumeric(x, str, isNum);
                x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
              }
              if ((e = str.indexOf(".")) > -1)
                str = str.replace(".", "");
              if ((i = str.search(/e/i)) > 0) {
                if (e < 0)
                  e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
              } else if (e < 0) {
                e = str.length;
              }
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              if (b == 10 && alphabetHasNormalDecimalDigits) {
                x = new BigNumber2(v);
                return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
              }
              str = String(v);
              if (isNum = typeof v == "number") {
                if (v * 0 != 0)
                  return parseNumeric(x, str, isNum, b);
                x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
                if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                  throw Error(tooManyDigits + v);
                }
              } else {
                x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
              }
              alphabet = ALPHABET.slice(0, b);
              e = i = 0;
              for (len = str.length; i < len; i++) {
                if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                  if (c == ".") {
                    if (i > e) {
                      e = len;
                      continue;
                    }
                  } else if (!caseChanged) {
                    if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                      caseChanged = true;
                      i = -1;
                      e = 0;
                      continue;
                    }
                  }
                  return parseNumeric(x, String(v), isNum, b);
                }
              }
              isNum = false;
              str = convertBase(str, b, 10, x.s);
              if ((e = str.indexOf(".")) > -1)
                str = str.replace(".", "");
              else
                e = str.length;
            }
            for (i = 0; str.charCodeAt(i) === 48; i++)
              ;
            for (len = str.length; str.charCodeAt(--len) === 48; )
              ;
            if (str = str.slice(i, ++len)) {
              len -= i;
              if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
                throw Error(tooManyDigits + x.s * v);
              }
              if ((e = e - i - 1) > MAX_EXP) {
                x.c = x.e = null;
              } else if (e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = e;
                x.c = [];
                i = (e + 1) % LOG_BASE;
                if (e < 0)
                  i += LOG_BASE;
                if (i < len) {
                  if (i)
                    x.c.push(+str.slice(0, i));
                  for (len -= LOG_BASE; i < len; ) {
                    x.c.push(+str.slice(i, i += LOG_BASE));
                  }
                  i = LOG_BASE - (str = str.slice(i)).length;
                } else {
                  i -= len;
                }
                for (; i--; str += "0")
                  ;
                x.c.push(+str);
              }
            } else {
              x.c = [x.e = 0];
            }
          }
          BigNumber2.clone = clone;
          BigNumber2.ROUND_UP = 0;
          BigNumber2.ROUND_DOWN = 1;
          BigNumber2.ROUND_CEIL = 2;
          BigNumber2.ROUND_FLOOR = 3;
          BigNumber2.ROUND_HALF_UP = 4;
          BigNumber2.ROUND_HALF_DOWN = 5;
          BigNumber2.ROUND_HALF_EVEN = 6;
          BigNumber2.ROUND_HALF_CEIL = 7;
          BigNumber2.ROUND_HALF_FLOOR = 8;
          BigNumber2.EUCLID = 9;
          BigNumber2.config = BigNumber2.set = function(obj) {
            var p, v;
            if (obj != null) {
              if (typeof obj == "object") {
                if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                  v = obj[p];
                  intCheck(v, 0, MAX, p);
                  DECIMAL_PLACES = v;
                }
                if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                  v = obj[p];
                  intCheck(v, 0, 8, p);
                  ROUNDING_MODE = v;
                }
                if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                  v = obj[p];
                  if (v && v.pop) {
                    intCheck(v[0], -MAX, 0, p);
                    intCheck(v[1], 0, MAX, p);
                    TO_EXP_NEG = v[0];
                    TO_EXP_POS = v[1];
                  } else {
                    intCheck(v, -MAX, MAX, p);
                    TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                  }
                }
                if (obj.hasOwnProperty(p = "RANGE")) {
                  v = obj[p];
                  if (v && v.pop) {
                    intCheck(v[0], -MAX, -1, p);
                    intCheck(v[1], 1, MAX, p);
                    MIN_EXP = v[0];
                    MAX_EXP = v[1];
                  } else {
                    intCheck(v, -MAX, MAX, p);
                    if (v) {
                      MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                    } else {
                      throw Error(bignumberError + p + " cannot be zero: " + v);
                    }
                  }
                }
                if (obj.hasOwnProperty(p = "CRYPTO")) {
                  v = obj[p];
                  if (v === !!v) {
                    if (v) {
                      if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                        CRYPTO = v;
                      } else {
                        CRYPTO = !v;
                        throw Error(bignumberError + "crypto unavailable");
                      }
                    } else {
                      CRYPTO = v;
                    }
                  } else {
                    throw Error(bignumberError + p + " not true or false: " + v);
                  }
                }
                if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                  v = obj[p];
                  intCheck(v, 0, 9, p);
                  MODULO_MODE = v;
                }
                if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                  v = obj[p];
                  intCheck(v, 0, MAX, p);
                  POW_PRECISION = v;
                }
                if (obj.hasOwnProperty(p = "FORMAT")) {
                  v = obj[p];
                  if (typeof v == "object")
                    FORMAT = v;
                  else
                    throw Error(bignumberError + p + " not an object: " + v);
                }
                if (obj.hasOwnProperty(p = "ALPHABET")) {
                  v = obj[p];
                  if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                    alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                    ALPHABET = v;
                  } else {
                    throw Error(bignumberError + p + " invalid: " + v);
                  }
                }
              } else {
                throw Error(bignumberError + "Object expected: " + obj);
              }
            }
            return {
              DECIMAL_PLACES,
              ROUNDING_MODE,
              EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
              RANGE: [MIN_EXP, MAX_EXP],
              CRYPTO,
              MODULO_MODE,
              POW_PRECISION,
              FORMAT,
              ALPHABET
            };
          };
          BigNumber2.isBigNumber = function(v) {
            if (!v || v._isBigNumber !== true)
              return false;
            if (!BigNumber2.DEBUG)
              return true;
            var i, n, c = v.c, e = v.e, s = v.s;
            out:
              if ({}.toString.call(c) == "[object Array]") {
                if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                  if (c[0] === 0) {
                    if (e === 0 && c.length === 1)
                      return true;
                    break out;
                  }
                  i = (e + 1) % LOG_BASE;
                  if (i < 1)
                    i += LOG_BASE;
                  if (String(c[0]).length == i) {
                    for (i = 0; i < c.length; i++) {
                      n = c[i];
                      if (n < 0 || n >= BASE || n !== mathfloor(n))
                        break out;
                    }
                    if (n !== 0)
                      return true;
                  }
                }
              } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
                return true;
              }
            throw Error(bignumberError + "Invalid BigNumber: " + v);
          };
          BigNumber2.maximum = BigNumber2.max = function() {
            return maxOrMin(arguments, -1);
          };
          BigNumber2.minimum = BigNumber2.min = function() {
            return maxOrMin(arguments, 1);
          };
          BigNumber2.random = function() {
            var pow2_53 = 9007199254740992;
            var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
              return mathfloor(Math.random() * pow2_53);
            } : function() {
              return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
            };
            return function(dp) {
              var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
              if (dp == null)
                dp = DECIMAL_PLACES;
              else
                intCheck(dp, 0, MAX);
              k = mathceil(dp / LOG_BASE);
              if (CRYPTO) {
                if (crypto.getRandomValues) {
                  a = crypto.getRandomValues(new Uint32Array(k *= 2));
                  for (; i < k; ) {
                    v = a[i] * 131072 + (a[i + 1] >>> 11);
                    if (v >= 9e15) {
                      b = crypto.getRandomValues(new Uint32Array(2));
                      a[i] = b[0];
                      a[i + 1] = b[1];
                    } else {
                      c.push(v % 1e14);
                      i += 2;
                    }
                  }
                  i = k / 2;
                } else if (crypto.randomBytes) {
                  a = crypto.randomBytes(k *= 7);
                  for (; i < k; ) {
                    v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                    if (v >= 9e15) {
                      crypto.randomBytes(7).copy(a, i);
                    } else {
                      c.push(v % 1e14);
                      i += 7;
                    }
                  }
                  i = k / 7;
                } else {
                  CRYPTO = false;
                  throw Error(bignumberError + "crypto unavailable");
                }
              }
              if (!CRYPTO) {
                for (; i < k; ) {
                  v = random53bitInt();
                  if (v < 9e15)
                    c[i++] = v % 1e14;
                }
              }
              k = c[--i];
              dp %= LOG_BASE;
              if (k && dp) {
                v = POWS_TEN[LOG_BASE - dp];
                c[i] = mathfloor(k / v) * v;
              }
              for (; c[i] === 0; c.pop(), i--)
                ;
              if (i < 0) {
                c = [e = 0];
              } else {
                for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
                  ;
                for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
                  ;
                if (i < LOG_BASE)
                  e -= LOG_BASE - i;
              }
              rand.e = e;
              rand.c = c;
              return rand;
            };
          }();
          BigNumber2.sum = function() {
            var i = 1, args = arguments, sum = new BigNumber2(args[0]);
            for (; i < args.length; )
              sum = sum.plus(args[i++]);
            return sum;
          };
          convertBase = function() {
            var decimal = "0123456789";
            function toBaseOut(str, baseIn, baseOut, alphabet) {
              var j, arr = [0], arrL, i = 0, len = str.length;
              for (; i < len; ) {
                for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                  ;
                arr[0] += alphabet.indexOf(str.charAt(i++));
                for (j = 0; j < arr.length; j++) {
                  if (arr[j] > baseOut - 1) {
                    if (arr[j + 1] == null)
                      arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                  }
                }
              }
              return arr.reverse();
            }
            return function(str, baseIn, baseOut, sign, callerIsToString) {
              var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
              if (i >= 0) {
                k = POW_PRECISION;
                POW_PRECISION = 0;
                str = str.replace(".", "");
                y = new BigNumber2(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;
                y.c = toBaseOut(
                  toFixedPoint(coeffToString(x.c), x.e, "0"),
                  10,
                  baseOut,
                  decimal
                );
                y.e = y.c.length;
              }
              xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
              e = k = xc.length;
              for (; xc[--k] == 0; xc.pop())
                ;
              if (!xc[0])
                return alphabet.charAt(0);
              if (i < 0) {
                --e;
              } else {
                x.c = xc;
                x.e = e;
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
              }
              d = e + dp + 1;
              i = xc[d];
              k = baseOut / 2;
              r = r || d < 0 || xc[d + 1] != null;
              r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
              if (d < 1 || !xc[0]) {
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
              } else {
                xc.length = d;
                if (r) {
                  for (--baseOut; ++xc[--d] > baseOut; ) {
                    xc[d] = 0;
                    if (!d) {
                      ++e;
                      xc = [1].concat(xc);
                    }
                  }
                }
                for (k = xc.length; !xc[--k]; )
                  ;
                for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
                  ;
                str = toFixedPoint(str, e, alphabet.charAt(0));
              }
              return str;
            };
          }();
          div = function() {
            function multiply(x, k, base) {
              var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
              for (x = x.slice(); i--; ) {
                xlo = x[i] % SQRT_BASE;
                xhi = x[i] / SQRT_BASE | 0;
                m = khi * xlo + xhi * klo;
                temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                x[i] = temp % base;
              }
              if (carry)
                x = [carry].concat(x);
              return x;
            }
            function compare2(a, b, aL, bL) {
              var i, cmp;
              if (aL != bL) {
                cmp = aL > bL ? 1 : -1;
              } else {
                for (i = cmp = 0; i < aL; i++) {
                  if (a[i] != b[i]) {
                    cmp = a[i] > b[i] ? 1 : -1;
                    break;
                  }
                }
              }
              return cmp;
            }
            function subtract(a, b, aL, base) {
              var i = 0;
              for (; aL--; ) {
                a[aL] -= i;
                i = a[aL] < b[aL] ? 1 : 0;
                a[aL] = i * base + a[aL] - b[aL];
              }
              for (; !a[0] && a.length > 1; a.splice(0, 1))
                ;
            }
            return function(x, y, dp, rm, base) {
              var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
              if (!xc || !xc[0] || !yc || !yc[0]) {
                return new BigNumber2(
                  // Return NaN if either NaN, or both Infinity or 0.
                  !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                  )
                );
              }
              q = new BigNumber2(s);
              qc = q.c = [];
              e = x.e - y.e;
              s = dp + e + 1;
              if (!base) {
                base = BASE;
                e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                s = s / LOG_BASE | 0;
              }
              for (i = 0; yc[i] == (xc[i] || 0); i++)
                ;
              if (yc[i] > (xc[i] || 0))
                e--;
              if (s < 0) {
                qc.push(1);
                more = true;
              } else {
                xL = xc.length;
                yL = yc.length;
                i = 0;
                s += 2;
                n = mathfloor(base / (yc[0] + 1));
                if (n > 1) {
                  yc = multiply(yc, n, base);
                  xc = multiply(xc, n, base);
                  yL = yc.length;
                  xL = xc.length;
                }
                xi = yL;
                rem = xc.slice(0, yL);
                remL = rem.length;
                for (; remL < yL; rem[remL++] = 0)
                  ;
                yz = yc.slice();
                yz = [0].concat(yz);
                yc0 = yc[0];
                if (yc[1] >= base / 2)
                  yc0++;
                do {
                  n = 0;
                  cmp = compare2(yc, rem, yL, remL);
                  if (cmp < 0) {
                    rem0 = rem[0];
                    if (yL != remL)
                      rem0 = rem0 * base + (rem[1] || 0);
                    n = mathfloor(rem0 / yc0);
                    if (n > 1) {
                      if (n >= base)
                        n = base - 1;
                      prod = multiply(yc, n, base);
                      prodL = prod.length;
                      remL = rem.length;
                      while (compare2(prod, rem, prodL, remL) == 1) {
                        n--;
                        subtract(prod, yL < prodL ? yz : yc, prodL, base);
                        prodL = prod.length;
                        cmp = 1;
                      }
                    } else {
                      if (n == 0) {
                        cmp = n = 1;
                      }
                      prod = yc.slice();
                      prodL = prod.length;
                    }
                    if (prodL < remL)
                      prod = [0].concat(prod);
                    subtract(rem, prod, remL, base);
                    remL = rem.length;
                    if (cmp == -1) {
                      while (compare2(yc, rem, yL, remL) < 1) {
                        n++;
                        subtract(rem, yL < remL ? yz : yc, remL, base);
                        remL = rem.length;
                      }
                    }
                  } else if (cmp === 0) {
                    n++;
                    rem = [0];
                  }
                  qc[i++] = n;
                  if (rem[0]) {
                    rem[remL++] = xc[xi] || 0;
                  } else {
                    rem = [xc[xi]];
                    remL = 1;
                  }
                } while ((xi++ < xL || rem[0] != null) && s--);
                more = rem[0] != null;
                if (!qc[0])
                  qc.splice(0, 1);
              }
              if (base == BASE) {
                for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
                  ;
                round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
              } else {
                q.e = e;
                q.r = +more;
              }
              return q;
            };
          }();
          function format(n, i, rm, id) {
            var c0, e, ne, len, str;
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            if (!n.c)
              return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
              str = coeffToString(n.c);
              str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
            } else {
              n = round(new BigNumber2(n), i, rm);
              e = n.e;
              str = coeffToString(n.c);
              len = str.length;
              if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
                for (; len < i; str += "0", len++)
                  ;
                str = toExponential(str, e);
              } else {
                i -= ne;
                str = toFixedPoint(str, e, "0");
                if (e + 1 > len) {
                  if (--i > 0)
                    for (str += "."; i--; str += "0")
                      ;
                } else {
                  i += e - len;
                  if (i > 0) {
                    if (e + 1 == len)
                      str += ".";
                    for (; i--; str += "0")
                      ;
                  }
                }
              }
            }
            return n.s < 0 && c0 ? "-" + str : str;
          }
          function maxOrMin(args, n) {
            var k, y, i = 1, x = new BigNumber2(args[0]);
            for (; i < args.length; i++) {
              y = new BigNumber2(args[i]);
              if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
                x = y;
              }
            }
            return x;
          }
          function normalise(n, c, e) {
            var i = 1, j = c.length;
            for (; !c[--j]; c.pop())
              ;
            for (j = c[0]; j >= 10; j /= 10, i++)
              ;
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
              n.c = n.e = null;
            } else if (e < MIN_EXP) {
              n.c = [n.e = 0];
            } else {
              n.e = e;
              n.c = c;
            }
            return n;
          }
          parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b) {
              var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
              if (isInfinityOrNaN.test(s)) {
                x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
              } else {
                if (!isNum) {
                  s = s.replace(basePrefix, function(m, p1, p2) {
                    base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                    return !b || b == base ? p1 : m;
                  });
                  if (b) {
                    base = b;
                    s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                  }
                  if (str != s)
                    return new BigNumber2(s, base);
                }
                if (BigNumber2.DEBUG) {
                  throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
                }
                x.s = null;
              }
              x.c = x.e = null;
            };
          }();
          function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            if (xc) {
              out: {
                for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                  ;
                i = sd - d;
                if (i < 0) {
                  i += LOG_BASE;
                  j = sd;
                  n = xc[ni = 0];
                  rd = mathfloor(n / pows10[d - j - 1] % 10);
                } else {
                  ni = mathceil((i + 1) / LOG_BASE);
                  if (ni >= xc.length) {
                    if (r) {
                      for (; xc.length <= ni; xc.push(0))
                        ;
                      n = rd = 0;
                      d = 1;
                      i %= LOG_BASE;
                      j = i - LOG_BASE + 1;
                    } else {
                      break out;
                    }
                  } else {
                    n = k = xc[ni];
                    for (d = 1; k >= 10; k /= 10, d++)
                      ;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + d;
                    rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                  }
                }
                r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                if (sd < 1 || !xc[0]) {
                  xc.length = 0;
                  if (r) {
                    sd -= x.e + 1;
                    xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                    x.e = -sd || 0;
                  } else {
                    xc[0] = x.e = 0;
                  }
                  return x;
                }
                if (i == 0) {
                  xc.length = ni;
                  k = 1;
                  ni--;
                } else {
                  xc.length = ni + 1;
                  k = pows10[LOG_BASE - i];
                  xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                }
                if (r) {
                  for (; ; ) {
                    if (ni == 0) {
                      for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                        ;
                      j = xc[0] += k;
                      for (k = 1; j >= 10; j /= 10, k++)
                        ;
                      if (i != k) {
                        x.e++;
                        if (xc[0] == BASE)
                          xc[0] = 1;
                      }
                      break;
                    } else {
                      xc[ni] += k;
                      if (xc[ni] != BASE)
                        break;
                      xc[ni--] = 0;
                      k = 1;
                    }
                  }
                }
                for (i = xc.length; xc[--i] === 0; xc.pop())
                  ;
              }
              if (x.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (x.e < MIN_EXP) {
                x.c = [x.e = 0];
              }
            }
            return x;
          }
          function valueOf(n) {
            var str, e = n.e;
            if (e === null)
              return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
            return n.s < 0 ? "-" + str : str;
          }
          P.absoluteValue = P.abs = function() {
            var x = new BigNumber2(this);
            if (x.s < 0)
              x.s = 1;
            return x;
          };
          P.comparedTo = function(y, b) {
            return compare(this, new BigNumber2(y, b));
          };
          P.decimalPlaces = P.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
              intCheck(dp, 0, MAX);
              if (rm == null)
                rm = ROUNDING_MODE;
              else
                intCheck(rm, 0, 8);
              return round(new BigNumber2(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c))
              return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            if (v = c[v])
              for (; v % 10 == 0; v /= 10, n--)
                ;
            if (n < 0)
              n = 0;
            return n;
          };
          P.dividedBy = P.div = function(y, b) {
            return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
          };
          P.dividedToIntegerBy = P.idiv = function(y, b) {
            return div(this, new BigNumber2(y, b), 0, 1);
          };
          P.exponentiatedBy = P.pow = function(n, m) {
            var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber2(n);
            if (n.c && !n.isInteger()) {
              throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
            }
            if (m != null)
              m = new BigNumber2(m);
            nIsBig = n.e > 14;
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
              y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
              return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
              if (m.c ? !m.c[0] : !m.s)
                return new BigNumber2(NaN);
              isModExp = !nIsNeg && x.isInteger() && m.isInteger();
              if (isModExp)
                x = x.mod(m);
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
              k = x.s < 0 && isOdd(n) ? -0 : 0;
              if (x.e > -1)
                k = 1 / k;
              return new BigNumber2(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) {
              k = mathceil(POW_PRECISION / LOG_BASE + 2);
            }
            if (nIsBig) {
              half = new BigNumber2(0.5);
              if (nIsNeg)
                n.s = 1;
              nIsOdd = isOdd(n);
            } else {
              i = Math.abs(+valueOf(n));
              nIsOdd = i % 2;
            }
            y = new BigNumber2(ONE);
            for (; ; ) {
              if (nIsOdd) {
                y = y.times(x);
                if (!y.c)
                  break;
                if (k) {
                  if (y.c.length > k)
                    y.c.length = k;
                } else if (isModExp) {
                  y = y.mod(m);
                }
              }
              if (i) {
                i = mathfloor(i / 2);
                if (i === 0)
                  break;
                nIsOdd = i % 2;
              } else {
                n = n.times(half);
                round(n, n.e + 1, 1);
                if (n.e > 14) {
                  nIsOdd = isOdd(n);
                } else {
                  i = +valueOf(n);
                  if (i === 0)
                    break;
                  nIsOdd = i % 2;
                }
              }
              x = x.times(x);
              if (k) {
                if (x.c && x.c.length > k)
                  x.c.length = k;
              } else if (isModExp) {
                x = x.mod(m);
              }
            }
            if (isModExp)
              return y;
            if (nIsNeg)
              y = ONE.div(y);
            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
          };
          P.integerValue = function(rm) {
            var n = new BigNumber2(this);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
          };
          P.isEqualTo = P.eq = function(y, b) {
            return compare(this, new BigNumber2(y, b)) === 0;
          };
          P.isFinite = function() {
            return !!this.c;
          };
          P.isGreaterThan = P.gt = function(y, b) {
            return compare(this, new BigNumber2(y, b)) > 0;
          };
          P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
            return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
          };
          P.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
          };
          P.isLessThan = P.lt = function(y, b) {
            return compare(this, new BigNumber2(y, b)) < 0;
          };
          P.isLessThanOrEqualTo = P.lte = function(y, b) {
            return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
          };
          P.isNaN = function() {
            return !this.s;
          };
          P.isNegative = function() {
            return this.s < 0;
          };
          P.isPositive = function() {
            return this.s > 0;
          };
          P.isZero = function() {
            return !!this.c && this.c[0] == 0;
          };
          P.minus = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            y = new BigNumber2(y, b);
            b = y.s;
            if (!a || !b)
              return new BigNumber2(NaN);
            if (a != b) {
              y.s = -b;
              return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
              if (!xc || !yc)
                return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
              if (!xc[0] || !yc[0]) {
                return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                  // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                  ROUNDING_MODE == 3 ? -0 : 0
                ));
              }
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            if (a = xe - ye) {
              if (xLTy = a < 0) {
                a = -a;
                t = xc;
              } else {
                ye = xe;
                t = yc;
              }
              t.reverse();
              for (b = a; b--; t.push(0))
                ;
              t.reverse();
            } else {
              j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
              for (a = b = 0; b < j; b++) {
                if (xc[b] != yc[b]) {
                  xLTy = xc[b] < yc[b];
                  break;
                }
              }
            }
            if (xLTy) {
              t = xc;
              xc = yc;
              yc = t;
              y.s = -y.s;
            }
            b = (j = yc.length) - (i = xc.length);
            if (b > 0)
              for (; b--; xc[i++] = 0)
                ;
            b = BASE - 1;
            for (; j > a; ) {
              if (xc[--j] < yc[j]) {
                for (i = j; i && !xc[--i]; xc[i] = b)
                  ;
                --xc[i];
                xc[j] += BASE;
              }
              xc[j] -= yc[j];
            }
            for (; xc[0] == 0; xc.splice(0, 1), --ye)
              ;
            if (!xc[0]) {
              y.s = ROUNDING_MODE == 3 ? -1 : 1;
              y.c = [y.e = 0];
              return y;
            }
            return normalise(y, xc, ye);
          };
          P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            y = new BigNumber2(y, b);
            if (!x.c || !y.s || y.c && !y.c[0]) {
              return new BigNumber2(NaN);
            } else if (!y.c || x.c && !x.c[0]) {
              return new BigNumber2(x);
            }
            if (MODULO_MODE == 9) {
              s = y.s;
              y.s = 1;
              q = div(x, y, 0, 3);
              y.s = s;
              q.s *= s;
            } else {
              q = div(x, y, 0, MODULO_MODE);
            }
            y = x.minus(q.times(y));
            if (!y.c[0] && MODULO_MODE == 1)
              y.s = x.s;
            return y;
          };
          P.multipliedBy = P.times = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
            if (!xc || !yc || !xc[0] || !yc[0]) {
              if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                y.c = y.e = y.s = null;
              } else {
                y.s *= x.s;
                if (!xc || !yc) {
                  y.c = y.e = null;
                } else {
                  y.c = [0];
                  y.e = 0;
                }
              }
              return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            if (xcL < ycL) {
              zc = xc;
              xc = yc;
              yc = zc;
              i = xcL;
              xcL = ycL;
              ycL = i;
            }
            for (i = xcL + ycL, zc = []; i--; zc.push(0))
              ;
            base = BASE;
            sqrtBase = SQRT_BASE;
            for (i = ycL; --i >= 0; ) {
              c = 0;
              ylo = yc[i] % sqrtBase;
              yhi = yc[i] / sqrtBase | 0;
              for (k = xcL, j = i + k; j > i; ) {
                xlo = xc[--k] % sqrtBase;
                xhi = xc[k] / sqrtBase | 0;
                m = yhi * xlo + xhi * ylo;
                xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                zc[j--] = xlo % base;
              }
              zc[j] = c;
            }
            if (c) {
              ++e;
            } else {
              zc.splice(0, 1);
            }
            return normalise(y, zc, e);
          };
          P.negated = function() {
            var x = new BigNumber2(this);
            x.s = -x.s || null;
            return x;
          };
          P.plus = function(y, b) {
            var t, x = this, a = x.s;
            y = new BigNumber2(y, b);
            b = y.s;
            if (!a || !b)
              return new BigNumber2(NaN);
            if (a != b) {
              y.s = -b;
              return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
              if (!xc || !yc)
                return new BigNumber2(a / 0);
              if (!xc[0] || !yc[0])
                return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            if (a = xe - ye) {
              if (a > 0) {
                ye = xe;
                t = yc;
              } else {
                a = -a;
                t = xc;
              }
              t.reverse();
              for (; a--; t.push(0))
                ;
              t.reverse();
            }
            a = xc.length;
            b = yc.length;
            if (a - b < 0) {
              t = yc;
              yc = xc;
              xc = t;
              b = a;
            }
            for (a = 0; b; ) {
              a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
              xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
              xc = [a].concat(xc);
              ++ye;
            }
            return normalise(y, xc, ye);
          };
          P.precision = P.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
              intCheck(sd, 1, MAX);
              if (rm == null)
                rm = ROUNDING_MODE;
              else
                intCheck(rm, 0, 8);
              return round(new BigNumber2(x), sd, rm);
            }
            if (!(c = x.c))
              return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
              for (; v % 10 == 0; v /= 10, n--)
                ;
              for (v = c[0]; v >= 10; v /= 10, n++)
                ;
            }
            if (sd && x.e + 1 > n)
              n = x.e + 1;
            return n;
          };
          P.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times("1e" + k);
          };
          P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
            if (s !== 1 || !c || !c[0]) {
              return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            }
            s = Math.sqrt(+valueOf(x));
            if (s == 0 || s == 1 / 0) {
              n = coeffToString(c);
              if ((n.length + e) % 2 == 0)
                n += "0";
              s = Math.sqrt(+n);
              e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
              if (s == 1 / 0) {
                n = "5e" + e;
              } else {
                n = s.toExponential();
                n = n.slice(0, n.indexOf("e") + 1) + e;
              }
              r = new BigNumber2(n);
            } else {
              r = new BigNumber2(s + "");
            }
            if (r.c[0]) {
              e = r.e;
              s = e + dp;
              if (s < 3)
                s = 0;
              for (; ; ) {
                t = r;
                r = half.times(t.plus(div(x, t, dp, 1)));
                if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                  if (r.e < e)
                    --s;
                  n = n.slice(s - 3, s + 1);
                  if (n == "9999" || !rep && n == "4999") {
                    if (!rep) {
                      round(t, t.e + DECIMAL_PLACES + 2, 0);
                      if (t.times(t).eq(x)) {
                        r = t;
                        break;
                      }
                    }
                    dp += 4;
                    s += 4;
                    rep = 1;
                  } else {
                    if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                      round(r, r.e + DECIMAL_PLACES + 2, 1);
                      m = !r.times(r).eq(x);
                    }
                    break;
                  }
                }
              }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
          };
          P.toExponential = function(dp, rm) {
            if (dp != null) {
              intCheck(dp, 0, MAX);
              dp++;
            }
            return format(this, dp, rm, 1);
          };
          P.toFixed = function(dp, rm) {
            if (dp != null) {
              intCheck(dp, 0, MAX);
              dp = dp + this.e + 1;
            }
            return format(this, dp, rm);
          };
          P.toFormat = function(dp, rm, format2) {
            var str, x = this;
            if (format2 == null) {
              if (dp != null && rm && typeof rm == "object") {
                format2 = rm;
                rm = null;
              } else if (dp && typeof dp == "object") {
                format2 = dp;
                dp = rm = null;
              } else {
                format2 = FORMAT;
              }
            } else if (typeof format2 != "object") {
              throw Error(bignumberError + "Argument not an object: " + format2);
            }
            str = x.toFixed(dp, rm);
            if (x.c) {
              var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
              if (g2) {
                i = g1;
                g1 = g2;
                g2 = i;
                len -= i;
              }
              if (g1 > 0 && len > 0) {
                i = len % g1 || g1;
                intPart = intDigits.substr(0, i);
                for (; i < len; i += g1)
                  intPart += groupSeparator + intDigits.substr(i, g1);
                if (g2 > 0)
                  intPart += groupSeparator + intDigits.slice(i);
                if (isNeg)
                  intPart = "-" + intPart;
              }
              str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
                new RegExp("\\d{" + g2 + "}\\B", "g"),
                "$&" + (format2.fractionGroupSeparator || "")
              ) : fractionPart) : intPart;
            }
            return (format2.prefix || "") + str + (format2.suffix || "");
          };
          P.toFraction = function(md) {
            var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
            if (md != null) {
              n = new BigNumber2(md);
              if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
                throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
              }
            }
            if (!xc)
              return new BigNumber2(x);
            d = new BigNumber2(ONE);
            n1 = d0 = new BigNumber2(ONE);
            d1 = n0 = new BigNumber2(ONE);
            s = coeffToString(xc);
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber2(s);
            n0.c[0] = 0;
            for (; ; ) {
              q = div(n, d, 0, 1);
              d2 = d0.plus(q.times(d1));
              if (d2.comparedTo(md) == 1)
                break;
              d0 = d1;
              d1 = d2;
              n1 = n0.plus(q.times(d2 = n1));
              n0 = d2;
              d = n.minus(q.times(d2 = d));
              n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e = e * 2;
            r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
              div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
            ) < 1 ? [n1, d1] : [n0, d0];
            MAX_EXP = exp;
            return r;
          };
          P.toNumber = function() {
            return +valueOf(this);
          };
          P.toPrecision = function(sd, rm) {
            if (sd != null)
              intCheck(sd, 1, MAX);
            return format(this, sd, rm, 2);
          };
          P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            if (e === null) {
              if (s) {
                str = "Infinity";
                if (s < 0)
                  str = "-" + str;
              } else {
                str = "NaN";
              }
            } else {
              if (b == null) {
                str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
              } else if (b === 10 && alphabetHasNormalDecimalDigits) {
                n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                str = toFixedPoint(coeffToString(n.c), n.e, "0");
              } else {
                intCheck(b, 2, ALPHABET.length, "Base");
                str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
              }
              if (s < 0 && n.c[0])
                str = "-" + str;
            }
            return str;
          };
          P.valueOf = P.toJSON = function() {
            return valueOf(this);
          };
          P._isBigNumber = true;
          if (configObject != null)
            BigNumber2.set(configObject);
          return BigNumber2;
        }
        function bitFloor(n) {
          var i = n | 0;
          return n > 0 || n === i ? i : i - 1;
        }
        function coeffToString(a) {
          var s, z, i = 1, j = a.length, r = a[0] + "";
          for (; i < j; ) {
            s = a[i++] + "";
            z = LOG_BASE - s.length;
            for (; z--; s = "0" + s)
              ;
            r += s;
          }
          for (j = r.length; r.charCodeAt(--j) === 48; )
            ;
          return r.slice(0, j + 1 || 1);
        }
        function compare(x, y) {
          var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
          if (!i || !j)
            return null;
          a = xc && !xc[0];
          b = yc && !yc[0];
          if (a || b)
            return a ? b ? 0 : -j : i;
          if (i != j)
            return i;
          a = i < 0;
          b = k == l;
          if (!xc || !yc)
            return b ? 0 : !xc ^ a ? 1 : -1;
          if (!b)
            return k > l ^ a ? 1 : -1;
          j = (k = xc.length) < (l = yc.length) ? k : l;
          for (i = 0; i < j; i++)
            if (xc[i] != yc[i])
              return xc[i] > yc[i] ^ a ? 1 : -1;
          return k == l ? 0 : k > l ^ a ? 1 : -1;
        }
        function intCheck(n, min, max, name) {
          if (n < min || n > max || n !== mathfloor(n)) {
            throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
          }
        }
        function isOdd(n) {
          var k = n.c.length - 1;
          return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
        }
        function toExponential(str, e) {
          return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
        }
        function toFixedPoint(str, e, z) {
          var len, zs;
          if (e < 0) {
            for (zs = z + "."; ++e; zs += z)
              ;
            str = zs + str;
          } else {
            len = str.length;
            if (++e > len) {
              for (zs = z, e -= len; --e; zs += z)
                ;
              str += zs;
            } else if (e < len) {
              str = str.slice(0, e) + "." + str.slice(e);
            }
          }
          return str;
        }
        BigNumber = clone();
        BigNumber["default"] = BigNumber.BigNumber = BigNumber;
        if (typeof define == "function" && define.amd) {
          define(function() {
            return BigNumber;
          });
        } else if (typeof module != "undefined" && module.exports) {
          module.exports = BigNumber;
        } else {
          if (!globalObject) {
            globalObject = typeof self != "undefined" && self ? self : window;
          }
          globalObject.BigNumber = BigNumber;
        }
      })(exports);
    }
  });

  // node_modules/json-bigint/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/json-bigint/lib/stringify.js"(exports, module) {
      var BigNumber = require_bignumber();
      var JSON2 = module.exports;
      (function() {
        "use strict";
        function f(n) {
          return n < 10 ? "0" + n : n;
        }
        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
          // table of character substitutions
          "\b": "\\b",
          "	": "\\t",
          "\n": "\\n",
          "\f": "\\f",
          "\r": "\\r",
          '"': '\\"',
          "\\": "\\\\"
        }, rep;
        function quote(string) {
          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
        }
        function str(key, holder) {
          var i, k, v, length, mind = gap, partial, value = holder[key], isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));
          if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key);
          }
          if (typeof rep === "function") {
            value = rep.call(holder, key, value);
          }
          switch (typeof value) {
            case "string":
              if (isBigNumber) {
                return value;
              } else {
                return quote(value);
              }
            case "number":
              return isFinite(value) ? String(value) : "null";
            case "boolean":
            case "null":
            case "bigint":
              return String(value);
            case "object":
              if (!value) {
                return "null";
              }
              gap += indent;
              partial = [];
              if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                  partial[i] = str(i, value) || "null";
                }
                v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
              }
              if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                  if (typeof rep[i] === "string") {
                    k = rep[i];
                    v = str(k, value);
                    if (v) {
                      partial.push(quote(k) + (gap ? ": " : ":") + v);
                    }
                  }
                }
              } else {
                Object.keys(value).forEach(function(k2) {
                  var v2 = str(k2, value);
                  if (v2) {
                    partial.push(quote(k2) + (gap ? ": " : ":") + v2);
                  }
                });
              }
              v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
              gap = mind;
              return v;
          }
        }
        if (typeof JSON2.stringify !== "function") {
          JSON2.stringify = function(value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
              for (i = 0; i < space; i += 1) {
                indent += " ";
              }
            } else if (typeof space === "string") {
              indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
              throw new Error("JSON.stringify");
            }
            return str("", { "": value });
          };
        }
      })();
    }
  });

  // node_modules/json-bigint/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/json-bigint/lib/parse.js"(exports, module) {
      var BigNumber = null;
      var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
      var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
      var json_parse = function(options) {
        "use strict";
        var _options = {
          strict: false,
          // not being strict means do not generate syntax errors for "duplicate key"
          storeAsString: false,
          // toggles whether the values should be stored as BigNumber (default) or a string
          alwaysParseAsBig: false,
          // toggles whether all numbers should be Big
          useNativeBigInt: false,
          // toggles whether to use native BigInt instead of bignumber.js
          protoAction: "error",
          constructorAction: "error"
        };
        if (options !== void 0 && options !== null) {
          if (options.strict === true) {
            _options.strict = true;
          }
          if (options.storeAsString === true) {
            _options.storeAsString = true;
          }
          _options.alwaysParseAsBig = options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
          _options.useNativeBigInt = options.useNativeBigInt === true ? options.useNativeBigInt : false;
          if (typeof options.constructorAction !== "undefined") {
            if (options.constructorAction === "error" || options.constructorAction === "ignore" || options.constructorAction === "preserve") {
              _options.constructorAction = options.constructorAction;
            } else {
              throw new Error(
                `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
              );
            }
          }
          if (typeof options.protoAction !== "undefined") {
            if (options.protoAction === "error" || options.protoAction === "ignore" || options.protoAction === "preserve") {
              _options.protoAction = options.protoAction;
            } else {
              throw new Error(
                `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
              );
            }
          }
        }
        var at, ch, escapee = {
          '"': '"',
          "\\": "\\",
          "/": "/",
          b: "\b",
          f: "\f",
          n: "\n",
          r: "\r",
          t: "	"
        }, text, error = function(m) {
          throw {
            name: "SyntaxError",
            message: m,
            at,
            text
          };
        }, next = function(c) {
          if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
          }
          ch = text.charAt(at);
          at += 1;
          return ch;
        }, number = function() {
          var number2, string2 = "";
          if (ch === "-") {
            string2 = "-";
            next("-");
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next();
          }
          if (ch === ".") {
            string2 += ".";
            while (next() && ch >= "0" && ch <= "9") {
              string2 += ch;
            }
          }
          if (ch === "e" || ch === "E") {
            string2 += ch;
            next();
            if (ch === "-" || ch === "+") {
              string2 += ch;
              next();
            }
            while (ch >= "0" && ch <= "9") {
              string2 += ch;
              next();
            }
          }
          number2 = +string2;
          if (!isFinite(number2)) {
            error("Bad number");
          } else {
            if (BigNumber == null)
              BigNumber = require_bignumber();
            if (string2.length > 15)
              return _options.storeAsString ? string2 : _options.useNativeBigInt ? BigInt(string2) : new BigNumber(string2);
            else
              return !_options.alwaysParseAsBig ? number2 : _options.useNativeBigInt ? BigInt(number2) : new BigNumber(number2);
          }
        }, string = function() {
          var hex, i, string2 = "", uffff;
          if (ch === '"') {
            var startAt = at;
            while (next()) {
              if (ch === '"') {
                if (at - 1 > startAt)
                  string2 += text.substring(startAt, at - 1);
                next();
                return string2;
              }
              if (ch === "\\") {
                if (at - 1 > startAt)
                  string2 += text.substring(startAt, at - 1);
                next();
                if (ch === "u") {
                  uffff = 0;
                  for (i = 0; i < 4; i += 1) {
                    hex = parseInt(next(), 16);
                    if (!isFinite(hex)) {
                      break;
                    }
                    uffff = uffff * 16 + hex;
                  }
                  string2 += String.fromCharCode(uffff);
                } else if (typeof escapee[ch] === "string") {
                  string2 += escapee[ch];
                } else {
                  break;
                }
                startAt = at;
              }
            }
          }
          error("Bad string");
        }, white = function() {
          while (ch && ch <= " ") {
            next();
          }
        }, word = function() {
          switch (ch) {
            case "t":
              next("t");
              next("r");
              next("u");
              next("e");
              return true;
            case "f":
              next("f");
              next("a");
              next("l");
              next("s");
              next("e");
              return false;
            case "n":
              next("n");
              next("u");
              next("l");
              next("l");
              return null;
          }
          error("Unexpected '" + ch + "'");
        }, value, array = function() {
          var array2 = [];
          if (ch === "[") {
            next("[");
            white();
            if (ch === "]") {
              next("]");
              return array2;
            }
            while (ch) {
              array2.push(value());
              white();
              if (ch === "]") {
                next("]");
                return array2;
              }
              next(",");
              white();
            }
          }
          error("Bad array");
        }, object = function() {
          var key, object2 = /* @__PURE__ */ Object.create(null);
          if (ch === "{") {
            next("{");
            white();
            if (ch === "}") {
              next("}");
              return object2;
            }
            while (ch) {
              key = string();
              white();
              next(":");
              if (_options.strict === true && Object.hasOwnProperty.call(object2, key)) {
                error('Duplicate key "' + key + '"');
              }
              if (suspectProtoRx.test(key) === true) {
                if (_options.protoAction === "error") {
                  error("Object contains forbidden prototype property");
                } else if (_options.protoAction === "ignore") {
                  value();
                } else {
                  object2[key] = value();
                }
              } else if (suspectConstructorRx.test(key) === true) {
                if (_options.constructorAction === "error") {
                  error("Object contains forbidden constructor property");
                } else if (_options.constructorAction === "ignore") {
                  value();
                } else {
                  object2[key] = value();
                }
              } else {
                object2[key] = value();
              }
              white();
              if (ch === "}") {
                next("}");
                return object2;
              }
              next(",");
              white();
            }
          }
          error("Bad object");
        };
        value = function() {
          white();
          switch (ch) {
            case "{":
              return object();
            case "[":
              return array();
            case '"':
              return string();
            case "-":
              return number();
            default:
              return ch >= "0" && ch <= "9" ? number() : word();
          }
        };
        return function(source, reviver) {
          var result;
          text = source + "";
          at = 0;
          ch = " ";
          result = value();
          white();
          if (ch) {
            error("Syntax error");
          }
          return typeof reviver === "function" ? function walk(holder, key) {
            var k, v, value2 = holder[key];
            if (value2 && typeof value2 === "object") {
              Object.keys(value2).forEach(function(k2) {
                v = walk(value2, k2);
                if (v !== void 0) {
                  value2[k2] = v;
                } else {
                  delete value2[k2];
                }
              });
            }
            return reviver.call(holder, key, value2);
          }({ "": result }, "") : result;
        };
      };
      module.exports = json_parse;
    }
  });

  // node_modules/json-bigint/index.js
  var require_json_bigint = __commonJS({
    "node_modules/json-bigint/index.js"(exports, module) {
      var json_stringify = require_stringify().stringify;
      var json_parse = require_parse();
      module.exports = function(options) {
        return {
          parse: json_parse(options),
          stringify: json_stringify
        };
      };
      module.exports.parse = json_parse();
      module.exports.stringify = json_stringify;
    }
  });

  // node_modules/algosdk/dist/cjs/types/intDecoding.js
  var require_intDecoding = __commonJS({
    "node_modules/algosdk/dist/cjs/types/intDecoding.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var IntDecoding;
      (function(IntDecoding2) {
        IntDecoding2["DEFAULT"] = "default";
        IntDecoding2["SAFE"] = "safe";
        IntDecoding2["MIXED"] = "mixed";
        IntDecoding2["BIGINT"] = "bigint";
      })(IntDecoding || (IntDecoding = {}));
      exports.default = IntDecoding;
    }
  });

  // node_modules/algosdk/dist/cjs/utils/utils.js
  var require_utils = __commonJS({
    "node_modules/algosdk/dist/cjs/utils/utils.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isReactNative = exports.isNode = exports.removeUndefinedProperties = exports.concatArrays = exports.arrayEqual = exports.parseJSON = void 0;
      var json_bigint_1 = __importDefault2(require_json_bigint());
      var intDecoding_1 = __importDefault2(require_intDecoding());
      var JSONbig = (0, json_bigint_1.default)({ useNativeBigInt: true, strict: true });
      function parseJSON(str, options) {
        const intDecoding = options && options.intDecoding ? options.intDecoding : intDecoding_1.default.DEFAULT;
        return JSONbig.parse(str, (_, value) => {
          if (value != null && typeof value === "object" && Object.getPrototypeOf(value) == null) {
            Object.setPrototypeOf(value, Object.prototype);
          }
          if (typeof value === "bigint") {
            if (intDecoding === "safe" && value > Number.MAX_SAFE_INTEGER) {
              throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);
            }
            if (intDecoding === "bigint" || intDecoding === "mixed" && value > Number.MAX_SAFE_INTEGER) {
              return value;
            }
            return Number(value);
          }
          if (typeof value === "number") {
            if (intDecoding === "bigint" && Number.isInteger(value)) {
              return BigInt(value);
            }
          }
          return value;
        });
      }
      exports.parseJSON = parseJSON;
      function arrayEqual(a, b) {
        if (a.length !== b.length) {
          return false;
        }
        return Array.from(a).every((val, i) => val === b[i]);
      }
      exports.arrayEqual = arrayEqual;
      function concatArrays2(...arrs) {
        const size = arrs.reduce((sum, arr) => sum + arr.length, 0);
        const c = new Uint8Array(size);
        let offset = 0;
        for (let i = 0; i < arrs.length; i++) {
          c.set(arrs[i], offset);
          offset += arrs[i].length;
        }
        return c;
      }
      exports.concatArrays = concatArrays2;
      function removeUndefinedProperties(obj) {
        const mutableCopy = { ...obj };
        Object.keys(mutableCopy).forEach((key) => {
          if (typeof mutableCopy[key] === "undefined")
            delete mutableCopy[key];
        });
        return mutableCopy;
      }
      exports.removeUndefinedProperties = removeUndefinedProperties;
      function isNode3() {
        return (
          // @ts-ignore
          typeof process === "object" && // @ts-ignore
          typeof process.versions === "object" && // @ts-ignore
          typeof process.versions.node !== "undefined"
        );
      }
      exports.isNode = isNode3;
      function isReactNative() {
        const { navigator: navigator2 } = globalThis;
        if (typeof navigator2 === "object" && navigator2.product === "ReactNative") {
          return true;
        }
        return false;
      }
      exports.isReactNative = isReactNative;
    }
  });

  // node_modules/algosdk/dist/cjs/nacl/naclWrappers.js
  var require_naclWrappers = __commonJS({
    "node_modules/algosdk/dist/cjs/nacl/naclWrappers.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SEED_BTYES_LENGTH = exports.HASH_BYTES_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.verify = exports.bytesEqual = exports.sign = exports.keyPairFromSecretKey = exports.isValidSignatureLength = exports.keyPair = exports.keyPairFromSeed = exports.randomBytes = exports.genericHash = void 0;
      var tweetnacl_1 = __importDefault2(require_nacl_fast());
      var js_sha512_1 = __importDefault2(require_sha512());
      var utils_1 = require_utils();
      function genericHash(arr) {
        return js_sha512_1.default.sha512_256.array(arr);
      }
      exports.genericHash = genericHash;
      function randomBytes2(length) {
        if ((0, utils_1.isReactNative)()) {
          console.warn(`It looks like you're running in react-native. In order to perform common crypto operations you will need to polyfill common operations such as crypto.getRandomValues`);
        }
        return tweetnacl_1.default.randomBytes(length);
      }
      exports.randomBytes = randomBytes2;
      function keyPairFromSeed(seed) {
        return tweetnacl_1.default.sign.keyPair.fromSeed(seed);
      }
      exports.keyPairFromSeed = keyPairFromSeed;
      function keyPair() {
        const seed = randomBytes2(tweetnacl_1.default.box.secretKeyLength);
        return keyPairFromSeed(seed);
      }
      exports.keyPair = keyPair;
      function isValidSignatureLength(len) {
        return len === tweetnacl_1.default.sign.signatureLength;
      }
      exports.isValidSignatureLength = isValidSignatureLength;
      function keyPairFromSecretKey(sk) {
        return tweetnacl_1.default.sign.keyPair.fromSecretKey(sk);
      }
      exports.keyPairFromSecretKey = keyPairFromSecretKey;
      function sign(msg, secretKey) {
        return tweetnacl_1.default.sign.detached(msg, secretKey);
      }
      exports.sign = sign;
      function bytesEqual(a, b) {
        return tweetnacl_1.default.verify(a, b);
      }
      exports.bytesEqual = bytesEqual;
      function verify(message, signature, verifyKey) {
        return tweetnacl_1.default.sign.detached.verify(message, signature, verifyKey);
      }
      exports.verify = verify;
      exports.PUBLIC_KEY_LENGTH = tweetnacl_1.default.sign.publicKeyLength;
      exports.SECRET_KEY_LENGTH = tweetnacl_1.default.sign.secretKeyLength;
      exports.HASH_BYTES_LENGTH = 32;
      exports.SEED_BTYES_LENGTH = 32;
    }
  });

  // node_modules/hi-base32/src/base32.js
  var require_base32 = __commonJS({
    "node_modules/hi-base32/src/base32.js"(exports, module) {
      (function() {
        "use strict";
        var root = typeof window === "object" ? window : {};
        var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
          root = window;
        }
        var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === "object" && module.exports;
        var AMD = typeof define === "function" && define.amd;
        var BASE32_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567".split("");
        var BASE32_DECODE_CHAR = {
          "A": 0,
          "B": 1,
          "C": 2,
          "D": 3,
          "E": 4,
          "F": 5,
          "G": 6,
          "H": 7,
          "I": 8,
          "J": 9,
          "K": 10,
          "L": 11,
          "M": 12,
          "N": 13,
          "O": 14,
          "P": 15,
          "Q": 16,
          "R": 17,
          "S": 18,
          "T": 19,
          "U": 20,
          "V": 21,
          "W": 22,
          "X": 23,
          "Y": 24,
          "Z": 25,
          "2": 26,
          "3": 27,
          "4": 28,
          "5": 29,
          "6": 30,
          "7": 31
        };
        var blocks = [0, 0, 0, 0, 0, 0, 0, 0];
        var throwInvalidUtf8 = function(position, partial) {
          if (partial.length > 10) {
            partial = "..." + partial.substr(-10);
          }
          var err = new Error("Decoded data is not valid UTF-8. Maybe try base32.decode.asBytes()? Partial data after reading " + position + " bytes: " + partial + " <-");
          err.position = position;
          throw err;
        };
        var toUtf8String = function(bytes) {
          var str = "", length = bytes.length, i = 0, followingChars = 0, b, c;
          while (i < length) {
            b = bytes[i++];
            if (b <= 127) {
              str += String.fromCharCode(b);
              continue;
            } else if (b > 191 && b <= 223) {
              c = b & 31;
              followingChars = 1;
            } else if (b <= 239) {
              c = b & 15;
              followingChars = 2;
            } else if (b <= 247) {
              c = b & 7;
              followingChars = 3;
            } else {
              throwInvalidUtf8(i, str);
            }
            for (var j = 0; j < followingChars; ++j) {
              b = bytes[i++];
              if (b < 128 || b > 191) {
                throwInvalidUtf8(i, str);
              }
              c <<= 6;
              c += b & 63;
            }
            if (c >= 55296 && c <= 57343) {
              throwInvalidUtf8(i, str);
            }
            if (c > 1114111) {
              throwInvalidUtf8(i, str);
            }
            if (c <= 65535) {
              str += String.fromCharCode(c);
            } else {
              c -= 65536;
              str += String.fromCharCode((c >> 10) + 55296);
              str += String.fromCharCode((c & 1023) + 56320);
            }
          }
          return str;
        };
        var decodeAsBytes = function(base32Str) {
          if (base32Str === "") {
            return [];
          } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {
            throw new Error("Invalid base32 characters");
          }
          base32Str = base32Str.replace(/=/g, "");
          var v1, v2, v3, v4, v5, v6, v7, v8, bytes = [], index = 0, length = base32Str.length;
          for (var i = 0, count = length >> 3 << 3; i < count; ) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
            bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
            bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
            bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;
            bytes[index++] = (v7 << 5 | v8) & 255;
          }
          var remain = length - count;
          if (remain === 2) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
          } else if (remain === 4) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
            bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
          } else if (remain === 5) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
            bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
            bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
          } else if (remain === 7) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;
            bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;
            bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;
            bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;
          }
          return bytes;
        };
        var encodeAscii = function(str) {
          var v1, v2, v3, v4, v5, base32Str = "", length = str.length;
          for (var i = 0, count = parseInt(length / 5) * 5; i < count; ) {
            v1 = str.charCodeAt(i++);
            v2 = str.charCodeAt(i++);
            v3 = str.charCodeAt(i++);
            v4 = str.charCodeAt(i++);
            v5 = str.charCodeAt(i++);
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];
          }
          var remain = length - count;
          if (remain === 1) {
            v1 = str.charCodeAt(i);
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + "======";
          } else if (remain === 2) {
            v1 = str.charCodeAt(i++);
            v2 = str.charCodeAt(i);
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + "====";
          } else if (remain === 3) {
            v1 = str.charCodeAt(i++);
            v2 = str.charCodeAt(i++);
            v3 = str.charCodeAt(i);
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + "===";
          } else if (remain === 4) {
            v1 = str.charCodeAt(i++);
            v2 = str.charCodeAt(i++);
            v3 = str.charCodeAt(i++);
            v4 = str.charCodeAt(i);
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + "=";
          }
          return base32Str;
        };
        var encodeUtf8 = function(str) {
          var v1, v2, v3, v4, v5, code, end = false, base32Str = "", index = 0, i, start = 0, bytes = 0, length = str.length;
          if (str === "") {
            return base32Str;
          }
          do {
            blocks[0] = blocks[5];
            blocks[1] = blocks[6];
            blocks[2] = blocks[7];
            for (i = start; index < length && i < 5; ++index) {
              code = str.charCodeAt(index);
              if (code < 128) {
                blocks[i++] = code;
              } else if (code < 2048) {
                blocks[i++] = 192 | code >> 6;
                blocks[i++] = 128 | code & 63;
              } else if (code < 55296 || code >= 57344) {
                blocks[i++] = 224 | code >> 12;
                blocks[i++] = 128 | code >> 6 & 63;
                blocks[i++] = 128 | code & 63;
              } else {
                code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++index) & 1023);
                blocks[i++] = 240 | code >> 18;
                blocks[i++] = 128 | code >> 12 & 63;
                blocks[i++] = 128 | code >> 6 & 63;
                blocks[i++] = 128 | code & 63;
              }
            }
            bytes += i - start;
            start = i - 5;
            if (index === length) {
              ++index;
            }
            if (index > length && i < 6) {
              end = true;
            }
            v1 = blocks[0];
            if (i > 4) {
              v2 = blocks[1];
              v3 = blocks[2];
              v4 = blocks[3];
              v5 = blocks[4];
              base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];
            } else if (i === 1) {
              base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + "======";
            } else if (i === 2) {
              v2 = blocks[1];
              base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + "====";
            } else if (i === 3) {
              v2 = blocks[1];
              v3 = blocks[2];
              base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + "===";
            } else {
              v2 = blocks[1];
              v3 = blocks[2];
              v4 = blocks[3];
              base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + "=";
            }
          } while (!end);
          return base32Str;
        };
        var encodeBytes = function(bytes) {
          var v1, v2, v3, v4, v5, base32Str = "", length = bytes.length;
          for (var i = 0, count = parseInt(length / 5) * 5; i < count; ) {
            v1 = bytes[i++];
            v2 = bytes[i++];
            v3 = bytes[i++];
            v4 = bytes[i++];
            v5 = bytes[i++];
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];
          }
          var remain = length - count;
          if (remain === 1) {
            v1 = bytes[i];
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + "======";
          } else if (remain === 2) {
            v1 = bytes[i++];
            v2 = bytes[i];
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + "====";
          } else if (remain === 3) {
            v1 = bytes[i++];
            v2 = bytes[i++];
            v3 = bytes[i];
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + "===";
          } else if (remain === 4) {
            v1 = bytes[i++];
            v2 = bytes[i++];
            v3 = bytes[i++];
            v4 = bytes[i];
            base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + "=";
          }
          return base32Str;
        };
        var encode = function(input, asciiOnly) {
          var notString = typeof input !== "string";
          if (notString && input.constructor === ArrayBuffer) {
            input = new Uint8Array(input);
          }
          if (notString) {
            return encodeBytes(input);
          } else if (asciiOnly) {
            return encodeAscii(input);
          } else {
            return encodeUtf8(input);
          }
        };
        var decode = function(base32Str, asciiOnly) {
          if (!asciiOnly) {
            return toUtf8String(decodeAsBytes(base32Str));
          }
          if (base32Str === "") {
            return "";
          } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {
            throw new Error("Invalid base32 characters");
          }
          var v1, v2, v3, v4, v5, v6, v7, v8, str = "", length = base32Str.indexOf("=");
          if (length === -1) {
            length = base32Str.length;
          }
          for (var i = 0, count = length >> 3 << 3; i < count; ) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) + String.fromCharCode((v7 << 5 | v8) & 255);
          }
          var remain = length - count;
          if (remain === 2) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);
          } else if (remain === 4) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);
          } else if (remain === 5) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);
          } else if (remain === 7) {
            v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];
            str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);
          }
          return str;
        };
        var exports2 = {
          encode,
          decode
        };
        decode.asBytes = decodeAsBytes;
        if (COMMON_JS) {
          module.exports = exports2;
        } else {
          root.base32 = exports2;
          if (AMD) {
            define(function() {
              return exports2;
            });
          }
        }
      })();
    }
  });

  // node_modules/algosdk/dist/cjs/encoding/uint64.js
  var require_uint64 = __commonJS({
    "node_modules/algosdk/dist/cjs/encoding/uint64.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeUint64 = exports.encodeUint64 = void 0;
      var utils_1 = require_utils();
      function encodeUint64(num) {
        const isInteger = typeof num === "bigint" || Number.isInteger(num);
        if (!isInteger || num < 0 || num > BigInt("0xffffffffffffffff")) {
          throw new Error("Input is not a 64-bit unsigned integer");
        }
        const encoding = new Uint8Array(8);
        const view = new DataView(encoding.buffer);
        view.setBigUint64(0, BigInt(num));
        return encoding;
      }
      exports.encodeUint64 = encodeUint64;
      function decodeUint64(data, decodingMode = "safe") {
        if (decodingMode !== "safe" && decodingMode !== "mixed" && decodingMode !== "bigint") {
          throw new Error(`Unknown decodingMode option: ${decodingMode}`);
        }
        if (data.byteLength === 0 || data.byteLength > 8) {
          throw new Error(`Data has unacceptable length. Expected length is between 1 and 8, got ${data.byteLength}`);
        }
        const padding = new Uint8Array(8 - data.byteLength);
        const encoding = (0, utils_1.concatArrays)(padding, data);
        const view = new DataView(encoding.buffer);
        const num = view.getBigUint64(0);
        const isBig = num > BigInt(Number.MAX_SAFE_INTEGER);
        if (decodingMode === "safe") {
          if (isBig) {
            throw new Error(`Integer exceeds maximum safe integer: ${num.toString()}. Try decoding with "mixed" or "safe" decodingMode.`);
          }
          return Number(num);
        }
        if (decodingMode === "mixed" && !isBig) {
          return Number(num);
        }
        return num;
      }
      exports.decodeUint64 = decodeUint64;
    }
  });

  // node_modules/algosdk/dist/cjs/encoding/address.js
  var require_address = __commonJS({
    "node_modules/algosdk/dist/cjs/encoding/address.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getApplicationAddress = exports.fromMultisigPreImgAddrs = exports.fromMultisigPreImg = exports.encodeAddress = exports.isValidAddress = exports.decodeAddress = exports.UNEXPECTED_PK_LEN_ERROR_MSG = exports.INVALID_MSIG_PK_ERROR_MSG = exports.INVALID_MSIG_THRESHOLD_ERROR_MSG = exports.INVALID_MSIG_VERSION_ERROR_MSG = exports.CHECKSUM_ADDRESS_ERROR_MSG = exports.MALFORMED_ADDRESS_ERROR_MSG = exports.ALGORAND_ZERO_ADDRESS_STRING = void 0;
      var buffer_1 = require_buffer2();
      var hi_base32_1 = __importDefault2(require_base32());
      var nacl = __importStar2(require_naclWrappers());
      var utils = __importStar2(require_utils());
      var uint64_1 = require_uint64();
      var ALGORAND_ADDRESS_BYTE_LENGTH = 36;
      var ALGORAND_CHECKSUM_BYTE_LENGTH = 4;
      var ALGORAND_ADDRESS_LENGTH = 58;
      exports.ALGORAND_ZERO_ADDRESS_STRING = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
      var MULTISIG_PREIMG2ADDR_PREFIX = new Uint8Array([
        77,
        117,
        108,
        116,
        105,
        115,
        105,
        103,
        65,
        100,
        100,
        114
      ]);
      var APP_ID_PREFIX = buffer_1.Buffer.from("appID");
      exports.MALFORMED_ADDRESS_ERROR_MSG = "address seems to be malformed";
      exports.CHECKSUM_ADDRESS_ERROR_MSG = "wrong checksum for address";
      exports.INVALID_MSIG_VERSION_ERROR_MSG = "invalid multisig version";
      exports.INVALID_MSIG_THRESHOLD_ERROR_MSG = "bad multisig threshold";
      exports.INVALID_MSIG_PK_ERROR_MSG = "bad multisig public key - wrong length";
      exports.UNEXPECTED_PK_LEN_ERROR_MSG = "nacl public key length is not 32 bytes";
      function decodeAddress(address) {
        if (typeof address !== "string" || address.length !== ALGORAND_ADDRESS_LENGTH)
          throw new Error(exports.MALFORMED_ADDRESS_ERROR_MSG);
        const decoded = hi_base32_1.default.decode.asBytes(address.toString());
        if (decoded.length !== ALGORAND_ADDRESS_BYTE_LENGTH)
          throw new Error(exports.MALFORMED_ADDRESS_ERROR_MSG);
        const pk = new Uint8Array(decoded.slice(0, ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));
        const cs = new Uint8Array(decoded.slice(nacl.PUBLIC_KEY_LENGTH, ALGORAND_ADDRESS_BYTE_LENGTH));
        const checksum = nacl.genericHash(pk).slice(nacl.HASH_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, nacl.HASH_BYTES_LENGTH);
        if (!utils.arrayEqual(checksum, cs))
          throw new Error(exports.CHECKSUM_ADDRESS_ERROR_MSG);
        return { publicKey: pk, checksum: cs };
      }
      exports.decodeAddress = decodeAddress;
      function isValidAddress2(address) {
        try {
          decodeAddress(address);
        } catch (e) {
          return false;
        }
        return true;
      }
      exports.isValidAddress = isValidAddress2;
      function encodeAddress(address) {
        const checksum = nacl.genericHash(address).slice(nacl.PUBLIC_KEY_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, nacl.PUBLIC_KEY_LENGTH);
        const addr = hi_base32_1.default.encode(utils.concatArrays(address, checksum));
        return addr.toString().slice(0, ALGORAND_ADDRESS_LENGTH);
      }
      exports.encodeAddress = encodeAddress;
      function fromMultisigPreImg({ version, threshold, pks }) {
        if (version !== 1 || version > 255 || version < 0) {
          throw new Error(exports.INVALID_MSIG_VERSION_ERROR_MSG);
        }
        if (threshold === 0 || pks.length === 0 || threshold > pks.length || threshold > 255) {
          throw new Error(exports.INVALID_MSIG_THRESHOLD_ERROR_MSG);
        }
        const pkLen = ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH;
        if (pkLen !== nacl.PUBLIC_KEY_LENGTH) {
          throw new Error(exports.UNEXPECTED_PK_LEN_ERROR_MSG);
        }
        const merged = new Uint8Array(MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + pkLen * pks.length);
        merged.set(MULTISIG_PREIMG2ADDR_PREFIX, 0);
        merged.set([version], MULTISIG_PREIMG2ADDR_PREFIX.length);
        merged.set([threshold], MULTISIG_PREIMG2ADDR_PREFIX.length + 1);
        for (let i = 0; i < pks.length; i++) {
          if (pks[i].length !== pkLen) {
            throw new Error(exports.INVALID_MSIG_PK_ERROR_MSG);
          }
          merged.set(pks[i], MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + i * pkLen);
        }
        return new Uint8Array(nacl.genericHash(merged));
      }
      exports.fromMultisigPreImg = fromMultisigPreImg;
      function fromMultisigPreImgAddrs({ version, threshold, addrs }) {
        const pks = addrs.map((addr) => decodeAddress(addr).publicKey);
        return encodeAddress(fromMultisigPreImg({ version, threshold, pks }));
      }
      exports.fromMultisigPreImgAddrs = fromMultisigPreImgAddrs;
      function getApplicationAddress(appID) {
        const toBeSigned = utils.concatArrays(APP_ID_PREFIX, (0, uint64_1.encodeUint64)(appID));
        const hash = nacl.genericHash(toBeSigned);
        return encodeAddress(new Uint8Array(hash));
      }
      exports.getApplicationAddress = getApplicationAddress;
    }
  });

  // node_modules/algo-msgpack-with-bigint/dist.es5/msgpack.min.js
  var require_msgpack_min = __commonJS({
    "node_modules/algo-msgpack-with-bigint/dist.es5/msgpack.min.js"(exports, module) {
      !function(t, e) {
        "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.MessagePack = e() : t.MessagePack = e();
      }(exports, function() {
        return function(t) {
          var e = {};
          function r(n) {
            if (e[n])
              return e[n].exports;
            var i = e[n] = { i: n, l: false, exports: {} };
            return t[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
          }
          return r.m = t, r.c = e, r.d = function(t2, e2, n) {
            r.o(t2, e2) || Object.defineProperty(t2, e2, { enumerable: true, get: n });
          }, r.r = function(t2) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
          }, r.t = function(t2, e2) {
            if (1 & e2 && (t2 = r(t2)), 8 & e2)
              return t2;
            if (4 & e2 && "object" == typeof t2 && t2 && t2.__esModule)
              return t2;
            var n = /* @__PURE__ */ Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: t2 }), 2 & e2 && "string" != typeof t2)
              for (var i in t2)
                r.d(n, i, function(e3) {
                  return t2[e3];
                }.bind(null, i));
            return n;
          }, r.n = function(t2) {
            var e2 = t2 && t2.__esModule ? function() {
              return t2.default;
            } : function() {
              return t2;
            };
            return r.d(e2, "a", e2), e2;
          }, r.o = function(t2, e2) {
            return Object.prototype.hasOwnProperty.call(t2, e2);
          }, r.p = "", r(r.s = 0);
        }([function(t, e, r) {
          "use strict";
          r.r(e), r.d(e, "encode", function() {
            return T;
          }), r.d(e, "decode", function() {
            return V;
          }), r.d(e, "decodeAsync", function() {
            return Y;
          }), r.d(e, "decodeArrayStream", function() {
            return Z;
          }), r.d(e, "decodeStream", function() {
            return $;
          }), r.d(e, "Decoder", function() {
            return O;
          }), r.d(e, "Encoder", function() {
            return I;
          }), r.d(e, "ExtensionCodec", function() {
            return S;
          }), r.d(e, "ExtData", function() {
            return p;
          }), r.d(e, "EXT_TIMESTAMP", function() {
            return w;
          }), r.d(e, "encodeDateToTimeSpec", function() {
            return g;
          }), r.d(e, "encodeTimeSpecToTimestamp", function() {
            return v;
          }), r.d(e, "decodeTimestampToTimeSpec", function() {
            return U;
          }), r.d(e, "encodeTimestampExtension", function() {
            return b;
          }), r.d(e, "decodeTimestampExtension", function() {
            return m;
          });
          var n = function(t2, e2) {
            var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
            if (!r2)
              return t2;
            var n2, i2, o2 = r2.call(t2), s2 = [];
            try {
              for (; (void 0 === e2 || e2-- > 0) && !(n2 = o2.next()).done; )
                s2.push(n2.value);
            } catch (t3) {
              i2 = { error: t3 };
            } finally {
              try {
                n2 && !n2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            return s2;
          }, i = function() {
            for (var t2 = [], e2 = 0; e2 < arguments.length; e2++)
              t2 = t2.concat(n(arguments[e2]));
            return t2;
          }, o = "undefined" != typeof process && "undefined" != typeof TextEncoder && "undefined" != typeof TextDecoder;
          function s(t2) {
            for (var e2 = t2.length, r2 = 0, n2 = 0; n2 < e2; ) {
              var i2 = t2.charCodeAt(n2++);
              if (0 != (4294967168 & i2))
                if (0 == (4294965248 & i2))
                  r2 += 2;
                else {
                  if (i2 >= 55296 && i2 <= 56319 && n2 < e2) {
                    var o2 = t2.charCodeAt(n2);
                    56320 == (64512 & o2) && (++n2, i2 = ((1023 & i2) << 10) + (1023 & o2) + 65536);
                  }
                  r2 += 0 == (4294901760 & i2) ? 3 : 4;
                }
              else
                r2++;
            }
            return r2;
          }
          var a = o ? new TextEncoder() : void 0, h = "undefined" != typeof process ? 200 : 0;
          var u = (null == a ? void 0 : a.encodeInto) ? function(t2, e2, r2) {
            a.encodeInto(t2, e2.subarray(r2));
          } : function(t2, e2, r2) {
            e2.set(a.encode(t2), r2);
          };
          function c(t2, e2, r2) {
            for (var n2 = e2, o2 = n2 + r2, s2 = [], a2 = ""; n2 < o2; ) {
              var h2 = t2[n2++];
              if (0 == (128 & h2))
                s2.push(h2);
              else if (192 == (224 & h2)) {
                var u2 = 63 & t2[n2++];
                s2.push((31 & h2) << 6 | u2);
              } else if (224 == (240 & h2)) {
                u2 = 63 & t2[n2++];
                var c2 = 63 & t2[n2++];
                s2.push((31 & h2) << 12 | u2 << 6 | c2);
              } else if (240 == (248 & h2)) {
                var f2 = (7 & h2) << 18 | (u2 = 63 & t2[n2++]) << 12 | (c2 = 63 & t2[n2++]) << 6 | 63 & t2[n2++];
                f2 > 65535 && (f2 -= 65536, s2.push(f2 >>> 10 & 1023 | 55296), f2 = 56320 | 1023 & f2), s2.push(f2);
              } else
                s2.push(h2);
              s2.length >= 4096 && (a2 += String.fromCharCode.apply(String, i(s2)), s2.length = 0);
            }
            return s2.length > 0 && (a2 += String.fromCharCode.apply(String, i(s2))), a2;
          }
          var f = o ? new TextDecoder() : null, l = "undefined" != typeof process ? 200 : 0;
          var p = function(t2, e2) {
            this.type = t2, this.data = e2;
          };
          function d(t2, e2, r2) {
            var n2 = Math.floor(r2 / 4294967296), i2 = r2;
            t2.setUint32(e2, n2), t2.setUint32(e2 + 4, i2);
          }
          function y(t2, e2) {
            var r2 = t2.getInt32(e2), n2 = t2.getUint32(e2 + 4), i2 = r2 < Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) || r2 === Math.floor(Number.MIN_SAFE_INTEGER / 4294967296) && 0 === n2, o2 = r2 > Math.floor(Number.MAX_SAFE_INTEGER / 4294967296);
            return i2 || o2 ? BigInt(r2) * BigInt(4294967296) + BigInt(n2) : 4294967296 * r2 + n2;
          }
          var w = -1;
          function v(t2) {
            var e2 = t2.sec, r2 = t2.nsec;
            if (e2 >= 0 && r2 >= 0 && e2 <= 17179869183) {
              if (0 === r2 && e2 <= 4294967295) {
                var n2 = new Uint8Array(4);
                return (s2 = new DataView(n2.buffer)).setUint32(0, e2), n2;
              }
              var i2 = e2 / 4294967296, o2 = 4294967295 & e2;
              n2 = new Uint8Array(8);
              return (s2 = new DataView(n2.buffer)).setUint32(0, r2 << 2 | 3 & i2), s2.setUint32(4, o2), n2;
            }
            var s2;
            n2 = new Uint8Array(12);
            return (s2 = new DataView(n2.buffer)).setUint32(0, r2), d(s2, 4, e2), n2;
          }
          function g(t2) {
            var e2 = t2.getTime(), r2 = Math.floor(e2 / 1e3), n2 = 1e6 * (e2 - 1e3 * r2), i2 = Math.floor(n2 / 1e9);
            return { sec: r2 + i2, nsec: n2 - 1e9 * i2 };
          }
          function b(t2) {
            return t2 instanceof Date ? v(g(t2)) : null;
          }
          function U(t2) {
            var e2 = new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
            switch (t2.byteLength) {
              case 4:
                return { sec: e2.getUint32(0), nsec: 0 };
              case 8:
                var r2 = e2.getUint32(0);
                return { sec: 4294967296 * (3 & r2) + e2.getUint32(4), nsec: r2 >>> 2 };
              case 12:
                return { sec: y(e2, 4), nsec: e2.getUint32(0) };
              default:
                throw new Error("Unrecognized data size for timestamp: " + t2.length);
            }
          }
          function m(t2) {
            var e2 = U(t2);
            return new Date(1e3 * e2.sec + e2.nsec / 1e6);
          }
          var x = { type: w, encode: b, decode: m }, S = function() {
            function t2() {
              this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register(x);
            }
            return t2.prototype.register = function(t3) {
              var e2 = t3.type, r2 = t3.encode, n2 = t3.decode;
              if (e2 >= 0)
                this.encoders[e2] = r2, this.decoders[e2] = n2;
              else {
                var i2 = 1 + e2;
                this.builtInEncoders[i2] = r2, this.builtInDecoders[i2] = n2;
              }
            }, t2.prototype.tryToEncode = function(t3, e2) {
              for (var r2 = 0; r2 < this.builtInEncoders.length; r2++) {
                if (null != (n2 = this.builtInEncoders[r2])) {
                  if (null != (i2 = n2(t3, e2)))
                    return new p(-1 - r2, i2);
                }
              }
              for (r2 = 0; r2 < this.encoders.length; r2++) {
                var n2, i2;
                if (null != (n2 = this.encoders[r2])) {
                  if (null != (i2 = n2(t3, e2)))
                    return new p(r2, i2);
                }
              }
              return t3 instanceof p ? t3 : null;
            }, t2.prototype.decode = function(t3, e2, r2) {
              var n2 = e2 < 0 ? this.builtInDecoders[-1 - e2] : this.decoders[e2];
              return n2 ? n2(t3, e2, r2) : new p(e2, t3);
            }, t2.defaultCodec = new t2(), t2;
          }();
          function B(t2) {
            return t2 instanceof Uint8Array ? t2 : ArrayBuffer.isView(t2) ? new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength) : t2 instanceof ArrayBuffer ? new Uint8Array(t2) : Uint8Array.from(t2);
          }
          var E = function(t2) {
            var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
            if (r2)
              return r2.call(t2);
            if (t2 && "number" == typeof t2.length)
              return { next: function() {
                return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
              } };
            throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
          }, I = function() {
            function t2(t3, e2, r2, n2, i2, o2, s2, a2) {
              void 0 === t3 && (t3 = S.defaultCodec), void 0 === e2 && (e2 = void 0), void 0 === r2 && (r2 = 100), void 0 === n2 && (n2 = 2048), void 0 === i2 && (i2 = false), void 0 === o2 && (o2 = false), void 0 === s2 && (s2 = false), void 0 === a2 && (a2 = false), this.extensionCodec = t3, this.context = e2, this.maxDepth = r2, this.initialBufferSize = n2, this.sortKeys = i2, this.forceFloat32 = o2, this.ignoreUndefined = s2, this.forceIntegerToFloat = a2, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
            }
            return t2.prototype.getUint8Array = function() {
              return this.bytes.subarray(0, this.pos);
            }, t2.prototype.reinitializeState = function() {
              this.pos = 0;
            }, t2.prototype.encode = function(t3) {
              return this.reinitializeState(), this.doEncode(t3, 1), this.getUint8Array();
            }, t2.prototype.doEncode = function(t3, e2) {
              if (e2 > this.maxDepth)
                throw new Error("Too deep objects in depth " + e2);
              null == t3 ? this.encodeNil() : "boolean" == typeof t3 ? this.encodeBoolean(t3) : "number" == typeof t3 ? this.encodeNumber(t3) : "string" == typeof t3 ? this.encodeString(t3) : "bigint" == typeof t3 ? this.encodebigint(t3) : this.encodeObject(t3, e2);
            }, t2.prototype.ensureBufferSizeToWrite = function(t3) {
              var e2 = this.pos + t3;
              this.view.byteLength < e2 && this.resizeBuffer(2 * e2);
            }, t2.prototype.resizeBuffer = function(t3) {
              var e2 = new ArrayBuffer(t3), r2 = new Uint8Array(e2), n2 = new DataView(e2);
              r2.set(this.bytes), this.view = n2, this.bytes = r2;
            }, t2.prototype.encodeNil = function() {
              this.writeU8(192);
            }, t2.prototype.encodeBoolean = function(t3) {
              false === t3 ? this.writeU8(194) : this.writeU8(195);
            }, t2.prototype.encodeNumber = function(t3) {
              Number.isSafeInteger(t3) && !this.forceIntegerToFloat ? t3 >= 0 ? t3 < 128 ? this.writeU8(t3) : t3 < 256 ? (this.writeU8(204), this.writeU8(t3)) : t3 < 65536 ? (this.writeU8(205), this.writeU16(t3)) : t3 < 4294967296 ? (this.writeU8(206), this.writeU32(t3)) : (this.writeU8(207), this.writeU64(t3)) : t3 >= -32 ? this.writeU8(224 | t3 + 32) : t3 >= -128 ? (this.writeU8(208), this.writeI8(t3)) : t3 >= -32768 ? (this.writeU8(209), this.writeI16(t3)) : t3 >= -2147483648 ? (this.writeU8(210), this.writeI32(t3)) : (this.writeU8(211), this.writeI64(t3)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(t3)) : (this.writeU8(203), this.writeF64(t3));
            }, t2.prototype.encodebigint = function(t3) {
              t3 >= BigInt(0) ? t3 < BigInt(128) ? this.writeU8(Number(t3)) : t3 < BigInt(256) ? (this.writeU8(204), this.writeU8(Number(t3))) : t3 < BigInt(65536) ? (this.writeU8(205), this.writeU16(Number(t3))) : t3 < BigInt(4294967296) ? (this.writeU8(206), this.writeU32(Number(t3))) : (this.writeU8(207), this.writeBig64(t3)) : t3 >= BigInt(-32) ? this.writeU8(224 | Number(t3) + 32) : t3 >= BigInt(-128) ? (this.writeU8(208), this.writeI8(Number(t3))) : t3 >= BigInt(-32768) ? (this.writeU8(209), this.writeI16(Number(t3))) : t3 >= BigInt(-2147483648) ? (this.writeU8(210), this.writeI32(Number(t3))) : (this.writeU8(211), this.writeBig64(t3));
            }, t2.prototype.writeStringHeader = function(t3) {
              if (t3 < 32)
                this.writeU8(160 + t3);
              else if (t3 < 256)
                this.writeU8(217), this.writeU8(t3);
              else if (t3 < 65536)
                this.writeU8(218), this.writeU16(t3);
              else {
                if (!(t3 < 4294967296))
                  throw new Error("Too long string: " + t3 + " bytes in UTF-8");
                this.writeU8(219), this.writeU32(t3);
              }
            }, t2.prototype.encodeString = function(t3) {
              var e2 = t3.length;
              if (o && e2 > h) {
                var r2 = s(t3);
                this.ensureBufferSizeToWrite(5 + r2), this.writeStringHeader(r2), u(t3, this.bytes, this.pos), this.pos += r2;
              } else {
                r2 = s(t3);
                this.ensureBufferSizeToWrite(5 + r2), this.writeStringHeader(r2), function(t4, e3, r3) {
                  for (var n2 = t4.length, i2 = r3, o2 = 0; o2 < n2; ) {
                    var s2 = t4.charCodeAt(o2++);
                    if (0 != (4294967168 & s2)) {
                      if (0 == (4294965248 & s2))
                        e3[i2++] = s2 >> 6 & 31 | 192;
                      else {
                        if (s2 >= 55296 && s2 <= 56319 && o2 < n2) {
                          var a2 = t4.charCodeAt(o2);
                          56320 == (64512 & a2) && (++o2, s2 = ((1023 & s2) << 10) + (1023 & a2) + 65536);
                        }
                        0 == (4294901760 & s2) ? (e3[i2++] = s2 >> 12 & 15 | 224, e3[i2++] = s2 >> 6 & 63 | 128) : (e3[i2++] = s2 >> 18 & 7 | 240, e3[i2++] = s2 >> 12 & 63 | 128, e3[i2++] = s2 >> 6 & 63 | 128);
                      }
                      e3[i2++] = 63 & s2 | 128;
                    } else
                      e3[i2++] = s2;
                  }
                }(t3, this.bytes, this.pos), this.pos += r2;
              }
            }, t2.prototype.encodeObject = function(t3, e2) {
              var r2 = this.extensionCodec.tryToEncode(t3, this.context);
              if (null != r2)
                this.encodeExtension(r2);
              else if (Array.isArray(t3))
                this.encodeArray(t3, e2);
              else if (ArrayBuffer.isView(t3))
                this.encodeBinary(t3);
              else {
                if ("object" != typeof t3)
                  throw new Error("Unrecognized object: " + Object.prototype.toString.apply(t3));
                this.encodeMap(t3, e2);
              }
            }, t2.prototype.encodeBinary = function(t3) {
              var e2 = t3.byteLength;
              if (e2 < 256)
                this.writeU8(196), this.writeU8(e2);
              else if (e2 < 65536)
                this.writeU8(197), this.writeU16(e2);
              else {
                if (!(e2 < 4294967296))
                  throw new Error("Too large binary: " + e2);
                this.writeU8(198), this.writeU32(e2);
              }
              var r2 = B(t3);
              this.writeU8a(r2);
            }, t2.prototype.encodeArray = function(t3, e2) {
              var r2, n2, i2 = t3.length;
              if (i2 < 16)
                this.writeU8(144 + i2);
              else if (i2 < 65536)
                this.writeU8(220), this.writeU16(i2);
              else {
                if (!(i2 < 4294967296))
                  throw new Error("Too large array: " + i2);
                this.writeU8(221), this.writeU32(i2);
              }
              try {
                for (var o2 = E(t3), s2 = o2.next(); !s2.done; s2 = o2.next()) {
                  var a2 = s2.value;
                  this.doEncode(a2, e2 + 1);
                }
              } catch (t4) {
                r2 = { error: t4 };
              } finally {
                try {
                  s2 && !s2.done && (n2 = o2.return) && n2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }, t2.prototype.countWithoutUndefined = function(t3, e2) {
              var r2, n2, i2 = 0;
              try {
                for (var o2 = E(e2), s2 = o2.next(); !s2.done; s2 = o2.next()) {
                  void 0 !== t3[s2.value] && i2++;
                }
              } catch (t4) {
                r2 = { error: t4 };
              } finally {
                try {
                  s2 && !s2.done && (n2 = o2.return) && n2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              return i2;
            }, t2.prototype.encodeMap = function(t3, e2) {
              var r2, n2, i2 = Object.keys(t3);
              this.sortKeys && i2.sort();
              var o2 = this.ignoreUndefined ? this.countWithoutUndefined(t3, i2) : i2.length;
              if (o2 < 16)
                this.writeU8(128 + o2);
              else if (o2 < 65536)
                this.writeU8(222), this.writeU16(o2);
              else {
                if (!(o2 < 4294967296))
                  throw new Error("Too large map object: " + o2);
                this.writeU8(223), this.writeU32(o2);
              }
              try {
                for (var s2 = E(i2), a2 = s2.next(); !a2.done; a2 = s2.next()) {
                  var h2 = a2.value, u2 = t3[h2];
                  this.ignoreUndefined && void 0 === u2 || (this.encodeString(h2), this.doEncode(u2, e2 + 1));
                }
              } catch (t4) {
                r2 = { error: t4 };
              } finally {
                try {
                  a2 && !a2.done && (n2 = s2.return) && n2.call(s2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            }, t2.prototype.encodeExtension = function(t3) {
              var e2 = t3.data.length;
              if (1 === e2)
                this.writeU8(212);
              else if (2 === e2)
                this.writeU8(213);
              else if (4 === e2)
                this.writeU8(214);
              else if (8 === e2)
                this.writeU8(215);
              else if (16 === e2)
                this.writeU8(216);
              else if (e2 < 256)
                this.writeU8(199), this.writeU8(e2);
              else if (e2 < 65536)
                this.writeU8(200), this.writeU16(e2);
              else {
                if (!(e2 < 4294967296))
                  throw new Error("Too large extension object: " + e2);
                this.writeU8(201), this.writeU32(e2);
              }
              this.writeI8(t3.type), this.writeU8a(t3.data);
            }, t2.prototype.writeU8 = function(t3) {
              this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, t3), this.pos++;
            }, t2.prototype.writeU8a = function(t3) {
              var e2 = t3.length;
              this.ensureBufferSizeToWrite(e2), this.bytes.set(t3, this.pos), this.pos += e2;
            }, t2.prototype.writeI8 = function(t3) {
              this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, t3), this.pos++;
            }, t2.prototype.writeU16 = function(t3) {
              this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, t3), this.pos += 2;
            }, t2.prototype.writeI16 = function(t3) {
              this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, t3), this.pos += 2;
            }, t2.prototype.writeU32 = function(t3) {
              this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, t3), this.pos += 4;
            }, t2.prototype.writeI32 = function(t3) {
              this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, t3), this.pos += 4;
            }, t2.prototype.writeF32 = function(t3) {
              this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, t3), this.pos += 4;
            }, t2.prototype.writeF64 = function(t3) {
              this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, t3), this.pos += 8;
            }, t2.prototype.writeU64 = function(t3) {
              this.ensureBufferSizeToWrite(8), function(t4, e2, r2) {
                var n2 = r2 / 4294967296, i2 = r2;
                t4.setUint32(e2, n2), t4.setUint32(e2 + 4, i2);
              }(this.view, this.pos, t3), this.pos += 8;
            }, t2.prototype.writeI64 = function(t3) {
              this.ensureBufferSizeToWrite(8), d(this.view, this.pos, t3), this.pos += 8;
            }, t2.prototype.writeBig64 = function(t3) {
              this.ensureBufferSizeToWrite(8), function(t4, e2, r2) {
                var n2 = Number(r2 / BigInt(4294967296)), i2 = Number(r2 % BigInt(4294967296));
                n2 < 0 && 0 !== i2 && (n2 -= 1), t4.setUint32(e2, n2), t4.setUint32(e2 + 4, i2);
              }(this.view, this.pos, t3), this.pos += 8;
            }, t2;
          }(), A = {};
          function T(t2, e2) {
            return void 0 === e2 && (e2 = A), new I(e2.extensionCodec, e2.context, e2.maxDepth, e2.initialBufferSize, e2.sortKeys, e2.forceFloat32, e2.ignoreUndefined, e2.forceIntegerToFloat).encode(t2);
          }
          function L(t2) {
            return (t2 < 0 ? "-" : "") + "0x" + Math.abs(t2).toString(16).padStart(2, "0");
          }
          var M = function() {
            function t2(t3, e2) {
              void 0 === t3 && (t3 = 16), void 0 === e2 && (e2 = 16), this.maxKeyLength = t3, this.maxLengthPerKey = e2, this.hit = 0, this.miss = 0, this.caches = [];
              for (var r2 = 0; r2 < this.maxKeyLength; r2++)
                this.caches.push([]);
            }
            return t2.prototype.canBeCached = function(t3) {
              return t3 > 0 && t3 <= this.maxKeyLength;
            }, t2.prototype.get = function(t3, e2, r2) {
              var n2 = this.caches[r2 - 1], i2 = n2.length;
              t:
                for (var o2 = 0; o2 < i2; o2++) {
                  for (var s2 = n2[o2], a2 = s2.bytes, h2 = 0; h2 < r2; h2++)
                    if (a2[h2] !== t3[e2 + h2])
                      continue t;
                  return s2.value;
                }
              return null;
            }, t2.prototype.store = function(t3, e2) {
              var r2 = this.caches[t3.length - 1], n2 = { bytes: t3, value: e2 };
              r2.length >= this.maxLengthPerKey ? r2[Math.random() * r2.length | 0] = n2 : r2.push(n2);
            }, t2.prototype.decode = function(t3, e2, r2) {
              var n2 = this.get(t3, e2, r2);
              if (null != n2)
                return this.hit++, n2;
              this.miss++;
              var i2 = c(t3, e2, r2), o2 = Uint8Array.prototype.slice.call(t3, e2, e2 + r2);
              return this.store(o2, i2), i2;
            }, t2;
          }(), k = function(t2, e2, r2, n2) {
            return new (r2 || (r2 = Promise))(function(i2, o2) {
              function s2(t3) {
                try {
                  h2(n2.next(t3));
                } catch (t4) {
                  o2(t4);
                }
              }
              function a2(t3) {
                try {
                  h2(n2.throw(t3));
                } catch (t4) {
                  o2(t4);
                }
              }
              function h2(t3) {
                var e3;
                t3.done ? i2(t3.value) : (e3 = t3.value, e3 instanceof r2 ? e3 : new r2(function(t4) {
                  t4(e3);
                })).then(s2, a2);
              }
              h2((n2 = n2.apply(t2, e2 || [])).next());
            });
          }, z = function(t2, e2) {
            var r2, n2, i2, o2, s2 = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: a2(0), throw: a2(1), return: a2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function a2(o3) {
              return function(a3) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; s2; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return s2.label++, { value: o4[1], done: false };
                        case 5:
                          s2.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = s2.ops.pop(), s2.trys.pop();
                          continue;
                        default:
                          if (!(i2 = s2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            s2 = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            s2.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && s2.label < i2[1]) {
                            s2.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && s2.label < i2[2]) {
                            s2.label = i2[2], s2.ops.push(o4);
                            break;
                          }
                          i2[2] && s2.ops.pop(), s2.trys.pop();
                          continue;
                      }
                      o4 = e2.call(t2, s2);
                    } catch (t3) {
                      o4 = [6, t3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, a3]);
              };
            }
          }, D = function(t2) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var e2, r2 = t2[Symbol.asyncIterator];
            return r2 ? r2.call(t2) : (t2 = "function" == typeof __values ? __values(t2) : t2[Symbol.iterator](), e2 = {}, n2("next"), n2("throw"), n2("return"), e2[Symbol.asyncIterator] = function() {
              return this;
            }, e2);
            function n2(r3) {
              e2[r3] = t2[r3] && function(e3) {
                return new Promise(function(n3, i2) {
                  (function(t3, e4, r4, n4) {
                    Promise.resolve(n4).then(function(e5) {
                      t3({ value: e5, done: r4 });
                    }, e4);
                  })(n3, i2, (e3 = t2[r3](e3)).done, e3.value);
                });
              };
            }
          }, N = function(t2) {
            return this instanceof N ? (this.v = t2, this) : new N(t2);
          }, C = function(t2, e2, r2) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var n2, i2 = r2.apply(t2, e2 || []), o2 = [];
            return n2 = {}, s2("next"), s2("throw"), s2("return"), n2[Symbol.asyncIterator] = function() {
              return this;
            }, n2;
            function s2(t3) {
              i2[t3] && (n2[t3] = function(e3) {
                return new Promise(function(r3, n3) {
                  o2.push([t3, e3, r3, n3]) > 1 || a2(t3, e3);
                });
              });
            }
            function a2(t3, e3) {
              try {
                (r3 = i2[t3](e3)).value instanceof N ? Promise.resolve(r3.value.v).then(h2, u2) : c2(o2[0][2], r3);
              } catch (t4) {
                c2(o2[0][3], t4);
              }
              var r3;
            }
            function h2(t3) {
              a2("next", t3);
            }
            function u2(t3) {
              a2("throw", t3);
            }
            function c2(t3, e3) {
              t3(e3), o2.shift(), o2.length && a2(o2[0][0], o2[0][1]);
            }
          }, P = new DataView(new ArrayBuffer(0)), F = new Uint8Array(P.buffer), j = function() {
            try {
              P.getInt8(0);
            } catch (t2) {
              return t2.constructor;
            }
            throw new Error("never reached");
          }(), _ = new j("Insufficient data"), W = new M(), O = function() {
            function t2(t3, e2, r2, n2, i2, o2, s2, a2) {
              void 0 === t3 && (t3 = S.defaultCodec), void 0 === e2 && (e2 = void 0), void 0 === r2 && (r2 = 4294967295), void 0 === n2 && (n2 = 4294967295), void 0 === i2 && (i2 = 4294967295), void 0 === o2 && (o2 = 4294967295), void 0 === s2 && (s2 = 4294967295), void 0 === a2 && (a2 = W), this.extensionCodec = t3, this.context = e2, this.maxStrLength = r2, this.maxBinLength = n2, this.maxArrayLength = i2, this.maxMapLength = o2, this.maxExtLength = s2, this.keyDecoder = a2, this.totalPos = 0, this.pos = 0, this.view = P, this.bytes = F, this.headByte = -1, this.stack = [];
            }
            return t2.prototype.reinitializeState = function() {
              this.totalPos = 0, this.headByte = -1;
            }, t2.prototype.setBuffer = function(t3) {
              this.bytes = B(t3), this.view = function(t4) {
                if (t4 instanceof ArrayBuffer)
                  return new DataView(t4);
                var e2 = B(t4);
                return new DataView(e2.buffer, e2.byteOffset, e2.byteLength);
              }(this.bytes), this.pos = 0;
            }, t2.prototype.appendBuffer = function(t3) {
              if (-1 !== this.headByte || this.hasRemaining()) {
                var e2 = this.bytes.subarray(this.pos), r2 = B(t3), n2 = new Uint8Array(e2.length + r2.length);
                n2.set(e2), n2.set(r2, e2.length), this.setBuffer(n2);
              } else
                this.setBuffer(t3);
            }, t2.prototype.hasRemaining = function(t3) {
              return void 0 === t3 && (t3 = 1), this.view.byteLength - this.pos >= t3;
            }, t2.prototype.createNoExtraBytesError = function(t3) {
              var e2 = this.view, r2 = this.pos;
              return new RangeError("Extra " + (e2.byteLength - r2) + " of " + e2.byteLength + " byte(s) found at buffer[" + t3 + "]");
            }, t2.prototype.decode = function(t3) {
              return this.reinitializeState(), this.setBuffer(t3), this.doDecodeSingleSync();
            }, t2.prototype.doDecodeSingleSync = function() {
              var t3 = this.doDecodeSync();
              if (this.hasRemaining())
                throw this.createNoExtraBytesError(this.pos);
              return t3;
            }, t2.prototype.decodeAsync = function(t3) {
              var e2, r2, n2, i2;
              return k(this, void 0, void 0, function() {
                var o2, s2, a2, h2, u2, c2, f2, l2;
                return z(this, function(p2) {
                  switch (p2.label) {
                    case 0:
                      o2 = false, p2.label = 1;
                    case 1:
                      p2.trys.push([1, 6, 7, 12]), e2 = D(t3), p2.label = 2;
                    case 2:
                      return [4, e2.next()];
                    case 3:
                      if ((r2 = p2.sent()).done)
                        return [3, 5];
                      if (a2 = r2.value, o2)
                        throw this.createNoExtraBytesError(this.totalPos);
                      this.appendBuffer(a2);
                      try {
                        s2 = this.doDecodeSync(), o2 = true;
                      } catch (t4) {
                        if (!(t4 instanceof j))
                          throw t4;
                      }
                      this.totalPos += this.pos, p2.label = 4;
                    case 4:
                      return [3, 2];
                    case 5:
                      return [3, 12];
                    case 6:
                      return h2 = p2.sent(), n2 = { error: h2 }, [3, 12];
                    case 7:
                      return p2.trys.push([7, , 10, 11]), r2 && !r2.done && (i2 = e2.return) ? [4, i2.call(e2)] : [3, 9];
                    case 8:
                      p2.sent(), p2.label = 9;
                    case 9:
                      return [3, 11];
                    case 10:
                      if (n2)
                        throw n2.error;
                      return [7];
                    case 11:
                      return [7];
                    case 12:
                      if (o2) {
                        if (this.hasRemaining())
                          throw this.createNoExtraBytesError(this.totalPos);
                        return [2, s2];
                      }
                      throw c2 = (u2 = this).headByte, f2 = u2.pos, l2 = u2.totalPos, new RangeError("Insufficient data in parcing " + L(c2) + " at " + l2 + " (" + f2 + " in the current buffer)");
                  }
                });
              });
            }, t2.prototype.decodeArrayStream = function(t3) {
              return this.decodeMultiAsync(t3, true);
            }, t2.prototype.decodeStream = function(t3) {
              return this.decodeMultiAsync(t3, false);
            }, t2.prototype.decodeMultiAsync = function(t3, e2) {
              return C(this, arguments, function() {
                var r2, n2, i2, o2, s2, a2, h2, u2, c2;
                return z(this, function(f2) {
                  switch (f2.label) {
                    case 0:
                      r2 = e2, n2 = -1, f2.label = 1;
                    case 1:
                      f2.trys.push([1, 13, 14, 19]), i2 = D(t3), f2.label = 2;
                    case 2:
                      return [4, N(i2.next())];
                    case 3:
                      if ((o2 = f2.sent()).done)
                        return [3, 12];
                      if (s2 = o2.value, e2 && 0 === n2)
                        throw this.createNoExtraBytesError(this.totalPos);
                      this.appendBuffer(s2), r2 && (n2 = this.readArraySize(), r2 = false, this.complete()), f2.label = 4;
                    case 4:
                      f2.trys.push([4, 9, , 10]), f2.label = 5;
                    case 5:
                      return [4, N(this.doDecodeSync())];
                    case 6:
                      return [4, f2.sent()];
                    case 7:
                      return f2.sent(), 0 == --n2 ? [3, 8] : [3, 5];
                    case 8:
                      return [3, 10];
                    case 9:
                      if (!((a2 = f2.sent()) instanceof j))
                        throw a2;
                      return [3, 10];
                    case 10:
                      this.totalPos += this.pos, f2.label = 11;
                    case 11:
                      return [3, 2];
                    case 12:
                      return [3, 19];
                    case 13:
                      return h2 = f2.sent(), u2 = { error: h2 }, [3, 19];
                    case 14:
                      return f2.trys.push([14, , 17, 18]), o2 && !o2.done && (c2 = i2.return) ? [4, N(c2.call(i2))] : [3, 16];
                    case 15:
                      f2.sent(), f2.label = 16;
                    case 16:
                      return [3, 18];
                    case 17:
                      if (u2)
                        throw u2.error;
                      return [7];
                    case 18:
                      return [7];
                    case 19:
                      return [2];
                  }
                });
              });
            }, t2.prototype.doDecodeSync = function() {
              t:
                for (; ; ) {
                  var t3 = this.readHeadByte(), e2 = void 0;
                  if (t3 >= 224)
                    e2 = t3 - 256;
                  else if (t3 < 192)
                    if (t3 < 128)
                      e2 = t3;
                    else if (t3 < 144) {
                      if (0 !== (n2 = t3 - 128)) {
                        this.pushMapState(n2), this.complete();
                        continue t;
                      }
                      e2 = {};
                    } else if (t3 < 160) {
                      if (0 !== (n2 = t3 - 144)) {
                        this.pushArrayState(n2), this.complete();
                        continue t;
                      }
                      e2 = [];
                    } else {
                      var r2 = t3 - 160;
                      e2 = this.decodeUtf8String(r2, 0);
                    }
                  else if (192 === t3)
                    e2 = null;
                  else if (194 === t3)
                    e2 = false;
                  else if (195 === t3)
                    e2 = true;
                  else if (202 === t3)
                    e2 = this.readF32();
                  else if (203 === t3)
                    e2 = this.readF64();
                  else if (204 === t3)
                    e2 = this.readU8();
                  else if (205 === t3)
                    e2 = this.readU16();
                  else if (206 === t3)
                    e2 = this.readU32();
                  else if (207 === t3)
                    e2 = this.readU64();
                  else if (208 === t3)
                    e2 = this.readI8();
                  else if (209 === t3)
                    e2 = this.readI16();
                  else if (210 === t3)
                    e2 = this.readI32();
                  else if (211 === t3)
                    e2 = this.readI64();
                  else if (217 === t3) {
                    r2 = this.lookU8();
                    e2 = this.decodeUtf8String(r2, 1);
                  } else if (218 === t3) {
                    r2 = this.lookU16();
                    e2 = this.decodeUtf8String(r2, 2);
                  } else if (219 === t3) {
                    r2 = this.lookU32();
                    e2 = this.decodeUtf8String(r2, 4);
                  } else if (220 === t3) {
                    if (0 !== (n2 = this.readU16())) {
                      this.pushArrayState(n2), this.complete();
                      continue t;
                    }
                    e2 = [];
                  } else if (221 === t3) {
                    if (0 !== (n2 = this.readU32())) {
                      this.pushArrayState(n2), this.complete();
                      continue t;
                    }
                    e2 = [];
                  } else if (222 === t3) {
                    if (0 !== (n2 = this.readU16())) {
                      this.pushMapState(n2), this.complete();
                      continue t;
                    }
                    e2 = {};
                  } else if (223 === t3) {
                    if (0 !== (n2 = this.readU32())) {
                      this.pushMapState(n2), this.complete();
                      continue t;
                    }
                    e2 = {};
                  } else if (196 === t3) {
                    var n2 = this.lookU8();
                    e2 = this.decodeBinary(n2, 1);
                  } else if (197 === t3) {
                    n2 = this.lookU16();
                    e2 = this.decodeBinary(n2, 2);
                  } else if (198 === t3) {
                    n2 = this.lookU32();
                    e2 = this.decodeBinary(n2, 4);
                  } else if (212 === t3)
                    e2 = this.decodeExtension(1, 0);
                  else if (213 === t3)
                    e2 = this.decodeExtension(2, 0);
                  else if (214 === t3)
                    e2 = this.decodeExtension(4, 0);
                  else if (215 === t3)
                    e2 = this.decodeExtension(8, 0);
                  else if (216 === t3)
                    e2 = this.decodeExtension(16, 0);
                  else if (199 === t3) {
                    n2 = this.lookU8();
                    e2 = this.decodeExtension(n2, 1);
                  } else if (200 === t3) {
                    n2 = this.lookU16();
                    e2 = this.decodeExtension(n2, 2);
                  } else {
                    if (201 !== t3)
                      throw new Error("Unrecognized type byte: " + L(t3));
                    n2 = this.lookU32();
                    e2 = this.decodeExtension(n2, 4);
                  }
                  this.complete();
                  for (var i2 = this.stack; i2.length > 0; ) {
                    var o2 = i2[i2.length - 1];
                    if (0 === o2.type) {
                      if (o2.array[o2.position] = e2, o2.position++, o2.position !== o2.size)
                        continue t;
                      i2.pop(), e2 = o2.array;
                    } else {
                      if (1 === o2.type) {
                        if (s2 = void 0, "string" !== (s2 = typeof e2) && "number" !== s2)
                          throw new Error("The type of key must be string or number but " + typeof e2);
                        o2.key = e2, o2.type = 2;
                        continue t;
                      }
                      if (o2.map[o2.key] = e2, o2.readCount++, o2.readCount !== o2.size) {
                        o2.key = null, o2.type = 1;
                        continue t;
                      }
                      i2.pop(), e2 = o2.map;
                    }
                  }
                  return e2;
                }
              var s2;
            }, t2.prototype.readHeadByte = function() {
              return -1 === this.headByte && (this.headByte = this.readU8()), this.headByte;
            }, t2.prototype.complete = function() {
              this.headByte = -1;
            }, t2.prototype.readArraySize = function() {
              var t3 = this.readHeadByte();
              switch (t3) {
                case 220:
                  return this.readU16();
                case 221:
                  return this.readU32();
                default:
                  if (t3 < 160)
                    return t3 - 144;
                  throw new Error("Unrecognized array type byte: " + L(t3));
              }
            }, t2.prototype.pushMapState = function(t3) {
              if (t3 > this.maxMapLength)
                throw new Error("Max length exceeded: map length (" + t3 + ") > maxMapLengthLength (" + this.maxMapLength + ")");
              this.stack.push({ type: 1, size: t3, key: null, readCount: 0, map: {} });
            }, t2.prototype.pushArrayState = function(t3) {
              if (t3 > this.maxArrayLength)
                throw new Error("Max length exceeded: array length (" + t3 + ") > maxArrayLength (" + this.maxArrayLength + ")");
              this.stack.push({ type: 0, size: t3, array: new Array(t3), position: 0 });
            }, t2.prototype.decodeUtf8String = function(t3, e2) {
              var r2;
              if (t3 > this.maxStrLength)
                throw new Error("Max length exceeded: UTF-8 byte length (" + t3 + ") > maxStrLength (" + this.maxStrLength + ")");
              if (this.bytes.byteLength < this.pos + e2 + t3)
                throw _;
              var n2, i2 = this.pos + e2;
              return n2 = this.stateIsMapKey() && (null === (r2 = this.keyDecoder) || void 0 === r2 ? void 0 : r2.canBeCached(t3)) ? this.keyDecoder.decode(this.bytes, i2, t3) : o && t3 > l ? function(t4, e3, r3) {
                var n3 = t4.subarray(e3, e3 + r3);
                return f.decode(n3);
              }(this.bytes, i2, t3) : c(this.bytes, i2, t3), this.pos += e2 + t3, n2;
            }, t2.prototype.stateIsMapKey = function() {
              return this.stack.length > 0 && 1 === this.stack[this.stack.length - 1].type;
            }, t2.prototype.decodeBinary = function(t3, e2) {
              if (t3 > this.maxBinLength)
                throw new Error("Max length exceeded: bin length (" + t3 + ") > maxBinLength (" + this.maxBinLength + ")");
              if (!this.hasRemaining(t3 + e2))
                throw _;
              var r2 = this.pos + e2, n2 = this.bytes.subarray(r2, r2 + t3);
              return this.pos += e2 + t3, n2;
            }, t2.prototype.decodeExtension = function(t3, e2) {
              if (t3 > this.maxExtLength)
                throw new Error("Max length exceeded: ext length (" + t3 + ") > maxExtLength (" + this.maxExtLength + ")");
              var r2 = this.view.getInt8(this.pos + e2), n2 = this.decodeBinary(t3, e2 + 1);
              return this.extensionCodec.decode(n2, r2, this.context);
            }, t2.prototype.lookU8 = function() {
              return this.view.getUint8(this.pos);
            }, t2.prototype.lookU16 = function() {
              return this.view.getUint16(this.pos);
            }, t2.prototype.lookU32 = function() {
              return this.view.getUint32(this.pos);
            }, t2.prototype.readU8 = function() {
              var t3 = this.view.getUint8(this.pos);
              return this.pos++, t3;
            }, t2.prototype.readI8 = function() {
              var t3 = this.view.getInt8(this.pos);
              return this.pos++, t3;
            }, t2.prototype.readU16 = function() {
              var t3 = this.view.getUint16(this.pos);
              return this.pos += 2, t3;
            }, t2.prototype.readI16 = function() {
              var t3 = this.view.getInt16(this.pos);
              return this.pos += 2, t3;
            }, t2.prototype.readU32 = function() {
              var t3 = this.view.getUint32(this.pos);
              return this.pos += 4, t3;
            }, t2.prototype.readI32 = function() {
              var t3 = this.view.getInt32(this.pos);
              return this.pos += 4, t3;
            }, t2.prototype.readU64 = function() {
              var t3, e2, r2, n2, i2 = (t3 = this.view, e2 = this.pos, r2 = t3.getUint32(e2), n2 = t3.getUint32(e2 + 4), r2 > Math.floor(Number.MAX_SAFE_INTEGER / 4294967296) ? BigInt(r2) * BigInt(4294967296) + BigInt(n2) : 4294967296 * r2 + n2);
              return this.pos += 8, i2;
            }, t2.prototype.readI64 = function() {
              var t3 = y(this.view, this.pos);
              return this.pos += 8, t3;
            }, t2.prototype.readF32 = function() {
              var t3 = this.view.getFloat32(this.pos);
              return this.pos += 4, t3;
            }, t2.prototype.readF64 = function() {
              var t3 = this.view.getFloat64(this.pos);
              return this.pos += 8, t3;
            }, t2;
          }(), R = {};
          function V(t2, e2) {
            return void 0 === e2 && (e2 = R), new O(e2.extensionCodec, e2.context, e2.maxStrLength, e2.maxBinLength, e2.maxArrayLength, e2.maxMapLength, e2.maxExtLength).decode(t2);
          }
          var K = function(t2, e2) {
            var r2, n2, i2, o2, s2 = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: a2(0), throw: a2(1), return: a2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function a2(o3) {
              return function(a3) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; s2; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return s2.label++, { value: o4[1], done: false };
                        case 5:
                          s2.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = s2.ops.pop(), s2.trys.pop();
                          continue;
                        default:
                          if (!(i2 = s2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            s2 = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            s2.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && s2.label < i2[1]) {
                            s2.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && s2.label < i2[2]) {
                            s2.label = i2[2], s2.ops.push(o4);
                            break;
                          }
                          i2[2] && s2.ops.pop(), s2.trys.pop();
                          continue;
                      }
                      o4 = e2.call(t2, s2);
                    } catch (t3) {
                      o4 = [6, t3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, a3]);
              };
            }
          }, G = function(t2) {
            return this instanceof G ? (this.v = t2, this) : new G(t2);
          }, H = function(t2, e2, r2) {
            if (!Symbol.asyncIterator)
              throw new TypeError("Symbol.asyncIterator is not defined.");
            var n2, i2 = r2.apply(t2, e2 || []), o2 = [];
            return n2 = {}, s2("next"), s2("throw"), s2("return"), n2[Symbol.asyncIterator] = function() {
              return this;
            }, n2;
            function s2(t3) {
              i2[t3] && (n2[t3] = function(e3) {
                return new Promise(function(r3, n3) {
                  o2.push([t3, e3, r3, n3]) > 1 || a2(t3, e3);
                });
              });
            }
            function a2(t3, e3) {
              try {
                (r3 = i2[t3](e3)).value instanceof G ? Promise.resolve(r3.value.v).then(h2, u2) : c2(o2[0][2], r3);
              } catch (t4) {
                c2(o2[0][3], t4);
              }
              var r3;
            }
            function h2(t3) {
              a2("next", t3);
            }
            function u2(t3) {
              a2("throw", t3);
            }
            function c2(t3, e3) {
              t3(e3), o2.shift(), o2.length && a2(o2[0][0], o2[0][1]);
            }
          };
          function X(t2) {
            if (null == t2)
              throw new Error("Assertion Failure: value must not be null nor undefined");
          }
          function q(t2) {
            return null != t2[Symbol.asyncIterator] ? t2 : function(t3) {
              return H(this, arguments, function() {
                var e2, r2, n2, i2;
                return K(this, function(o2) {
                  switch (o2.label) {
                    case 0:
                      e2 = t3.getReader(), o2.label = 1;
                    case 1:
                      o2.trys.push([1, , 9, 10]), o2.label = 2;
                    case 2:
                      return [4, G(e2.read())];
                    case 3:
                      return r2 = o2.sent(), n2 = r2.done, i2 = r2.value, n2 ? [4, G(void 0)] : [3, 5];
                    case 4:
                      return [2, o2.sent()];
                    case 5:
                      return X(i2), [4, G(i2)];
                    case 6:
                      return [4, o2.sent()];
                    case 7:
                      return o2.sent(), [3, 2];
                    case 8:
                      return [3, 10];
                    case 9:
                      return e2.releaseLock(), [7];
                    case 10:
                      return [2];
                  }
                });
              });
            }(t2);
          }
          var J = function(t2, e2, r2, n2) {
            return new (r2 || (r2 = Promise))(function(i2, o2) {
              function s2(t3) {
                try {
                  h2(n2.next(t3));
                } catch (t4) {
                  o2(t4);
                }
              }
              function a2(t3) {
                try {
                  h2(n2.throw(t3));
                } catch (t4) {
                  o2(t4);
                }
              }
              function h2(t3) {
                var e3;
                t3.done ? i2(t3.value) : (e3 = t3.value, e3 instanceof r2 ? e3 : new r2(function(t4) {
                  t4(e3);
                })).then(s2, a2);
              }
              h2((n2 = n2.apply(t2, e2 || [])).next());
            });
          }, Q = function(t2, e2) {
            var r2, n2, i2, o2, s2 = { label: 0, sent: function() {
              if (1 & i2[0])
                throw i2[1];
              return i2[1];
            }, trys: [], ops: [] };
            return o2 = { next: a2(0), throw: a2(1), return: a2(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
              return this;
            }), o2;
            function a2(o3) {
              return function(a3) {
                return function(o4) {
                  if (r2)
                    throw new TypeError("Generator is already executing.");
                  for (; s2; )
                    try {
                      if (r2 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                        return i2;
                      switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                        case 0:
                        case 1:
                          i2 = o4;
                          break;
                        case 4:
                          return s2.label++, { value: o4[1], done: false };
                        case 5:
                          s2.label++, n2 = o4[1], o4 = [0];
                          continue;
                        case 7:
                          o4 = s2.ops.pop(), s2.trys.pop();
                          continue;
                        default:
                          if (!(i2 = s2.trys, (i2 = i2.length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                            s2 = 0;
                            continue;
                          }
                          if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                            s2.label = o4[1];
                            break;
                          }
                          if (6 === o4[0] && s2.label < i2[1]) {
                            s2.label = i2[1], i2 = o4;
                            break;
                          }
                          if (i2 && s2.label < i2[2]) {
                            s2.label = i2[2], s2.ops.push(o4);
                            break;
                          }
                          i2[2] && s2.ops.pop(), s2.trys.pop();
                          continue;
                      }
                      o4 = e2.call(t2, s2);
                    } catch (t3) {
                      o4 = [6, t3], n2 = 0;
                    } finally {
                      r2 = i2 = 0;
                    }
                  if (5 & o4[0])
                    throw o4[1];
                  return { value: o4[0] ? o4[1] : void 0, done: true };
                }([o3, a3]);
              };
            }
          };
          function Y(t2, e2) {
            return void 0 === e2 && (e2 = R), J(this, void 0, void 0, function() {
              var r2;
              return Q(this, function(n2) {
                return r2 = q(t2), [2, new O(e2.extensionCodec, e2.context, e2.maxStrLength, e2.maxBinLength, e2.maxArrayLength, e2.maxMapLength, e2.maxExtLength).decodeAsync(r2)];
              });
            });
          }
          function Z(t2, e2) {
            void 0 === e2 && (e2 = R);
            var r2 = q(t2);
            return new O(e2.extensionCodec, e2.context, e2.maxStrLength, e2.maxBinLength, e2.maxArrayLength, e2.maxMapLength, e2.maxExtLength).decodeArrayStream(r2);
          }
          function $(t2, e2) {
            void 0 === e2 && (e2 = R);
            var r2 = q(t2);
            return new O(e2.extensionCodec, e2.context, e2.maxStrLength, e2.maxBinLength, e2.maxArrayLength, e2.maxMapLength, e2.maxExtLength).decodeStream(r2);
          }
        }]);
      });
    }
  });

  // node_modules/algosdk/dist/cjs/encoding/encoding.js
  var require_encoding = __commonJS({
    "node_modules/algosdk/dist/cjs/encoding/encoding.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decode = exports.encode = exports.rawEncode = exports.ERROR_CONTAINS_EMPTY_STRING = void 0;
      var msgpack = __importStar2(require_msgpack_min());
      exports.ERROR_CONTAINS_EMPTY_STRING = "The object contains empty or 0 values. First empty or 0 value encountered during encoding: ";
      function containsEmpty(obj) {
        for (const key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!obj[key] || obj[key].length === 0) {
              return { containsEmpty: true, firstEmptyKey: key };
            }
          }
        }
        return { containsEmpty: false, firstEmptyKey: void 0 };
      }
      function rawEncode(obj) {
        const options = { sortKeys: true };
        return msgpack.encode(obj, options);
      }
      exports.rawEncode = rawEncode;
      function encode(obj) {
        const emptyCheck = containsEmpty(obj);
        if (emptyCheck.containsEmpty) {
          throw new Error(exports.ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);
        }
        return rawEncode(obj);
      }
      exports.encode = encode;
      function decode(buffer) {
        return msgpack.decode(buffer);
      }
      exports.decode = decode;
    }
  });

  // node_modules/algosdk/dist/cjs/boxStorage.js
  var require_boxStorage = __commonJS({
    "node_modules/algosdk/dist/cjs/boxStorage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.translateBoxReferences = void 0;
      function translateBoxReference(reference, foreignApps, appIndex) {
        const referenceId = reference.appIndex;
        const referenceName = reference.name;
        const isOwnReference = referenceId === 0 || referenceId === appIndex;
        let index = 0;
        if (foreignApps != null) {
          index = foreignApps.indexOf(referenceId) + 1;
        }
        if (index === 0 && !isOwnReference) {
          throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);
        }
        return { i: index, n: referenceName };
      }
      function translateBoxReferences(references, foreignApps, appIndex) {
        if (references == null)
          return [];
        return references.map((bx) => translateBoxReference(bx, foreignApps, appIndex));
      }
      exports.translateBoxReferences = translateBoxReferences;
    }
  });

  // node_modules/algosdk/dist/cjs/types/transactions/base.js
  var require_base = __commonJS({
    "node_modules/algosdk/dist/cjs/types/transactions/base.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OnApplicationComplete = exports.isTransactionType = exports.TransactionType = void 0;
      var TransactionType;
      (function(TransactionType2) {
        TransactionType2["pay"] = "pay";
        TransactionType2["keyreg"] = "keyreg";
        TransactionType2["acfg"] = "acfg";
        TransactionType2["axfer"] = "axfer";
        TransactionType2["afrz"] = "afrz";
        TransactionType2["appl"] = "appl";
        TransactionType2["stpf"] = "stpf";
      })(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
      function isTransactionType(s) {
        return s === TransactionType.pay || s === TransactionType.keyreg || s === TransactionType.acfg || s === TransactionType.axfer || s === TransactionType.afrz || s === TransactionType.appl || s === TransactionType.stpf;
      }
      exports.isTransactionType = isTransactionType;
      var OnApplicationComplete;
      (function(OnApplicationComplete2) {
        OnApplicationComplete2[OnApplicationComplete2["NoOpOC"] = 0] = "NoOpOC";
        OnApplicationComplete2[OnApplicationComplete2["OptInOC"] = 1] = "OptInOC";
        OnApplicationComplete2[OnApplicationComplete2["CloseOutOC"] = 2] = "CloseOutOC";
        OnApplicationComplete2[OnApplicationComplete2["ClearStateOC"] = 3] = "ClearStateOC";
        OnApplicationComplete2[OnApplicationComplete2["UpdateApplicationOC"] = 4] = "UpdateApplicationOC";
        OnApplicationComplete2[OnApplicationComplete2["DeleteApplicationOC"] = 5] = "DeleteApplicationOC";
      })(OnApplicationComplete = exports.OnApplicationComplete || (exports.OnApplicationComplete = {}));
    }
  });

  // node_modules/algosdk/dist/cjs/transaction.js
  var require_transaction = __commonJS({
    "node_modules/algosdk/dist/cjs/transaction.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.instantiateTxnIfNeeded = exports.decodeSignedTransaction = exports.decodeUnsignedTransaction = exports.encodeUnsignedTransaction = exports.encodeUnsignedSimulateTransaction = exports.Transaction = exports.ALGORAND_MIN_TX_FEE = void 0;
      var buffer_1 = require_buffer2();
      var hi_base32_1 = __importDefault2(require_base32());
      var address = __importStar2(require_address());
      var encoding = __importStar2(require_encoding());
      var nacl = __importStar2(require_naclWrappers());
      var utils = __importStar2(require_utils());
      var boxStorage_1 = require_boxStorage();
      var base_1 = require_base();
      var ALGORAND_TRANSACTION_LENGTH = 52;
      exports.ALGORAND_MIN_TX_FEE = 1e3;
      var ALGORAND_TRANSACTION_LEASE_LENGTH = 32;
      var ALGORAND_MAX_ASSET_DECIMALS = 19;
      var NUM_ADDL_BYTES_AFTER_SIGNING = 75;
      var ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;
      var ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;
      var ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;
      var ASSET_METADATA_HASH_LENGTH = 32;
      var KEYREG_VOTE_KEY_LENGTH = 32;
      var KEYREG_SELECTION_KEY_LENGTH = 32;
      var KEYREG_STATE_PROOF_KEY_LENGTH = 64;
      function getKeyregKey(input, inputName, length) {
        if (input == null) {
          return void 0;
        }
        let inputAsBuffer;
        if (typeof input === "string") {
          inputAsBuffer = buffer_1.Buffer.from(input, "base64");
        } else if (input.constructor === Uint8Array) {
          inputAsBuffer = buffer_1.Buffer.from(input);
        } else if (buffer_1.Buffer.isBuffer(input)) {
          inputAsBuffer = input;
        }
        if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {
          throw Error(`${inputName} must be a ${length} byte Uint8Array or Buffer or base64 string.`);
        }
        return inputAsBuffer;
      }
      var Transaction = class {
        constructor({ ...transaction }) {
          this.name = "Transaction";
          this.tag = buffer_1.Buffer.from("TX");
          const defaults = {
            type: base_1.TransactionType.pay,
            flatFee: false,
            nonParticipation: false
          };
          if (typeof transaction.type === "undefined") {
            transaction.type = defaults.type;
          }
          if (typeof transaction.flatFee === "undefined") {
            transaction.flatFee = defaults.flatFee;
          }
          if (transaction.type === base_1.TransactionType.keyreg && typeof transaction.voteKey !== "undefined" && typeof transaction.nonParticipation === "undefined") {
            transaction.nonParticipation = defaults.nonParticipation;
          }
          if (transaction.suggestedParams !== void 0) {
            const reference = transaction;
            reference.genesisHash = reference.suggestedParams.genesisHash;
            reference.fee = reference.suggestedParams.fee;
            if (reference.suggestedParams.flatFee !== void 0)
              reference.flatFee = reference.suggestedParams.flatFee;
            reference.firstRound = reference.suggestedParams.firstRound;
            reference.lastRound = reference.suggestedParams.lastRound;
            reference.genesisID = reference.suggestedParams.genesisID;
          }
          const txn = transaction;
          txn.from = address.decodeAddress(txn.from);
          if (txn.to !== void 0)
            txn.to = address.decodeAddress(txn.to);
          if (txn.closeRemainderTo !== void 0)
            txn.closeRemainderTo = address.decodeAddress(txn.closeRemainderTo);
          if (txn.assetManager !== void 0)
            txn.assetManager = address.decodeAddress(txn.assetManager);
          if (txn.assetReserve !== void 0)
            txn.assetReserve = address.decodeAddress(txn.assetReserve);
          if (txn.assetFreeze !== void 0)
            txn.assetFreeze = address.decodeAddress(txn.assetFreeze);
          if (txn.assetClawback !== void 0)
            txn.assetClawback = address.decodeAddress(txn.assetClawback);
          if (txn.assetRevocationTarget !== void 0)
            txn.assetRevocationTarget = address.decodeAddress(txn.assetRevocationTarget);
          if (txn.freezeAccount !== void 0)
            txn.freezeAccount = address.decodeAddress(txn.freezeAccount);
          if (txn.reKeyTo !== void 0)
            txn.reKeyTo = address.decodeAddress(txn.reKeyTo);
          if (txn.genesisHash === void 0)
            throw Error("genesis hash must be specified and in a base64 string.");
          txn.genesisHash = buffer_1.Buffer.from(txn.genesisHash, "base64");
          if (txn.amount !== void 0 && (!(Number.isSafeInteger(txn.amount) || typeof txn.amount === "bigint" && txn.amount <= BigInt("0xffffffffffffffff")) || txn.amount < 0))
            throw Error("Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.");
          if (!Number.isSafeInteger(txn.fee) || txn.fee < 0)
            throw Error("fee must be a positive number and smaller than 2^53-1");
          if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0)
            throw Error("firstRound must be a positive number");
          if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0)
            throw Error("lastRound must be a positive number");
          if (txn.extraPages !== void 0 && (!Number.isInteger(txn.extraPages) || txn.extraPages < 0 || txn.extraPages > 3))
            throw Error("extraPages must be an Integer between and including 0 to 3");
          if (txn.assetTotal !== void 0 && (!(Number.isSafeInteger(txn.assetTotal) || typeof txn.assetTotal === "bigint" && txn.assetTotal <= BigInt("0xffffffffffffffff")) || txn.assetTotal < 0))
            throw Error("Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.");
          if (txn.assetDecimals !== void 0 && (!Number.isSafeInteger(txn.assetDecimals) || txn.assetDecimals < 0 || txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS))
            throw Error(`assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`);
          if (txn.assetIndex !== void 0 && (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0))
            throw Error("Asset index must be a positive number and smaller than 2^53-1");
          if (txn.appIndex !== void 0 && (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0))
            throw Error("Application index must be a positive number and smaller than 2^53-1");
          if (txn.appLocalInts !== void 0 && (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0))
            throw Error("Application local ints count must be a positive number and smaller than 2^53-1");
          if (txn.appLocalByteSlices !== void 0 && (!Number.isSafeInteger(txn.appLocalByteSlices) || txn.appLocalByteSlices < 0))
            throw Error("Application local byte slices count must be a positive number and smaller than 2^53-1");
          if (txn.appGlobalInts !== void 0 && (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0))
            throw Error("Application global ints count must be a positive number and smaller than 2^53-1");
          if (txn.appGlobalByteSlices !== void 0 && (!Number.isSafeInteger(txn.appGlobalByteSlices) || txn.appGlobalByteSlices < 0))
            throw Error("Application global byte slices count must be a positive number and smaller than 2^53-1");
          if (txn.appApprovalProgram !== void 0) {
            if (txn.appApprovalProgram.constructor !== Uint8Array)
              throw Error("appApprovalProgram must be a Uint8Array.");
          }
          if (txn.appClearProgram !== void 0) {
            if (txn.appClearProgram.constructor !== Uint8Array)
              throw Error("appClearProgram must be a Uint8Array.");
          }
          if (txn.appArgs !== void 0) {
            if (!Array.isArray(txn.appArgs))
              throw Error("appArgs must be an Array of Uint8Array.");
            txn.appArgs = txn.appArgs.slice();
            txn.appArgs.forEach((arg) => {
              if (arg.constructor !== Uint8Array)
                throw Error("each element of AppArgs must be a Uint8Array.");
            });
          } else {
            txn.appArgs = [];
          }
          if (txn.appAccounts !== void 0) {
            if (!Array.isArray(txn.appAccounts))
              throw Error("appAccounts must be an Array of addresses.");
            txn.appAccounts = txn.appAccounts.map((addressAsString) => address.decodeAddress(addressAsString));
          }
          if (txn.appForeignApps !== void 0) {
            if (!Array.isArray(txn.appForeignApps))
              throw Error("appForeignApps must be an Array of integers.");
            txn.appForeignApps = txn.appForeignApps.slice();
            txn.appForeignApps.forEach((foreignAppIndex) => {
              if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0)
                throw Error("each foreign application index must be a positive number and smaller than 2^53-1");
            });
          }
          if (txn.appForeignAssets !== void 0) {
            if (!Array.isArray(txn.appForeignAssets))
              throw Error("appForeignAssets must be an Array of integers.");
            txn.appForeignAssets = txn.appForeignAssets.slice();
            txn.appForeignAssets.forEach((foreignAssetIndex) => {
              if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0)
                throw Error("each foreign asset index must be a positive number and smaller than 2^53-1");
            });
          }
          if (txn.boxes !== void 0) {
            if (!Array.isArray(txn.boxes))
              throw Error("boxes must be an Array of BoxReference.");
            txn.boxes = txn.boxes.slice();
            txn.boxes.forEach((box) => {
              if (!Number.isSafeInteger(box.appIndex) || box.name.constructor !== Uint8Array)
                throw Error("box app index must be a number and name must be an Uint8Array.");
            });
          }
          if (txn.assetMetadataHash !== void 0 && txn.assetMetadataHash.length !== 0) {
            if (typeof txn.assetMetadataHash === "string") {
              txn.assetMetadataHash = new Uint8Array(buffer_1.Buffer.from(txn.assetMetadataHash));
            }
            if (txn.assetMetadataHash.constructor !== Uint8Array || txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH) {
              throw Error(`assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`);
            }
            if (txn.assetMetadataHash.every((value) => value === 0)) {
              txn.assetMetadataHash = void 0;
            }
          } else {
            txn.assetMetadataHash = void 0;
          }
          if (txn.note !== void 0) {
            if (txn.note.constructor !== Uint8Array)
              throw Error("note must be a Uint8Array.");
          } else {
            txn.note = new Uint8Array(0);
          }
          if (txn.lease !== void 0) {
            if (txn.lease.constructor !== Uint8Array)
              throw Error("lease must be a Uint8Array.");
            if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)
              throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);
            if (txn.lease.every((value) => value === 0)) {
              txn.lease = new Uint8Array(0);
            }
          } else {
            txn.lease = new Uint8Array(0);
          }
          txn.voteKey = getKeyregKey(txn.voteKey, "voteKey", KEYREG_VOTE_KEY_LENGTH);
          txn.selectionKey = getKeyregKey(txn.selectionKey, "selectionKey", KEYREG_SELECTION_KEY_LENGTH);
          txn.stateProofKey = getKeyregKey(txn.stateProofKey, "stateProofKey", KEYREG_STATE_PROOF_KEY_LENGTH);
          if (txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.voteFirst || txn.stateProofKey || txn.voteLast || txn.voteKeyDilution)) {
            throw new Error("nonParticipation is true but participation params are present.");
          }
          if (!txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.stateProofKey || txn.voteFirst || txn.voteLast || txn.voteKeyDilution) && !(txn.voteKey && txn.selectionKey && txn.voteFirst && txn.voteLast && txn.voteKeyDilution)) {
            throw new Error("online key registration missing at least one of the following fields: voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution");
          }
          delete txn.suggestedParams;
          Object.assign(this, utils.removeUndefinedProperties(txn));
          if (!txn.flatFee) {
            this.fee *= this.estimateSize();
            if (this.fee < exports.ALGORAND_MIN_TX_FEE) {
              this.fee = exports.ALGORAND_MIN_TX_FEE;
            }
          }
          this.group = void 0;
          if (txn.stateProofType !== void 0 && (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0))
            throw Error("State Proof type must be a positive number and smaller than 2^53-1");
          if (txn.stateProofMessage !== void 0) {
            if (txn.stateProofMessage.constructor !== Uint8Array)
              throw Error("stateProofMessage must be a Uint8Array.");
          } else {
            txn.stateProofMessage = new Uint8Array(0);
          }
          if (txn.stateProof !== void 0) {
            if (txn.stateProof.constructor !== Uint8Array)
              throw Error("stateProof must be a Uint8Array.");
          } else {
            txn.stateProof = new Uint8Array(0);
          }
        }
        // eslint-disable-next-line camelcase
        get_obj_for_encoding() {
          if (this.type === "pay") {
            const txn = {
              amt: this.amount,
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              type: "pay",
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              grp: this.group
            };
            if (this.closeRemainderTo !== void 0 && address.encodeAddress(this.closeRemainderTo.publicKey) !== address.ALGORAND_ZERO_ADDRESS_STRING) {
              txn.close = buffer_1.Buffer.from(this.closeRemainderTo.publicKey);
            }
            if (this.reKeyTo !== void 0) {
              txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);
            }
            if (this.to !== void 0)
              txn.rcv = buffer_1.Buffer.from(this.to.publicKey);
            if (!txn.note.length)
              delete txn.note;
            if (!txn.amt)
              delete txn.amt;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (txn.grp === void 0)
              delete txn.grp;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.rekey)
              delete txn.rekey;
            return txn;
          }
          if (this.type === "keyreg") {
            const txn = {
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              type: this.type,
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              grp: this.group,
              votekey: this.voteKey,
              selkey: this.selectionKey,
              sprfkey: this.stateProofKey,
              votefst: this.voteFirst,
              votelst: this.voteLast,
              votekd: this.voteKeyDilution
            };
            if (!txn.note.length)
              delete txn.note;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (txn.grp === void 0)
              delete txn.grp;
            if (this.reKeyTo !== void 0) {
              txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);
            }
            if (this.nonParticipation) {
              txn.nonpart = true;
            }
            if (!txn.selkey)
              delete txn.selkey;
            if (!txn.votekey)
              delete txn.votekey;
            if (!txn.sprfkey)
              delete txn.sprfkey;
            if (!txn.votefst)
              delete txn.votefst;
            if (!txn.votelst)
              delete txn.votelst;
            if (!txn.votekd)
              delete txn.votekd;
            return txn;
          }
          if (this.type === "acfg") {
            const txn = {
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              type: this.type,
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              grp: this.group,
              caid: this.assetIndex,
              apar: {
                t: this.assetTotal,
                df: this.assetDefaultFrozen,
                dc: this.assetDecimals
              }
            };
            if (this.assetManager !== void 0)
              txn.apar.m = buffer_1.Buffer.from(this.assetManager.publicKey);
            if (this.assetReserve !== void 0)
              txn.apar.r = buffer_1.Buffer.from(this.assetReserve.publicKey);
            if (this.assetFreeze !== void 0)
              txn.apar.f = buffer_1.Buffer.from(this.assetFreeze.publicKey);
            if (this.assetClawback !== void 0)
              txn.apar.c = buffer_1.Buffer.from(this.assetClawback.publicKey);
            if (this.assetName !== void 0)
              txn.apar.an = this.assetName;
            if (this.assetUnitName !== void 0)
              txn.apar.un = this.assetUnitName;
            if (this.assetURL !== void 0)
              txn.apar.au = this.assetURL;
            if (this.assetMetadataHash !== void 0)
              txn.apar.am = buffer_1.Buffer.from(this.assetMetadataHash);
            if (!txn.note.length)
              delete txn.note;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.amt)
              delete txn.amt;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (this.reKeyTo !== void 0) {
              txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);
            }
            if (!txn.caid)
              delete txn.caid;
            if (!txn.apar.t && !txn.apar.un && !txn.apar.an && !txn.apar.df && !txn.apar.m && !txn.apar.r && !txn.apar.f && !txn.apar.c && !txn.apar.au && !txn.apar.am && !txn.apar.dc) {
              delete txn.apar;
            } else {
              if (!txn.apar.t)
                delete txn.apar.t;
              if (!txn.apar.dc)
                delete txn.apar.dc;
              if (!txn.apar.un)
                delete txn.apar.un;
              if (!txn.apar.an)
                delete txn.apar.an;
              if (!txn.apar.df)
                delete txn.apar.df;
              if (!txn.apar.m)
                delete txn.apar.m;
              if (!txn.apar.r)
                delete txn.apar.r;
              if (!txn.apar.f)
                delete txn.apar.f;
              if (!txn.apar.c)
                delete txn.apar.c;
              if (!txn.apar.au)
                delete txn.apar.au;
              if (!txn.apar.am)
                delete txn.apar.am;
            }
            if (txn.grp === void 0)
              delete txn.grp;
            return txn;
          }
          if (this.type === "axfer") {
            const txn = {
              aamt: this.amount,
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              arcv: buffer_1.Buffer.from(this.to.publicKey),
              type: this.type,
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              grp: this.group,
              xaid: this.assetIndex
            };
            if (this.closeRemainderTo !== void 0)
              txn.aclose = buffer_1.Buffer.from(this.closeRemainderTo.publicKey);
            if (this.assetRevocationTarget !== void 0)
              txn.asnd = buffer_1.Buffer.from(this.assetRevocationTarget.publicKey);
            if (!txn.note.length)
              delete txn.note;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.aamt)
              delete txn.aamt;
            if (!txn.amt)
              delete txn.amt;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (txn.grp === void 0)
              delete txn.grp;
            if (!txn.aclose)
              delete txn.aclose;
            if (!txn.asnd)
              delete txn.asnd;
            if (!txn.rekey)
              delete txn.rekey;
            if (this.reKeyTo !== void 0) {
              txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);
            }
            return txn;
          }
          if (this.type === "afrz") {
            const txn = {
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              type: this.type,
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              grp: this.group,
              faid: this.assetIndex,
              afrz: this.freezeState
            };
            if (this.freezeAccount !== void 0)
              txn.fadd = buffer_1.Buffer.from(this.freezeAccount.publicKey);
            if (!txn.note.length)
              delete txn.note;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.amt)
              delete txn.amt;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (!txn.afrz)
              delete txn.afrz;
            if (txn.grp === void 0)
              delete txn.grp;
            if (this.reKeyTo !== void 0) {
              txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);
            }
            return txn;
          }
          if (this.type === "appl") {
            const txn = {
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              type: this.type,
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              grp: this.group,
              apid: this.appIndex,
              apan: this.appOnComplete,
              apls: {
                nui: this.appLocalInts,
                nbs: this.appLocalByteSlices
              },
              apgs: {
                nui: this.appGlobalInts,
                nbs: this.appGlobalByteSlices
              },
              apfa: this.appForeignApps,
              apas: this.appForeignAssets,
              apep: this.extraPages,
              apbx: (0, boxStorage_1.translateBoxReferences)(this.boxes, this.appForeignApps, this.appIndex)
            };
            if (this.reKeyTo !== void 0) {
              txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);
            }
            if (this.appApprovalProgram !== void 0) {
              txn.apap = buffer_1.Buffer.from(this.appApprovalProgram);
            }
            if (this.appClearProgram !== void 0) {
              txn.apsu = buffer_1.Buffer.from(this.appClearProgram);
            }
            if (this.appArgs !== void 0) {
              txn.apaa = this.appArgs.map((arg) => buffer_1.Buffer.from(arg));
            }
            if (this.appAccounts !== void 0) {
              txn.apat = this.appAccounts.map((decodedAddress) => buffer_1.Buffer.from(decodedAddress.publicKey));
            }
            if (!txn.note.length)
              delete txn.note;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.amt)
              delete txn.amt;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (!txn.apid)
              delete txn.apid;
            if (!txn.apls.nui)
              delete txn.apls.nui;
            if (!txn.apls.nbs)
              delete txn.apls.nbs;
            if (!txn.apls.nui && !txn.apls.nbs)
              delete txn.apls;
            if (!txn.apgs.nui)
              delete txn.apgs.nui;
            if (!txn.apgs.nbs)
              delete txn.apgs.nbs;
            if (!txn.apaa || !txn.apaa.length)
              delete txn.apaa;
            if (!txn.apgs.nui && !txn.apgs.nbs)
              delete txn.apgs;
            if (!txn.apap)
              delete txn.apap;
            if (!txn.apsu)
              delete txn.apsu;
            if (!txn.apan)
              delete txn.apan;
            if (!txn.apfa || !txn.apfa.length)
              delete txn.apfa;
            if (!txn.apas || !txn.apas.length)
              delete txn.apas;
            for (const box of txn.apbx) {
              if (!box.i)
                delete box.i;
              if (!box.n || !box.n.length)
                delete box.n;
            }
            if (!txn.apbx || !txn.apbx.length)
              delete txn.apbx;
            if (!txn.apat || !txn.apat.length)
              delete txn.apat;
            if (!txn.apep)
              delete txn.apep;
            if (txn.grp === void 0)
              delete txn.grp;
            return txn;
          }
          if (this.type === "stpf") {
            const txn = {
              fee: this.fee,
              fv: this.firstRound,
              lv: this.lastRound,
              note: buffer_1.Buffer.from(this.note),
              snd: buffer_1.Buffer.from(this.from.publicKey),
              type: this.type,
              gen: this.genesisID,
              gh: this.genesisHash,
              lx: buffer_1.Buffer.from(this.lease),
              sptype: this.stateProofType,
              spmsg: buffer_1.Buffer.from(this.stateProofMessage),
              sp: buffer_1.Buffer.from(this.stateProof)
            };
            if (!txn.sptype)
              delete txn.sptype;
            if (!txn.note.length)
              delete txn.note;
            if (!txn.lx.length)
              delete txn.lx;
            if (!txn.amt)
              delete txn.amt;
            if (!txn.fee)
              delete txn.fee;
            if (!txn.fv)
              delete txn.fv;
            if (!txn.gen)
              delete txn.gen;
            if (!txn.apid)
              delete txn.apid;
            if (!txn.apaa || !txn.apaa.length)
              delete txn.apaa;
            if (!txn.apap)
              delete txn.apap;
            if (!txn.apsu)
              delete txn.apsu;
            if (!txn.apan)
              delete txn.apan;
            if (!txn.apfa || !txn.apfa.length)
              delete txn.apfa;
            if (!txn.apas || !txn.apas.length)
              delete txn.apas;
            if (!txn.apat || !txn.apat.length)
              delete txn.apat;
            if (!txn.apep)
              delete txn.apep;
            if (txn.grp === void 0)
              delete txn.grp;
            return txn;
          }
          return void 0;
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(txnForEnc) {
          const txn = Object.create(this.prototype);
          txn.name = "Transaction";
          txn.tag = buffer_1.Buffer.from("TX");
          txn.genesisID = txnForEnc.gen;
          txn.genesisHash = buffer_1.Buffer.from(txnForEnc.gh);
          if (!(0, base_1.isTransactionType)(txnForEnc.type)) {
            throw new Error(`Unrecognized transaction type: ${txnForEnc.type}`);
          }
          txn.type = txnForEnc.type;
          txn.fee = txnForEnc.fee;
          txn.firstRound = txnForEnc.fv;
          txn.lastRound = txnForEnc.lv;
          txn.note = new Uint8Array(txnForEnc.note);
          txn.lease = new Uint8Array(txnForEnc.lx);
          txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));
          if (txnForEnc.grp !== void 0)
            txn.group = buffer_1.Buffer.from(txnForEnc.grp);
          if (txnForEnc.rekey !== void 0)
            txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));
          if (txnForEnc.type === "pay") {
            txn.amount = txnForEnc.amt;
            txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));
            if (txnForEnc.close !== void 0)
              txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));
          } else if (txnForEnc.type === "keyreg") {
            if (txnForEnc.votekey !== void 0) {
              txn.voteKey = buffer_1.Buffer.from(txnForEnc.votekey);
            }
            if (txnForEnc.selkey !== void 0) {
              txn.selectionKey = buffer_1.Buffer.from(txnForEnc.selkey);
            }
            if (txnForEnc.sprfkey !== void 0) {
              txn.stateProofKey = buffer_1.Buffer.from(txnForEnc.sprfkey);
            }
            if (txnForEnc.votekd !== void 0) {
              txn.voteKeyDilution = txnForEnc.votekd;
            }
            if (txnForEnc.votefst !== void 0) {
              txn.voteFirst = txnForEnc.votefst;
            }
            if (txnForEnc.votelst !== void 0) {
              txn.voteLast = txnForEnc.votelst;
            }
            if (txnForEnc.nonpart !== void 0) {
              txn.nonParticipation = txnForEnc.nonpart;
            }
          } else if (txnForEnc.type === "acfg") {
            if (txnForEnc.caid !== void 0) {
              txn.assetIndex = txnForEnc.caid;
            }
            if (txnForEnc.apar !== void 0) {
              txn.assetTotal = txnForEnc.apar.t;
              txn.assetDefaultFrozen = txnForEnc.apar.df;
              if (txnForEnc.apar.dc !== void 0)
                txn.assetDecimals = txnForEnc.apar.dc;
              if (txnForEnc.apar.m !== void 0)
                txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));
              if (txnForEnc.apar.r !== void 0)
                txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));
              if (txnForEnc.apar.f !== void 0)
                txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));
              if (txnForEnc.apar.c !== void 0)
                txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));
              if (txnForEnc.apar.un !== void 0)
                txn.assetUnitName = txnForEnc.apar.un;
              if (txnForEnc.apar.an !== void 0)
                txn.assetName = txnForEnc.apar.an;
              if (txnForEnc.apar.au !== void 0)
                txn.assetURL = txnForEnc.apar.au;
              if (txnForEnc.apar.am !== void 0)
                txn.assetMetadataHash = txnForEnc.apar.am;
            }
          } else if (txnForEnc.type === "axfer") {
            if (txnForEnc.xaid !== void 0) {
              txn.assetIndex = txnForEnc.xaid;
            }
            if (txnForEnc.aamt !== void 0)
              txn.amount = txnForEnc.aamt;
            if (txnForEnc.aclose !== void 0) {
              txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));
            }
            if (txnForEnc.asnd !== void 0) {
              txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));
            }
            txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));
          } else if (txnForEnc.type === "afrz") {
            if (txnForEnc.afrz !== void 0) {
              txn.freezeState = txnForEnc.afrz;
            }
            if (txnForEnc.faid !== void 0) {
              txn.assetIndex = txnForEnc.faid;
            }
            txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));
          } else if (txnForEnc.type === "appl") {
            if (txnForEnc.apid !== void 0) {
              txn.appIndex = txnForEnc.apid;
            }
            if (txnForEnc.apan !== void 0) {
              txn.appOnComplete = txnForEnc.apan;
            }
            if (txnForEnc.apls !== void 0) {
              if (txnForEnc.apls.nui !== void 0)
                txn.appLocalInts = txnForEnc.apls.nui;
              if (txnForEnc.apls.nbs !== void 0)
                txn.appLocalByteSlices = txnForEnc.apls.nbs;
            }
            if (txnForEnc.apgs !== void 0) {
              if (txnForEnc.apgs.nui !== void 0)
                txn.appGlobalInts = txnForEnc.apgs.nui;
              if (txnForEnc.apgs.nbs !== void 0)
                txn.appGlobalByteSlices = txnForEnc.apgs.nbs;
            }
            if (txnForEnc.apep !== void 0) {
              txn.extraPages = txnForEnc.apep;
            }
            if (txnForEnc.apap !== void 0) {
              txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);
            }
            if (txnForEnc.apsu !== void 0) {
              txn.appClearProgram = new Uint8Array(txnForEnc.apsu);
            }
            if (txnForEnc.apaa !== void 0) {
              txn.appArgs = txnForEnc.apaa.map((arg) => new Uint8Array(arg));
            }
            if (txnForEnc.apat !== void 0) {
              txn.appAccounts = txnForEnc.apat.map((addressBytes) => address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes))));
            }
            if (txnForEnc.apfa !== void 0) {
              txn.appForeignApps = txnForEnc.apfa;
            }
            if (txnForEnc.apas !== void 0) {
              txn.appForeignAssets = txnForEnc.apas;
            }
            if (txnForEnc.apbx !== void 0) {
              txn.boxes = txnForEnc.apbx.map((box) => ({
                // We return 0 for the app ID so that it's guaranteed translateBoxReferences will
                // translate the app index back to 0. If we instead returned the called app ID,
                // translateBoxReferences would translate the app index to a nonzero value if the called
                // app is also in the foreign app array.
                appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,
                name: box.n
              }));
            }
          } else if (txnForEnc.type === "stpf") {
            if (txnForEnc.sptype !== void 0) {
              txn.stateProofType = txnForEnc.sptype;
            }
            if (txnForEnc.sp !== void 0) {
              txn.stateProof = txnForEnc.sp;
            }
            if (txnForEnc.spmsg !== void 0) {
              txn.stateProofMessage = txnForEnc.spmsg;
            }
          }
          return txn;
        }
        estimateSize() {
          return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;
        }
        bytesToSign() {
          const encodedMsg = this.toByte();
          return buffer_1.Buffer.from(utils.concatArrays(this.tag, encodedMsg));
        }
        toByte() {
          return encoding.encode(this.get_obj_for_encoding());
        }
        // returns the raw signature
        rawSignTxn(sk) {
          const toBeSigned = this.bytesToSign();
          const sig = nacl.sign(toBeSigned, sk);
          return buffer_1.Buffer.from(sig);
        }
        signTxn(sk) {
          const sTxn = {
            sig: this.rawSignTxn(sk),
            txn: this.get_obj_for_encoding()
          };
          const keypair = nacl.keyPairFromSecretKey(sk);
          const pubKeyFromSk = keypair.publicKey;
          if (address.encodeAddress(pubKeyFromSk) !== address.encodeAddress(this.from.publicKey)) {
            sTxn.sgnr = buffer_1.Buffer.from(pubKeyFromSk);
          }
          return new Uint8Array(encoding.encode(sTxn));
        }
        attachSignature(signerAddr, signature) {
          if (!nacl.isValidSignatureLength(signature.length)) {
            throw new Error("Invalid signature length");
          }
          const sTxn = {
            sig: buffer_1.Buffer.from(signature),
            txn: this.get_obj_for_encoding()
          };
          if (signerAddr !== address.encodeAddress(this.from.publicKey)) {
            const signerPublicKey = address.decodeAddress(signerAddr).publicKey;
            sTxn.sgnr = buffer_1.Buffer.from(signerPublicKey);
          }
          return new Uint8Array(encoding.encode(sTxn));
        }
        rawTxID() {
          const enMsg = this.toByte();
          const gh = buffer_1.Buffer.from(utils.concatArrays(this.tag, enMsg));
          return buffer_1.Buffer.from(nacl.genericHash(gh));
        }
        txID() {
          const hash = this.rawTxID();
          return hi_base32_1.default.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);
        }
        // add a lease to a transaction not yet having
        // supply feePerByte to increment fee accordingly
        addLease(lease, feePerByte = 0) {
          let mutableLease;
          if (lease !== void 0) {
            if (lease.constructor !== Uint8Array)
              throw Error("lease must be a Uint8Array.");
            if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)
              throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);
            mutableLease = new Uint8Array(lease);
          } else {
            mutableLease = new Uint8Array(0);
          }
          this.lease = mutableLease;
          if (feePerByte !== 0) {
            this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;
          }
        }
        // add the rekey-to field to a transaction not yet having it
        // supply feePerByte to increment fee accordingly
        addRekey(reKeyTo, feePerByte = 0) {
          if (reKeyTo !== void 0) {
            this.reKeyTo = address.decodeAddress(reKeyTo);
          }
          if (feePerByte !== 0) {
            this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;
          }
        }
        // build display dict for prettyPrint and toString
        // eslint-disable-next-line no-underscore-dangle
        _getDictForDisplay() {
          const forPrinting = {
            ...this
          };
          forPrinting.tag = forPrinting.tag.toString();
          forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);
          if (forPrinting.to !== void 0)
            forPrinting.to = address.encodeAddress(forPrinting.to.publicKey);
          if (forPrinting.freezeAccount !== void 0)
            forPrinting.freezeAccount = address.encodeAddress(forPrinting.freezeAccount.publicKey);
          if (forPrinting.closeRemainderTo !== void 0)
            forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);
          if (forPrinting.assetManager !== void 0)
            forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);
          if (forPrinting.assetReserve !== void 0)
            forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);
          if (forPrinting.assetFreeze !== void 0)
            forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);
          if (forPrinting.assetClawback !== void 0)
            forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);
          if (forPrinting.assetRevocationTarget !== void 0)
            forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);
          if (forPrinting.reKeyTo !== void 0)
            forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);
          forPrinting.genesisHash = forPrinting.genesisHash.toString("base64");
          return forPrinting;
        }
        // pretty print the transaction to console
        prettyPrint() {
          console.log(this._getDictForDisplay());
        }
        // get string representation
        toString() {
          return JSON.stringify(this._getDictForDisplay());
        }
      };
      exports.Transaction = Transaction;
      function encodeUnsignedSimulateTransaction(transactionObject) {
        const objToEncode = {
          txn: transactionObject.get_obj_for_encoding()
        };
        return encoding.encode(objToEncode);
      }
      exports.encodeUnsignedSimulateTransaction = encodeUnsignedSimulateTransaction;
      function encodeUnsignedTransaction(transactionObject) {
        const objToEncode = transactionObject.get_obj_for_encoding();
        return encoding.encode(objToEncode);
      }
      exports.encodeUnsignedTransaction = encodeUnsignedTransaction;
      function decodeUnsignedTransaction(transactionBuffer) {
        const partlyDecodedObject = encoding.decode(transactionBuffer);
        return Transaction.from_obj_for_encoding(partlyDecodedObject);
      }
      exports.decodeUnsignedTransaction = decodeUnsignedTransaction;
      function decodeSignedTransaction(transactionBuffer) {
        const stxnDecoded = encoding.decode(transactionBuffer);
        const stxn = {
          ...stxnDecoded,
          txn: Transaction.from_obj_for_encoding(stxnDecoded.txn)
        };
        return stxn;
      }
      exports.decodeSignedTransaction = decodeSignedTransaction;
      function instantiateTxnIfNeeded(transactionLike) {
        return transactionLike instanceof Transaction ? transactionLike : new Transaction(transactionLike);
      }
      exports.instantiateTxnIfNeeded = instantiateTxnIfNeeded;
      exports.default = Transaction;
    }
  });

  // node_modules/algosdk/dist/cjs/bid.js
  var require_bid = __commonJS({
    "node_modules/algosdk/dist/cjs/bid.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      var address = __importStar2(require_address());
      var encoding = __importStar2(require_encoding());
      var nacl = __importStar2(require_naclWrappers());
      var utils = __importStar2(require_utils());
      var Bid = class {
        constructor({ bidderKey, bidAmount, bidID, auctionKey, auctionID, maxPrice }) {
          this.name = "Bid";
          this.tag = buffer_1.Buffer.from([97, 66]);
          const decodedBidderKey = address.decodeAddress(bidderKey);
          const decodedAuctionKey = address.decodeAddress(auctionKey);
          if (!Number.isSafeInteger(bidAmount) || bidAmount < 0)
            throw Error("Bid amount must be positive and 2^53-1");
          if (!Number.isSafeInteger(bidID) || bidID < 0)
            throw Error("BidID must be positive and 2^53-1");
          if (!Number.isSafeInteger(auctionID) || auctionID < 0)
            throw Error("auctionID must be positive");
          Object.assign(this, {
            bidderKey: decodedBidderKey,
            bidAmount,
            bidID,
            auctionKey: decodedAuctionKey,
            auctionID,
            maxPrice
          });
        }
        // eslint-disable-next-line camelcase
        get_obj_for_encoding() {
          return {
            bidder: buffer_1.Buffer.from(this.bidderKey.publicKey),
            cur: this.bidAmount,
            price: this.maxPrice,
            id: this.bidID,
            auc: buffer_1.Buffer.from(this.auctionKey.publicKey),
            aid: this.auctionID
          };
        }
        signBid(sk) {
          const encodedMsg = encoding.encode(this.get_obj_for_encoding());
          const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(this.tag, encodedMsg));
          const sig = nacl.sign(toBeSigned, sk);
          const sBid = {
            sig: buffer_1.Buffer.from(sig),
            bid: this.get_obj_for_encoding()
          };
          const note = {
            t: "b",
            b: sBid
          };
          return new Uint8Array(encoding.encode(note));
        }
      };
      exports.default = Bid;
    }
  });

  // node_modules/algosdk/dist/cjs/convert.js
  var require_convert = __commonJS({
    "node_modules/algosdk/dist/cjs/convert.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.algosToMicroalgos = exports.microalgosToAlgos = exports.INVALID_MICROALGOS_ERROR_MSG = void 0;
      var MICROALGOS_TO_ALGOS_RATIO = 1e6;
      exports.INVALID_MICROALGOS_ERROR_MSG = "Microalgos should be positive and less than 2^53 - 1.";
      function microalgosToAlgos(microalgos) {
        if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {
          throw new Error(exports.INVALID_MICROALGOS_ERROR_MSG);
        }
        return microalgos / MICROALGOS_TO_ALGOS_RATIO;
      }
      exports.microalgosToAlgos = microalgosToAlgos;
      function algosToMicroalgos(algos) {
        const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;
        return Math.round(microalgos);
      }
      exports.algosToMicroalgos = algosToMicroalgos;
    }
  });

  // node_modules/cross-fetch/dist/browser-ponyfill.js
  var require_browser_ponyfill = __commonJS({
    "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
      var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof window !== "undefined" && window;
      var __globalThis__ = function() {
        function F() {
          this.fetch = false;
          this.DOMException = __global__.DOMException;
        }
        F.prototype = __global__;
        return new F();
      }();
      (function(globalThis2) {
        var irrelevant = function(exports2) {
          var global2 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || typeof global2 !== "undefined" && global2;
          var support = {
            searchParams: "URLSearchParams" in global2,
            iterable: "Symbol" in global2 && "iterator" in Symbol,
            blob: "FileReader" in global2 && "Blob" in global2 && function() {
              try {
                new Blob();
                return true;
              } catch (e) {
                return false;
              }
            }(),
            formData: "FormData" in global2,
            arrayBuffer: "ArrayBuffer" in global2
          };
          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          }
          if (support.arrayBuffer) {
            var viewClasses = [
              "[object Int8Array]",
              "[object Uint8Array]",
              "[object Uint8ClampedArray]",
              "[object Int16Array]",
              "[object Uint16Array]",
              "[object Int32Array]",
              "[object Uint32Array]",
              "[object Float32Array]",
              "[object Float64Array]"
            ];
            var isArrayBufferView = ArrayBuffer.isView || function(obj) {
              return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
          }
          function normalizeName(name) {
            if (typeof name !== "string") {
              name = String(name);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
              throw new TypeError('Invalid character in header field name: "' + name + '"');
            }
            return name.toLowerCase();
          }
          function normalizeValue(value) {
            if (typeof value !== "string") {
              value = String(value);
            }
            return value;
          }
          function iteratorFor(items) {
            var iterator = {
              next: function() {
                var value = items.shift();
                return { done: value === void 0, value };
              }
            };
            if (support.iterable) {
              iterator[Symbol.iterator] = function() {
                return iterator;
              };
            }
            return iterator;
          }
          function Headers(headers) {
            this.map = {};
            if (headers instanceof Headers) {
              headers.forEach(function(value, name) {
                this.append(name, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function(header) {
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
              }, this);
            }
          }
          Headers.prototype.append = function(name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ", " + value : value;
          };
          Headers.prototype["delete"] = function(name) {
            delete this.map[normalizeName(name)];
          };
          Headers.prototype.get = function(name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
          };
          Headers.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name));
          };
          Headers.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
          };
          Headers.prototype.forEach = function(callback, thisArg) {
            for (var name in this.map) {
              if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
              }
            }
          };
          Headers.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push(name);
            });
            return iteratorFor(items);
          };
          Headers.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
              items.push(value);
            });
            return iteratorFor(items);
          };
          Headers.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push([name, value]);
            });
            return iteratorFor(items);
          };
          if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
          }
          function consumed(body) {
            if (body.bodyUsed) {
              return Promise.reject(new TypeError("Already read"));
            }
            body.bodyUsed = true;
          }
          function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
              reader.onload = function() {
                resolve(reader.result);
              };
              reader.onerror = function() {
                reject(reader.error);
              };
            });
          }
          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
          }
          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
          }
          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
            for (var i = 0; i < view.length; i++) {
              chars[i] = String.fromCharCode(view[i]);
            }
            return chars.join("");
          }
          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0);
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer;
            }
          }
          function Body() {
            this.bodyUsed = false;
            this._initBody = function(body) {
              this.bodyUsed = this.bodyUsed;
              this._bodyInit = body;
              if (!body) {
                this._bodyText = "";
              } else if (typeof body === "string") {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }
              if (!this.headers.get("content-type")) {
                if (typeof body === "string") {
                  this.headers.set("content-type", "text/plain;charset=UTF-8");
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set("content-type", this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
              }
            };
            if (support.blob) {
              this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as blob");
                } else {
                  return Promise.resolve(new Blob([this._bodyText]));
                }
              };
              this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  var isConsumed = consumed(this);
                  if (isConsumed) {
                    return isConsumed;
                  }
                  if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(
                      this._bodyArrayBuffer.buffer.slice(
                        this._bodyArrayBuffer.byteOffset,
                        this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                      )
                    );
                  } else {
                    return Promise.resolve(this._bodyArrayBuffer);
                  }
                } else {
                  return this.blob().then(readBlobAsArrayBuffer);
                }
              };
            }
            this.text = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as text");
              } else {
                return Promise.resolve(this._bodyText);
              }
            };
            if (support.formData) {
              this.formData = function() {
                return this.text().then(decode);
              };
            }
            this.json = function() {
              return this.text().then(JSON.parse);
            };
            return this;
          }
          var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
          function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
          }
          function Request(input, options) {
            if (!(this instanceof Request)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            }
            options = options || {};
            var body = options.body;
            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError("Already read");
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }
            this.credentials = options.credentials || this.credentials || "same-origin";
            if (options.headers || !this.headers) {
              this.headers = new Headers(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || "GET");
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
            if ((this.method === "GET" || this.method === "HEAD") && body) {
              throw new TypeError("Body not allowed for GET or HEAD requests");
            }
            this._initBody(body);
            if (this.method === "GET" || this.method === "HEAD") {
              if (options.cache === "no-store" || options.cache === "no-cache") {
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                  this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
                } else {
                  var reQueryString = /\?/;
                  this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
                }
              }
            }
          }
          Request.prototype.clone = function() {
            return new Request(this, { body: this._bodyInit });
          };
          function decode(body) {
            var form = new FormData();
            body.trim().split("&").forEach(function(bytes) {
              if (bytes) {
                var split = bytes.split("=");
                var name = split.shift().replace(/\+/g, " ");
                var value = split.join("=").replace(/\+/g, " ");
                form.append(decodeURIComponent(name), decodeURIComponent(value));
              }
            });
            return form;
          }
          function parseHeaders(rawHeaders) {
            var headers = new Headers();
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
            preProcessedHeaders.split("\r").map(function(header) {
              return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
            }).forEach(function(line) {
              var parts = line.split(":");
              var key = parts.shift().trim();
              if (key) {
                var value = parts.join(":").trim();
                headers.append(key, value);
              }
            });
            return headers;
          }
          Body.call(Request.prototype);
          function Response(bodyInit, options) {
            if (!(this instanceof Response)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            }
            if (!options) {
              options = {};
            }
            this.type = "default";
            this.status = options.status === void 0 ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
            this.headers = new Headers(options.headers);
            this.url = options.url || "";
            this._initBody(bodyInit);
          }
          Body.call(Response.prototype);
          Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers(this.headers),
              url: this.url
            });
          };
          Response.error = function() {
            var response = new Response(null, { status: 0, statusText: "" });
            response.type = "error";
            return response;
          };
          var redirectStatuses = [301, 302, 303, 307, 308];
          Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError("Invalid status code");
            }
            return new Response(null, { status, headers: { location: url } });
          };
          exports2.DOMException = global2.DOMException;
          try {
            new exports2.DOMException();
          } catch (err) {
            exports2.DOMException = function(message, name) {
              this.message = message;
              this.name = name;
              var error = Error(message);
              this.stack = error.stack;
            };
            exports2.DOMException.prototype = Object.create(Error.prototype);
            exports2.DOMException.prototype.constructor = exports2.DOMException;
          }
          function fetch2(input, init) {
            return new Promise(function(resolve, reject) {
              var request = new Request(input, init);
              if (request.signal && request.signal.aborted) {
                return reject(new exports2.DOMException("Aborted", "AbortError"));
              }
              var xhr = new XMLHttpRequest();
              function abortXhr() {
                xhr.abort();
              }
              xhr.onload = function() {
                var options = {
                  status: xhr.status,
                  statusText: xhr.statusText,
                  headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                };
                options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                var body = "response" in xhr ? xhr.response : xhr.responseText;
                setTimeout(function() {
                  resolve(new Response(body, options));
                }, 0);
              };
              xhr.onerror = function() {
                setTimeout(function() {
                  reject(new TypeError("Network request failed"));
                }, 0);
              };
              xhr.ontimeout = function() {
                setTimeout(function() {
                  reject(new TypeError("Network request failed"));
                }, 0);
              };
              xhr.onabort = function() {
                setTimeout(function() {
                  reject(new exports2.DOMException("Aborted", "AbortError"));
                }, 0);
              };
              function fixUrl(url) {
                try {
                  return url === "" && global2.location.href ? global2.location.href : url;
                } catch (e) {
                  return url;
                }
              }
              xhr.open(request.method, fixUrl(request.url), true);
              if (request.credentials === "include") {
                xhr.withCredentials = true;
              } else if (request.credentials === "omit") {
                xhr.withCredentials = false;
              }
              if ("responseType" in xhr) {
                if (support.blob) {
                  xhr.responseType = "blob";
                } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
                  xhr.responseType = "arraybuffer";
                }
              }
              if (init && typeof init.headers === "object" && !(init.headers instanceof Headers)) {
                Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                  xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
              } else {
                request.headers.forEach(function(value, name) {
                  xhr.setRequestHeader(name, value);
                });
              }
              if (request.signal) {
                request.signal.addEventListener("abort", abortXhr);
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    request.signal.removeEventListener("abort", abortXhr);
                  }
                };
              }
              xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
            });
          }
          fetch2.polyfill = true;
          if (!global2.fetch) {
            global2.fetch = fetch2;
            global2.Headers = Headers;
            global2.Request = Request;
            global2.Response = Response;
          }
          exports2.Headers = Headers;
          exports2.Request = Request;
          exports2.Response = Response;
          exports2.fetch = fetch2;
          return exports2;
        }({});
      })(__globalThis__);
      __globalThis__.fetch.ponyfill = true;
      delete __globalThis__.fetch.polyfill;
      var ctx = __global__.fetch ? __global__ : __globalThis__;
      exports = ctx.fetch;
      exports.default = ctx.fetch;
      exports.fetch = ctx.fetch;
      exports.Headers = ctx.Headers;
      exports.Request = ctx.Request;
      exports.Response = ctx.Response;
      module.exports = exports;
    }
  });

  // node_modules/algosdk/dist/cjs/client/urlTokenBaseHTTPClient.js
  var require_urlTokenBaseHTTPClient = __commonJS({
    "node_modules/algosdk/dist/cjs/client/urlTokenBaseHTTPClient.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.URLTokenBaseHTTPClient = void 0;
      var buffer_1 = require_buffer2();
      var cross_fetch_1 = require_browser_ponyfill();
      var URLTokenBaseHTTPError = class extends Error {
        constructor(message, response) {
          super(message);
          this.response = response;
          this.name = "URLTokenBaseHTTPError";
          this.response = response;
        }
      };
      var URLTokenBaseHTTPClient = class _URLTokenBaseHTTPClient {
        constructor(tokenHeader, baseServer, port, defaultHeaders = {}) {
          this.defaultHeaders = defaultHeaders;
          const fixedBaseServer = baseServer.endsWith("/") ? baseServer : `${baseServer}/`;
          const baseServerURL = new URL(fixedBaseServer);
          if (typeof port !== "undefined") {
            baseServerURL.port = port.toString();
          }
          if (baseServerURL.protocol.length === 0) {
            throw new Error("Invalid base server URL, protocol must be defined.");
          }
          this.baseURL = baseServerURL;
          this.tokenHeader = tokenHeader;
        }
        /**
         * Compute the URL for a path relative to the instance's address
         * @param relativePath - A path string
         * @param query - An optional key-value object of query parameters to add to the URL. If the
         *   relativePath already has query parameters on it, the additional parameters defined here will
         *   be added to the URL without modifying those (unless a key collision occurs).
         * @returns A URL string
         */
        getURL(relativePath, query) {
          let fixedRelativePath;
          if (relativePath.startsWith("./")) {
            fixedRelativePath = relativePath;
          } else if (relativePath.startsWith("/")) {
            fixedRelativePath = `.${relativePath}`;
          } else {
            fixedRelativePath = `./${relativePath}`;
          }
          const address = new URL(fixedRelativePath, this.baseURL);
          if (query) {
            for (const [key, value] of Object.entries(query)) {
              address.searchParams.set(key, value);
            }
          }
          return address.toString();
        }
        static formatFetchResponseHeaders(headers) {
          const headersObj = {};
          headers.forEach((key, value) => {
            headersObj[key] = value;
          });
          return headersObj;
        }
        static async checkHttpError(res) {
          if (res.ok) {
            return;
          }
          let body = null;
          let bodyErrorMessage = null;
          try {
            body = new Uint8Array(await res.arrayBuffer());
            const decoded = JSON.parse(buffer_1.Buffer.from(body).toString());
            if (decoded.message) {
              bodyErrorMessage = decoded.message;
            }
          } catch (_) {
          }
          let message = `Network request error. Received status ${res.status} (${res.statusText})`;
          if (bodyErrorMessage) {
            message += `: ${bodyErrorMessage}`;
          }
          throw new URLTokenBaseHTTPError(message, {
            body,
            status: res.status,
            headers: _URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)
          });
        }
        static async formatFetchResponse(res) {
          await this.checkHttpError(res);
          return {
            body: new Uint8Array(await res.arrayBuffer()),
            status: res.status,
            headers: _URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers)
          };
        }
        async get(relativePath, query, requestHeaders = {}) {
          const headers = {
            ...this.tokenHeader,
            ...this.defaultHeaders,
            ...requestHeaders
          };
          const res = await (0, cross_fetch_1.fetch)(this.getURL(relativePath, query), {
            headers
          });
          return _URLTokenBaseHTTPClient.formatFetchResponse(res);
        }
        async post(relativePath, data, query, requestHeaders = {}) {
          const headers = {
            ...this.tokenHeader,
            ...this.defaultHeaders,
            ...requestHeaders
          };
          const res = await (0, cross_fetch_1.fetch)(this.getURL(relativePath, query), {
            method: "POST",
            body: data,
            headers
          });
          return _URLTokenBaseHTTPClient.formatFetchResponse(res);
        }
        async delete(relativePath, data, query, requestHeaders = {}) {
          const headers = {
            ...this.tokenHeader,
            ...this.defaultHeaders,
            ...requestHeaders
          };
          const res = await (0, cross_fetch_1.fetch)(this.getURL(relativePath, query), {
            method: "DELETE",
            body: data,
            headers
          });
          return _URLTokenBaseHTTPClient.formatFetchResponse(res);
        }
      };
      exports.URLTokenBaseHTTPClient = URLTokenBaseHTTPClient;
    }
  });

  // node_modules/algosdk/dist/cjs/client/client.js
  var require_client = __commonJS({
    "node_modules/algosdk/dist/cjs/client/client.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      var utils = __importStar2(require_utils());
      var urlTokenBaseHTTPClient_1 = require_urlTokenBaseHTTPClient();
      function removeFalsyOrEmpty(obj) {
        for (const key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!obj[key] || obj[key].length === 0)
              delete obj[key];
          }
        }
        return obj;
      }
      function tolowerCaseKeys(o) {
        return Object.keys(o).reduce((c, k) => (c[k.toLowerCase()] = o[k], c), {});
      }
      function getAcceptFormat(query) {
        if (query !== void 0 && Object.prototype.hasOwnProperty.call(query, "format")) {
          switch (query.format) {
            case "msgpack":
              return "application/msgpack";
            case "json":
            default:
              return "application/json";
          }
        } else
          return "application/json";
      }
      var HTTPClient = class _HTTPClient {
        constructor(bcOrTokenHeader, baseServer, port, defaultHeaders = {}) {
          if (baseServer !== void 0) {
            this.bc = new urlTokenBaseHTTPClient_1.URLTokenBaseHTTPClient(bcOrTokenHeader, baseServer, port, defaultHeaders);
          } else {
            this.bc = bcOrTokenHeader;
          }
        }
        /**
         * Parse JSON using either the built-in JSON.parse or utils.parseJSON
         * depending on whether jsonOptions are provided or not
         *
         * @param text - JSON data
         * @param status - Status of the response (used in case parseJSON fails)
         * @param jsonOptions - Options object to use to decode JSON responses. See
         *   utils.parseJSON for the options available.
         */
        static parseJSON(text, status, jsonOptions = {}) {
          try {
            if (Object.keys(jsonOptions).length === 0) {
              return text && JSON.parse(text);
            }
            return text && utils.parseJSON(text, jsonOptions);
          } catch (err_) {
            const err = err_;
            err.rawResponse = text || null;
            err.statusCode = status;
            throw err;
          }
        }
        /**
         * Serialize the data according to the requestHeaders
         * Assumes that requestHeaders contain a key "content-type"
         * If the content-type is "application/json", data is JSON serialized
         * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array
         * or an Uint8Array
         * @private
         */
        static serializeData(data, requestHeaders) {
          if (!data) {
            return new Uint8Array(0);
          }
          if (requestHeaders["content-type"] === "application/json") {
            return new Uint8Array(buffer_1.Buffer.from(JSON.stringify(data)));
          }
          if (typeof data === "string") {
            return new Uint8Array(buffer_1.Buffer.from(data));
          }
          if (data instanceof Uint8Array) {
            return data;
          }
          throw new Error("provided data is neither a string nor a Uint8Array and content-type is not application/json");
        }
        /**
         * Convert a BaseHTTPClientResponse into a full HTTPClientResponse
         * Parse the body in
         * Modifies in place res and return the result
         */
        static prepareResponse(res, format, parseBody, jsonOptions = {}) {
          let { body } = res;
          let text;
          if (format !== "application/msgpack") {
            text = body && buffer_1.Buffer.from(body).toString() || "";
          }
          if (parseBody && format === "application/json") {
            body = _HTTPClient.parseJSON(text, res.status, jsonOptions);
          }
          return {
            ...res,
            body,
            text,
            ok: Math.trunc(res.status / 100) === 2
          };
        }
        /**
         * Prepare an error with a response
         * (the type of errors BaseHTTPClient are supposed to throw)
         * by adding the status and preparing the internal response
         * @private
         */
        static prepareResponseError(err) {
          if (err.response) {
            err.response = _HTTPClient.prepareResponse(err.response, "application/json", true);
            err.status = err.response.status;
          }
          return err;
        }
        /**
         * Send a GET request.
         * @param relativePath - The path of the request.
         * @param query - An object containing the query parameters of the request.
         * @param requestHeaders - An object containing additional request headers to use.
         * @param jsonOptions - Options object to use to decode JSON responses. See
         *   utils.parseJSON for the options available.
         * @param parseBody - An optional boolean indicating whether the response body should be parsed
         *   or not.
         * @returns Response object.
         */
        async get(relativePath, query, requestHeaders = {}, jsonOptions = {}, parseBody = true) {
          const format = getAcceptFormat(query);
          const fullHeaders = { ...requestHeaders, accept: format };
          try {
            const res = await this.bc.get(relativePath, removeFalsyOrEmpty(query), fullHeaders);
            return _HTTPClient.prepareResponse(res, format, parseBody, jsonOptions);
          } catch (err) {
            throw _HTTPClient.prepareResponseError(err);
          }
        }
        /**
         * Send a POST request.
         * If no content-type present, adds the header "content-type: application/json"
         * and data is serialized in JSON (if not empty)
         */
        async post(relativePath, data, requestHeaders = {}, query, parseBody = true) {
          const fullHeaders = {
            "content-type": "application/json",
            ...tolowerCaseKeys(requestHeaders)
          };
          try {
            const res = await this.bc.post(relativePath, _HTTPClient.serializeData(data, fullHeaders), query, fullHeaders);
            return _HTTPClient.prepareResponse(res, "application/json", parseBody);
          } catch (err) {
            throw _HTTPClient.prepareResponseError(err);
          }
        }
        /**
         * Send a DELETE request.
         * If no content-type present, adds the header "content-type: application/json"
         * and data is serialized in JSON (if not empty)
         */
        async delete(relativePath, data, requestHeaders = {}, parseBody = true) {
          const fullHeaders = {
            "content-type": "application/json",
            ...tolowerCaseKeys(requestHeaders)
          };
          const res = await this.bc.delete(relativePath, _HTTPClient.serializeData(data, fullHeaders), void 0, fullHeaders);
          return _HTTPClient.prepareResponse(res, "application/json", parseBody);
        }
      };
      exports.default = HTTPClient;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/serviceClient.js
  var require_serviceClient = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/serviceClient.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var client_1 = __importDefault2(require_client());
      var intDecoding_1 = __importDefault2(require_intDecoding());
      function convertTokenStringToTokenHeader(token = "", headerIdentifier) {
        const tokenHeader = {};
        if (token === "") {
          return tokenHeader;
        }
        tokenHeader[headerIdentifier] = token;
        return tokenHeader;
      }
      function isBaseHTTPClient(tbc) {
        return typeof tbc.get === "function";
      }
      var ServiceClient = class {
        constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}) {
          if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {
            this.c = new client_1.default(tokenHeaderOrStrOrBaseClient);
          } else {
            let tokenHeader;
            if (typeof tokenHeaderOrStrOrBaseClient === "string") {
              tokenHeader = convertTokenStringToTokenHeader(tokenHeaderOrStrOrBaseClient, tokenHeaderIdentifier);
            } else {
              tokenHeader = tokenHeaderOrStrOrBaseClient;
            }
            this.c = new client_1.default(tokenHeader, baseServer, port, defaultHeaders);
          }
          this.intDecoding = intDecoding_1.default.DEFAULT;
        }
        /**
         * Set the default int decoding method for all JSON requests this client creates.
         * @param method - \{"default" | "safe" | "mixed" | "bigint"\} method The method to use when parsing the
         *   response for request. Must be one of "default", "safe", "mixed", or "bigint". See
         *   JSONRequest.setIntDecoding for more details about what each method does.
         */
        setIntEncoding(method) {
          this.intDecoding = method;
        }
        /**
         * Get the default int decoding method for all JSON requests this client creates.
         */
        getIntEncoding() {
          return this.intDecoding;
        }
      };
      exports.default = ServiceClient;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/basemodel.js
  var require_basemodel = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/basemodel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      function _is_primitive(val) {
        return val === void 0 || val == null || typeof val !== "object" && typeof val !== "function";
      }
      function _get_obj_for_encoding(val, binary) {
        let targetPropValue;
        if (val instanceof Uint8Array) {
          targetPropValue = binary ? val : buffer_1.Buffer.from(val).toString("base64");
        } else if (typeof val.get_obj_for_encoding === "function") {
          targetPropValue = val.get_obj_for_encoding(binary);
        } else if (Array.isArray(val)) {
          targetPropValue = [];
          for (const elem of val) {
            targetPropValue.push(_get_obj_for_encoding(elem, binary));
          }
        } else if (typeof val === "object") {
          const obj = {};
          for (const prop of Object.keys(val)) {
            obj[prop] = _get_obj_for_encoding(val[prop], binary);
          }
          targetPropValue = obj;
        } else if (_is_primitive(val)) {
          targetPropValue = val;
        } else {
          throw new Error(`Unsupported value: ${String(val)}`);
        }
        return targetPropValue;
      }
      var BaseModel = class {
        /**
         * Get an object ready for encoding to either JSON or msgpack.
         * @param binary - Use true to indicate that the encoding can handle raw binary objects
         *   (Uint8Arrays). Use false to indicate that raw binary objects should be converted to base64
         *   strings. True should be used for objects that will be encoded with msgpack, and false should
         *   be used for objects that will be encoded with JSON.
         */
        get_obj_for_encoding(binary = false) {
          const obj = {};
          for (const prop of Object.keys(this.attribute_map)) {
            const name = this.attribute_map[prop];
            const value = this[prop];
            if (typeof value !== "undefined") {
              obj[name] = value === null ? null : _get_obj_for_encoding(value, binary);
            }
          }
          return obj;
        }
      };
      exports.default = BaseModel;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js
  var require_types = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SimulateRequestTransactionGroup = exports.SimulateRequest = exports.SimulateInitialStates = exports.ScratchChange = exports.PostTransactionsResponse = exports.PendingTransactionsResponse = exports.PendingTransactionResponse = exports.NodeStatusResponse = exports.LightBlockHeaderProof = exports.LedgerStateDeltaForTransactionGroup = exports.KvDelta = exports.GetSyncRoundResponse = exports.GetBlockTimeStampOffsetResponse = exports.EvalDeltaKeyValue = exports.EvalDelta = exports.ErrorResponse = exports.DryrunTxnResult = exports.DryrunState = exports.DryrunSource = exports.DryrunResponse = exports.DryrunRequest = exports.DisassembleResponse = exports.CompileResponse = exports.BuildVersion = exports.BoxesResponse = exports.BoxReference = exports.BoxDescriptor = exports.Box = exports.BlockTxidsResponse = exports.BlockResponse = exports.BlockHashResponse = exports.AvmValue = exports.AvmKeyValue = exports.AssetParams = exports.AssetHoldingReference = exports.AssetHolding = exports.Asset = exports.ApplicationStateSchema = exports.ApplicationStateOperation = exports.ApplicationParams = exports.ApplicationLocalState = exports.ApplicationLocalReference = exports.ApplicationKVStorage = exports.ApplicationInitialStates = exports.Application = exports.AccountStateDelta = exports.AccountParticipation = exports.AccountAssetResponse = exports.AccountApplicationResponse = exports.Account = void 0;
      exports.Version = exports.TransactionProofResponse = exports.TransactionParametersResponse = exports.TransactionGroupLedgerStateDeltasForRoundResponse = exports.TealValue = exports.TealKeyValue = exports.SupplyResponse = exports.StateProofMessage = exports.StateProof = exports.SimulationTransactionExecTrace = exports.SimulationOpcodeTraceUnit = exports.SimulationEvalOverrides = exports.SimulateUnnamedResourcesAccessed = exports.SimulateTransactionResult = exports.SimulateTransactionGroupResult = exports.SimulateTraceConfig = exports.SimulateResponse = void 0;
      var buffer_1 = require_buffer2();
      var basemodel_1 = __importDefault2(require_basemodel());
      var Account = class _Account extends basemodel_1.default {
        /**
         * Creates a new `Account` object.
         * @param address - the account public key
         * @param amount - (algo) total number of MicroAlgos in the account
         * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.
         * @param minBalance - MicroAlgo balance required by the account.
         * The requirement grows based on asset and application usage.
         * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.
         * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending
         * rewards.
         * @param round - The round for which this information is relevant.
         * @param status - (onl) delegation status of the account's MicroAlgos
         * * Offline - indicates that the associated account is delegated.
         * * Online - indicates that the associated account used as part of the delegation
         * pool.
         * * NotParticipating - indicates that the associated account is neither a
         * delegator nor a delegate.
         * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count
         * of application local data (AppLocalState objects) stored in this account.
         * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of
         * AssetHolding objects held by this account.
         * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.
         * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.
         * @param appsLocalState - (appl) applications local data stored in this account.
         * Note the raw object uses `map[int] -> AppLocalState` for this type.
         * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.
         * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this
         * account.
         * Note: the raw account uses `StateSchema` for this type.
         * @param assets - (asset) assets held by this account.
         * Note the raw object uses `map[int] -> AssetHolding` for this type.
         * @param authAddr - (spend) the address against which signing should be checked. If empty, the
         * address of the current account is used. This field can be updated in any
         * transaction by setting the RekeyTo field.
         * @param createdApps - (appp) parameters of applications created by this account including app global
         * data.
         * Note: the raw account uses `map[int] -> AppParams` for this type.
         * @param createdAssets - (apar) parameters of assets created by this account.
         * Note: the raw account uses `map[int] -> Asset` for this type.
         * @param participation - AccountParticipation describes the parameters used by this account in consensus
         * protocol.
         * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts
         * which are participating.
         * @param sigType - Indicates what type of signature is used by this account, must be one of:
         * * sig
         * * msig
         * * lsig
         * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and
         * values.
         * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.
         */
        constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, createdApps, createdAssets, participation, rewardBase, sigType, totalBoxBytes, totalBoxes }) {
          super();
          this.address = address;
          this.amount = amount;
          this.amountWithoutPendingRewards = amountWithoutPendingRewards;
          this.minBalance = minBalance;
          this.pendingRewards = pendingRewards;
          this.rewards = rewards;
          this.round = round;
          this.status = status;
          this.totalAppsOptedIn = totalAppsOptedIn;
          this.totalAssetsOptedIn = totalAssetsOptedIn;
          this.totalCreatedApps = totalCreatedApps;
          this.totalCreatedAssets = totalCreatedAssets;
          this.appsLocalState = appsLocalState;
          this.appsTotalExtraPages = appsTotalExtraPages;
          this.appsTotalSchema = appsTotalSchema;
          this.assets = assets;
          this.authAddr = authAddr;
          this.createdApps = createdApps;
          this.createdAssets = createdAssets;
          this.participation = participation;
          this.rewardBase = rewardBase;
          this.sigType = sigType;
          this.totalBoxBytes = totalBoxBytes;
          this.totalBoxes = totalBoxes;
          this.attribute_map = {
            address: "address",
            amount: "amount",
            amountWithoutPendingRewards: "amount-without-pending-rewards",
            minBalance: "min-balance",
            pendingRewards: "pending-rewards",
            rewards: "rewards",
            round: "round",
            status: "status",
            totalAppsOptedIn: "total-apps-opted-in",
            totalAssetsOptedIn: "total-assets-opted-in",
            totalCreatedApps: "total-created-apps",
            totalCreatedAssets: "total-created-assets",
            appsLocalState: "apps-local-state",
            appsTotalExtraPages: "apps-total-extra-pages",
            appsTotalSchema: "apps-total-schema",
            assets: "assets",
            authAddr: "auth-addr",
            createdApps: "created-apps",
            createdAssets: "created-assets",
            participation: "participation",
            rewardBase: "reward-base",
            sigType: "sig-type",
            totalBoxBytes: "total-box-bytes",
            totalBoxes: "total-boxes"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["address"] === "undefined")
            throw new Error(`Response is missing required field 'address': ${data}`);
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["amount-without-pending-rewards"] === "undefined")
            throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);
          if (typeof data["min-balance"] === "undefined")
            throw new Error(`Response is missing required field 'min-balance': ${data}`);
          if (typeof data["pending-rewards"] === "undefined")
            throw new Error(`Response is missing required field 'pending-rewards': ${data}`);
          if (typeof data["rewards"] === "undefined")
            throw new Error(`Response is missing required field 'rewards': ${data}`);
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          if (typeof data["status"] === "undefined")
            throw new Error(`Response is missing required field 'status': ${data}`);
          if (typeof data["total-apps-opted-in"] === "undefined")
            throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);
          if (typeof data["total-assets-opted-in"] === "undefined")
            throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);
          if (typeof data["total-created-apps"] === "undefined")
            throw new Error(`Response is missing required field 'total-created-apps': ${data}`);
          if (typeof data["total-created-assets"] === "undefined")
            throw new Error(`Response is missing required field 'total-created-assets': ${data}`);
          return new _Account({
            address: data["address"],
            amount: data["amount"],
            amountWithoutPendingRewards: data["amount-without-pending-rewards"],
            minBalance: data["min-balance"],
            pendingRewards: data["pending-rewards"],
            rewards: data["rewards"],
            round: data["round"],
            status: data["status"],
            totalAppsOptedIn: data["total-apps-opted-in"],
            totalAssetsOptedIn: data["total-assets-opted-in"],
            totalCreatedApps: data["total-created-apps"],
            totalCreatedAssets: data["total-created-assets"],
            appsLocalState: typeof data["apps-local-state"] !== "undefined" ? data["apps-local-state"].map(ApplicationLocalState.from_obj_for_encoding) : void 0,
            appsTotalExtraPages: data["apps-total-extra-pages"],
            appsTotalSchema: typeof data["apps-total-schema"] !== "undefined" ? ApplicationStateSchema.from_obj_for_encoding(data["apps-total-schema"]) : void 0,
            assets: typeof data["assets"] !== "undefined" ? data["assets"].map(AssetHolding.from_obj_for_encoding) : void 0,
            authAddr: data["auth-addr"],
            createdApps: typeof data["created-apps"] !== "undefined" ? data["created-apps"].map(Application.from_obj_for_encoding) : void 0,
            createdAssets: typeof data["created-assets"] !== "undefined" ? data["created-assets"].map(Asset.from_obj_for_encoding) : void 0,
            participation: typeof data["participation"] !== "undefined" ? AccountParticipation.from_obj_for_encoding(data["participation"]) : void 0,
            rewardBase: data["reward-base"],
            sigType: data["sig-type"],
            totalBoxBytes: data["total-box-bytes"],
            totalBoxes: data["total-boxes"]
          });
        }
      };
      exports.Account = Account;
      var AccountApplicationResponse = class _AccountApplicationResponse extends basemodel_1.default {
        /**
         * Creates a new `AccountApplicationResponse` object.
         * @param round - The round for which this information is relevant.
         * @param appLocalState - (appl) the application local data stored in this account.
         * The raw account uses `AppLocalState` for this type.
         * @param createdApp - (appp) parameters of the application created by this account including app
         * global data.
         * The raw account uses `AppParams` for this type.
         */
        constructor({ round, appLocalState, createdApp }) {
          super();
          this.round = round;
          this.appLocalState = appLocalState;
          this.createdApp = createdApp;
          this.attribute_map = {
            round: "round",
            appLocalState: "app-local-state",
            createdApp: "created-app"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          return new _AccountApplicationResponse({
            round: data["round"],
            appLocalState: typeof data["app-local-state"] !== "undefined" ? ApplicationLocalState.from_obj_for_encoding(data["app-local-state"]) : void 0,
            createdApp: typeof data["created-app"] !== "undefined" ? ApplicationParams.from_obj_for_encoding(data["created-app"]) : void 0
          });
        }
      };
      exports.AccountApplicationResponse = AccountApplicationResponse;
      var AccountAssetResponse = class _AccountAssetResponse extends basemodel_1.default {
        /**
         * Creates a new `AccountAssetResponse` object.
         * @param round - The round for which this information is relevant.
         * @param assetHolding - (asset) Details about the asset held by this account.
         * The raw account uses `AssetHolding` for this type.
         * @param createdAsset - (apar) parameters of the asset created by this account.
         * The raw account uses `AssetParams` for this type.
         */
        constructor({ round, assetHolding, createdAsset }) {
          super();
          this.round = round;
          this.assetHolding = assetHolding;
          this.createdAsset = createdAsset;
          this.attribute_map = {
            round: "round",
            assetHolding: "asset-holding",
            createdAsset: "created-asset"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          return new _AccountAssetResponse({
            round: data["round"],
            assetHolding: typeof data["asset-holding"] !== "undefined" ? AssetHolding.from_obj_for_encoding(data["asset-holding"]) : void 0,
            createdAsset: typeof data["created-asset"] !== "undefined" ? AssetParams.from_obj_for_encoding(data["created-asset"]) : void 0
          });
        }
      };
      exports.AccountAssetResponse = AccountAssetResponse;
      var AccountParticipation = class _AccountParticipation extends basemodel_1.default {
        /**
         * Creates a new `AccountParticipation` object.
         * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.
         * @param voteFirstValid - (voteFst) First round for which this participation is valid.
         * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.
         * @param voteLastValid - (voteLst) Last round for which this participation is valid.
         * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this
         * round.
         * @param stateProofKey - (stprf) Root of the state proof key (if any)
         */
        constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey }) {
          super();
          this.selectionParticipationKey = typeof selectionParticipationKey === "string" ? new Uint8Array(buffer_1.Buffer.from(selectionParticipationKey, "base64")) : selectionParticipationKey;
          this.voteFirstValid = voteFirstValid;
          this.voteKeyDilution = voteKeyDilution;
          this.voteLastValid = voteLastValid;
          this.voteParticipationKey = typeof voteParticipationKey === "string" ? new Uint8Array(buffer_1.Buffer.from(voteParticipationKey, "base64")) : voteParticipationKey;
          this.stateProofKey = typeof stateProofKey === "string" ? new Uint8Array(buffer_1.Buffer.from(stateProofKey, "base64")) : stateProofKey;
          this.attribute_map = {
            selectionParticipationKey: "selection-participation-key",
            voteFirstValid: "vote-first-valid",
            voteKeyDilution: "vote-key-dilution",
            voteLastValid: "vote-last-valid",
            voteParticipationKey: "vote-participation-key",
            stateProofKey: "state-proof-key"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["selection-participation-key"] === "undefined")
            throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);
          if (typeof data["vote-first-valid"] === "undefined")
            throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);
          if (typeof data["vote-key-dilution"] === "undefined")
            throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);
          if (typeof data["vote-last-valid"] === "undefined")
            throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);
          if (typeof data["vote-participation-key"] === "undefined")
            throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);
          return new _AccountParticipation({
            selectionParticipationKey: data["selection-participation-key"],
            voteFirstValid: data["vote-first-valid"],
            voteKeyDilution: data["vote-key-dilution"],
            voteLastValid: data["vote-last-valid"],
            voteParticipationKey: data["vote-participation-key"],
            stateProofKey: data["state-proof-key"]
          });
        }
      };
      exports.AccountParticipation = AccountParticipation;
      var AccountStateDelta = class _AccountStateDelta extends basemodel_1.default {
        /**
         * Creates a new `AccountStateDelta` object.
         * @param address -
         * @param delta - Application state delta.
         */
        constructor({ address, delta }) {
          super();
          this.address = address;
          this.delta = delta;
          this.attribute_map = {
            address: "address",
            delta: "delta"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["address"] === "undefined")
            throw new Error(`Response is missing required field 'address': ${data}`);
          if (!Array.isArray(data["delta"]))
            throw new Error(`Response is missing required array field 'delta': ${data}`);
          return new _AccountStateDelta({
            address: data["address"],
            delta: data["delta"].map(EvalDeltaKeyValue.from_obj_for_encoding)
          });
        }
      };
      exports.AccountStateDelta = AccountStateDelta;
      var Application = class _Application extends basemodel_1.default {
        /**
         * Creates a new `Application` object.
         * @param id - (appidx) application index.
         * @param params - (appparams) application parameters.
         */
        constructor({ id, params }) {
          super();
          this.id = id;
          this.params = params;
          this.attribute_map = {
            id: "id",
            params: "params"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["id"] === "undefined")
            throw new Error(`Response is missing required field 'id': ${data}`);
          if (typeof data["params"] === "undefined")
            throw new Error(`Response is missing required field 'params': ${data}`);
          return new _Application({
            id: data["id"],
            params: ApplicationParams.from_obj_for_encoding(data["params"])
          });
        }
      };
      exports.Application = Application;
      var ApplicationInitialStates = class _ApplicationInitialStates extends basemodel_1.default {
        /**
         * Creates a new `ApplicationInitialStates` object.
         * @param id - Application index.
         * @param appBoxes - An application's global/local/box state.
         * @param appGlobals - An application's global/local/box state.
         * @param appLocals - An application's initial local states tied to different accounts.
         */
        constructor({ id, appBoxes, appGlobals, appLocals }) {
          super();
          this.id = id;
          this.appBoxes = appBoxes;
          this.appGlobals = appGlobals;
          this.appLocals = appLocals;
          this.attribute_map = {
            id: "id",
            appBoxes: "app-boxes",
            appGlobals: "app-globals",
            appLocals: "app-locals"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["id"] === "undefined")
            throw new Error(`Response is missing required field 'id': ${data}`);
          return new _ApplicationInitialStates({
            id: data["id"],
            appBoxes: typeof data["app-boxes"] !== "undefined" ? ApplicationKVStorage.from_obj_for_encoding(data["app-boxes"]) : void 0,
            appGlobals: typeof data["app-globals"] !== "undefined" ? ApplicationKVStorage.from_obj_for_encoding(data["app-globals"]) : void 0,
            appLocals: typeof data["app-locals"] !== "undefined" ? data["app-locals"].map(ApplicationKVStorage.from_obj_for_encoding) : void 0
          });
        }
      };
      exports.ApplicationInitialStates = ApplicationInitialStates;
      var ApplicationKVStorage = class _ApplicationKVStorage extends basemodel_1.default {
        /**
         * Creates a new `ApplicationKVStorage` object.
         * @param kvs - Key-Value pairs representing application states.
         * @param account - The address of the account associated with the local state.
         */
        constructor({ kvs, account }) {
          super();
          this.kvs = kvs;
          this.account = account;
          this.attribute_map = {
            kvs: "kvs",
            account: "account"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["kvs"]))
            throw new Error(`Response is missing required array field 'kvs': ${data}`);
          return new _ApplicationKVStorage({
            kvs: data["kvs"].map(AvmKeyValue.from_obj_for_encoding),
            account: data["account"]
          });
        }
      };
      exports.ApplicationKVStorage = ApplicationKVStorage;
      var ApplicationLocalReference = class _ApplicationLocalReference extends basemodel_1.default {
        /**
         * Creates a new `ApplicationLocalReference` object.
         * @param account - Address of the account with the local state.
         * @param app - Application ID of the local state application.
         */
        constructor({ account, app }) {
          super();
          this.account = account;
          this.app = app;
          this.attribute_map = {
            account: "account",
            app: "app"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["account"] === "undefined")
            throw new Error(`Response is missing required field 'account': ${data}`);
          if (typeof data["app"] === "undefined")
            throw new Error(`Response is missing required field 'app': ${data}`);
          return new _ApplicationLocalReference({
            account: data["account"],
            app: data["app"]
          });
        }
      };
      exports.ApplicationLocalReference = ApplicationLocalReference;
      var ApplicationLocalState = class _ApplicationLocalState extends basemodel_1.default {
        /**
         * Creates a new `ApplicationLocalState` object.
         * @param id - The application which this local state is for.
         * @param schema - (hsch) schema.
         * @param keyValue - (tkv) storage.
         */
        constructor({ id, schema, keyValue }) {
          super();
          this.id = id;
          this.schema = schema;
          this.keyValue = keyValue;
          this.attribute_map = {
            id: "id",
            schema: "schema",
            keyValue: "key-value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["id"] === "undefined")
            throw new Error(`Response is missing required field 'id': ${data}`);
          if (typeof data["schema"] === "undefined")
            throw new Error(`Response is missing required field 'schema': ${data}`);
          return new _ApplicationLocalState({
            id: data["id"],
            schema: ApplicationStateSchema.from_obj_for_encoding(data["schema"]),
            keyValue: typeof data["key-value"] !== "undefined" ? data["key-value"].map(TealKeyValue.from_obj_for_encoding) : void 0
          });
        }
      };
      exports.ApplicationLocalState = ApplicationLocalState;
      var ApplicationParams = class _ApplicationParams extends basemodel_1.default {
        /**
         * Creates a new `ApplicationParams` object.
         * @param approvalProgram - (approv) approval program.
         * @param clearStateProgram - (clearp) approval program.
         * @param creator - The address that created this application. This is the address where the
         * parameters and global state for this application can be found.
         * @param extraProgramPages - (epp) the amount of extra program pages available to this app.
         * @param globalState - (gs) global state
         * @param globalStateSchema - (gsch) global schema
         * @param localStateSchema - (lsch) local schema
         */
        constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema }) {
          super();
          this.approvalProgram = typeof approvalProgram === "string" ? new Uint8Array(buffer_1.Buffer.from(approvalProgram, "base64")) : approvalProgram;
          this.clearStateProgram = typeof clearStateProgram === "string" ? new Uint8Array(buffer_1.Buffer.from(clearStateProgram, "base64")) : clearStateProgram;
          this.creator = creator;
          this.extraProgramPages = extraProgramPages;
          this.globalState = globalState;
          this.globalStateSchema = globalStateSchema;
          this.localStateSchema = localStateSchema;
          this.attribute_map = {
            approvalProgram: "approval-program",
            clearStateProgram: "clear-state-program",
            creator: "creator",
            extraProgramPages: "extra-program-pages",
            globalState: "global-state",
            globalStateSchema: "global-state-schema",
            localStateSchema: "local-state-schema"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["approval-program"] === "undefined")
            throw new Error(`Response is missing required field 'approval-program': ${data}`);
          if (typeof data["clear-state-program"] === "undefined")
            throw new Error(`Response is missing required field 'clear-state-program': ${data}`);
          if (typeof data["creator"] === "undefined")
            throw new Error(`Response is missing required field 'creator': ${data}`);
          return new _ApplicationParams({
            approvalProgram: data["approval-program"],
            clearStateProgram: data["clear-state-program"],
            creator: data["creator"],
            extraProgramPages: data["extra-program-pages"],
            globalState: typeof data["global-state"] !== "undefined" ? data["global-state"].map(TealKeyValue.from_obj_for_encoding) : void 0,
            globalStateSchema: typeof data["global-state-schema"] !== "undefined" ? ApplicationStateSchema.from_obj_for_encoding(data["global-state-schema"]) : void 0,
            localStateSchema: typeof data["local-state-schema"] !== "undefined" ? ApplicationStateSchema.from_obj_for_encoding(data["local-state-schema"]) : void 0
          });
        }
      };
      exports.ApplicationParams = ApplicationParams;
      var ApplicationStateOperation = class _ApplicationStateOperation extends basemodel_1.default {
        /**
         * Creates a new `ApplicationStateOperation` object.
         * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local
         * state**, `b` is **boxes**.
         * @param key - The key (name) of the global/local/box state.
         * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.
         * @param account - For local state changes, the address of the account associated with the local
         * state.
         * @param newValue - Represents an AVM value.
         */
        constructor({ appStateType, key, operation, account, newValue }) {
          super();
          this.appStateType = appStateType;
          this.key = typeof key === "string" ? new Uint8Array(buffer_1.Buffer.from(key, "base64")) : key;
          this.operation = operation;
          this.account = account;
          this.newValue = newValue;
          this.attribute_map = {
            appStateType: "app-state-type",
            key: "key",
            operation: "operation",
            account: "account",
            newValue: "new-value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["app-state-type"] === "undefined")
            throw new Error(`Response is missing required field 'app-state-type': ${data}`);
          if (typeof data["key"] === "undefined")
            throw new Error(`Response is missing required field 'key': ${data}`);
          if (typeof data["operation"] === "undefined")
            throw new Error(`Response is missing required field 'operation': ${data}`);
          return new _ApplicationStateOperation({
            appStateType: data["app-state-type"],
            key: data["key"],
            operation: data["operation"],
            account: data["account"],
            newValue: typeof data["new-value"] !== "undefined" ? AvmValue.from_obj_for_encoding(data["new-value"]) : void 0
          });
        }
      };
      exports.ApplicationStateOperation = ApplicationStateOperation;
      var ApplicationStateSchema = class _ApplicationStateSchema extends basemodel_1.default {
        /**
         * Creates a new `ApplicationStateSchema` object.
         * @param numUint - (nui) num of uints.
         * @param numByteSlice - (nbs) num of byte slices.
         */
        constructor({ numUint, numByteSlice }) {
          super();
          this.numUint = numUint;
          this.numByteSlice = numByteSlice;
          this.attribute_map = {
            numUint: "num-uint",
            numByteSlice: "num-byte-slice"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["num-uint"] === "undefined")
            throw new Error(`Response is missing required field 'num-uint': ${data}`);
          if (typeof data["num-byte-slice"] === "undefined")
            throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);
          return new _ApplicationStateSchema({
            numUint: data["num-uint"],
            numByteSlice: data["num-byte-slice"]
          });
        }
      };
      exports.ApplicationStateSchema = ApplicationStateSchema;
      var Asset = class _Asset extends basemodel_1.default {
        /**
         * Creates a new `Asset` object.
         * @param index - unique asset identifier
         * @param params - AssetParams specifies the parameters for an asset.
         * (apar) when part of an AssetConfig transaction.
         * Definition:
         * data/transactions/asset.go : AssetParams
         */
        constructor({ index, params }) {
          super();
          this.index = index;
          this.params = params;
          this.attribute_map = {
            index: "index",
            params: "params"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["index"] === "undefined")
            throw new Error(`Response is missing required field 'index': ${data}`);
          if (typeof data["params"] === "undefined")
            throw new Error(`Response is missing required field 'params': ${data}`);
          return new _Asset({
            index: data["index"],
            params: AssetParams.from_obj_for_encoding(data["params"])
          });
        }
      };
      exports.Asset = Asset;
      var AssetHolding = class _AssetHolding extends basemodel_1.default {
        /**
         * Creates a new `AssetHolding` object.
         * @param amount - (a) number of units held.
         * @param assetId - Asset ID of the holding.
         * @param isFrozen - (f) whether or not the holding is frozen.
         */
        constructor({ amount, assetId, isFrozen }) {
          super();
          this.amount = amount;
          this.assetId = assetId;
          this.isFrozen = isFrozen;
          this.attribute_map = {
            amount: "amount",
            assetId: "asset-id",
            isFrozen: "is-frozen"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["asset-id"] === "undefined")
            throw new Error(`Response is missing required field 'asset-id': ${data}`);
          if (typeof data["is-frozen"] === "undefined")
            throw new Error(`Response is missing required field 'is-frozen': ${data}`);
          return new _AssetHolding({
            amount: data["amount"],
            assetId: data["asset-id"],
            isFrozen: data["is-frozen"]
          });
        }
      };
      exports.AssetHolding = AssetHolding;
      var AssetHoldingReference = class _AssetHoldingReference extends basemodel_1.default {
        /**
         * Creates a new `AssetHoldingReference` object.
         * @param account - Address of the account holding the asset.
         * @param asset - Asset ID of the holding.
         */
        constructor({ account, asset }) {
          super();
          this.account = account;
          this.asset = asset;
          this.attribute_map = {
            account: "account",
            asset: "asset"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["account"] === "undefined")
            throw new Error(`Response is missing required field 'account': ${data}`);
          if (typeof data["asset"] === "undefined")
            throw new Error(`Response is missing required field 'asset': ${data}`);
          return new _AssetHoldingReference({
            account: data["account"],
            asset: data["asset"]
          });
        }
      };
      exports.AssetHoldingReference = AssetHoldingReference;
      var AssetParams = class _AssetParams extends basemodel_1.default {
        /**
         * Creates a new `AssetParams` object.
         * @param creator - The address that created this asset. This is the address where the parameters
         * for this asset can be found, and also the address where unwanted asset units can
         * be sent in the worst case.
         * @param decimals - (dc) The number of digits to use after the decimal point when displaying this
         * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in
         * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value
         * must be between 0 and 19 (inclusive).
         * @param total - (t) The total number of units of this asset.
         * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,
         * clawback is not permitted.
         * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.
         * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing
         * is not permitted.
         * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.
         * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this
         * metadata is up to the application.
         * @param name - (an) Name of this asset, as supplied by the creator. Included only when the
         * asset name is composed of printable utf-8 characters.
         * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.
         * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.
         * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only
         * when the name of a unit of this asset is composed of printable utf-8 characters.
         * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.
         * @param url - (au) URL where more information about the asset can be retrieved. Included only
         * when the URL is composed of printable utf-8 characters.
         * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.
         */
        constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64 }) {
          super();
          this.creator = creator;
          this.decimals = decimals;
          this.total = total;
          this.clawback = clawback;
          this.defaultFrozen = defaultFrozen;
          this.freeze = freeze;
          this.manager = manager;
          this.metadataHash = typeof metadataHash === "string" ? new Uint8Array(buffer_1.Buffer.from(metadataHash, "base64")) : metadataHash;
          this.name = name;
          this.nameB64 = typeof nameB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(nameB64, "base64")) : nameB64;
          this.reserve = reserve;
          this.unitName = unitName;
          this.unitNameB64 = typeof unitNameB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(unitNameB64, "base64")) : unitNameB64;
          this.url = url;
          this.urlB64 = typeof urlB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(urlB64, "base64")) : urlB64;
          this.attribute_map = {
            creator: "creator",
            decimals: "decimals",
            total: "total",
            clawback: "clawback",
            defaultFrozen: "default-frozen",
            freeze: "freeze",
            manager: "manager",
            metadataHash: "metadata-hash",
            name: "name",
            nameB64: "name-b64",
            reserve: "reserve",
            unitName: "unit-name",
            unitNameB64: "unit-name-b64",
            url: "url",
            urlB64: "url-b64"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["creator"] === "undefined")
            throw new Error(`Response is missing required field 'creator': ${data}`);
          if (typeof data["decimals"] === "undefined")
            throw new Error(`Response is missing required field 'decimals': ${data}`);
          if (typeof data["total"] === "undefined")
            throw new Error(`Response is missing required field 'total': ${data}`);
          return new _AssetParams({
            creator: data["creator"],
            decimals: data["decimals"],
            total: data["total"],
            clawback: data["clawback"],
            defaultFrozen: data["default-frozen"],
            freeze: data["freeze"],
            manager: data["manager"],
            metadataHash: data["metadata-hash"],
            name: data["name"],
            nameB64: data["name-b64"],
            reserve: data["reserve"],
            unitName: data["unit-name"],
            unitNameB64: data["unit-name-b64"],
            url: data["url"],
            urlB64: data["url-b64"]
          });
        }
      };
      exports.AssetParams = AssetParams;
      var AvmKeyValue = class _AvmKeyValue extends basemodel_1.default {
        /**
         * Creates a new `AvmKeyValue` object.
         * @param key -
         * @param value - Represents an AVM value.
         */
        constructor({ key, value }) {
          super();
          this.key = typeof key === "string" ? new Uint8Array(buffer_1.Buffer.from(key, "base64")) : key;
          this.value = value;
          this.attribute_map = {
            key: "key",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["key"] === "undefined")
            throw new Error(`Response is missing required field 'key': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _AvmKeyValue({
            key: data["key"],
            value: AvmValue.from_obj_for_encoding(data["value"])
          });
        }
      };
      exports.AvmKeyValue = AvmKeyValue;
      var AvmValue = class _AvmValue extends basemodel_1.default {
        /**
         * Creates a new `AvmValue` object.
         * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**
         * @param bytes - bytes value.
         * @param uint - uint value.
         */
        constructor({ type, bytes, uint }) {
          super();
          this.type = type;
          this.bytes = typeof bytes === "string" ? new Uint8Array(buffer_1.Buffer.from(bytes, "base64")) : bytes;
          this.uint = uint;
          this.attribute_map = {
            type: "type",
            bytes: "bytes",
            uint: "uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["type"] === "undefined")
            throw new Error(`Response is missing required field 'type': ${data}`);
          return new _AvmValue({
            type: data["type"],
            bytes: data["bytes"],
            uint: data["uint"]
          });
        }
      };
      exports.AvmValue = AvmValue;
      var BlockHashResponse = class _BlockHashResponse extends basemodel_1.default {
        /**
         * Creates a new `BlockHashResponse` object.
         * @param blockhash - Block header hash.
         */
        constructor({ blockhash }) {
          super();
          this.blockhash = blockhash;
          this.attribute_map = {
            blockhash: "blockHash"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["blockHash"] === "undefined")
            throw new Error(`Response is missing required field 'blockHash': ${data}`);
          return new _BlockHashResponse({
            blockhash: data["blockHash"]
          });
        }
      };
      exports.BlockHashResponse = BlockHashResponse;
      var BlockResponse = class _BlockResponse extends basemodel_1.default {
        /**
         * Creates a new `BlockResponse` object.
         * @param block - Block header data.
         * @param cert - Optional certificate object. This is only included when the format is set to
         * message pack.
         */
        constructor({ block, cert }) {
          super();
          this.block = block;
          this.cert = cert;
          this.attribute_map = {
            block: "block",
            cert: "cert"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["block"] === "undefined")
            throw new Error(`Response is missing required field 'block': ${data}`);
          return new _BlockResponse({
            block: data["block"],
            cert: data["cert"]
          });
        }
      };
      exports.BlockResponse = BlockResponse;
      var BlockTxidsResponse = class _BlockTxidsResponse extends basemodel_1.default {
        /**
         * Creates a new `BlockTxidsResponse` object.
         * @param blocktxids - Block transaction IDs.
         */
        constructor({ blocktxids }) {
          super();
          this.blocktxids = blocktxids;
          this.attribute_map = {
            blocktxids: "blockTxids"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["blockTxids"]))
            throw new Error(`Response is missing required array field 'blockTxids': ${data}`);
          return new _BlockTxidsResponse({
            blocktxids: data["blockTxids"]
          });
        }
      };
      exports.BlockTxidsResponse = BlockTxidsResponse;
      var Box = class _Box extends basemodel_1.default {
        /**
         * Creates a new `Box` object.
         * @param name - (name) box name, base64 encoded
         * @param round - The round for which this information is relevant
         * @param value - (value) box value, base64 encoded.
         */
        constructor({ name, round, value }) {
          super();
          this.name = typeof name === "string" ? new Uint8Array(buffer_1.Buffer.from(name, "base64")) : name;
          this.round = round;
          this.value = typeof value === "string" ? new Uint8Array(buffer_1.Buffer.from(value, "base64")) : value;
          this.attribute_map = {
            name: "name",
            round: "round",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["name"] === "undefined")
            throw new Error(`Response is missing required field 'name': ${data}`);
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _Box({
            name: data["name"],
            round: data["round"],
            value: data["value"]
          });
        }
      };
      exports.Box = Box;
      var BoxDescriptor = class _BoxDescriptor extends basemodel_1.default {
        /**
         * Creates a new `BoxDescriptor` object.
         * @param name - Base64 encoded box name
         */
        constructor({ name }) {
          super();
          this.name = typeof name === "string" ? new Uint8Array(buffer_1.Buffer.from(name, "base64")) : name;
          this.attribute_map = {
            name: "name"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["name"] === "undefined")
            throw new Error(`Response is missing required field 'name': ${data}`);
          return new _BoxDescriptor({
            name: data["name"]
          });
        }
      };
      exports.BoxDescriptor = BoxDescriptor;
      var BoxReference = class _BoxReference extends basemodel_1.default {
        /**
         * Creates a new `BoxReference` object.
         * @param app - Application ID which this box belongs to
         * @param name - Base64 encoded box name
         */
        constructor({ app, name }) {
          super();
          this.app = app;
          this.name = typeof name === "string" ? new Uint8Array(buffer_1.Buffer.from(name, "base64")) : name;
          this.attribute_map = {
            app: "app",
            name: "name"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["app"] === "undefined")
            throw new Error(`Response is missing required field 'app': ${data}`);
          if (typeof data["name"] === "undefined")
            throw new Error(`Response is missing required field 'name': ${data}`);
          return new _BoxReference({
            app: data["app"],
            name: data["name"]
          });
        }
      };
      exports.BoxReference = BoxReference;
      var BoxesResponse = class _BoxesResponse extends basemodel_1.default {
        /**
         * Creates a new `BoxesResponse` object.
         * @param boxes -
         */
        constructor({ boxes }) {
          super();
          this.boxes = boxes;
          this.attribute_map = {
            boxes: "boxes"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["boxes"]))
            throw new Error(`Response is missing required array field 'boxes': ${data}`);
          return new _BoxesResponse({
            boxes: data["boxes"].map(BoxDescriptor.from_obj_for_encoding)
          });
        }
      };
      exports.BoxesResponse = BoxesResponse;
      var BuildVersion = class _BuildVersion extends basemodel_1.default {
        /**
         * Creates a new `BuildVersion` object.
         * @param branch -
         * @param buildNumber -
         * @param channel -
         * @param commitHash -
         * @param major -
         * @param minor -
         */
        constructor({ branch, buildNumber, channel, commitHash, major, minor }) {
          super();
          this.branch = branch;
          this.buildNumber = buildNumber;
          this.channel = channel;
          this.commitHash = commitHash;
          this.major = major;
          this.minor = minor;
          this.attribute_map = {
            branch: "branch",
            buildNumber: "build_number",
            channel: "channel",
            commitHash: "commit_hash",
            major: "major",
            minor: "minor"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["branch"] === "undefined")
            throw new Error(`Response is missing required field 'branch': ${data}`);
          if (typeof data["build_number"] === "undefined")
            throw new Error(`Response is missing required field 'build_number': ${data}`);
          if (typeof data["channel"] === "undefined")
            throw new Error(`Response is missing required field 'channel': ${data}`);
          if (typeof data["commit_hash"] === "undefined")
            throw new Error(`Response is missing required field 'commit_hash': ${data}`);
          if (typeof data["major"] === "undefined")
            throw new Error(`Response is missing required field 'major': ${data}`);
          if (typeof data["minor"] === "undefined")
            throw new Error(`Response is missing required field 'minor': ${data}`);
          return new _BuildVersion({
            branch: data["branch"],
            buildNumber: data["build_number"],
            channel: data["channel"],
            commitHash: data["commit_hash"],
            major: data["major"],
            minor: data["minor"]
          });
        }
      };
      exports.BuildVersion = BuildVersion;
      var CompileResponse = class _CompileResponse extends basemodel_1.default {
        /**
         * Creates a new `CompileResponse` object.
         * @param hash - base32 SHA512_256 of program bytes (Address style)
         * @param result - base64 encoded program bytes
         * @param sourcemap - JSON of the source map
         */
        constructor({ hash, result, sourcemap }) {
          super();
          this.hash = hash;
          this.result = result;
          this.sourcemap = sourcemap;
          this.attribute_map = {
            hash: "hash",
            result: "result",
            sourcemap: "sourcemap"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["hash"] === "undefined")
            throw new Error(`Response is missing required field 'hash': ${data}`);
          if (typeof data["result"] === "undefined")
            throw new Error(`Response is missing required field 'result': ${data}`);
          return new _CompileResponse({
            hash: data["hash"],
            result: data["result"],
            sourcemap: data["sourcemap"]
          });
        }
      };
      exports.CompileResponse = CompileResponse;
      var DisassembleResponse = class _DisassembleResponse extends basemodel_1.default {
        /**
         * Creates a new `DisassembleResponse` object.
         * @param result - disassembled Teal code
         */
        constructor({ result }) {
          super();
          this.result = result;
          this.attribute_map = {
            result: "result"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["result"] === "undefined")
            throw new Error(`Response is missing required field 'result': ${data}`);
          return new _DisassembleResponse({
            result: data["result"]
          });
        }
      };
      exports.DisassembleResponse = DisassembleResponse;
      var DryrunRequest = class _DryrunRequest extends basemodel_1.default {
        /**
         * Creates a new `DryrunRequest` object.
         * @param accounts -
         * @param apps -
         * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest
         * confirmed timestamp this algod is attached to.
         * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise
         * whatever the current protocol of the network this algod is running in.
         * @param round - Round is available to some TEAL scripts. Defaults to the current round on the
         * network this algod is attached to.
         * @param sources -
         * @param txns -
         */
        constructor({ accounts, apps, latestTimestamp, protocolVersion, round, sources, txns }) {
          super();
          this.accounts = accounts;
          this.apps = apps;
          this.latestTimestamp = latestTimestamp;
          this.protocolVersion = protocolVersion;
          this.round = round;
          this.sources = sources;
          this.txns = txns;
          this.attribute_map = {
            accounts: "accounts",
            apps: "apps",
            latestTimestamp: "latest-timestamp",
            protocolVersion: "protocol-version",
            round: "round",
            sources: "sources",
            txns: "txns"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["accounts"]))
            throw new Error(`Response is missing required array field 'accounts': ${data}`);
          if (!Array.isArray(data["apps"]))
            throw new Error(`Response is missing required array field 'apps': ${data}`);
          if (typeof data["latest-timestamp"] === "undefined")
            throw new Error(`Response is missing required field 'latest-timestamp': ${data}`);
          if (typeof data["protocol-version"] === "undefined")
            throw new Error(`Response is missing required field 'protocol-version': ${data}`);
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          if (!Array.isArray(data["sources"]))
            throw new Error(`Response is missing required array field 'sources': ${data}`);
          if (!Array.isArray(data["txns"]))
            throw new Error(`Response is missing required array field 'txns': ${data}`);
          return new _DryrunRequest({
            accounts: data["accounts"].map(Account.from_obj_for_encoding),
            apps: data["apps"].map(Application.from_obj_for_encoding),
            latestTimestamp: data["latest-timestamp"],
            protocolVersion: data["protocol-version"],
            round: data["round"],
            sources: data["sources"].map(DryrunSource.from_obj_for_encoding),
            txns: data["txns"]
          });
        }
      };
      exports.DryrunRequest = DryrunRequest;
      var DryrunResponse = class _DryrunResponse extends basemodel_1.default {
        /**
         * Creates a new `DryrunResponse` object.
         * @param error -
         * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.
         * @param txns -
         */
        constructor({ error, protocolVersion, txns }) {
          super();
          this.error = error;
          this.protocolVersion = protocolVersion;
          this.txns = txns;
          this.attribute_map = {
            error: "error",
            protocolVersion: "protocol-version",
            txns: "txns"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["error"] === "undefined")
            throw new Error(`Response is missing required field 'error': ${data}`);
          if (typeof data["protocol-version"] === "undefined")
            throw new Error(`Response is missing required field 'protocol-version': ${data}`);
          if (!Array.isArray(data["txns"]))
            throw new Error(`Response is missing required array field 'txns': ${data}`);
          return new _DryrunResponse({
            error: data["error"],
            protocolVersion: data["protocol-version"],
            txns: data["txns"].map(DryrunTxnResult.from_obj_for_encoding)
          });
        }
      };
      exports.DryrunResponse = DryrunResponse;
      var DryrunSource = class _DryrunSource extends basemodel_1.default {
        /**
         * Creates a new `DryrunSource` object.
         * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the
         * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the
         * Approval Program or Clear State Program of application[this.AppIndex].
         * @param source -
         * @param txnIndex -
         * @param appIndex -
         */
        constructor({ fieldName, source, txnIndex, appIndex }) {
          super();
          this.fieldName = fieldName;
          this.source = source;
          this.txnIndex = txnIndex;
          this.appIndex = appIndex;
          this.attribute_map = {
            fieldName: "field-name",
            source: "source",
            txnIndex: "txn-index",
            appIndex: "app-index"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["field-name"] === "undefined")
            throw new Error(`Response is missing required field 'field-name': ${data}`);
          if (typeof data["source"] === "undefined")
            throw new Error(`Response is missing required field 'source': ${data}`);
          if (typeof data["txn-index"] === "undefined")
            throw new Error(`Response is missing required field 'txn-index': ${data}`);
          if (typeof data["app-index"] === "undefined")
            throw new Error(`Response is missing required field 'app-index': ${data}`);
          return new _DryrunSource({
            fieldName: data["field-name"],
            source: data["source"],
            txnIndex: data["txn-index"],
            appIndex: data["app-index"]
          });
        }
      };
      exports.DryrunSource = DryrunSource;
      var DryrunState = class _DryrunState extends basemodel_1.default {
        /**
         * Creates a new `DryrunState` object.
         * @param line - Line number
         * @param pc - Program counter
         * @param stack -
         * @param error - Evaluation error if any
         * @param scratch -
         */
        constructor({ line, pc, stack, error, scratch }) {
          super();
          this.line = line;
          this.pc = pc;
          this.stack = stack;
          this.error = error;
          this.scratch = scratch;
          this.attribute_map = {
            line: "line",
            pc: "pc",
            stack: "stack",
            error: "error",
            scratch: "scratch"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["line"] === "undefined")
            throw new Error(`Response is missing required field 'line': ${data}`);
          if (typeof data["pc"] === "undefined")
            throw new Error(`Response is missing required field 'pc': ${data}`);
          if (!Array.isArray(data["stack"]))
            throw new Error(`Response is missing required array field 'stack': ${data}`);
          return new _DryrunState({
            line: data["line"],
            pc: data["pc"],
            stack: data["stack"].map(TealValue.from_obj_for_encoding),
            error: data["error"],
            scratch: typeof data["scratch"] !== "undefined" ? data["scratch"].map(TealValue.from_obj_for_encoding) : void 0
          });
        }
      };
      exports.DryrunState = DryrunState;
      var DryrunTxnResult = class _DryrunTxnResult extends basemodel_1.default {
        /**
         * Creates a new `DryrunTxnResult` object.
         * @param disassembly - Disassembled program line by line.
         * @param appCallMessages -
         * @param appCallTrace -
         * @param budgetAdded - Budget added during execution of app call transaction.
         * @param budgetConsumed - Budget consumed during execution of app call transaction.
         * @param globalDelta - Application state delta.
         * @param localDeltas -
         * @param logicSigDisassembly - Disassembled lsig program line by line.
         * @param logicSigMessages -
         * @param logicSigTrace -
         * @param logs -
         */
        constructor({ disassembly, appCallMessages, appCallTrace, budgetAdded, budgetConsumed, globalDelta, localDeltas, logicSigDisassembly, logicSigMessages, logicSigTrace, logs }) {
          super();
          this.disassembly = disassembly;
          this.appCallMessages = appCallMessages;
          this.appCallTrace = appCallTrace;
          this.budgetAdded = budgetAdded;
          this.budgetConsumed = budgetConsumed;
          this.globalDelta = globalDelta;
          this.localDeltas = localDeltas;
          this.logicSigDisassembly = logicSigDisassembly;
          this.logicSigMessages = logicSigMessages;
          this.logicSigTrace = logicSigTrace;
          this.logs = logs;
          this.attribute_map = {
            disassembly: "disassembly",
            appCallMessages: "app-call-messages",
            appCallTrace: "app-call-trace",
            budgetAdded: "budget-added",
            budgetConsumed: "budget-consumed",
            globalDelta: "global-delta",
            localDeltas: "local-deltas",
            logicSigDisassembly: "logic-sig-disassembly",
            logicSigMessages: "logic-sig-messages",
            logicSigTrace: "logic-sig-trace",
            logs: "logs"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["disassembly"]))
            throw new Error(`Response is missing required array field 'disassembly': ${data}`);
          return new _DryrunTxnResult({
            disassembly: data["disassembly"],
            appCallMessages: data["app-call-messages"],
            appCallTrace: typeof data["app-call-trace"] !== "undefined" ? data["app-call-trace"].map(DryrunState.from_obj_for_encoding) : void 0,
            budgetAdded: data["budget-added"],
            budgetConsumed: data["budget-consumed"],
            globalDelta: typeof data["global-delta"] !== "undefined" ? data["global-delta"].map(EvalDeltaKeyValue.from_obj_for_encoding) : void 0,
            localDeltas: typeof data["local-deltas"] !== "undefined" ? data["local-deltas"].map(AccountStateDelta.from_obj_for_encoding) : void 0,
            logicSigDisassembly: data["logic-sig-disassembly"],
            logicSigMessages: data["logic-sig-messages"],
            logicSigTrace: typeof data["logic-sig-trace"] !== "undefined" ? data["logic-sig-trace"].map(DryrunState.from_obj_for_encoding) : void 0,
            logs: data["logs"]
          });
        }
      };
      exports.DryrunTxnResult = DryrunTxnResult;
      var ErrorResponse = class _ErrorResponse extends basemodel_1.default {
        /**
         * Creates a new `ErrorResponse` object.
         * @param message -
         * @param data -
         */
        constructor({ message, data }) {
          super();
          this.message = message;
          this.data = data;
          this.attribute_map = {
            message: "message",
            data: "data"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["message"] === "undefined")
            throw new Error(`Response is missing required field 'message': ${data}`);
          return new _ErrorResponse({
            message: data["message"],
            data: data["data"]
          });
        }
      };
      exports.ErrorResponse = ErrorResponse;
      var EvalDelta = class _EvalDelta extends basemodel_1.default {
        /**
         * Creates a new `EvalDelta` object.
         * @param action - (at) delta action.
         * @param bytes - (bs) bytes value.
         * @param uint - (ui) uint value.
         */
        constructor({ action, bytes, uint }) {
          super();
          this.action = action;
          this.bytes = bytes;
          this.uint = uint;
          this.attribute_map = {
            action: "action",
            bytes: "bytes",
            uint: "uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["action"] === "undefined")
            throw new Error(`Response is missing required field 'action': ${data}`);
          return new _EvalDelta({
            action: data["action"],
            bytes: data["bytes"],
            uint: data["uint"]
          });
        }
      };
      exports.EvalDelta = EvalDelta;
      var EvalDeltaKeyValue = class _EvalDeltaKeyValue extends basemodel_1.default {
        /**
         * Creates a new `EvalDeltaKeyValue` object.
         * @param key -
         * @param value - Represents a TEAL value delta.
         */
        constructor({ key, value }) {
          super();
          this.key = key;
          this.value = value;
          this.attribute_map = {
            key: "key",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["key"] === "undefined")
            throw new Error(`Response is missing required field 'key': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _EvalDeltaKeyValue({
            key: data["key"],
            value: EvalDelta.from_obj_for_encoding(data["value"])
          });
        }
      };
      exports.EvalDeltaKeyValue = EvalDeltaKeyValue;
      var GetBlockTimeStampOffsetResponse = class _GetBlockTimeStampOffsetResponse extends basemodel_1.default {
        /**
         * Creates a new `GetBlockTimeStampOffsetResponse` object.
         * @param offset - Timestamp offset in seconds.
         */
        constructor({ offset }) {
          super();
          this.offset = offset;
          this.attribute_map = {
            offset: "offset"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["offset"] === "undefined")
            throw new Error(`Response is missing required field 'offset': ${data}`);
          return new _GetBlockTimeStampOffsetResponse({
            offset: data["offset"]
          });
        }
      };
      exports.GetBlockTimeStampOffsetResponse = GetBlockTimeStampOffsetResponse;
      var GetSyncRoundResponse = class _GetSyncRoundResponse extends basemodel_1.default {
        /**
         * Creates a new `GetSyncRoundResponse` object.
         * @param round - The minimum sync round for the ledger.
         */
        constructor({ round }) {
          super();
          this.round = round;
          this.attribute_map = {
            round: "round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          return new _GetSyncRoundResponse({
            round: data["round"]
          });
        }
      };
      exports.GetSyncRoundResponse = GetSyncRoundResponse;
      var KvDelta = class _KvDelta extends basemodel_1.default {
        /**
         * Creates a new `KvDelta` object.
         * @param key - The key, base64 encoded.
         * @param value - The new value of the KV store entry, base64 encoded.
         */
        constructor({ key, value }) {
          super();
          this.key = typeof key === "string" ? new Uint8Array(buffer_1.Buffer.from(key, "base64")) : key;
          this.value = typeof value === "string" ? new Uint8Array(buffer_1.Buffer.from(value, "base64")) : value;
          this.attribute_map = {
            key: "key",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _KvDelta({
            key: data["key"],
            value: data["value"]
          });
        }
      };
      exports.KvDelta = KvDelta;
      var LedgerStateDeltaForTransactionGroup = class _LedgerStateDeltaForTransactionGroup extends basemodel_1.default {
        /**
         * Creates a new `LedgerStateDeltaForTransactionGroup` object.
         * @param delta - Ledger StateDelta object
         * @param ids -
         */
        constructor({ delta, ids }) {
          super();
          this.delta = delta;
          this.ids = ids;
          this.attribute_map = {
            delta: "Delta",
            ids: "Ids"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["Delta"] === "undefined")
            throw new Error(`Response is missing required field 'Delta': ${data}`);
          if (!Array.isArray(data["Ids"]))
            throw new Error(`Response is missing required array field 'Ids': ${data}`);
          return new _LedgerStateDeltaForTransactionGroup({
            delta: data["Delta"],
            ids: data["Ids"]
          });
        }
      };
      exports.LedgerStateDeltaForTransactionGroup = LedgerStateDeltaForTransactionGroup;
      var LightBlockHeaderProof = class _LightBlockHeaderProof extends basemodel_1.default {
        /**
         * Creates a new `LightBlockHeaderProof` object.
         * @param index - The index of the light block header in the vector commitment tree
         * @param proof - The encoded proof.
         * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges
         * from a leaf to the root.
         */
        constructor({ index, proof, treedepth }) {
          super();
          this.index = index;
          this.proof = typeof proof === "string" ? new Uint8Array(buffer_1.Buffer.from(proof, "base64")) : proof;
          this.treedepth = treedepth;
          this.attribute_map = {
            index: "index",
            proof: "proof",
            treedepth: "treedepth"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["index"] === "undefined")
            throw new Error(`Response is missing required field 'index': ${data}`);
          if (typeof data["proof"] === "undefined")
            throw new Error(`Response is missing required field 'proof': ${data}`);
          if (typeof data["treedepth"] === "undefined")
            throw new Error(`Response is missing required field 'treedepth': ${data}`);
          return new _LightBlockHeaderProof({
            index: data["index"],
            proof: data["proof"],
            treedepth: data["treedepth"]
          });
        }
      };
      exports.LightBlockHeaderProof = LightBlockHeaderProof;
      var NodeStatusResponse = class _NodeStatusResponse extends basemodel_1.default {
        /**
         * Creates a new `NodeStatusResponse` object.
         * @param catchupTime - CatchupTime in nanoseconds
         * @param lastRound - LastRound indicates the last round seen
         * @param lastVersion - LastVersion indicates the last consensus version supported
         * @param nextVersion - NextVersion of consensus protocol to use
         * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply
         * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported
         * by this node
         * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new
         * rounds and has stopped making progress
         * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds
         * @param catchpoint - The current catchpoint that is being caught up to
         * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the
         * catchup
         * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so
         * far as part of the catchup
         * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been
         * processed so far as part of the catchup
         * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint
         * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint
         * catchup
         * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint
         * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so
         * far as part of the catchup
         * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been
         * verified so far as part of the catchup
         * @param lastCatchpoint - The last catchpoint seen by the node
         * @param upgradeDelay - Upgrade delay
         * @param upgradeNextProtocolVoteBefore - Next protocol round
         * @param upgradeNoVotes - No votes cast for consensus upgrade
         * @param upgradeNodeVote - This node's upgrade vote
         * @param upgradeVoteRounds - Total voting rounds for current upgrade
         * @param upgradeVotes - Total votes cast for consensus upgrade
         * @param upgradeVotesRequired - Yes votes required for consensus upgrade
         * @param upgradeYesVotes - Yes votes cast for consensus upgrade
         */
        constructor({ catchupTime, lastRound, lastVersion, nextVersion, nextVersionRound, nextVersionSupported, stoppedAtUnsupportedRound, timeSinceLastRound, catchpoint, catchpointAcquiredBlocks, catchpointProcessedAccounts, catchpointProcessedKvs, catchpointTotalAccounts, catchpointTotalBlocks, catchpointTotalKvs, catchpointVerifiedAccounts, catchpointVerifiedKvs, lastCatchpoint, upgradeDelay, upgradeNextProtocolVoteBefore, upgradeNoVotes, upgradeNodeVote, upgradeVoteRounds, upgradeVotes, upgradeVotesRequired, upgradeYesVotes }) {
          super();
          this.catchupTime = catchupTime;
          this.lastRound = lastRound;
          this.lastVersion = lastVersion;
          this.nextVersion = nextVersion;
          this.nextVersionRound = nextVersionRound;
          this.nextVersionSupported = nextVersionSupported;
          this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;
          this.timeSinceLastRound = timeSinceLastRound;
          this.catchpoint = catchpoint;
          this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;
          this.catchpointProcessedAccounts = catchpointProcessedAccounts;
          this.catchpointProcessedKvs = catchpointProcessedKvs;
          this.catchpointTotalAccounts = catchpointTotalAccounts;
          this.catchpointTotalBlocks = catchpointTotalBlocks;
          this.catchpointTotalKvs = catchpointTotalKvs;
          this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;
          this.catchpointVerifiedKvs = catchpointVerifiedKvs;
          this.lastCatchpoint = lastCatchpoint;
          this.upgradeDelay = upgradeDelay;
          this.upgradeNextProtocolVoteBefore = upgradeNextProtocolVoteBefore;
          this.upgradeNoVotes = upgradeNoVotes;
          this.upgradeNodeVote = upgradeNodeVote;
          this.upgradeVoteRounds = upgradeVoteRounds;
          this.upgradeVotes = upgradeVotes;
          this.upgradeVotesRequired = upgradeVotesRequired;
          this.upgradeYesVotes = upgradeYesVotes;
          this.attribute_map = {
            catchupTime: "catchup-time",
            lastRound: "last-round",
            lastVersion: "last-version",
            nextVersion: "next-version",
            nextVersionRound: "next-version-round",
            nextVersionSupported: "next-version-supported",
            stoppedAtUnsupportedRound: "stopped-at-unsupported-round",
            timeSinceLastRound: "time-since-last-round",
            catchpoint: "catchpoint",
            catchpointAcquiredBlocks: "catchpoint-acquired-blocks",
            catchpointProcessedAccounts: "catchpoint-processed-accounts",
            catchpointProcessedKvs: "catchpoint-processed-kvs",
            catchpointTotalAccounts: "catchpoint-total-accounts",
            catchpointTotalBlocks: "catchpoint-total-blocks",
            catchpointTotalKvs: "catchpoint-total-kvs",
            catchpointVerifiedAccounts: "catchpoint-verified-accounts",
            catchpointVerifiedKvs: "catchpoint-verified-kvs",
            lastCatchpoint: "last-catchpoint",
            upgradeDelay: "upgrade-delay",
            upgradeNextProtocolVoteBefore: "upgrade-next-protocol-vote-before",
            upgradeNoVotes: "upgrade-no-votes",
            upgradeNodeVote: "upgrade-node-vote",
            upgradeVoteRounds: "upgrade-vote-rounds",
            upgradeVotes: "upgrade-votes",
            upgradeVotesRequired: "upgrade-votes-required",
            upgradeYesVotes: "upgrade-yes-votes"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["catchup-time"] === "undefined")
            throw new Error(`Response is missing required field 'catchup-time': ${data}`);
          if (typeof data["last-round"] === "undefined")
            throw new Error(`Response is missing required field 'last-round': ${data}`);
          if (typeof data["last-version"] === "undefined")
            throw new Error(`Response is missing required field 'last-version': ${data}`);
          if (typeof data["next-version"] === "undefined")
            throw new Error(`Response is missing required field 'next-version': ${data}`);
          if (typeof data["next-version-round"] === "undefined")
            throw new Error(`Response is missing required field 'next-version-round': ${data}`);
          if (typeof data["next-version-supported"] === "undefined")
            throw new Error(`Response is missing required field 'next-version-supported': ${data}`);
          if (typeof data["stopped-at-unsupported-round"] === "undefined")
            throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${data}`);
          if (typeof data["time-since-last-round"] === "undefined")
            throw new Error(`Response is missing required field 'time-since-last-round': ${data}`);
          return new _NodeStatusResponse({
            catchupTime: data["catchup-time"],
            lastRound: data["last-round"],
            lastVersion: data["last-version"],
            nextVersion: data["next-version"],
            nextVersionRound: data["next-version-round"],
            nextVersionSupported: data["next-version-supported"],
            stoppedAtUnsupportedRound: data["stopped-at-unsupported-round"],
            timeSinceLastRound: data["time-since-last-round"],
            catchpoint: data["catchpoint"],
            catchpointAcquiredBlocks: data["catchpoint-acquired-blocks"],
            catchpointProcessedAccounts: data["catchpoint-processed-accounts"],
            catchpointProcessedKvs: data["catchpoint-processed-kvs"],
            catchpointTotalAccounts: data["catchpoint-total-accounts"],
            catchpointTotalBlocks: data["catchpoint-total-blocks"],
            catchpointTotalKvs: data["catchpoint-total-kvs"],
            catchpointVerifiedAccounts: data["catchpoint-verified-accounts"],
            catchpointVerifiedKvs: data["catchpoint-verified-kvs"],
            lastCatchpoint: data["last-catchpoint"],
            upgradeDelay: data["upgrade-delay"],
            upgradeNextProtocolVoteBefore: data["upgrade-next-protocol-vote-before"],
            upgradeNoVotes: data["upgrade-no-votes"],
            upgradeNodeVote: data["upgrade-node-vote"],
            upgradeVoteRounds: data["upgrade-vote-rounds"],
            upgradeVotes: data["upgrade-votes"],
            upgradeVotesRequired: data["upgrade-votes-required"],
            upgradeYesVotes: data["upgrade-yes-votes"]
          });
        }
      };
      exports.NodeStatusResponse = NodeStatusResponse;
      var PendingTransactionResponse = class _PendingTransactionResponse extends basemodel_1.default {
        /**
         * Creates a new `PendingTransactionResponse` object.
         * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool
         * (and specifies why that happened). An empty string indicates the transaction
         * wasn't kicked out of this node's txpool due to an error.
         * @param txn - The raw signed transaction.
         * @param applicationIndex - The application index if the transaction was found and it created an
         * application.
         * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.
         * @param assetIndex - The asset index if the transaction was found and it created an asset.
         * @param closeRewards - Rewards in microalgos applied to the close remainder to account.
         * @param closingAmount - Closing amount for the transaction.
         * @param confirmedRound - The round where this transaction was confirmed, if present.
         * @param globalStateDelta - Global state key/value changes for the application being executed by this
         * transaction.
         * @param innerTxns - Inner transactions produced by application execution.
         * @param localStateDelta - Local state key/value changes for the application being executed by this
         * transaction.
         * @param logs - Logs for the application being executed by this transaction.
         * @param receiverRewards - Rewards in microalgos applied to the receiver account.
         * @param senderRewards - Rewards in microalgos applied to the sender account.
         */
        constructor({ poolError, txn, applicationIndex, assetClosingAmount, assetIndex, closeRewards, closingAmount, confirmedRound, globalStateDelta, innerTxns, localStateDelta, logs, receiverRewards, senderRewards }) {
          super();
          this.poolError = poolError;
          this.txn = txn;
          this.applicationIndex = applicationIndex;
          this.assetClosingAmount = assetClosingAmount;
          this.assetIndex = assetIndex;
          this.closeRewards = closeRewards;
          this.closingAmount = closingAmount;
          this.confirmedRound = confirmedRound;
          this.globalStateDelta = globalStateDelta;
          this.innerTxns = innerTxns;
          this.localStateDelta = localStateDelta;
          this.logs = logs;
          this.receiverRewards = receiverRewards;
          this.senderRewards = senderRewards;
          this.attribute_map = {
            poolError: "pool-error",
            txn: "txn",
            applicationIndex: "application-index",
            assetClosingAmount: "asset-closing-amount",
            assetIndex: "asset-index",
            closeRewards: "close-rewards",
            closingAmount: "closing-amount",
            confirmedRound: "confirmed-round",
            globalStateDelta: "global-state-delta",
            innerTxns: "inner-txns",
            localStateDelta: "local-state-delta",
            logs: "logs",
            receiverRewards: "receiver-rewards",
            senderRewards: "sender-rewards"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["pool-error"] === "undefined")
            throw new Error(`Response is missing required field 'pool-error': ${data}`);
          if (typeof data["txn"] === "undefined")
            throw new Error(`Response is missing required field 'txn': ${data}`);
          return new _PendingTransactionResponse({
            poolError: data["pool-error"],
            txn: data["txn"],
            applicationIndex: data["application-index"],
            assetClosingAmount: data["asset-closing-amount"],
            assetIndex: data["asset-index"],
            closeRewards: data["close-rewards"],
            closingAmount: data["closing-amount"],
            confirmedRound: data["confirmed-round"],
            globalStateDelta: typeof data["global-state-delta"] !== "undefined" ? data["global-state-delta"].map(EvalDeltaKeyValue.from_obj_for_encoding) : void 0,
            innerTxns: typeof data["inner-txns"] !== "undefined" ? data["inner-txns"].map(_PendingTransactionResponse.from_obj_for_encoding) : void 0,
            localStateDelta: typeof data["local-state-delta"] !== "undefined" ? data["local-state-delta"].map(AccountStateDelta.from_obj_for_encoding) : void 0,
            logs: data["logs"],
            receiverRewards: data["receiver-rewards"],
            senderRewards: data["sender-rewards"]
          });
        }
      };
      exports.PendingTransactionResponse = PendingTransactionResponse;
      var PendingTransactionsResponse = class _PendingTransactionsResponse extends basemodel_1.default {
        /**
         * Creates a new `PendingTransactionsResponse` object.
         * @param topTransactions - An array of signed transaction objects.
         * @param totalTransactions - Total number of transactions in the pool.
         */
        constructor({ topTransactions, totalTransactions }) {
          super();
          this.topTransactions = topTransactions;
          this.totalTransactions = totalTransactions;
          this.attribute_map = {
            topTransactions: "top-transactions",
            totalTransactions: "total-transactions"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["top-transactions"]))
            throw new Error(`Response is missing required array field 'top-transactions': ${data}`);
          if (typeof data["total-transactions"] === "undefined")
            throw new Error(`Response is missing required field 'total-transactions': ${data}`);
          return new _PendingTransactionsResponse({
            topTransactions: data["top-transactions"],
            totalTransactions: data["total-transactions"]
          });
        }
      };
      exports.PendingTransactionsResponse = PendingTransactionsResponse;
      var PostTransactionsResponse = class _PostTransactionsResponse extends basemodel_1.default {
        /**
         * Creates a new `PostTransactionsResponse` object.
         * @param txid - encoding of the transaction hash.
         */
        constructor({ txid }) {
          super();
          this.txid = txid;
          this.attribute_map = {
            txid: "txId"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["txId"] === "undefined")
            throw new Error(`Response is missing required field 'txId': ${data}`);
          return new _PostTransactionsResponse({
            txid: data["txId"]
          });
        }
      };
      exports.PostTransactionsResponse = PostTransactionsResponse;
      var ScratchChange = class _ScratchChange extends basemodel_1.default {
        /**
         * Creates a new `ScratchChange` object.
         * @param newValue - Represents an AVM value.
         * @param slot - The scratch slot written.
         */
        constructor({ newValue, slot }) {
          super();
          this.newValue = newValue;
          this.slot = slot;
          this.attribute_map = {
            newValue: "new-value",
            slot: "slot"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["new-value"] === "undefined")
            throw new Error(`Response is missing required field 'new-value': ${data}`);
          if (typeof data["slot"] === "undefined")
            throw new Error(`Response is missing required field 'slot': ${data}`);
          return new _ScratchChange({
            newValue: AvmValue.from_obj_for_encoding(data["new-value"]),
            slot: data["slot"]
          });
        }
      };
      exports.ScratchChange = ScratchChange;
      var SimulateInitialStates = class _SimulateInitialStates extends basemodel_1.default {
        /**
         * Creates a new `SimulateInitialStates` object.
         * @param appInitialStates - The initial states of accessed application before simulation. The order of this
         * array is arbitrary.
         */
        constructor({ appInitialStates }) {
          super();
          this.appInitialStates = appInitialStates;
          this.attribute_map = {
            appInitialStates: "app-initial-states"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _SimulateInitialStates({
            appInitialStates: typeof data["app-initial-states"] !== "undefined" ? data["app-initial-states"].map(ApplicationInitialStates.from_obj_for_encoding) : void 0
          });
        }
      };
      exports.SimulateInitialStates = SimulateInitialStates;
      var SimulateRequest = class _SimulateRequest extends basemodel_1.default {
        /**
         * Creates a new `SimulateRequest` object.
         * @param txnGroups - The transaction groups to simulate.
         * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct
         * signatures.
         * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.
         * @param allowUnnamedResources - Allows access to unnamed resources during simulation.
         * @param execTraceConfig - An object that configures simulation execution trace.
         * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.
         * @param round - If provided, specifies the round preceding the simulation. State changes through
         * this round will be used to run this simulation. Usually only the 4 most recent
         * rounds will be available (controlled by the node config value MaxAcctLookback).
         * If not specified, defaults to the latest available round.
         */
        constructor({ txnGroups, allowEmptySignatures, allowMoreLogging, allowUnnamedResources, execTraceConfig, extraOpcodeBudget, round }) {
          super();
          this.txnGroups = txnGroups;
          this.allowEmptySignatures = allowEmptySignatures;
          this.allowMoreLogging = allowMoreLogging;
          this.allowUnnamedResources = allowUnnamedResources;
          this.execTraceConfig = execTraceConfig;
          this.extraOpcodeBudget = extraOpcodeBudget;
          this.round = round;
          this.attribute_map = {
            txnGroups: "txn-groups",
            allowEmptySignatures: "allow-empty-signatures",
            allowMoreLogging: "allow-more-logging",
            allowUnnamedResources: "allow-unnamed-resources",
            execTraceConfig: "exec-trace-config",
            extraOpcodeBudget: "extra-opcode-budget",
            round: "round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["txn-groups"]))
            throw new Error(`Response is missing required array field 'txn-groups': ${data}`);
          return new _SimulateRequest({
            txnGroups: data["txn-groups"].map(SimulateRequestTransactionGroup.from_obj_for_encoding),
            allowEmptySignatures: data["allow-empty-signatures"],
            allowMoreLogging: data["allow-more-logging"],
            allowUnnamedResources: data["allow-unnamed-resources"],
            execTraceConfig: typeof data["exec-trace-config"] !== "undefined" ? SimulateTraceConfig.from_obj_for_encoding(data["exec-trace-config"]) : void 0,
            extraOpcodeBudget: data["extra-opcode-budget"],
            round: data["round"]
          });
        }
      };
      exports.SimulateRequest = SimulateRequest;
      var SimulateRequestTransactionGroup = class _SimulateRequestTransactionGroup extends basemodel_1.default {
        /**
         * Creates a new `SimulateRequestTransactionGroup` object.
         * @param txns - An atomic transaction group.
         */
        constructor({ txns }) {
          super();
          this.txns = txns;
          this.attribute_map = {
            txns: "txns"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["txns"]))
            throw new Error(`Response is missing required array field 'txns': ${data}`);
          return new _SimulateRequestTransactionGroup({
            txns: data["txns"]
          });
        }
      };
      exports.SimulateRequestTransactionGroup = SimulateRequestTransactionGroup;
      var SimulateResponse = class _SimulateResponse extends basemodel_1.default {
        /**
         * Creates a new `SimulateResponse` object.
         * @param lastRound - The round immediately preceding this simulation. State changes through this
         * round were used to run this simulation.
         * @param txnGroups - A result object for each transaction group that was simulated.
         * @param version - The version of this response object.
         * @param evalOverrides - The set of parameters and limits override during simulation. If this set of
         * parameters is present, then evaluation parameters may differ from standard
         * evaluation in certain ways.
         * @param execTraceConfig - An object that configures simulation execution trace.
         * @param initialStates - Initial states of resources that were accessed during simulation.
         */
        constructor({ lastRound, txnGroups, version, evalOverrides, execTraceConfig, initialStates }) {
          super();
          this.lastRound = lastRound;
          this.txnGroups = txnGroups;
          this.version = version;
          this.evalOverrides = evalOverrides;
          this.execTraceConfig = execTraceConfig;
          this.initialStates = initialStates;
          this.attribute_map = {
            lastRound: "last-round",
            txnGroups: "txn-groups",
            version: "version",
            evalOverrides: "eval-overrides",
            execTraceConfig: "exec-trace-config",
            initialStates: "initial-states"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["last-round"] === "undefined")
            throw new Error(`Response is missing required field 'last-round': ${data}`);
          if (!Array.isArray(data["txn-groups"]))
            throw new Error(`Response is missing required array field 'txn-groups': ${data}`);
          if (typeof data["version"] === "undefined")
            throw new Error(`Response is missing required field 'version': ${data}`);
          return new _SimulateResponse({
            lastRound: data["last-round"],
            txnGroups: data["txn-groups"].map(SimulateTransactionGroupResult.from_obj_for_encoding),
            version: data["version"],
            evalOverrides: typeof data["eval-overrides"] !== "undefined" ? SimulationEvalOverrides.from_obj_for_encoding(data["eval-overrides"]) : void 0,
            execTraceConfig: typeof data["exec-trace-config"] !== "undefined" ? SimulateTraceConfig.from_obj_for_encoding(data["exec-trace-config"]) : void 0,
            initialStates: typeof data["initial-states"] !== "undefined" ? SimulateInitialStates.from_obj_for_encoding(data["initial-states"]) : void 0
          });
        }
      };
      exports.SimulateResponse = SimulateResponse;
      var SimulateTraceConfig = class _SimulateTraceConfig extends basemodel_1.default {
        /**
         * Creates a new `SimulateTraceConfig` object.
         * @param enable - A boolean option for opting in execution trace features simulation endpoint.
         * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution
         * trace during simulation.
         * @param stackChange - A boolean option enabling returning stack changes together with execution trace
         * during simulation.
         * @param stateChange - A boolean option enabling returning application state changes (global, local,
         * and box changes) with the execution trace during simulation.
         */
        constructor({ enable, scratchChange, stackChange, stateChange }) {
          super();
          this.enable = enable;
          this.scratchChange = scratchChange;
          this.stackChange = stackChange;
          this.stateChange = stateChange;
          this.attribute_map = {
            enable: "enable",
            scratchChange: "scratch-change",
            stackChange: "stack-change",
            stateChange: "state-change"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _SimulateTraceConfig({
            enable: data["enable"],
            scratchChange: data["scratch-change"],
            stackChange: data["stack-change"],
            stateChange: data["state-change"]
          });
        }
      };
      exports.SimulateTraceConfig = SimulateTraceConfig;
      var SimulateTransactionGroupResult = class _SimulateTransactionGroupResult extends basemodel_1.default {
        /**
         * Creates a new `SimulateTransactionGroupResult` object.
         * @param txnResults - Simulation result for individual transactions
         * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.
         * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.
         * @param failedAt - If present, indicates which transaction in this group caused the failure. This
         * array represents the path to the failing transaction. Indexes are zero based,
         * the first element indicates the top-level transaction, and successive elements
         * indicate deeper inner transactions.
         * @param failureMessage - If present, indicates that the transaction group failed and specifies why that
         * happened
         * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have
         * caused failure, but were allowed in simulation. Depending on where this object
         * is in the response, the unnamed resources it contains may or may not qualify for
         * group resource sharing. If this is a field in SimulateTransactionGroupResult,
         * the resources do qualify, but if this is a field in SimulateTransactionResult,
         * they do not qualify. In order to make this group valid for actual submission,
         * resources that qualify for group sharing can be made available by any
         * transaction of the group; otherwise, resources must be placed in the same
         * transaction which accessed them.
         */
        constructor({ txnResults, appBudgetAdded, appBudgetConsumed, failedAt, failureMessage, unnamedResourcesAccessed }) {
          super();
          this.txnResults = txnResults;
          this.appBudgetAdded = appBudgetAdded;
          this.appBudgetConsumed = appBudgetConsumed;
          this.failedAt = failedAt;
          this.failureMessage = failureMessage;
          this.unnamedResourcesAccessed = unnamedResourcesAccessed;
          this.attribute_map = {
            txnResults: "txn-results",
            appBudgetAdded: "app-budget-added",
            appBudgetConsumed: "app-budget-consumed",
            failedAt: "failed-at",
            failureMessage: "failure-message",
            unnamedResourcesAccessed: "unnamed-resources-accessed"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["txn-results"]))
            throw new Error(`Response is missing required array field 'txn-results': ${data}`);
          return new _SimulateTransactionGroupResult({
            txnResults: data["txn-results"].map(SimulateTransactionResult.from_obj_for_encoding),
            appBudgetAdded: data["app-budget-added"],
            appBudgetConsumed: data["app-budget-consumed"],
            failedAt: data["failed-at"],
            failureMessage: data["failure-message"],
            unnamedResourcesAccessed: typeof data["unnamed-resources-accessed"] !== "undefined" ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data["unnamed-resources-accessed"]) : void 0
          });
        }
      };
      exports.SimulateTransactionGroupResult = SimulateTransactionGroupResult;
      var SimulateTransactionResult = class _SimulateTransactionResult extends basemodel_1.default {
        /**
         * Creates a new `SimulateTransactionResult` object.
         * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,
         * includes confirmation details like the round and reward details.
         * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes
         * budged used by inner app calls spawned by this transaction.
         * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app
         * call trace in a recursive way.
         * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.
         * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have
         * caused failure, but were allowed in simulation. Depending on where this object
         * is in the response, the unnamed resources it contains may or may not qualify for
         * group resource sharing. If this is a field in SimulateTransactionGroupResult,
         * the resources do qualify, but if this is a field in SimulateTransactionResult,
         * they do not qualify. In order to make this group valid for actual submission,
         * resources that qualify for group sharing can be made available by any
         * transaction of the group; otherwise, resources must be placed in the same
         * transaction which accessed them.
         */
        constructor({ txnResult, appBudgetConsumed, execTrace, logicSigBudgetConsumed, unnamedResourcesAccessed }) {
          super();
          this.txnResult = txnResult;
          this.appBudgetConsumed = appBudgetConsumed;
          this.execTrace = execTrace;
          this.logicSigBudgetConsumed = logicSigBudgetConsumed;
          this.unnamedResourcesAccessed = unnamedResourcesAccessed;
          this.attribute_map = {
            txnResult: "txn-result",
            appBudgetConsumed: "app-budget-consumed",
            execTrace: "exec-trace",
            logicSigBudgetConsumed: "logic-sig-budget-consumed",
            unnamedResourcesAccessed: "unnamed-resources-accessed"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["txn-result"] === "undefined")
            throw new Error(`Response is missing required field 'txn-result': ${data}`);
          return new _SimulateTransactionResult({
            txnResult: PendingTransactionResponse.from_obj_for_encoding(data["txn-result"]),
            appBudgetConsumed: data["app-budget-consumed"],
            execTrace: typeof data["exec-trace"] !== "undefined" ? SimulationTransactionExecTrace.from_obj_for_encoding(data["exec-trace"]) : void 0,
            logicSigBudgetConsumed: data["logic-sig-budget-consumed"],
            unnamedResourcesAccessed: typeof data["unnamed-resources-accessed"] !== "undefined" ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data["unnamed-resources-accessed"]) : void 0
          });
        }
      };
      exports.SimulateTransactionResult = SimulateTransactionResult;
      var SimulateUnnamedResourcesAccessed = class _SimulateUnnamedResourcesAccessed extends basemodel_1.default {
        /**
         * Creates a new `SimulateUnnamedResourcesAccessed` object.
         * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.
         * @param appLocals - The unnamed application local states that were referenced. The order of this
         * array is arbitrary.
         * @param apps - The unnamed applications that were referenced. The order of this array is
         * arbitrary.
         * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is
         * arbitrary.
         * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.
         * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.
         * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in
         * addition to the references defined in the input transaction group and any
         * referenced to unnamed boxes.
         */
        constructor({ accounts, appLocals, apps, assetHoldings, assets, boxes, extraBoxRefs }) {
          super();
          this.accounts = accounts;
          this.appLocals = appLocals;
          this.apps = apps;
          this.assetHoldings = assetHoldings;
          this.assets = assets;
          this.boxes = boxes;
          this.extraBoxRefs = extraBoxRefs;
          this.attribute_map = {
            accounts: "accounts",
            appLocals: "app-locals",
            apps: "apps",
            assetHoldings: "asset-holdings",
            assets: "assets",
            boxes: "boxes",
            extraBoxRefs: "extra-box-refs"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _SimulateUnnamedResourcesAccessed({
            accounts: data["accounts"],
            appLocals: typeof data["app-locals"] !== "undefined" ? data["app-locals"].map(ApplicationLocalReference.from_obj_for_encoding) : void 0,
            apps: data["apps"],
            assetHoldings: typeof data["asset-holdings"] !== "undefined" ? data["asset-holdings"].map(AssetHoldingReference.from_obj_for_encoding) : void 0,
            assets: data["assets"],
            boxes: typeof data["boxes"] !== "undefined" ? data["boxes"].map(BoxReference.from_obj_for_encoding) : void 0,
            extraBoxRefs: data["extra-box-refs"]
          });
        }
      };
      exports.SimulateUnnamedResourcesAccessed = SimulateUnnamedResourcesAccessed;
      var SimulationEvalOverrides = class _SimulationEvalOverrides extends basemodel_1.default {
        /**
         * Creates a new `SimulationEvalOverrides` object.
         * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they
         * were properly signed.
         * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.
         * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation
         * @param maxLogCalls - The maximum log calls one can make during simulation
         * @param maxLogSize - The maximum byte number to log during simulation
         */
        constructor({ allowEmptySignatures, allowUnnamedResources, extraOpcodeBudget, maxLogCalls, maxLogSize }) {
          super();
          this.allowEmptySignatures = allowEmptySignatures;
          this.allowUnnamedResources = allowUnnamedResources;
          this.extraOpcodeBudget = extraOpcodeBudget;
          this.maxLogCalls = maxLogCalls;
          this.maxLogSize = maxLogSize;
          this.attribute_map = {
            allowEmptySignatures: "allow-empty-signatures",
            allowUnnamedResources: "allow-unnamed-resources",
            extraOpcodeBudget: "extra-opcode-budget",
            maxLogCalls: "max-log-calls",
            maxLogSize: "max-log-size"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _SimulationEvalOverrides({
            allowEmptySignatures: data["allow-empty-signatures"],
            allowUnnamedResources: data["allow-unnamed-resources"],
            extraOpcodeBudget: data["extra-opcode-budget"],
            maxLogCalls: data["max-log-calls"],
            maxLogSize: data["max-log-size"]
          });
        }
      };
      exports.SimulationEvalOverrides = SimulationEvalOverrides;
      var SimulationOpcodeTraceUnit = class _SimulationOpcodeTraceUnit extends basemodel_1.default {
        /**
         * Creates a new `SimulationOpcodeTraceUnit` object.
         * @param pc - The program counter of the current opcode being evaluated.
         * @param scratchChanges - The writes into scratch slots.
         * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.
         * @param stackAdditions - The values added by this opcode to the stack.
         * @param stackPopCount - The number of deleted stack values by this opcode.
         * @param stateChanges - The operations against the current application's states.
         */
        constructor({ pc, scratchChanges, spawnedInners, stackAdditions, stackPopCount, stateChanges }) {
          super();
          this.pc = pc;
          this.scratchChanges = scratchChanges;
          this.spawnedInners = spawnedInners;
          this.stackAdditions = stackAdditions;
          this.stackPopCount = stackPopCount;
          this.stateChanges = stateChanges;
          this.attribute_map = {
            pc: "pc",
            scratchChanges: "scratch-changes",
            spawnedInners: "spawned-inners",
            stackAdditions: "stack-additions",
            stackPopCount: "stack-pop-count",
            stateChanges: "state-changes"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["pc"] === "undefined")
            throw new Error(`Response is missing required field 'pc': ${data}`);
          return new _SimulationOpcodeTraceUnit({
            pc: data["pc"],
            scratchChanges: typeof data["scratch-changes"] !== "undefined" ? data["scratch-changes"].map(ScratchChange.from_obj_for_encoding) : void 0,
            spawnedInners: data["spawned-inners"],
            stackAdditions: typeof data["stack-additions"] !== "undefined" ? data["stack-additions"].map(AvmValue.from_obj_for_encoding) : void 0,
            stackPopCount: data["stack-pop-count"],
            stateChanges: typeof data["state-changes"] !== "undefined" ? data["state-changes"].map(ApplicationStateOperation.from_obj_for_encoding) : void 0
          });
        }
      };
      exports.SimulationOpcodeTraceUnit = SimulationOpcodeTraceUnit;
      var SimulationTransactionExecTrace = class _SimulationTransactionExecTrace extends basemodel_1.default {
        /**
         * Creates a new `SimulationTransactionExecTrace` object.
         * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.
         * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.
         * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.
         * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.
         * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of
         * any inner transactions executed.
         * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.
         * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.
         */
        constructor({ approvalProgramHash, approvalProgramTrace, clearStateProgramHash, clearStateProgramTrace, innerTrace, logicSigHash, logicSigTrace }) {
          super();
          this.approvalProgramHash = typeof approvalProgramHash === "string" ? new Uint8Array(buffer_1.Buffer.from(approvalProgramHash, "base64")) : approvalProgramHash;
          this.approvalProgramTrace = approvalProgramTrace;
          this.clearStateProgramHash = typeof clearStateProgramHash === "string" ? new Uint8Array(buffer_1.Buffer.from(clearStateProgramHash, "base64")) : clearStateProgramHash;
          this.clearStateProgramTrace = clearStateProgramTrace;
          this.innerTrace = innerTrace;
          this.logicSigHash = typeof logicSigHash === "string" ? new Uint8Array(buffer_1.Buffer.from(logicSigHash, "base64")) : logicSigHash;
          this.logicSigTrace = logicSigTrace;
          this.attribute_map = {
            approvalProgramHash: "approval-program-hash",
            approvalProgramTrace: "approval-program-trace",
            clearStateProgramHash: "clear-state-program-hash",
            clearStateProgramTrace: "clear-state-program-trace",
            innerTrace: "inner-trace",
            logicSigHash: "logic-sig-hash",
            logicSigTrace: "logic-sig-trace"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _SimulationTransactionExecTrace({
            approvalProgramHash: data["approval-program-hash"],
            approvalProgramTrace: typeof data["approval-program-trace"] !== "undefined" ? data["approval-program-trace"].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : void 0,
            clearStateProgramHash: data["clear-state-program-hash"],
            clearStateProgramTrace: typeof data["clear-state-program-trace"] !== "undefined" ? data["clear-state-program-trace"].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : void 0,
            innerTrace: typeof data["inner-trace"] !== "undefined" ? data["inner-trace"].map(_SimulationTransactionExecTrace.from_obj_for_encoding) : void 0,
            logicSigHash: data["logic-sig-hash"],
            logicSigTrace: typeof data["logic-sig-trace"] !== "undefined" ? data["logic-sig-trace"].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : void 0
          });
        }
      };
      exports.SimulationTransactionExecTrace = SimulationTransactionExecTrace;
      var StateProof = class _StateProof extends basemodel_1.default {
        /**
         * Creates a new `StateProof` object.
         * @param message - Represents the message that the state proofs are attesting to.
         * @param stateproof - The encoded StateProof for the message.
         */
        constructor({ message, stateproof }) {
          super();
          this.message = message;
          this.stateproof = typeof stateproof === "string" ? new Uint8Array(buffer_1.Buffer.from(stateproof, "base64")) : stateproof;
          this.attribute_map = {
            message: "Message",
            stateproof: "StateProof"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["Message"] === "undefined")
            throw new Error(`Response is missing required field 'Message': ${data}`);
          if (typeof data["StateProof"] === "undefined")
            throw new Error(`Response is missing required field 'StateProof': ${data}`);
          return new _StateProof({
            message: StateProofMessage.from_obj_for_encoding(data["Message"]),
            stateproof: data["StateProof"]
          });
        }
      };
      exports.StateProof = StateProof;
      var StateProofMessage = class _StateProofMessage extends basemodel_1.default {
        /**
         * Creates a new `StateProofMessage` object.
         * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof
         * interval.
         * @param firstattestedround - The first round the message attests to.
         * @param lastattestedround - The last round the message attests to.
         * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits
         * of precision. This value would be used to verify the next state proof.
         * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.
         */
        constructor({ blockheaderscommitment, firstattestedround, lastattestedround, lnprovenweight, voterscommitment }) {
          super();
          this.blockheaderscommitment = typeof blockheaderscommitment === "string" ? new Uint8Array(buffer_1.Buffer.from(blockheaderscommitment, "base64")) : blockheaderscommitment;
          this.firstattestedround = firstattestedround;
          this.lastattestedround = lastattestedround;
          this.lnprovenweight = lnprovenweight;
          this.voterscommitment = typeof voterscommitment === "string" ? new Uint8Array(buffer_1.Buffer.from(voterscommitment, "base64")) : voterscommitment;
          this.attribute_map = {
            blockheaderscommitment: "BlockHeadersCommitment",
            firstattestedround: "FirstAttestedRound",
            lastattestedround: "LastAttestedRound",
            lnprovenweight: "LnProvenWeight",
            voterscommitment: "VotersCommitment"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["BlockHeadersCommitment"] === "undefined")
            throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${data}`);
          if (typeof data["FirstAttestedRound"] === "undefined")
            throw new Error(`Response is missing required field 'FirstAttestedRound': ${data}`);
          if (typeof data["LastAttestedRound"] === "undefined")
            throw new Error(`Response is missing required field 'LastAttestedRound': ${data}`);
          if (typeof data["LnProvenWeight"] === "undefined")
            throw new Error(`Response is missing required field 'LnProvenWeight': ${data}`);
          if (typeof data["VotersCommitment"] === "undefined")
            throw new Error(`Response is missing required field 'VotersCommitment': ${data}`);
          return new _StateProofMessage({
            blockheaderscommitment: data["BlockHeadersCommitment"],
            firstattestedround: data["FirstAttestedRound"],
            lastattestedround: data["LastAttestedRound"],
            lnprovenweight: data["LnProvenWeight"],
            voterscommitment: data["VotersCommitment"]
          });
        }
      };
      exports.StateProofMessage = StateProofMessage;
      var SupplyResponse = class _SupplyResponse extends basemodel_1.default {
        /**
         * Creates a new `SupplyResponse` object.
         * @param currentRound - Round
         * @param onlineMoney - OnlineMoney
         * @param totalMoney - TotalMoney
         */
        constructor({ currentRound, onlineMoney, totalMoney }) {
          super();
          this.currentRound = currentRound;
          this.onlineMoney = onlineMoney;
          this.totalMoney = totalMoney;
          this.attribute_map = {
            currentRound: "current_round",
            onlineMoney: "online-money",
            totalMoney: "total-money"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["current_round"] === "undefined")
            throw new Error(`Response is missing required field 'current_round': ${data}`);
          if (typeof data["online-money"] === "undefined")
            throw new Error(`Response is missing required field 'online-money': ${data}`);
          if (typeof data["total-money"] === "undefined")
            throw new Error(`Response is missing required field 'total-money': ${data}`);
          return new _SupplyResponse({
            currentRound: data["current_round"],
            onlineMoney: data["online-money"],
            totalMoney: data["total-money"]
          });
        }
      };
      exports.SupplyResponse = SupplyResponse;
      var TealKeyValue = class _TealKeyValue extends basemodel_1.default {
        /**
         * Creates a new `TealKeyValue` object.
         * @param key -
         * @param value - Represents a TEAL value.
         */
        constructor({ key, value }) {
          super();
          this.key = key;
          this.value = value;
          this.attribute_map = {
            key: "key",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["key"] === "undefined")
            throw new Error(`Response is missing required field 'key': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _TealKeyValue({
            key: data["key"],
            value: TealValue.from_obj_for_encoding(data["value"])
          });
        }
      };
      exports.TealKeyValue = TealKeyValue;
      var TealValue = class _TealValue extends basemodel_1.default {
        /**
         * Creates a new `TealValue` object.
         * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**
         * @param bytes - (tb) bytes value.
         * @param uint - (ui) uint value.
         */
        constructor({ type, bytes, uint }) {
          super();
          this.type = type;
          this.bytes = bytes;
          this.uint = uint;
          this.attribute_map = {
            type: "type",
            bytes: "bytes",
            uint: "uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["type"] === "undefined")
            throw new Error(`Response is missing required field 'type': ${data}`);
          if (typeof data["bytes"] === "undefined")
            throw new Error(`Response is missing required field 'bytes': ${data}`);
          if (typeof data["uint"] === "undefined")
            throw new Error(`Response is missing required field 'uint': ${data}`);
          return new _TealValue({
            type: data["type"],
            bytes: data["bytes"],
            uint: data["uint"]
          });
        }
      };
      exports.TealValue = TealValue;
      var TransactionGroupLedgerStateDeltasForRoundResponse = class _TransactionGroupLedgerStateDeltasForRoundResponse extends basemodel_1.default {
        /**
         * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.
         * @param deltas -
         */
        constructor({ deltas }) {
          super();
          this.deltas = deltas;
          this.attribute_map = {
            deltas: "Deltas"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["Deltas"]))
            throw new Error(`Response is missing required array field 'Deltas': ${data}`);
          return new _TransactionGroupLedgerStateDeltasForRoundResponse({
            deltas: data["Deltas"].map(LedgerStateDeltaForTransactionGroup.from_obj_for_encoding)
          });
        }
      };
      exports.TransactionGroupLedgerStateDeltasForRoundResponse = TransactionGroupLedgerStateDeltasForRoundResponse;
      var TransactionParametersResponse = class _TransactionParametersResponse extends basemodel_1.default {
        /**
         * Creates a new `TransactionParametersResponse` object.
         * @param consensusVersion - ConsensusVersion indicates the consensus protocol version
         * as of LastRound.
         * @param fee - Fee is the suggested transaction fee
         * Fee is in units of micro-Algos per byte.
         * Fee may fall to zero but transactions must still have a fee of
         * at least MinTxnFee for the current network protocol.
         * @param genesisHash - GenesisHash is the hash of the genesis block.
         * @param genesisId - GenesisID is an ID listed in the genesis block.
         * @param lastRound - LastRound indicates the last round seen
         * @param minFee - The minimum transaction fee (not per byte) required for the
         * txn to validate for the current network protocol.
         */
        constructor({ consensusVersion, fee, genesisHash, genesisId, lastRound, minFee }) {
          super();
          this.consensusVersion = consensusVersion;
          this.fee = fee;
          this.genesisHash = typeof genesisHash === "string" ? new Uint8Array(buffer_1.Buffer.from(genesisHash, "base64")) : genesisHash;
          this.genesisId = genesisId;
          this.lastRound = lastRound;
          this.minFee = minFee;
          this.attribute_map = {
            consensusVersion: "consensus-version",
            fee: "fee",
            genesisHash: "genesis-hash",
            genesisId: "genesis-id",
            lastRound: "last-round",
            minFee: "min-fee"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["consensus-version"] === "undefined")
            throw new Error(`Response is missing required field 'consensus-version': ${data}`);
          if (typeof data["fee"] === "undefined")
            throw new Error(`Response is missing required field 'fee': ${data}`);
          if (typeof data["genesis-hash"] === "undefined")
            throw new Error(`Response is missing required field 'genesis-hash': ${data}`);
          if (typeof data["genesis-id"] === "undefined")
            throw new Error(`Response is missing required field 'genesis-id': ${data}`);
          if (typeof data["last-round"] === "undefined")
            throw new Error(`Response is missing required field 'last-round': ${data}`);
          if (typeof data["min-fee"] === "undefined")
            throw new Error(`Response is missing required field 'min-fee': ${data}`);
          return new _TransactionParametersResponse({
            consensusVersion: data["consensus-version"],
            fee: data["fee"],
            genesisHash: data["genesis-hash"],
            genesisId: data["genesis-id"],
            lastRound: data["last-round"],
            minFee: data["min-fee"]
          });
        }
      };
      exports.TransactionParametersResponse = TransactionParametersResponse;
      var TransactionProofResponse = class _TransactionProofResponse extends basemodel_1.default {
        /**
         * Creates a new `TransactionProofResponse` object.
         * @param idx - Index of the transaction in the block's payset.
         * @param proof - Proof of transaction membership.
         * @param stibhash - Hash of SignedTxnInBlock for verifying proof.
         * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges
         * from a leaf to the root.
         * @param hashtype - The type of hash function used to create the proof, must be one of:
         * * sha512_256
         * * sha256
         */
        constructor({ idx, proof, stibhash, treedepth, hashtype }) {
          super();
          this.idx = idx;
          this.proof = typeof proof === "string" ? new Uint8Array(buffer_1.Buffer.from(proof, "base64")) : proof;
          this.stibhash = typeof stibhash === "string" ? new Uint8Array(buffer_1.Buffer.from(stibhash, "base64")) : stibhash;
          this.treedepth = treedepth;
          this.hashtype = hashtype;
          this.attribute_map = {
            idx: "idx",
            proof: "proof",
            stibhash: "stibhash",
            treedepth: "treedepth",
            hashtype: "hashtype"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["idx"] === "undefined")
            throw new Error(`Response is missing required field 'idx': ${data}`);
          if (typeof data["proof"] === "undefined")
            throw new Error(`Response is missing required field 'proof': ${data}`);
          if (typeof data["stibhash"] === "undefined")
            throw new Error(`Response is missing required field 'stibhash': ${data}`);
          if (typeof data["treedepth"] === "undefined")
            throw new Error(`Response is missing required field 'treedepth': ${data}`);
          return new _TransactionProofResponse({
            idx: data["idx"],
            proof: data["proof"],
            stibhash: data["stibhash"],
            treedepth: data["treedepth"],
            hashtype: data["hashtype"]
          });
        }
      };
      exports.TransactionProofResponse = TransactionProofResponse;
      var Version = class _Version extends basemodel_1.default {
        /**
         * Creates a new `Version` object.
         * @param build -
         * @param genesisHashB64 -
         * @param genesisId -
         * @param versions -
         */
        constructor({ build, genesisHashB64, genesisId, versions }) {
          super();
          this.build = build;
          this.genesisHashB64 = typeof genesisHashB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(genesisHashB64, "base64")) : genesisHashB64;
          this.genesisId = genesisId;
          this.versions = versions;
          this.attribute_map = {
            build: "build",
            genesisHashB64: "genesis_hash_b64",
            genesisId: "genesis_id",
            versions: "versions"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["build"] === "undefined")
            throw new Error(`Response is missing required field 'build': ${data}`);
          if (typeof data["genesis_hash_b64"] === "undefined")
            throw new Error(`Response is missing required field 'genesis_hash_b64': ${data}`);
          if (typeof data["genesis_id"] === "undefined")
            throw new Error(`Response is missing required field 'genesis_id': ${data}`);
          if (!Array.isArray(data["versions"]))
            throw new Error(`Response is missing required array field 'versions': ${data}`);
          return new _Version({
            build: BuildVersion.from_obj_for_encoding(data["build"]),
            genesisHashB64: data["genesis_hash_b64"],
            genesisId: data["genesis_id"],
            versions: data["versions"]
          });
        }
      };
      exports.Version = Version;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js
  var require_jsonrequest = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var intDecoding_1 = __importDefault2(require_intDecoding());
      var JSONRequest = class {
        /**
         * @param client - HTTPClient object.
         * @param intDecoding - The method to use
         *   for decoding integers from this request's response. See the setIntDecoding method for more
         *   details.
         */
        constructor(client, intDecoding) {
          this.c = client;
          this.query = {};
          this.intDecoding = intDecoding || intDecoding_1.default.DEFAULT;
        }
        /**
         * Prepare a JSON response before returning it.
         *
         * Use this method to change and restructure response
         * data as needed after receiving it from the `do()` method.
         * @param body - Response body received
         * @category JSONRequest
         */
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return body;
        }
        /**
         * Execute the request.
         * @param headers - Additional headers to send in the request. Optional.
         * @returns A promise which resolves to the parsed response data.
         * @category JSONRequest
         */
        async do(headers = {}) {
          const jsonOptions = {};
          if (this.intDecoding !== "default") {
            jsonOptions.intDecoding = this.intDecoding;
          }
          const res = await this.c.get(this.path(), this.query, headers, jsonOptions);
          return this.prepare(res.body);
        }
        /**
         * Execute the request, but do not process the response data in any way.
         * @param headers - Additional headers to send in the request. Optional.
         * @returns A promise which resolves to the raw response data, exactly as returned by the server.
         * @category JSONRequest
         */
        async doRaw(headers = {}) {
          const res = await this.c.get(this.path(), this.query, headers, {}, false);
          return res.body;
        }
        /**
         * Configure how integers in this request's JSON response will be decoded.
         *
         * The options are:
         * * "default": Integers will be decoded according to JSON.parse, meaning they will all be
         *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.
         * * "safe": All integers will be decoded as Numbers, but if any values are greater than
         *   Number.MAX_SAFE_INTEGER an error will be thrown.
         * * "mixed": Integers will be decoded as Numbers if they are less than or equal to
         *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.
         * * "bigint": All integers will be decoded as BigInts.
         *
         * @param method - The method to use when parsing the
         *   response for this request. Must be one of "default", "safe", "mixed", or "bigint".
         * @category JSONRequest
         */
        setIntDecoding(method) {
          if (method !== "default" && method !== "safe" && method !== "mixed" && method !== "bigint")
            throw new Error(`Invalid method for int decoding: ${method}`);
          this.intDecoding = method;
          return this;
        }
      };
      exports.default = JSONRequest;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/accountInformation.js
  var require_accountInformation = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/accountInformation.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var AccountInformation = class extends jsonrequest_1.default {
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        path() {
          return `/v2/accounts/${this.account}`;
        }
        /**
         * Exclude assets and application data from results
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await algodClient.accountInformation(address)
         *        .exclude('all')
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        exclude(exclude) {
          this.query.exclude = exclude;
          return this;
        }
      };
      exports.default = AccountInformation;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/accountAssetInformation.js
  var require_accountAssetInformation = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/accountAssetInformation.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var AccountAssetInformation = class extends jsonrequest_1.default {
        constructor(c, intDecoding, account, assetID) {
          super(c, intDecoding);
          this.account = account;
          this.assetID = assetID;
          this.account = account;
          this.assetID = assetID;
        }
        path() {
          return `/v2/accounts/${this.account}/assets/${this.assetID}`;
        }
      };
      exports.default = AccountAssetInformation;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/accountApplicationInformation.js
  var require_accountApplicationInformation = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/accountApplicationInformation.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var AccountApplicationInformation = class extends jsonrequest_1.default {
        constructor(c, intDecoding, account, applicationID) {
          super(c, intDecoding);
          this.account = account;
          this.applicationID = applicationID;
          this.account = account;
          this.applicationID = applicationID;
        }
        path() {
          return `/v2/accounts/${this.account}/applications/${this.applicationID}`;
        }
      };
      exports.default = AccountApplicationInformation;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/block.js
  var require_block = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/block.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var encoding = __importStar2(require_encoding());
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var Block = class extends jsonrequest_1.default {
        constructor(c, roundNumber) {
          super(c);
          if (!Number.isInteger(roundNumber))
            throw Error("roundNumber should be an integer");
          this.round = roundNumber;
          this.query = { format: "msgpack" };
        }
        path() {
          return `/v2/blocks/${this.round}`;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          if (body && body.byteLength > 0) {
            return encoding.decode(body);
          }
          return void 0;
        }
      };
      exports.default = Block;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/compile.js
  var require_compile = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/compile.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setHeaders = void 0;
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      function setHeaders(headers = {}) {
        let hdrs = headers;
        if (Object.keys(hdrs).every((key) => key.toLowerCase() !== "content-type")) {
          hdrs = { ...headers };
          hdrs["Content-Type"] = "text/plain";
        }
        return hdrs;
      }
      exports.setHeaders = setHeaders;
      var Compile = class extends jsonrequest_1.default {
        constructor(c, source) {
          super(c);
          this.source = source;
          this.source = source;
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/teal/compile`;
        }
        sourcemap(map = true) {
          this.query.sourcemap = map;
          return this;
        }
        /**
         * Executes compile
         * @param headers - A headers object
         */
        async do(headers = {}) {
          const txHeaders = setHeaders(headers);
          const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.source), txHeaders, this.query);
          return res.body;
        }
      };
      exports.default = Compile;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/dryrun.js
  var require_dryrun = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/dryrun.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var encoding = __importStar2(require_encoding());
      var compile_1 = require_compile();
      var Dryrun = class extends jsonrequest_1.default {
        constructor(c, dr) {
          super(c);
          this.blob = encoding.encode(dr.get_obj_for_encoding(true));
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/teal/dryrun";
        }
        /**
         * Executes dryrun
         * @param headers - A headers object
         */
        async do(headers = {}) {
          const txHeaders = (0, compile_1.setHeaders)(headers);
          const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.blob), txHeaders);
          return res.body;
        }
      };
      exports.default = Dryrun;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/genesis.js
  var require_genesis = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/genesis.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var Genesis = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/genesis";
        }
      };
      exports.default = Genesis;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getAssetByID.js
  var require_getAssetByID = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getAssetByID.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetAssetByID = class extends jsonrequest_1.default {
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        path() {
          return `/v2/assets/${this.index}`;
        }
      };
      exports.default = GetAssetByID;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationByID.js
  var require_getApplicationByID = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationByID.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetApplicationByID = class extends jsonrequest_1.default {
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        path() {
          return `/v2/applications/${this.index}`;
        }
      };
      exports.default = GetApplicationByID;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getBlockHash.js
  var require_getBlockHash = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getBlockHash.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetBlockHash = class extends jsonrequest_1.default {
        constructor(c, intDecoding, roundNumber) {
          super(c, intDecoding);
          if (!Number.isInteger(roundNumber))
            throw Error("roundNumber should be an integer");
          this.round = roundNumber;
        }
        path() {
          return `/v2/blocks/${this.round}/hash`;
        }
      };
      exports.default = GetBlockHash;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getBlockTxids.js
  var require_getBlockTxids = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getBlockTxids.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetBlockTxids = class extends jsonrequest_1.default {
        constructor(c, intDecoding, roundNumber) {
          super(c, intDecoding);
          if (!Number.isInteger(roundNumber))
            throw Error("roundNumber should be an integer");
          this.round = roundNumber;
        }
        path() {
          return `/v2/blocks/${this.round}/txids`;
        }
      };
      exports.default = GetBlockTxids;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxByName.js
  var require_getApplicationBoxByName = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxByName.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types();
      var GetApplicationBoxByName = class extends jsonrequest_1.default {
        constructor(c, intDecoding, index, name) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
          const encodedName = buffer_1.Buffer.from(name).toString("base64");
          this.query.name = encodeURI(`b64:${encodedName}`);
        }
        /**
         * @returns `/v2/applications/${index}/box`
         */
        path() {
          return `/v2/applications/${this.index}/box`;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.Box.from_obj_for_encoding(body);
        }
      };
      exports.default = GetApplicationBoxByName;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxes.js
  var require_getApplicationBoxes = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxes.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types();
      var GetApplicationBoxes = class extends jsonrequest_1.default {
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
          this.query.max = 0;
        }
        /**
         * @returns `/v2/applications/${index}/boxes`
         */
        path() {
          return `/v2/applications/${this.index}/boxes`;
        }
        /**
         * Limit results for pagination.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const boxesResult = await algodClient
         *        .GetApplicationBoxes(1234)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        max(max) {
          this.query.max = max;
          return this;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.BoxesResponse.from_obj_for_encoding(body);
        }
      };
      exports.default = GetApplicationBoxes;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/healthCheck.js
  var require_healthCheck = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/healthCheck.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var HealthCheck = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/health";
        }
        async do(headers = {}) {
          const res = await this.c.get(this.path(), {}, headers);
          if (!res.ok) {
            throw new Error(`Health response: ${res.status}`);
          }
          return {};
        }
      };
      exports.default = HealthCheck;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionInformation.js
  var require_pendingTransactionInformation = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionInformation.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var encoding = __importStar2(require_encoding());
      var PendingTransactionInformation = class extends jsonrequest_1.default {
        constructor(c, txid) {
          super(c);
          this.txid = txid;
          this.txid = txid;
          this.query.format = "msgpack";
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          if (body && body.byteLength > 0) {
            return encoding.decode(body);
          }
          return void 0;
        }
        path() {
          return `/v2/transactions/pending/${this.txid}`;
        }
        // max sets the maximum number of txs to return
        max(max) {
          this.query.max = max;
          return this;
        }
      };
      exports.default = PendingTransactionInformation;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactions.js
  var require_pendingTransactions = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactions.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var encoding = __importStar2(require_encoding());
      var PendingTransactions = class extends jsonrequest_1.default {
        constructor(c) {
          super(c);
          this.query.format = "msgpack";
        }
        /* eslint-disable class-methods-use-this */
        path() {
          return "/v2/transactions/pending";
        }
        prepare(body) {
          if (body && body.byteLength > 0) {
            return encoding.decode(body);
          }
          return void 0;
        }
        /* eslint-enable class-methods-use-this */
        // max sets the maximum number of txs to return
        max(max) {
          this.query.max = max;
          return this;
        }
      };
      exports.default = PendingTransactions;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionsByAddress.js
  var require_pendingTransactionsByAddress = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionsByAddress.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var encoding = __importStar2(require_encoding());
      var PendingTransactionsByAddress = class extends jsonrequest_1.default {
        constructor(c, address) {
          super(c);
          this.address = address;
          this.address = address;
          this.query.format = "msgpack";
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          if (body && body.byteLength > 0) {
            return encoding.decode(body);
          }
          return void 0;
        }
        path() {
          return `/v2/accounts/${this.address}/transactions/pending`;
        }
        // max sets the maximum number of txs to return
        max(max) {
          this.query.max = max;
          return this;
        }
      };
      exports.default = PendingTransactionsByAddress;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionProof.js
  var require_getTransactionProof = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionProof.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetTransactionProof = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round, txID) {
          super(c, intDecoding);
          this.round = round;
          this.txID = txID;
          this.round = round;
          this.txID = txID;
        }
        path() {
          return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;
        }
        /**
         * Exclude assets and application data from results
         * The type of hash function used to create the proof, must be one of: "sha512_256", "sha256"
         *
         * #### Example
         * ```typescript
         * const hashType = "sha256";
         * const round = 123456;
         * const txId = "abc123;
         * const txProof = await algodClient.getTransactionProof(round, txId)
         *        .hashType(hashType)
         *        .do();
         * ```
         *
         * @param hashType
         * @category query
         */
        hashType(hashType) {
          this.query.hashtype = hashType;
          return this;
        }
      };
      exports.default = GetTransactionProof;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/sendRawTransaction.js
  var require_sendRawTransaction = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/sendRawTransaction.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setSendTransactionHeaders = void 0;
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var utils_1 = require_utils();
      function setSendTransactionHeaders(headers = {}) {
        let hdrs = headers;
        if (Object.keys(hdrs).every((key) => key.toLowerCase() !== "content-type")) {
          hdrs = { ...headers };
          hdrs["Content-Type"] = "application/x-binary";
        }
        return hdrs;
      }
      exports.setSendTransactionHeaders = setSendTransactionHeaders;
      function isByteArray(array) {
        return array && array.byteLength !== void 0;
      }
      var SendRawTransaction = class extends jsonrequest_1.default {
        constructor(c, stxOrStxs) {
          super(c);
          let forPosting = stxOrStxs;
          if (Array.isArray(stxOrStxs)) {
            if (!stxOrStxs.every(isByteArray)) {
              throw new TypeError("Array elements must be byte arrays");
            }
            forPosting = (0, utils_1.concatArrays)(...stxOrStxs);
          } else if (!isByteArray(forPosting)) {
            throw new TypeError("Argument must be byte array");
          }
          this.txnBytesToPost = forPosting;
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/transactions";
        }
        async do(headers = {}) {
          const txHeaders = setSendTransactionHeaders(headers);
          const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.txnBytesToPost), txHeaders);
          return res.body;
        }
      };
      exports.default = SendRawTransaction;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/status.js
  var require_status = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/status.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var Status = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/status";
        }
      };
      exports.default = Status;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/statusAfterBlock.js
  var require_statusAfterBlock = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/statusAfterBlock.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var StatusAfterBlock = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          if (!Number.isInteger(round))
            throw Error("round should be an integer");
          this.round = round;
        }
        path() {
          return `/v2/status/wait-for-block-after/${this.round}`;
        }
      };
      exports.default = StatusAfterBlock;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/suggestedParams.js
  var require_suggestedParams = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/suggestedParams.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var SuggestedParamsRequest = class extends jsonrequest_1.default {
        /* eslint-disable class-methods-use-this */
        path() {
          return "/v2/transactions/params";
        }
        prepare(body) {
          return {
            flatFee: false,
            fee: body.fee,
            firstRound: body["last-round"],
            lastRound: body["last-round"] + 1e3,
            genesisID: body["genesis-id"],
            genesisHash: body["genesis-hash"],
            minFee: body["min-fee"]
          };
        }
      };
      exports.default = SuggestedParamsRequest;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/supply.js
  var require_supply = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/supply.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var Supply = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/ledger/supply";
        }
      };
      exports.default = Supply;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/versions.js
  var require_versions = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/versions.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var Versions = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/versions";
        }
      };
      exports.default = Versions;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/lightBlockHeaderProof.js
  var require_lightBlockHeaderProof = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/lightBlockHeaderProof.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LightBlockHeaderProof = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          this.round = round;
        }
        path() {
          return `/v2/blocks/${this.round}/lightheader/proof`;
        }
      };
      exports.default = LightBlockHeaderProof;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/stateproof.js
  var require_stateproof = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/stateproof.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var StateProof = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          this.round = round;
        }
        path() {
          return `/v2/stateproofs/${this.round}`;
        }
      };
      exports.default = StateProof;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/setSyncRound.js
  var require_setSyncRound = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/setSyncRound.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var SetSyncRound = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          this.round = round;
        }
        path() {
          return `/v2/ledger/sync/${this.round}`;
        }
        async do(headers = {}) {
          const res = await this.c.post(this.path(), headers);
          return res.body;
        }
      };
      exports.default = SetSyncRound;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getSyncRound.js
  var require_getSyncRound = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getSyncRound.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types();
      var GetSyncRound = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/ledger/sync`;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.GetSyncRoundResponse.from_obj_for_encoding(body);
        }
      };
      exports.default = GetSyncRound;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/setBlockOffsetTimestamp.js
  var require_setBlockOffsetTimestamp = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/setBlockOffsetTimestamp.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var SetBlockOffsetTimestamp = class extends jsonrequest_1.default {
        constructor(c, intDecoding, offset) {
          super(c, intDecoding);
          this.offset = offset;
          this.offset = offset;
        }
        path() {
          return `/v2/devmode/blocks/offset/${this.offset}`;
        }
        async do(headers = {}) {
          const res = await this.c.post(this.path(), headers);
          return res.body;
        }
      };
      exports.default = SetBlockOffsetTimestamp;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getBlockOffsetTimestamp.js
  var require_getBlockOffsetTimestamp = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getBlockOffsetTimestamp.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types();
      var GetBlockOffsetTimestamp = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/devmode/blocks/offset`;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.GetBlockTimeStampOffsetResponse.from_obj_for_encoding(body);
        }
      };
      exports.default = GetBlockOffsetTimestamp;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/disassemble.js
  var require_disassemble = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/disassemble.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setHeaders = void 0;
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      function setHeaders(headers = {}) {
        let hdrs = headers;
        if (Object.keys(hdrs).every((key) => key.toLowerCase() !== "content-type")) {
          hdrs = { ...headers };
          hdrs["Content-Type"] = "text/plain";
        }
        return hdrs;
      }
      exports.setHeaders = setHeaders;
      var Disassemble = class extends jsonrequest_1.default {
        constructor(c, source) {
          super(c);
          this.source = source;
          this.source = source;
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/teal/disassemble`;
        }
        /**
         * Executes disassemble
         * @param headers - A headers object
         */
        async do(headers = {}) {
          const txHeaders = setHeaders(headers);
          const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.source), txHeaders, this.query);
          return res.body;
        }
      };
      exports.default = Disassemble;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/simulateTransaction.js
  var require_simulateTransaction = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/simulateTransaction.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setSimulateTransactionsHeaders = void 0;
      var buffer_1 = require_buffer2();
      var encoding = __importStar2(require_encoding());
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types();
      function setSimulateTransactionsHeaders(headers = {}) {
        let hdrs = headers;
        if (Object.keys(hdrs).every((key) => key.toLowerCase() !== "content-type")) {
          hdrs = { ...headers };
          hdrs["Content-Type"] = "application/msgpack";
        }
        return hdrs;
      }
      exports.setSimulateTransactionsHeaders = setSimulateTransactionsHeaders;
      var SimulateRawTransactions = class extends jsonrequest_1.default {
        constructor(c, request) {
          super(c);
          this.query.format = "msgpack";
          this.requestBytes = encoding.rawEncode(request.get_obj_for_encoding(true));
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/transactions/simulate";
        }
        async do(headers = {}) {
          const txHeaders = setSimulateTransactionsHeaders(headers);
          const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.requestBytes), txHeaders, this.query, false);
          return this.prepare(res.body);
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          const decoded = encoding.decode(body);
          return types_1.SimulateResponse.from_obj_for_encoding(decoded);
        }
      };
      exports.default = SimulateRawTransactions;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/ready.js
  var require_ready = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/ready.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var Ready = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/ready`;
        }
      };
      exports.default = Ready;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/unsetSyncRound.js
  var require_unsetSyncRound = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/unsetSyncRound.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var UnsetSyncRound = class extends jsonrequest_1.default {
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/ledger/sync`;
        }
        async do(headers = {}) {
          const res = await this.c.delete(this.path(), headers);
          return res.body;
        }
      };
      exports.default = UnsetSyncRound;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js
  var require_getLedgerStateDeltaForTransactionGroup = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetLedgerStateDeltaForTransactionGroup = class extends jsonrequest_1.default {
        constructor(c, intDecoding, id) {
          super(c, intDecoding);
          this.id = id;
          this.id = id;
          this.query = { format: "json" };
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/deltas/txn/group/${this.id}`;
        }
      };
      exports.default = GetLedgerStateDeltaForTransactionGroup;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDelta.js
  var require_getLedgerStateDelta = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDelta.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var GetLedgerStateDelta = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          this.round = round;
          this.query = { format: "json" };
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/deltas/${this.round}`;
        }
      };
      exports.default = GetLedgerStateDelta;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js
  var require_getTransactionGroupLedgerStateDeltasForRound = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types();
      var GetTransactionGroupLedgerStateDeltasForRound = class extends jsonrequest_1.default {
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          this.round = round;
          this.query = { format: "json" };
        }
        // eslint-disable-next-line class-methods-use-this
        path() {
          return `/v2/deltas/${this.round}/txn/group`;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.TransactionGroupLedgerStateDeltasForRoundResponse.from_obj_for_encoding(body);
        }
      };
      exports.default = GetTransactionGroupLedgerStateDeltasForRound;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/algod/algod.js
  var require_algod = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/algod/algod.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var serviceClient_1 = __importDefault2(require_serviceClient());
      var modelsv2 = __importStar2(require_types());
      var accountInformation_1 = __importDefault2(require_accountInformation());
      var accountAssetInformation_1 = __importDefault2(require_accountAssetInformation());
      var accountApplicationInformation_1 = __importDefault2(require_accountApplicationInformation());
      var block_1 = __importDefault2(require_block());
      var compile_1 = __importDefault2(require_compile());
      var dryrun_1 = __importDefault2(require_dryrun());
      var genesis_1 = __importDefault2(require_genesis());
      var getAssetByID_1 = __importDefault2(require_getAssetByID());
      var getApplicationByID_1 = __importDefault2(require_getApplicationByID());
      var getBlockHash_1 = __importDefault2(require_getBlockHash());
      var getBlockTxids_1 = __importDefault2(require_getBlockTxids());
      var getApplicationBoxByName_1 = __importDefault2(require_getApplicationBoxByName());
      var getApplicationBoxes_1 = __importDefault2(require_getApplicationBoxes());
      var healthCheck_1 = __importDefault2(require_healthCheck());
      var pendingTransactionInformation_1 = __importDefault2(require_pendingTransactionInformation());
      var pendingTransactions_1 = __importDefault2(require_pendingTransactions());
      var pendingTransactionsByAddress_1 = __importDefault2(require_pendingTransactionsByAddress());
      var getTransactionProof_1 = __importDefault2(require_getTransactionProof());
      var sendRawTransaction_1 = __importDefault2(require_sendRawTransaction());
      var status_1 = __importDefault2(require_status());
      var statusAfterBlock_1 = __importDefault2(require_statusAfterBlock());
      var suggestedParams_1 = __importDefault2(require_suggestedParams());
      var supply_1 = __importDefault2(require_supply());
      var versions_1 = __importDefault2(require_versions());
      var lightBlockHeaderProof_1 = __importDefault2(require_lightBlockHeaderProof());
      var stateproof_1 = __importDefault2(require_stateproof());
      var setSyncRound_1 = __importDefault2(require_setSyncRound());
      var getSyncRound_1 = __importDefault2(require_getSyncRound());
      var setBlockOffsetTimestamp_1 = __importDefault2(require_setBlockOffsetTimestamp());
      var getBlockOffsetTimestamp_1 = __importDefault2(require_getBlockOffsetTimestamp());
      var disassemble_1 = __importDefault2(require_disassemble());
      var simulateTransaction_1 = __importDefault2(require_simulateTransaction());
      var encoding = __importStar2(require_encoding());
      var ready_1 = __importDefault2(require_ready());
      var unsetSyncRound_1 = __importDefault2(require_unsetSyncRound());
      var getLedgerStateDeltaForTransactionGroup_1 = __importDefault2(require_getLedgerStateDeltaForTransactionGroup());
      var getLedgerStateDelta_1 = __importDefault2(require_getLedgerStateDelta());
      var getTransactionGroupLedgerStateDeltasForRound_1 = __importDefault2(require_getTransactionGroupLedgerStateDeltasForRound());
      var AlgodClient = class extends serviceClient_1.default {
        /**
         * Create an AlgodClient from
         * * either a token, baseServer, port, and optional headers
         * * or a base client server for interoperability with external dApp wallets
         *
         * #### Example
         * ```typescript
         * const token  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
         * const server = "http://localhost";
         * const port   = 4001;
         * const algodClient = new algosdk.Algodv2(token, server, port);
         * ```
         * @remarks
         * The above configuration is for a sandbox private network.
         * For applications on production, you are encouraged to run your own node, or use an Algorand REST API provider with a dedicated API key.
         *
         * @param tokenOrBaseClient - The algod token from the Algorand node you are interacting with
         * @param baseServer - REST endpoint
         * @param port - Port number if specifically configured by the server
         * @param headers - Optional headers
         */
        constructor(tokenOrBaseClient, baseServer, port, headers = {}) {
          super("X-Algo-API-Token", tokenOrBaseClient, baseServer, port, headers);
        }
        /**
         * Returns OK if healthy.
         *
         * #### Example
         * ```typescript
         * const health = await algodClient.healthCheck().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-health)
         * @category GET
         */
        healthCheck() {
          return new healthCheck_1.default(this.c);
        }
        /**
         * Retrieves the supported API versions, binary build versions, and genesis information.
         *
         * #### Example
         * ```typescript
         * const versionsDetails = await algodClient.versionsCheck().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-versions)
         * @category GET
         */
        versionsCheck() {
          return new versions_1.default(this.c);
        }
        /**
         * Broadcasts a raw transaction to the network.
         *
         * #### Example
         * ```typescript
         * const { txId } = await algodClient.sendRawTransaction(signedTxns).do();
         * const result = await waitForConfirmation(algodClient, txid, 3);
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactions)
         *
         * @remarks
         * Often used with {@linkcode waitForConfirmation}
         * @param stxOrStxs - Signed transactions
         * @category POST
         */
        sendRawTransaction(stxOrStxs) {
          return new sendRawTransaction_1.default(this.c, stxOrStxs);
        }
        /**
         * Returns the given account's status, balance and spendable amounts.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await algodClient.accountInformation(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)
         * @param account - The address of the account to look up.
         * @category GET
         */
        accountInformation(account) {
          return new accountInformation_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns the given account's asset information for a specific asset.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const index = 60553466;
         * const accountAssetInfo = await algodClient.accountAssetInformation(address, index).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)
         * @param account - The address of the account to look up.
         * @param index - The asset ID to look up.
         * @category GET
         */
        accountAssetInformation(account, index) {
          return new accountAssetInformation_1.default(this.c, this.intDecoding, account, index);
        }
        /**
         * Returns the given account's application information for a specific application.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const index = 60553466;
         * const accountInfo = await algodClient.accountApplicationInformation(address, index).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)
         * @param account - The address of the account to look up.
         * @param index - The application ID to look up.
         * @category GET
         */
        accountApplicationInformation(account, index) {
          return new accountApplicationInformation_1.default(this.c, this.intDecoding, account, index);
        }
        /**
         * Gets the block info for the given round.
         *
         * #### Example
         * ```typescript
         * const roundNumber = 18038133;
         * const block = await algodClient.block(roundNumber).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksround)
         * @param roundNumber - The round number of the block to get.
         * @category GET
         */
        block(roundNumber) {
          return new block_1.default(this.c, roundNumber);
        }
        /**
         * Get the block hash for the block on the given round.
         *
         * #### Example
         * ```typescript
         * const roundNumber = 18038133;
         * const block = await algodClient.getBlockHash(roundNumber).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundhash)
         * @param roundNumber - The round number of the block to get.
         * @category GET
         */
        getBlockHash(roundNumber) {
          return new getBlockHash_1.default(this.c, this.intDecoding, roundNumber);
        }
        /**
         * Get the top level transaction IDs for the block on the given round.
         *
         * #### Example
         * ```typescript
         * const roundNumber = 18038133;
         * const block = await algodClient.getBlockTxids(roundNumber).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtxids)
         * @param roundNumber - The round number of the block to get.
         * @category GET
         */
        getBlockTxids(roundNumber) {
          return new getBlockTxids_1.default(this.c, this.intDecoding, roundNumber);
        }
        /**
         * Returns the transaction information for a specific pending transaction.
         *
         * #### Example
         * ```typescript
         * const txId = "DRJS6R745A7GFVMXEXWP4TGVDGKW7VILFTA7HC2BR2GRLHNY5CTA";
         * const pending = await algodClient.pendingTransactionInformation(txId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspendingtxid)
         *
         * @remarks
         * <br><br>
         * There are several cases when this might succeed:
         * - transaction committed (committed round > 0)
         * - transaction still in the pool (committed round = 0, pool error = "")
         * - transaction removed from pool due to error (committed round = 0, pool error != "")
         *
         * Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.
         *
         * @param txid - The TxID string of the pending transaction to look up.
         * @category GET
         */
        pendingTransactionInformation(txid) {
          return new pendingTransactionInformation_1.default(this.c, txid);
        }
        /**
         * Returns the list of pending transactions in the pool, sorted by priority, in decreasing order, truncated at the end at MAX.
         * If MAX = 0, returns all pending transactions.
         *
         * #### Example 1
         * ```typescript
         * const pendingTxns = await algodClient.pendingTransactionsInformation().do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const maxTxns = 5;
         * const pendingTxns = await algodClient
         *     .pendingTransactionsInformation()
         *     .max(maxTxns)
         *     .do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspending)
         * @category GET
         */
        pendingTransactionsInformation() {
          return new pendingTransactions_1.default(this.c);
        }
        /**
         * Returns the list of pending transactions sent by the address, sorted by priority, in decreasing order, truncated at the end at MAX.
         * If MAX = 0, returns all pending transactions.
         *
         * #### Example 1
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const pendingTxnsByAddr = await algodClient.pendingTransactionByAddress(address).do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const maxTxns = 5;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const pendingTxns = await algodClient
         *     .pendingTransactionByAddress(address)
         *     .max(maxTxns)
         *     .do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddresstransactionspending)
         * @param address - The address of the sender.
         * @category GET
         */
        pendingTransactionByAddress(address) {
          return new pendingTransactionsByAddress_1.default(this.c, address);
        }
        /**
         * Retrieves the StatusResponse from the running node.
         *
         * #### Example
         * ```typescript
         * const status = await algodClient.status().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2status)
         * @category GET
         */
        status() {
          return new status_1.default(this.c, this.intDecoding);
        }
        /**
         * Waits for a specific round to occur then returns the `StatusResponse` for that round.
         *
         * #### Example
         * ```typescript
         * const round = 18038133;
         * const statusAfterBlock = await algodClient.statusAfterBlock(round).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2statuswait-for-block-afterround)
         * @param round - The number of the round to wait for.
         * @category GET
         */
        statusAfterBlock(round) {
          return new statusAfterBlock_1.default(this.c, this.intDecoding, round);
        }
        /**
         * Returns the common needed parameters for a new transaction.
         *
         * #### Example
         * ```typescript
         * const suggestedParams = await algodClient.getTransactionParams().do();
         * const amountInMicroAlgos = algosdk.algosToMicroalgos(2); // 2 Algos
         * const unsignedTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
         *   from: senderAddress,
         *   to: receiverAddress,
         *   amount: amountInMicroAlgos,
         *   suggestedParams: suggestedParams,
         * });
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionsparams)
         *
         * @remarks
         * Often used with
         * {@linkcode makePaymentTxnWithSuggestedParamsFromObject}, {@linkcode algosToMicroalgos}
         * @category GET
         */
        getTransactionParams() {
          return new suggestedParams_1.default(this.c);
        }
        /**
         * Returns the supply details for the specified node's ledger.
         *
         * #### Example
         * ```typescript
         * const supplyDetails = await algodClient.supply().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersupply)
         * @category GET
         */
        supply() {
          return new supply_1.default(this.c, this.intDecoding);
        }
        /**
         * Compiles TEAL source code to binary, returns base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).
         *
         * #### Example
         * ```typescript
         * const source = "TEAL SOURCE CODE";
         * const compiledSmartContract = await algodClient.compile(source).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealcompile)
         * @remarks
         * This endpoint is only enabled when a node's configuration file sets `EnableDeveloperAPI` to true.
         * @param source
         * @category POST
         */
        compile(source) {
          return new compile_1.default(this.c, source);
        }
        /**
         * Given the program bytes, return the TEAL source code in plain text.
         *
         * #### Example
         * ```typescript
         * const bytecode = "TEAL bytecode";
         * const disassembledSource = await algodClient.disassemble(bytecode).do();
         * ```
         *
         * @remarks This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.
         * @param source
         */
        disassemble(source) {
          return new disassemble_1.default(this.c, source);
        }
        /**
         * Provides debugging information for a transaction (or group).
         *
         * Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configureation file sets `EnableDeveloperAPI` to true.
         *
         * #### Example
         * ```typescript
         * const dryRunResult = await algodClient.dryrun(dr).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealdryrun)
         * @param dr
         * @category POST
         */
        dryrun(dr) {
          return new dryrun_1.default(this.c, dr);
        }
        /**
         * Given an asset ID, return asset information including creator, name, total supply and
         * special addresses.
         *
         * #### Example
         * ```typescript
         * const asset_id = 163650;
         * const asset = await algodClient.getAssetByID(asset_id).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2assetsasset-id)
         * @param index - The asset ID to look up.
         * @category GET
         */
        getAssetByID(index) {
          return new getAssetByID_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Given an application ID, return the application information including creator, approval
         * and clear programs, global and local schemas, and global state.
         *
         * #### Example
         * ```typescript
         * const index = 60553466;
         * const app = await algodClient.getApplicationByID(index).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-id)
         * @param index - The application ID to look up.
         * @category GET
         */
        getApplicationByID(index) {
          return new getApplicationByID_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Given an application ID and the box name (key), return the value stored in the box.
         *
         * #### Example
         * ```typescript
         * const index = 60553466;
         * const boxName = Buffer.from("foo");
         * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();
         * const boxValue = boxResponse.value;
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)
         * @param index - The application ID to look up.
         * @category GET
         */
        getApplicationBoxByName(index, boxName) {
          return new getApplicationBoxByName_1.default(this.c, this.intDecoding, index, boxName);
        }
        /**
         * Given an application ID, return all the box names associated with the app.
         *
         * #### Example
         * ```typescript
         * const index = 60553466;
         * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();
         * const boxNames = boxesResponse.boxes.map(box => box.name);
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)
         * @param index - The application ID to look up.
         * @category GET
         */
        getApplicationBoxes(index) {
          return new getApplicationBoxes_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Returns the entire genesis file.
         *
         * #### Example
         * ```typescript
         * const genesis = await algodClient.genesis().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-genesis)
         * @category GET
         */
        genesis() {
          return new genesis_1.default(this.c, this.intDecoding);
        }
        /**
         * Returns a Merkle proof for a given transaction in a block.
         *
         * #### Example
         * ```typescript
         * const round = 18038133;
         * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const proof = await algodClient.getTransactionProof(round, txId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtransactionstxidproof)
         * @param round - The round in which the transaction appears.
         * @param txID - The transaction ID for which to generate a proof.
         * @category GET
         */
        getTransactionProof(round, txID) {
          return new getTransactionProof_1.default(this.c, this.intDecoding, round, txID);
        }
        /**
         * Gets a proof for a given light block header inside a state proof commitment.
         *
         * #### Example
         * ```typescript
         * const round = 11111111;
         * const lightBlockHeaderProof = await algodClient.getLightBlockHeaderProof(round).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2blocksroundlightheaderproof)
         * @param round
         */
        getLightBlockHeaderProof(round) {
          return new lightBlockHeaderProof_1.default(this.c, this.intDecoding, round);
        }
        /**
         * Gets a state proof that covers a given round.
         *
         * #### Example
         * ```typescript
         * const round = 11111111;
         * const stateProof = await algodClient.getStateProof(round).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2stateproofsround)
         * @param round
         */
        getStateProof(round) {
          return new stateproof_1.default(this.c, this.intDecoding, round);
        }
        /**
         * Simulate a list of a signed transaction objects being sent to the network.
         *
         * #### Example
         * ```typescript
         * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);
         * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);
         * const txgroup = algosdk.assignGroupID([txn1, txn2]);
         *
         * // Actually sign the first transaction
         * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;
         * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction
         * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);
         *
         * const resp = await client.simulateRawTransactions([signedTxn1, signedTxn2]).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)
         * @param stxOrStxs
         * @category POST
         */
        simulateRawTransactions(stxOrStxs) {
          const txnObjects = [];
          if (Array.isArray(stxOrStxs)) {
            for (const stxn of stxOrStxs) {
              txnObjects.push(encoding.decode(stxn));
            }
          } else {
            txnObjects.push(encoding.decode(stxOrStxs));
          }
          const request = new modelsv2.SimulateRequest({
            txnGroups: [
              new modelsv2.SimulateRequestTransactionGroup({
                txns: txnObjects
              })
            ]
          });
          return this.simulateTransactions(request);
        }
        /**
         * Simulate transactions being sent to the network.
         *
         * #### Example
         * ```typescript
         * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);
         * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);
         * const txgroup = algosdk.assignGroupID([txn1, txn2]);
         *
         * // Actually sign the first transaction
         * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;
         * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction
         * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);
         *
         * const request = new modelsv2.SimulateRequest({
         *  txnGroups: [
         *    new modelsv2.SimulateRequestTransactionGroup({
         *       // Must decode the signed txn bytes into an object
         *       txns: [algosdk.decodeObj(signedTxn1), algosdk.decodeObj(signedTxn2)]
         *     }),
         *   ],
         * });
         * const resp = await client.simulateRawTransactions(request).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)
         * @param request
         * @category POST
         */
        simulateTransactions(request) {
          return new simulateTransaction_1.default(this.c, request);
        }
        /**
         * Set the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.
         *
         *  #### Example
         *  ```typesecript
         *  const offset = 60
         *  await client.setBlockOffsetTimestamp(offset).do();
         *  ```
         *
         [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2devmodeblocksoffsetoffset)
         * @param offset
         * @category POST
         */
        setBlockOffsetTimestamp(offset) {
          return new setBlockOffsetTimestamp_1.default(this.c, this.intDecoding, offset);
        }
        /**
         * Get the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.
         *
         *  #### Example
         *  ```typesecript
         *  const currentOffset = await client.getBlockOffsetTimestamp().do();
         *  ```
         *
         [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2devmodeblocksoffset)
         * @category GET
         */
        getBlockOffsetTimestamp() {
          return new getBlockOffsetTimestamp_1.default(this.c, this.intDecoding);
        }
        /**
         * Set the sync round on the ledger (algod must have EnableFollowMode: true), restricting catchup.
         *
         *  #### Example
         *  ```typesecript
         *  const round = 10000
         *  await client.setSyncRound(round).do();
         *  ```
         *
         [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2ledgersyncround)
         * @param round
         * @category POST
         */
        setSyncRound(round) {
          return new setSyncRound_1.default(this.c, this.intDecoding, round);
        }
        /**
         * Un-Set the sync round on the ledger (algod must have EnableFollowMode: true), removing the restriction on catchup.
         *
         *  #### Example
         *  ```typesecript
         *  await client.unsetSyncRound().do();
         *  ```
         *
         [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#delete-v2ledgersync)
         * @category DELETE
         */
        unsetSyncRound() {
          return new unsetSyncRound_1.default(this.c, this.intDecoding);
        }
        /**
         * Get the current sync round on the ledger (algod must have EnableFollowMode: true).
         *
         *  #### Example
         *  ```typesecript
         *  const currentSyncRound = await client.getSyncRound().do();
         *  ```
         *
         [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersync)
         * @category GET
         */
        getSyncRound() {
          return new getSyncRound_1.default(this.c, this.intDecoding);
        }
        /**
         * Ready check which returns 200 OK if algod is healthy and caught up
         *
         *  #### Example
         *  ```typesecript
         *  await client.ready().do();
         *  ```
         *
         [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-ready)
         * @category GET
         */
        ready() {
          return new ready_1.default(this.c, this.intDecoding);
        }
        /**
         * GetLedgerStateDeltaForTransactionGroup returns the ledger delta for the txn group identified by id
         *
         * #### Example
         * ```typescript
         * const id = "ABC123";
         * await client.getLedgerStateDeltaForTransactionGroup(id).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltastxngroupid)
         * @param id txn ID or group ID to be searched for
         * @category GET
         */
        getLedgerStateDeltaForTransactionGroup(id) {
          return new getLedgerStateDeltaForTransactionGroup_1.default(this.c, this.intDecoding, id);
        }
        /**
         * GetLedgerStateDelta returns the ledger delta for the entire round
         *
         * #### Example
         * ```typescript
         * const round = 12345;
         * await client.getLedgerStateDelta(round).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasround)
         * @param round the round number to be searched for
         * @category GET
         */
        getLedgerStateDelta(round) {
          return new getLedgerStateDelta_1.default(this.c, this.intDecoding, round);
        }
        /**
         * GetTransactionGroupLedgerStateDeltasForRound returns all ledger deltas for txn groups in the provided round
         *
         * #### Example
         * ```typescript
         * const round = 12345;
         * await client.getTransactionGroupLedgerStateDeltasForRound(round).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasroundtxngroup)
         * @param round the round number to be searched for
         * @category GET
         */
        getTransactionGroupLedgerStateDeltasForRound(round) {
          return new getTransactionGroupLedgerStateDeltasForRound_1.default(this.c, this.intDecoding, round);
        }
      };
      exports.default = AlgodClient;
    }
  });

  // node_modules/algosdk/dist/cjs/client/kmd.js
  var require_kmd = __commonJS({
    "node_modules/algosdk/dist/cjs/client/kmd.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      var serviceClient_1 = __importDefault2(require_serviceClient());
      var txn = __importStar2(require_transaction());
      var Kmd = class extends serviceClient_1.default {
        constructor(token, baseServer = "http://127.0.0.1", port = 7833, headers = {}) {
          super("X-KMD-API-Token", token, baseServer, port, headers);
        }
        /**
         * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.
         */
        async versions() {
          const res = await this.c.get("/versions");
          return res.body;
        }
        /**
         * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID
         * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle
         */
        async listWallets() {
          const res = await this.c.get("/v1/wallets");
          return res.body;
        }
        /**
         * createWallet creates a wallet with the specified name, password, driver,
         * and master derivation key. If the master derivation key is blank, one is
         * generated internally to kmd. CreateWallet returns a CreateWalletResponse
         * containing information about the new wallet.
         * @param walletName
         * @param walletPassword
         * @param walletDriverName
         * @param walletMDK
         */
        async createWallet(walletName, walletPassword, walletMDK = new Uint8Array(), walletDriverName = "sqlite") {
          const req = {
            wallet_name: walletName,
            wallet_driver_name: walletDriverName,
            wallet_password: walletPassword,
            master_derivation_key: buffer_1.Buffer.from(walletMDK).toString("base64")
          };
          const res = await this.c.post("/v1/wallet", req);
          return res.body;
        }
        /**
         * initWalletHandle accepts a wallet ID and a wallet password, and returns an
         * initWalletHandleResponse containing a wallet handle token. This wallet
         * handle token can be used for subsequent operations on this wallet, like key
         * generation, transaction signing, etc.. WalletHandleTokens expire after a
         * configurable number of seconds, and must be renewed periodically with
         * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when
         * you're done interacting with this wallet.
         * @param walletID
         * @param walletPassword
         */
        async initWalletHandle(walletID, walletPassword) {
          const req = {
            wallet_id: walletID,
            wallet_password: walletPassword
          };
          const res = await this.c.post("/v1/wallet/init", req);
          return res.body;
        }
        /**
         * releaseWalletHandle invalidates the passed wallet handle token, making
         * it unusuable for subsequent wallet operations.
         * @param walletHandle
         */
        async releaseWalletHandle(walletHandle) {
          const req = {
            wallet_handle_token: walletHandle
          };
          const res = await this.c.post("/v1/wallet/release", req);
          return res.body;
        }
        /**
         * renewWalletHandle accepts a wallet handle and attempts to renew it, moving
         * the expiration time to some number of seconds in the future. It returns a
         * RenewWalletHandleResponse containing the walletHandle and the number of
         * seconds until expiration
         * @param walletHandle
         */
        async renewWalletHandle(walletHandle) {
          const req = {
            wallet_handle_token: walletHandle
          };
          const res = await this.c.post("/v1/wallet/renew", req);
          return res.body;
        }
        /**
         * renameWallet accepts a wallet ID, wallet password, and a new wallet name,
         * and renames the underlying wallet.
         * @param walletID
         * @param walletPassword
         * @param newWalletName
         */
        async renameWallet(walletID, walletPassword, newWalletName) {
          const req = {
            wallet_id: walletID,
            wallet_password: walletPassword,
            wallet_name: newWalletName
          };
          const res = await this.c.post("/v1/wallet/rename", req);
          return res.body;
        }
        /**
         * getWallet accepts a wallet handle and returns high level information about
         * this wallet in a GetWalletResponse.
         * @param walletHandle
         */
        async getWallet(walletHandle) {
          const req = {
            wallet_handle_token: walletHandle
          };
          const res = await this.c.post("/v1/wallet/info", req);
          return res.body;
        }
        /**
         * exportMasterDerivationKey accepts a wallet handle and a wallet password, and
         * returns an ExportMasterDerivationKeyResponse containing the master
         * derivation key. This key can be used as an argument to CreateWallet in
         * order to recover the keys generated by this wallet. The master derivation
         * key can be encoded as a sequence of words using the mnemonic library, and
         * @param walletHandle
         * @param walletPassword
         */
        async exportMasterDerivationKey(walletHandle, walletPassword) {
          const req = {
            wallet_handle_token: walletHandle,
            wallet_password: walletPassword
          };
          const res = await this.c.post("/v1/master-key/export", req);
          return {
            master_derivation_key: buffer_1.Buffer.from(res.body.master_derivation_key, "base64")
          };
        }
        /**
         * importKey accepts a wallet handle and an ed25519 private key, and imports
         * the key into the wallet. It returns an ImportKeyResponse containing the
         * address corresponding to this private key.
         * @param walletHandle
         * @param secretKey
         */
        async importKey(walletHandle, secretKey) {
          const req = {
            wallet_handle_token: walletHandle,
            private_key: buffer_1.Buffer.from(secretKey).toString("base64")
          };
          const res = await this.c.post("/v1/key/import", req);
          return res.body;
        }
        /**
         * exportKey accepts a wallet handle, wallet password, and address, and returns
         * an ExportKeyResponse containing the ed25519 private key corresponding to the
         * address stored in the wallet.
         * @param walletHandle
         * @param walletPassword
         * @param addr
         */
        async exportKey(walletHandle, walletPassword, addr) {
          const req = {
            wallet_handle_token: walletHandle,
            address: addr,
            wallet_password: walletPassword
          };
          const res = await this.c.post("/v1/key/export", req);
          return { private_key: buffer_1.Buffer.from(res.body.private_key, "base64") };
        }
        /**
         * generateKey accepts a wallet handle, and then generates the next key in the
         * wallet using its internal master derivation key. Two wallets with the same
         * master derivation key will generate the same sequence of keys.
         * @param walletHandle
         */
        async generateKey(walletHandle) {
          const req = {
            wallet_handle_token: walletHandle,
            display_mnemonic: false
          };
          const res = await this.c.post("/v1/key", req);
          return res.body;
        }
        /**
         * deleteKey accepts a wallet handle, wallet password, and address, and deletes
         * the information about this address from the wallet (including address and
         * secret key). If DeleteKey is called on a key generated using GenerateKey,
         * the same key will not be generated again. However, if a wallet is recovered
         * using the master derivation key, a key generated in this way can be
         * recovered.
         * @param walletHandle
         * @param walletPassword
         * @param addr
         */
        async deleteKey(walletHandle, walletPassword, addr) {
          const req = {
            wallet_handle_token: walletHandle,
            address: addr,
            wallet_password: walletPassword
          };
          const res = await this.c.delete("/v1/key", req);
          return res.body;
        }
        /**
         * ListKeys accepts a wallet handle and returns a ListKeysResponse containing
         * all of the addresses for which this wallet contains secret keys.
         * @param walletHandle
         */
        async listKeys(walletHandle) {
          const req = {
            wallet_handle_token: walletHandle
          };
          const res = await this.c.post("/v1/key/list", req);
          return res.body;
        }
        /**
         * signTransaction accepts a wallet handle, wallet password, and a transaction,
         * and returns and SignTransactionResponse containing an encoded, signed
         * transaction. The transaction is signed using the key corresponding to the
         * Sender field.
         * @param walletHandle
         * @param walletPassword
         * @param transaction
         */
        async signTransaction(walletHandle, walletPassword, transaction) {
          const tx = txn.instantiateTxnIfNeeded(transaction);
          const req = {
            wallet_handle_token: walletHandle,
            wallet_password: walletPassword,
            transaction: buffer_1.Buffer.from(tx.toByte()).toString("base64")
          };
          const res = await this.c.post("/v1/transaction/sign", req);
          if (res.status === 200) {
            return buffer_1.Buffer.from(res.body.signed_transaction, "base64");
          }
          return res.body;
        }
        /**
         * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,
         * and returns and SignTransactionResponse containing an encoded, signed
         * transaction. The transaction is signed using the key corresponding to the
         * publicKey arg.
         * @param walletHandle
         * @param walletPassword
         * @param transaction
         * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)
         */
        async signTransactionWithSpecificPublicKey(walletHandle, walletPassword, transaction, publicKey) {
          const tx = txn.instantiateTxnIfNeeded(transaction);
          const req = {
            wallet_handle_token: walletHandle,
            wallet_password: walletPassword,
            transaction: buffer_1.Buffer.from(tx.toByte()).toString("base64"),
            public_key: buffer_1.Buffer.from(publicKey).toString("base64")
          };
          const res = await this.c.post("/v1/transaction/sign", req);
          if (res.status === 200) {
            return buffer_1.Buffer.from(res.body.signed_transaction, "base64");
          }
          return res.body;
        }
        /**
         * listMultisig accepts a wallet handle and returns a ListMultisigResponse
         * containing the multisig addresses whose preimages are stored in this wallet.
         * A preimage is the information needed to reconstruct this multisig address,
         * including multisig version information, threshold information, and a list
         * of public keys.
         * @param walletHandle
         */
        async listMultisig(walletHandle) {
          const req = {
            wallet_handle_token: walletHandle
          };
          const res = await this.c.post("/v1/multisig/list", req);
          return res.body;
        }
        /**
         * importMultisig accepts a wallet handle and the information required to
         * generate a multisig address. It derives this address, and stores all of the
         * information within the wallet. It returns a ImportMultisigResponse with the
         * derived address.
         * @param walletHandle
         * @param version
         * @param threshold
         * @param pks
         */
        async importMultisig(walletHandle, version, threshold, pks) {
          const req = {
            wallet_handle_token: walletHandle,
            multisig_version: version,
            threshold,
            pks
          };
          const res = await this.c.post("/v1/multisig/import", req);
          return res.body;
        }
        /**
         * exportMultisig accepts a wallet handle, wallet password, and multisig
         * address, and returns an ExportMultisigResponse containing the stored
         * multisig preimage. The preimage contains all of the information necessary
         * to derive the multisig address, including version, threshold, and a list of
         * public keys.
         * @param walletHandle
         * @param walletPassword
         * @param addr
         */
        async exportMultisig(walletHandle, addr) {
          const req = {
            wallet_handle_token: walletHandle,
            address: addr
          };
          const res = await this.c.post("/v1/multisig/export", req);
          return res.body;
        }
        /**
         * signMultisigTransaction accepts a wallet handle, wallet password,
         * transaction, public key (*not* an address), and an optional partial
         * MultisigSig. It looks up the secret key corresponding to the public key, and
         * returns a SignMultisigTransactionResponse containing a MultisigSig with a
         * signature by the secret key included.
         * @param walletHandle
         * @param pw
         * @param tx
         * @param pk
         * @param partial
         */
        async signMultisigTransaction(walletHandle, pw, transaction, pk, partial) {
          const tx = txn.instantiateTxnIfNeeded(transaction);
          const req = {
            wallet_handle_token: walletHandle,
            transaction: buffer_1.Buffer.from(tx.toByte()).toString("base64"),
            public_key: buffer_1.Buffer.from(pk).toString("base64"),
            partial_multisig: partial,
            wallet_password: pw
          };
          const res = await this.c.post("/v1/multisig/sign", req);
          return res.body;
        }
        /**
         * deleteMultisig accepts a wallet handle, wallet password, and multisig
         * address, and deletes the information about this multisig address from the
         * wallet (including address and secret key).
         * @param walletHandle
         * @param walletPassword
         * @param addr
         */
        async deleteMultisig(walletHandle, walletPassword, addr) {
          const req = {
            wallet_handle_token: walletHandle,
            address: addr,
            wallet_password: walletPassword
          };
          const res = await this.c.delete("/v1/multisig", req);
          return res.body;
        }
      };
      exports.default = Kmd;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/makeHealthCheck.js
  var require_makeHealthCheck = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/makeHealthCheck.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var MakeHealthCheck = class extends jsonrequest_1.default {
        /**
         * @returns `/health`
         */
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/health";
        }
      };
      exports.default = MakeHealthCheck;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetBalances.js
  var require_lookupAssetBalances = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetBalances.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAssetBalances = class extends jsonrequest_1.default {
        /**
         * Returns the list of accounts which hold the given asset and their balance.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)
         * @param index - The asset ID to look up.
         */
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        /**
         * @returns `/v2/assets/${index}/balances`
         */
        path() {
          return `/v2/assets/${this.index}/balances`;
        }
        /**
         * Limit results for pagination.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const maxResults = 20;
         * const assetBalances = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Filtered results should have an asset balance greater than this value.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const minBalance = 1000000;
         * const assetBalances = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .currencyGreaterThan(minBalance)
         *        .do();
         * ```
         * @param greater
         * @category query
         */
        currencyGreaterThan(greater) {
          this.query["currency-greater-than"] = greater.toString();
          return this;
        }
        /**
         * Filtered results should have an asset balance less than this value.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const maxBalance = 2000000;
         * const assetBalances = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .currencyLessThan(maxBalance)
         *        .do();
         * ```
         * @param lesser
         * @category query
         */
        currencyLessThan(lesser) {
          this.query["currency-less-than"] = lesser;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const maxResults = 20;
         *
         * const assetBalancesPage1 = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .limit(maxResults)
         *        .do();
         *
         * const assetBalancesPage2 = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .limit(maxResults)
         *        .nextToken(assetBalancesPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
         *
         * #### Example 1
         * ```typescript
         * const assetId = 163650;
         * const assetBalances = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetId = 163650;
         * const assetBalances = await indexerClient
         *        .lookupAssetBalances(assetId)
         *        .includeAll()
         *        .do();
         * ```
         *
         * @param value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
      };
      exports.default = LookupAssetBalances;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js
  var require_lookupAccountTransactions = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.base64StringFunnel = void 0;
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      function base64StringFunnel(data) {
        if (typeof data === "string") {
          return data;
        }
        return buffer_1.Buffer.from(data).toString("base64");
      }
      exports.base64StringFunnel = base64StringFunnel;
      var LookupAccountTransactions = class extends jsonrequest_1.default {
        /**
         * Returns transactions relating to the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)
         * @param account - The address of the account.
         */
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        /**
         * @returns `/v2/accounts/${account}/transactions`
         */
        path() {
          return `/v2/accounts/${this.account}/transactions`;
        }
        /**
         * Specifies a prefix which must be contained in the note field.
         *
         * #### Example
         * ```typescript
         * const notePrefixBase64Encoded = "Y3JlYXRl";
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .notePrefix(notePrefixBase64Encoded)
         *        .do();
         * ```
         *
         * @param prefix - base64 string or uint8array
         * @category query
         */
        notePrefix(prefix) {
          this.query["note-prefix"] = base64StringFunnel(prefix);
          return this;
        }
        /**
         * Type of transaction to filter with.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .txType("appl")
         *        .do();
         * ```
         *
         * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`
         * @category query
         */
        txType(type) {
          this.query["tx-type"] = type;
          return this;
        }
        /**
         * Type of signature to filter with.
         * - sig: Standard
         * - msig: MultiSig
         * - lsig: LogicSig
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .sigType("msig")
         *        .do();
         * ```
         *
         * @param type - one of `sig`, `msig`, `lsig`
         * @category query
         */
        sigType(type) {
          this.query["sig-type"] = type;
          return this;
        }
        /**
         * Lookup the specific transaction by ID.
         *
         * #### Example
         * ```typescript
         * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .txid(txId)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`
         * @param txid
         * @category query
         */
        txid(txid) {
          this.query.txid = txid;
          return this;
        }
        /**
         * Include results for the specified round.
         *
         * #### Example
         * ```typescript
         * const targetBlock = 18309917;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .round(targetBlock)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Include results at or after the specified min-round.
         *
         * #### Example
         * ```typescript
         * const minRound = 18309917;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .minRound(minRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        minRound(round) {
          this.query["min-round"] = round;
          return this;
        }
        /**
         * Include results at or before the specified max-round.
         *
         * #### Example
         * ```typescript
         * const maxRound = 18309917;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .maxRound(maxRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        maxRound(round) {
          this.query["max-round"] = round;
          return this;
        }
        /**
         * Asset ID to filter with.
         *
         * #### Example
         * ```typescript
         * const assetID = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .assetID(assetID)
         *        .do();
         * ```
         *
         * @param id
         * @category query
         */
        assetID(id) {
          this.query["asset-id"] = id;
          return this;
        }
        /**
         * Maximum number of results to return.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Include results before the given time.
         *
         * #### Example
         * ```typescript
         * const beforeTime = "2022-02-02T20:20:22.02Z";
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .beforeTime(beforeTime)
         *        .do();
         * ```
         *
         * @param before - rfc3339 string
         * @category query
         */
        beforeTime(before) {
          this.query["before-time"] = before;
          return this;
        }
        /**
         * Include results after the given time.
         *
         * #### Example
         * ```typescript
         * const afterTime = "2022-10-21T00:00:11.55Z";
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .afterTime(afterTime)
         *        .do();
         * ```
         *
         * @param after - rfc3339 string
         * @category query
         */
        afterTime(after) {
          this.query["after-time"] = after;
          return this;
        }
        /**
         * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
         *
         * #### Example 1
         * ```typescript
         * const minBalance = 300000;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetID = 163650;
         * const minBalance = 300000;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .assetID(assetID)
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         *
         * @param greater
         * @category query
         */
        currencyGreaterThan(greater) {
          this.query["currency-greater-than"] = greater.toString();
          return this;
        }
        /**
         * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
         *
         * #### Example 1
         * ```typescript
         * const maxBalance = 500000;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetID = 163650;
         * const maxBalance = 500000;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .assetID(assetID)
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * @param lesser
         * @category query
         */
        currencyLessThan(lesser) {
          this.query["currency-less-than"] = lesser;
          return this;
        }
        /**
         * The next page of results. Use the next token provided by the previous results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         *
         * const accountTxnsPage1 = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .limit(maxResults)
         *        .do();
         *
         * const accountTxnsPage2 = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .limit(maxResults)
         *        .nextToken(accountTxnsPage1["next-token"])
         *        .do();
         * ```
         *
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Whether or not to include rekeying transactions.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient
         *        .lookupAccountTransactions(address)
         *        .rekeyTo(false)
         *        .do();
         * ```
         *
         * @param rekeyTo
         * @category query
         */
        rekeyTo(rekeyTo) {
          this.query["rekey-to"] = rekeyTo;
          return this;
        }
      };
      exports.default = LookupAccountTransactions;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetTransactions.js
  var require_lookupAssetTransactions = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetTransactions.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var lookupAccountTransactions_1 = require_lookupAccountTransactions();
      var LookupAssetTransactions = class extends jsonrequest_1.default {
        /**
         * Returns transactions relating to the given asset.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)
         * @param index - The asset ID to look up.
         */
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        /**
         * @returns `/v2/assets/${index}/transactions`
         */
        path() {
          return `/v2/assets/${this.index}/transactions`;
        }
        /**
         * Specifies a prefix which must be contained in the note field.
         *
         * #### Example
         * ```typescript
         * const notePrefixBase64Encoded = "Y3JlYXRl";
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .notePrefix(notePrefixBase64Encoded)
         *        .do();
         * ```
         *
         * @param prefix - base64 string or uint8array
         * @category query
         */
        notePrefix(prefix) {
          this.query["note-prefix"] = (0, lookupAccountTransactions_1.base64StringFunnel)(prefix);
          return this;
        }
        /**
         * Type of transaction to filter with.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .txType("axfer")
         *        .do();
         * ```
         *
         * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`
         * @category query
         */
        txType(type) {
          this.query["tx-type"] = type;
          return this;
        }
        /**
         * Type of signature to filter with.
         * - sig: Standard
         * - msig: MultiSig
         * - lsig: LogicSig
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .sigType("lsig")
         *        .do();
         * ```
         *
         * @param type - one of `sig`, `msig`, `lsig`
         * @category query
         */
        sigType(type) {
          this.query["sig-type"] = type;
          return this;
        }
        /**
         * Lookup the specific transaction by ID.
         *
         * #### Example
         * ```typescript
         * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .txid(txId)
         *        .do();
         * ```
         *
         * @param txid
         * @category query
         */
        txid(txid) {
          this.query.txid = txid;
          return this;
        }
        /**
         * Include results for the specified round.
         *
         * #### Example
         * ```typescript
         * const targetBlock = 18309917;
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .round(targetBlock)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Include results at or after the specified min-round.
         *
         * #### Example
         * ```typescript
         * const minRound = 18309917;
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .minRound(minRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        minRound(round) {
          this.query["min-round"] = round;
          return this;
        }
        /**
         * Include results at or before the specified max-round.
         *
         * #### Example
         * ```typescript
         * const maxRound = 18309917;
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .maxRound(maxRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        maxRound(round) {
          this.query["max-round"] = round;
          return this;
        }
        /**
         * Maximum number of results to return.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Include results before the given time.
         *
         * #### Example
         * ```typescript
         * const beforeTime = "2022-02-02T20:20:22.02Z";
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .beforeTime(beforeTime)
         *        .do();
         * ```
         *
         * @param before - rfc3339 string
         * @category query
         */
        beforeTime(before) {
          this.query["before-time"] = before;
          return this;
        }
        /**
         * Include results after the given time.
         *
         * #### Example
         * ```typescript
         * const afterTime = "2022-10-21T00:00:11.55Z";
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .afterTime(afterTime)
         *        .do();
         * ```
         *
         * @param after - rfc3339 string
         * @category query
         */
        afterTime(after) {
          this.query["after-time"] = after;
          return this;
        }
        /**
         * Filtered results should have an amount greater than this value, as int, representing asset units.
         *
         * #### Example
         * ```typescript
         * const minBalance = 300000;
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         *
         * @param greater
         * @category query
         */
        currencyGreaterThan(greater) {
          this.query["currency-greater-than"] = greater.toString();
          return this;
        }
        /**
         * Filtered results should have an amount less than this value, as int, representing asset units.
         *
         * #### Example
         * ```typescript
         * const maxBalance = 500000;
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * @param lesser
         * @category query
         */
        currencyLessThan(lesser) {
          this.query["currency-less-than"] = lesser;
          return this;
        }
        /**
         * Combined with address, defines what address to filter on, as string.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const role = "sender";
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .address(address)
         *        .addressRole(role)
         *        .do();
         * ```
         *
         * @param role - one of `sender`, `receiver`, `freeze-target`
         * @category query
         */
        addressRole(role) {
          this.query["address-role"] = role;
          return this;
        }
        /**
         * Only include transactions with this address in one of the transaction fields.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .address(address)
         *        .do();
         * ```
         *
         * @param address
         * @category query
         */
        address(address) {
          this.query.address = address;
          return this;
        }
        /**
         * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .excludeCloseTo(true)
         *        .do();
         * ```
         *
         * @param exclude
         * @category query
         */
        excludeCloseTo(exclude) {
          this.query["exclude-close-to"] = exclude;
          return this;
        }
        /**
         * The next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         * const assetId = 163650;
         *
         * const assetTxnsPage1 = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .limit(maxResults)
         *        .do();
         *
         * const assetTxnsPage2 = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .limit(maxResults)
         *        .nextToken(assetTxnsPage1["next-token"])
         *        .do();
         * ```
         *
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Whether or not to include rekeying transactions.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetTxns = await indexerClient
         *        .lookupAssetTransactions(assetId)
         *        .rekeyTo(false)
         *        .do();
         * ```
         *
         * @param rekeyTo
         * @category query
         */
        rekeyTo(rekeyTo) {
          this.query["rekey-to"] = rekeyTo;
          return this;
        }
      };
      exports.default = LookupAssetTransactions;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupBlock.js
  var require_lookupBlock = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupBlock.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupBlock = class extends jsonrequest_1.default {
        /**
         * Returns the block for the passed round.
         *
         * #### Example
         * ```typescript
         * const targetBlock = 18309917;
         * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)
         * @param round - The number of the round to look up.
         * @category GET
         */
        constructor(c, intDecoding, round) {
          super(c, intDecoding);
          this.round = round;
          this.round = round;
        }
        /**
         * @returns `/v2/blocks/${round}`
         */
        path() {
          return `/v2/blocks/${this.round}`;
        }
        /**
         * Header only flag. When this is set to true, returned block does not contain the
         * transactions.
         */
        headerOnly(headerOnly) {
          this.query["header-only"] = headerOnly;
          return this;
        }
      };
      exports.default = LookupBlock;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupTransactionByID.js
  var require_lookupTransactionByID = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupTransactionByID.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupTransactionByID = class extends jsonrequest_1.default {
        /**
         * Returns information about the given transaction.
         *
         * #### Example
         * ```typescript
         * const txnId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)
         * @param txID - The ID of the transaction to look up.
         * @category GET
         */
        constructor(c, intDecoding, txID) {
          super(c, intDecoding);
          this.txID = txID;
          this.txID = txID;
        }
        /**
         * @returns `/v2/transactions/${txID}`
         */
        path() {
          return `/v2/transactions/${this.txID}`;
        }
      };
      exports.default = LookupTransactionByID;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountByID.js
  var require_lookupAccountByID = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountByID.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAccountByID = class extends jsonrequest_1.default {
        /**
         * Returns information about the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await indexerClient.lookupAccountByID(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)
         * @param account - The address of the account to look up.
         * @category GET
         */
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        /**
         * @returns `/v2/accounts/${account}`
         */
        path() {
          return `/v2/accounts/${this.account}`;
        }
        /**
         * Specify round to filter with.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const targetBlock = 18309917;
         * const accountInfo = await indexerClient
         *        .lookupAccountByID(address)
         *        .round(targetBlock)
         *        .do();
         * ```
         * @param round
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
         *
         * #### Example 1
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await indexerClient
         *        .lookupAccountByID(address)
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await indexerClient
         *        .lookupAccountByID(address)
         *        .includeAll()
         *        .do();
         * ```
         * @param value
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
        /**
         * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
         *
         * #### Example 1
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await indexerClient
         *        .lookupAccountByID(address)
         *        .exclude("all")
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await indexerClient
         *        .lookupAccountByID(address)
         *        .exclude("assets,created-assets")
         *        .do();
         * ```
         * @remarks By default, it behaves as exclude=none
         * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`
         * @category query
         */
        exclude(exclude) {
          this.query.exclude = exclude;
          return this;
        }
      };
      exports.default = LookupAccountByID;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAssets.js
  var require_lookupAccountAssets = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAssets.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAccountAssets = class extends jsonrequest_1.default {
        /**
         * Returns asset about the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAssets = await indexerClient.lookupAccountAssets(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)
         * @param account - The address of the account to look up.
         * @category GET
         */
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        /**
         * @returns `/v2/accounts/${account}/assets`
         */
        path() {
          return `/v2/accounts/${this.account}/assets`;
        }
        /**
         * Add a limit for filter.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         * const accountAssets = await indexerClient
         *        .lookupAccountAssets(address)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Specify round to filter with.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const targetBlock = 18309917;
         * const accountAssets = await indexerClient
         *        .lookupAccountAssets(address)
         *        .round(targetBlock)
         *        .do();
         * ```
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         *
         * const accountAssetsPage1 = await indexerClient
         *        .lookupAccountAssets(address)
         *        .limit(maxResults)
         *        .do();
         *
         * const accountAssetsPage2 = await indexerClient
         *        .lookupAccountAssets(address)
         *        .limit(maxResults)
         *        .next(accountAssetsPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAssets = await indexerClient
         *        .lookupAccountAssets(address)
         *        .includeAll(false)
         *        .do();
         * ```
         * @param value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
        /**
         * Specify an assetID to search for.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const assetAssets = await indexerClient
         *        .lookupAccountAssets(address)
         *        .assetId(assetId)
         *        .do();
         * ```
         * @param index - the assetID
         * @category query
         */
        assetId(index) {
          this.query["asset-id"] = index;
          return this;
        }
      };
      exports.default = LookupAccountAssets;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedAssets.js
  var require_lookupAccountCreatedAssets = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedAssets.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAccountCreatedAssets = class extends jsonrequest_1.default {
        /**
         * Returns asset information created by the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)
         * @param account - The address of the account to look up.
         * @category GET
         */
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        /**
         * @returns `/v2/accounts/${account}/created-assets`
         */
        path() {
          return `/v2/accounts/${this.account}/created-assets`;
        }
        /**
         * Add a limit for filter.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         * const accountAssets = await indexerClient
         *        .lookupAccountCreatedAssets(address)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Specify round to filter with.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const targetBlock = 18309917;
         * const accountAssets = await indexerClient
         *        .lookupAccountCreatedAssets(address)
         *        .round(targetBlock)
         *        .do();
         * ```
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         *
         * const accountAssetsPage1 = await indexerClient
         *        .lookupAccountCreatedAssets(address)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * const accountAssetsPage2 = await indexerClient
         *        .lookupAccountCreatedAssets(address)
         *        .limit(maxResults)
         *        .next(accountAssetsPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAssets = await indexerClient
         *        .lookupAccountCreatedAssets(address)
         *        .includeAll(false)
         *        .do();
         * ```
         * @param value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
        /**
         * Specify an assetID to search for.
         *
         * #### Example
         * ```typescript
         * const assetID = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const assetAssets = await indexerClient
         *        .lookupAccountCreatedAssets(address)
         *        .assetID(assetID)
         *        .do();
         * ```
         * @param index - the assetID
         * @category query
         */
        assetID(index) {
          this.query["asset-id"] = index;
          return this;
        }
      };
      exports.default = LookupAccountCreatedAssets;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAppLocalStates.js
  var require_lookupAccountAppLocalStates = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAppLocalStates.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAccountAppLocalStates = class extends jsonrequest_1.default {
        /**
         * Returns application local state about the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)
         * @param account - The address of the account to look up.
         * @category GET
         */
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        /**
         * @returns `/v2/accounts/${account}/apps-local-state`
         */
        path() {
          return `/v2/accounts/${this.account}/apps-local-state`;
        }
        /**
         * Add a limit for filter.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         * const accountAssets = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Specify round to filter with.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const targetBlock = 18309917;
         * const accountAssets = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .round(targetBlock)
         *        .do();
         * ```
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         *
         * const accountAssetsPage1 = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .limit(maxResults)
         *        .do();
         *
         * const accountAssetsPage2 = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .limit(maxResults)
         *        .next(accountAssetsPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAssets = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .includeAll(false)
         *        .do();
         * ```
         * @param value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
        /**
         * Specify an applicationID to search for.
         *
         * #### Example
         * ```typescript
         * const applicationID = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountApplications = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .applicationID(applicationID)
         *        .do();
         * ```
         * @param index - the applicationID
         * @category query
         */
        applicationID(index) {
          this.query["application-id"] = index;
          return this;
        }
      };
      exports.default = LookupAccountAppLocalStates;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedApplications.js
  var require_lookupAccountCreatedApplications = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedApplications.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAccountCreatedApplications = class extends jsonrequest_1.default {
        /**
         * Returns application information created by the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)
         * @param account - The address of the account to look up.
         * @category GET
         */
        constructor(c, intDecoding, account) {
          super(c, intDecoding);
          this.account = account;
          this.account = account;
        }
        /**
         * @returns `/v2/accounts/${account}/created-applications`
         */
        path() {
          return `/v2/accounts/${this.account}/created-applications`;
        }
        /**
         * Add a limit for filter.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         * const accountAssets = await indexerClient
         *        .lookupAccountCreatedApplications(address)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Specify round to filter with.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const targetBlock = 18309917;
         * const accountAssets = await indexerClient
         *        .lookupAccountCreatedApplications(address)
         *        .round(targetBlock)
         *        .do();
         * ```
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const maxResults = 20;
         *
         * const accountAssetsPage1 = await indexerClient
         *        .lookupAccountCreatedApplications(address)
         *        .limit(maxResults)
         *        .do();
         *
         * const accountAssetsPage2 = await indexerClient
         *        .lookupAccountCreatedApplications(address)
         *        .limit(maxResults)
         *        .next(accountAssetsPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAssets = await indexerClient
         *        .lookupAccountCreatedApplications(address)
         *        .includeAll(false)
         *        .do();
         * ```
         * @param value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
        /**
         * Specify an applicationID to search for.
         *
         * #### Example
         * ```typescript
         * const applicationID = 163650;
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountApplications = await indexerClient
         *        .lookupAccountAppLocalStates(address)
         *        .applicationID(applicationID)
         *        .do();
         * ```
         * @param index - the applicationID
         * @category query
         */
        applicationID(index) {
          this.query["application-id"] = index;
          return this;
        }
      };
      exports.default = LookupAccountCreatedApplications;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetByID.js
  var require_lookupAssetByID = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetByID.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupAssetByID = class extends jsonrequest_1.default {
        /**
         * Returns asset information of the queried asset.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)
         * @param index - The asset ID to look up.
         */
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        /**
         * @returns `/v2/assets/${index}`
         */
        path() {
          return `/v2/assets/${this.index}`;
        }
        /**
         * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example 1
         * ```typescript
         * const assetId = 163650;
         * const assetInfo = await indexerClient
         *        .lookupAssetByID(assetId)
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetId = 163650;
         * const assetInfo = await indexerClient
         *        .lookupAssetByID(assetId)
         *        .includeAll()
         *        .do();
         * ```
         *
         * @param value - default true when called without passing a value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
      };
      exports.default = LookupAssetByID;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplications.js
  var require_lookupApplications = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplications.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupApplications = class extends jsonrequest_1.default {
        /**
         * Returns information about the passed application.
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const appInfo = await indexerClient.lookupApplications(appId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)
         * @param index - The ID of the application to look up.
         * @category GET
         */
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        /**
         * @returns `/v2/applications/${index}`
         */
        path() {
          return `/v2/applications/${this.index}`;
        }
        /**
         * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example 1
         * ```typescript
         * const appId = 60553466;
         * const appInfo = await indexerClient
         *        .lookupApplications(appId)
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const appId = 60553466;
         * const appInfo = await indexerClient
         *        .lookupApplications(appId)
         *        .includeAll()
         *        .do();
         * ```
         *
         * @param value - default true when called without passing a value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
      };
      exports.default = LookupApplications;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationLogs.js
  var require_lookupApplicationLogs = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationLogs.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var LookupApplicationLogs = class extends jsonrequest_1.default {
        /**
         * Returns log messages generated by the passed in application.
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)
         * @param appID - The ID of the application which generated the logs.
         * @category GET
         */
        constructor(c, intDecoding, appID) {
          super(c, intDecoding);
          this.appID = appID;
          this.appID = appID;
        }
        /**
         * @returns `/v2/applications/${appID}/logs`
         */
        path() {
          return `/v2/applications/${this.appID}/logs`;
        }
        /**
         * Limit results for pagination.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const appLogs = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Include results at or after the specified min-round.
         *
         * #### Example
         * ```typescript
         * const minRound = 18309917;
         * const appLogs = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .minRound(minRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        minRound(round) {
          this.query["min-round"] = round;
          return this;
        }
        /**
         * Include results at or before the specified max-round.
         *
         * #### Example
         * ```typescript
         * const maxRound = 18309917;
         * const appLogs = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .maxRound(maxRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        maxRound(round) {
          this.query["max-round"] = round;
          return this;
        }
        /**
         * The next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         *
         * const appLogsPage1 = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .limit(maxResults)
         *        .do();
         *
         * const appLogsPage2 = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .limit(maxResults)
         *        .nextToken(appLogsPage1["next-token"])
         *        .do();
         * ```
         *
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Only include transactions with this sender address.
         *
         * #### Example
         * ```typescript
         * const sender = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const appLogs = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .sender(sender)
         *        .do();
         * ```
         *
         * @param senderAddress
         * @category query
         */
        sender(senderAddress) {
          this.query["sender-address"] = senderAddress;
          return this;
        }
        /**
         * Lookup the specific transaction by ID.
         *
         * #### Example
         * ```typescript
         * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const appLogs = await indexerClient
         *        .lookupApplicationLogs(appId)
         *        .txid(txId)
         *        .do();
         * ```
         *
         * @param txid
         * @category query
         */
        txid(txid) {
          this.query.txid = txid;
          return this;
        }
      };
      exports.default = LookupApplicationLogs;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js
  var require_types2 = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TransactionAssetConfig = exports.TransactionApplication = exports.Transaction = exports.TealValue = exports.TealKeyValue = exports.StateSchema = exports.StateProofVerifier = exports.StateProofTracking = exports.StateProofSignature = exports.StateProofSigSlot = exports.StateProofReveal = exports.StateProofParticipant = exports.StateProofFields = exports.ParticipationUpdates = exports.MiniAssetHolding = exports.MerkleArrayProof = exports.IndexerStateProofMessage = exports.HealthCheck = exports.HashFactory = exports.EvalDeltaKeyValue = exports.EvalDelta = exports.ErrorResponse = exports.BoxesResponse = exports.BoxDescriptor = exports.Box = exports.BlockUpgradeVote = exports.BlockUpgradeState = exports.BlockRewards = exports.Block = exports.AssetsResponse = exports.AssetResponse = exports.AssetParams = exports.AssetHoldingsResponse = exports.AssetHolding = exports.AssetBalancesResponse = exports.Asset = exports.ApplicationsResponse = exports.ApplicationStateSchema = exports.ApplicationResponse = exports.ApplicationParams = exports.ApplicationLogsResponse = exports.ApplicationLogData = exports.ApplicationLocalStatesResponse = exports.ApplicationLocalState = exports.Application = exports.AccountsResponse = exports.AccountStateDelta = exports.AccountResponse = exports.AccountParticipation = exports.Account = void 0;
      exports.TransactionsResponse = exports.TransactionStateProof = exports.TransactionSignatureMultisigSubsignature = exports.TransactionSignatureMultisig = exports.TransactionSignatureLogicsig = exports.TransactionSignature = exports.TransactionResponse = exports.TransactionPayment = exports.TransactionKeyreg = exports.TransactionAssetTransfer = exports.TransactionAssetFreeze = void 0;
      var buffer_1 = require_buffer2();
      var basemodel_1 = __importDefault2(require_basemodel());
      var Account = class _Account extends basemodel_1.default {
        /**
         * Creates a new `Account` object.
         * @param address - the account public key
         * @param amount - (algo) total number of MicroAlgos in the account
         * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.
         * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.
         * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending
         * rewards.
         * @param round - The round for which this information is relevant.
         * @param status - (onl) delegation status of the account's MicroAlgos
         * * Offline - indicates that the associated account is delegated.
         * * Online - indicates that the associated account used as part of the delegation
         * pool.
         * * NotParticipating - indicates that the associated account is neither a
         * delegator nor a delegate.
         * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count
         * of application local data (AppLocalState objects) stored in this account.
         * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of
         * AssetHolding objects held by this account.
         * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and
         * values of boxes which belong to the associated application.
         * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated
         * application.
         * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.
         * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.
         * @param appsLocalState - (appl) applications local data stored in this account.
         * Note the raw object uses `map[int] -> AppLocalState` for this type.
         * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.
         * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this
         * account.
         * Note: the raw account uses `StateSchema` for this type.
         * @param assets - (asset) assets held by this account.
         * Note the raw object uses `map[int] -> AssetHolding` for this type.
         * @param authAddr - (spend) the address against which signing should be checked. If empty, the
         * address of the current account is used. This field can be updated in any
         * transaction by setting the RekeyTo field.
         * @param closedAtRound - Round during which this account was most recently closed.
         * @param createdApps - (appp) parameters of applications created by this account including app global
         * data.
         * Note: the raw account uses `map[int] -> AppParams` for this type.
         * @param createdAssets - (apar) parameters of assets created by this account.
         * Note: the raw account uses `map[int] -> Asset` for this type.
         * @param createdAtRound - Round during which this account first appeared in a transaction.
         * @param deleted - Whether or not this account is currently closed.
         * @param participation - AccountParticipation describes the parameters used by this account in consensus
         * protocol.
         * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts
         * which are participating.
         * @param sigType - Indicates what type of signature is used by this account, must be one of:
         * * sig
         * * msig
         * * lsig
         * * or null if unknown
         */
        constructor({ address, amount, amountWithoutPendingRewards, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalBoxBytes, totalBoxes, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, closedAtRound, createdApps, createdAssets, createdAtRound, deleted, participation, rewardBase, sigType }) {
          super();
          this.address = address;
          this.amount = amount;
          this.amountWithoutPendingRewards = amountWithoutPendingRewards;
          this.pendingRewards = pendingRewards;
          this.rewards = rewards;
          this.round = round;
          this.status = status;
          this.totalAppsOptedIn = totalAppsOptedIn;
          this.totalAssetsOptedIn = totalAssetsOptedIn;
          this.totalBoxBytes = totalBoxBytes;
          this.totalBoxes = totalBoxes;
          this.totalCreatedApps = totalCreatedApps;
          this.totalCreatedAssets = totalCreatedAssets;
          this.appsLocalState = appsLocalState;
          this.appsTotalExtraPages = appsTotalExtraPages;
          this.appsTotalSchema = appsTotalSchema;
          this.assets = assets;
          this.authAddr = authAddr;
          this.closedAtRound = closedAtRound;
          this.createdApps = createdApps;
          this.createdAssets = createdAssets;
          this.createdAtRound = createdAtRound;
          this.deleted = deleted;
          this.participation = participation;
          this.rewardBase = rewardBase;
          this.sigType = sigType;
          this.attribute_map = {
            address: "address",
            amount: "amount",
            amountWithoutPendingRewards: "amount-without-pending-rewards",
            pendingRewards: "pending-rewards",
            rewards: "rewards",
            round: "round",
            status: "status",
            totalAppsOptedIn: "total-apps-opted-in",
            totalAssetsOptedIn: "total-assets-opted-in",
            totalBoxBytes: "total-box-bytes",
            totalBoxes: "total-boxes",
            totalCreatedApps: "total-created-apps",
            totalCreatedAssets: "total-created-assets",
            appsLocalState: "apps-local-state",
            appsTotalExtraPages: "apps-total-extra-pages",
            appsTotalSchema: "apps-total-schema",
            assets: "assets",
            authAddr: "auth-addr",
            closedAtRound: "closed-at-round",
            createdApps: "created-apps",
            createdAssets: "created-assets",
            createdAtRound: "created-at-round",
            deleted: "deleted",
            participation: "participation",
            rewardBase: "reward-base",
            sigType: "sig-type"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["address"] === "undefined")
            throw new Error(`Response is missing required field 'address': ${data}`);
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["amount-without-pending-rewards"] === "undefined")
            throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);
          if (typeof data["pending-rewards"] === "undefined")
            throw new Error(`Response is missing required field 'pending-rewards': ${data}`);
          if (typeof data["rewards"] === "undefined")
            throw new Error(`Response is missing required field 'rewards': ${data}`);
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          if (typeof data["status"] === "undefined")
            throw new Error(`Response is missing required field 'status': ${data}`);
          if (typeof data["total-apps-opted-in"] === "undefined")
            throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);
          if (typeof data["total-assets-opted-in"] === "undefined")
            throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);
          if (typeof data["total-box-bytes"] === "undefined")
            throw new Error(`Response is missing required field 'total-box-bytes': ${data}`);
          if (typeof data["total-boxes"] === "undefined")
            throw new Error(`Response is missing required field 'total-boxes': ${data}`);
          if (typeof data["total-created-apps"] === "undefined")
            throw new Error(`Response is missing required field 'total-created-apps': ${data}`);
          if (typeof data["total-created-assets"] === "undefined")
            throw new Error(`Response is missing required field 'total-created-assets': ${data}`);
          return new _Account({
            address: data["address"],
            amount: data["amount"],
            amountWithoutPendingRewards: data["amount-without-pending-rewards"],
            pendingRewards: data["pending-rewards"],
            rewards: data["rewards"],
            round: data["round"],
            status: data["status"],
            totalAppsOptedIn: data["total-apps-opted-in"],
            totalAssetsOptedIn: data["total-assets-opted-in"],
            totalBoxBytes: data["total-box-bytes"],
            totalBoxes: data["total-boxes"],
            totalCreatedApps: data["total-created-apps"],
            totalCreatedAssets: data["total-created-assets"],
            appsLocalState: typeof data["apps-local-state"] !== "undefined" ? data["apps-local-state"].map(ApplicationLocalState.from_obj_for_encoding) : void 0,
            appsTotalExtraPages: data["apps-total-extra-pages"],
            appsTotalSchema: typeof data["apps-total-schema"] !== "undefined" ? ApplicationStateSchema.from_obj_for_encoding(data["apps-total-schema"]) : void 0,
            assets: typeof data["assets"] !== "undefined" ? data["assets"].map(AssetHolding.from_obj_for_encoding) : void 0,
            authAddr: data["auth-addr"],
            closedAtRound: data["closed-at-round"],
            createdApps: typeof data["created-apps"] !== "undefined" ? data["created-apps"].map(Application.from_obj_for_encoding) : void 0,
            createdAssets: typeof data["created-assets"] !== "undefined" ? data["created-assets"].map(Asset.from_obj_for_encoding) : void 0,
            createdAtRound: data["created-at-round"],
            deleted: data["deleted"],
            participation: typeof data["participation"] !== "undefined" ? AccountParticipation.from_obj_for_encoding(data["participation"]) : void 0,
            rewardBase: data["reward-base"],
            sigType: data["sig-type"]
          });
        }
      };
      exports.Account = Account;
      var AccountParticipation = class _AccountParticipation extends basemodel_1.default {
        /**
         * Creates a new `AccountParticipation` object.
         * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.
         * @param voteFirstValid - (voteFst) First round for which this participation is valid.
         * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.
         * @param voteLastValid - (voteLst) Last round for which this participation is valid.
         * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this
         * round.
         * @param stateProofKey - (stprf) Root of the state proof key (if any)
         */
        constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey }) {
          super();
          this.selectionParticipationKey = typeof selectionParticipationKey === "string" ? new Uint8Array(buffer_1.Buffer.from(selectionParticipationKey, "base64")) : selectionParticipationKey;
          this.voteFirstValid = voteFirstValid;
          this.voteKeyDilution = voteKeyDilution;
          this.voteLastValid = voteLastValid;
          this.voteParticipationKey = typeof voteParticipationKey === "string" ? new Uint8Array(buffer_1.Buffer.from(voteParticipationKey, "base64")) : voteParticipationKey;
          this.stateProofKey = typeof stateProofKey === "string" ? new Uint8Array(buffer_1.Buffer.from(stateProofKey, "base64")) : stateProofKey;
          this.attribute_map = {
            selectionParticipationKey: "selection-participation-key",
            voteFirstValid: "vote-first-valid",
            voteKeyDilution: "vote-key-dilution",
            voteLastValid: "vote-last-valid",
            voteParticipationKey: "vote-participation-key",
            stateProofKey: "state-proof-key"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["selection-participation-key"] === "undefined")
            throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);
          if (typeof data["vote-first-valid"] === "undefined")
            throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);
          if (typeof data["vote-key-dilution"] === "undefined")
            throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);
          if (typeof data["vote-last-valid"] === "undefined")
            throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);
          if (typeof data["vote-participation-key"] === "undefined")
            throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);
          return new _AccountParticipation({
            selectionParticipationKey: data["selection-participation-key"],
            voteFirstValid: data["vote-first-valid"],
            voteKeyDilution: data["vote-key-dilution"],
            voteLastValid: data["vote-last-valid"],
            voteParticipationKey: data["vote-participation-key"],
            stateProofKey: data["state-proof-key"]
          });
        }
      };
      exports.AccountParticipation = AccountParticipation;
      var AccountResponse = class _AccountResponse extends basemodel_1.default {
        /**
         * Creates a new `AccountResponse` object.
         * @param account - Account information at a given round.
         * Definition:
         * data/basics/userBalance.go : AccountData
         * @param currentRound - Round at which the results were computed.
         */
        constructor({ account, currentRound }) {
          super();
          this.account = account;
          this.currentRound = currentRound;
          this.attribute_map = {
            account: "account",
            currentRound: "current-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["account"] === "undefined")
            throw new Error(`Response is missing required field 'account': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _AccountResponse({
            account: Account.from_obj_for_encoding(data["account"]),
            currentRound: data["current-round"]
          });
        }
      };
      exports.AccountResponse = AccountResponse;
      var AccountStateDelta = class _AccountStateDelta extends basemodel_1.default {
        /**
         * Creates a new `AccountStateDelta` object.
         * @param address -
         * @param delta - Application state delta.
         */
        constructor({ address, delta }) {
          super();
          this.address = address;
          this.delta = delta;
          this.attribute_map = {
            address: "address",
            delta: "delta"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["address"] === "undefined")
            throw new Error(`Response is missing required field 'address': ${data}`);
          if (!Array.isArray(data["delta"]))
            throw new Error(`Response is missing required array field 'delta': ${data}`);
          return new _AccountStateDelta({
            address: data["address"],
            delta: data["delta"].map(EvalDeltaKeyValue.from_obj_for_encoding)
          });
        }
      };
      exports.AccountStateDelta = AccountStateDelta;
      var AccountsResponse = class _AccountsResponse extends basemodel_1.default {
        /**
         * Creates a new `AccountsResponse` object.
         * @param accounts -
         * @param currentRound - Round at which the results were computed.
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ accounts, currentRound, nextToken }) {
          super();
          this.accounts = accounts;
          this.currentRound = currentRound;
          this.nextToken = nextToken;
          this.attribute_map = {
            accounts: "accounts",
            currentRound: "current-round",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["accounts"]))
            throw new Error(`Response is missing required array field 'accounts': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _AccountsResponse({
            accounts: data["accounts"].map(Account.from_obj_for_encoding),
            currentRound: data["current-round"],
            nextToken: data["next-token"]
          });
        }
      };
      exports.AccountsResponse = AccountsResponse;
      var Application = class _Application extends basemodel_1.default {
        /**
         * Creates a new `Application` object.
         * @param id - (appidx) application index.
         * @param params - (appparams) application parameters.
         * @param createdAtRound - Round when this application was created.
         * @param deleted - Whether or not this application is currently deleted.
         * @param deletedAtRound - Round when this application was deleted.
         */
        constructor({ id, params, createdAtRound, deleted, deletedAtRound }) {
          super();
          this.id = id;
          this.params = params;
          this.createdAtRound = createdAtRound;
          this.deleted = deleted;
          this.deletedAtRound = deletedAtRound;
          this.attribute_map = {
            id: "id",
            params: "params",
            createdAtRound: "created-at-round",
            deleted: "deleted",
            deletedAtRound: "deleted-at-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["id"] === "undefined")
            throw new Error(`Response is missing required field 'id': ${data}`);
          if (typeof data["params"] === "undefined")
            throw new Error(`Response is missing required field 'params': ${data}`);
          return new _Application({
            id: data["id"],
            params: ApplicationParams.from_obj_for_encoding(data["params"]),
            createdAtRound: data["created-at-round"],
            deleted: data["deleted"],
            deletedAtRound: data["deleted-at-round"]
          });
        }
      };
      exports.Application = Application;
      var ApplicationLocalState = class _ApplicationLocalState extends basemodel_1.default {
        /**
         * Creates a new `ApplicationLocalState` object.
         * @param id - The application which this local state is for.
         * @param schema - (hsch) schema.
         * @param closedOutAtRound - Round when account closed out of the application.
         * @param deleted - Whether or not the application local state is currently deleted from its
         * account.
         * @param keyValue - (tkv) storage.
         * @param optedInAtRound - Round when the account opted into the application.
         */
        constructor({ id, schema, closedOutAtRound, deleted, keyValue, optedInAtRound }) {
          super();
          this.id = id;
          this.schema = schema;
          this.closedOutAtRound = closedOutAtRound;
          this.deleted = deleted;
          this.keyValue = keyValue;
          this.optedInAtRound = optedInAtRound;
          this.attribute_map = {
            id: "id",
            schema: "schema",
            closedOutAtRound: "closed-out-at-round",
            deleted: "deleted",
            keyValue: "key-value",
            optedInAtRound: "opted-in-at-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["id"] === "undefined")
            throw new Error(`Response is missing required field 'id': ${data}`);
          if (typeof data["schema"] === "undefined")
            throw new Error(`Response is missing required field 'schema': ${data}`);
          return new _ApplicationLocalState({
            id: data["id"],
            schema: ApplicationStateSchema.from_obj_for_encoding(data["schema"]),
            closedOutAtRound: data["closed-out-at-round"],
            deleted: data["deleted"],
            keyValue: typeof data["key-value"] !== "undefined" ? data["key-value"].map(TealKeyValue.from_obj_for_encoding) : void 0,
            optedInAtRound: data["opted-in-at-round"]
          });
        }
      };
      exports.ApplicationLocalState = ApplicationLocalState;
      var ApplicationLocalStatesResponse = class _ApplicationLocalStatesResponse extends basemodel_1.default {
        /**
         * Creates a new `ApplicationLocalStatesResponse` object.
         * @param appsLocalStates -
         * @param currentRound - Round at which the results were computed.
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ appsLocalStates, currentRound, nextToken }) {
          super();
          this.appsLocalStates = appsLocalStates;
          this.currentRound = currentRound;
          this.nextToken = nextToken;
          this.attribute_map = {
            appsLocalStates: "apps-local-states",
            currentRound: "current-round",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["apps-local-states"]))
            throw new Error(`Response is missing required array field 'apps-local-states': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _ApplicationLocalStatesResponse({
            appsLocalStates: data["apps-local-states"].map(ApplicationLocalState.from_obj_for_encoding),
            currentRound: data["current-round"],
            nextToken: data["next-token"]
          });
        }
      };
      exports.ApplicationLocalStatesResponse = ApplicationLocalStatesResponse;
      var ApplicationLogData = class _ApplicationLogData extends basemodel_1.default {
        /**
         * Creates a new `ApplicationLogData` object.
         * @param logs - (lg) Logs for the application being executed by the transaction.
         * @param txid - Transaction ID
         */
        constructor({ logs, txid }) {
          super();
          this.logs = logs;
          this.txid = txid;
          this.attribute_map = {
            logs: "logs",
            txid: "txid"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["logs"]))
            throw new Error(`Response is missing required array field 'logs': ${data}`);
          if (typeof data["txid"] === "undefined")
            throw new Error(`Response is missing required field 'txid': ${data}`);
          return new _ApplicationLogData({
            logs: data["logs"],
            txid: data["txid"]
          });
        }
      };
      exports.ApplicationLogData = ApplicationLogData;
      var ApplicationLogsResponse = class _ApplicationLogsResponse extends basemodel_1.default {
        /**
         * Creates a new `ApplicationLogsResponse` object.
         * @param applicationId - (appidx) application index.
         * @param currentRound - Round at which the results were computed.
         * @param logData -
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ applicationId, currentRound, logData, nextToken }) {
          super();
          this.applicationId = applicationId;
          this.currentRound = currentRound;
          this.logData = logData;
          this.nextToken = nextToken;
          this.attribute_map = {
            applicationId: "application-id",
            currentRound: "current-round",
            logData: "log-data",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["application-id"] === "undefined")
            throw new Error(`Response is missing required field 'application-id': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _ApplicationLogsResponse({
            applicationId: data["application-id"],
            currentRound: data["current-round"],
            logData: typeof data["log-data"] !== "undefined" ? data["log-data"].map(ApplicationLogData.from_obj_for_encoding) : void 0,
            nextToken: data["next-token"]
          });
        }
      };
      exports.ApplicationLogsResponse = ApplicationLogsResponse;
      var ApplicationParams = class _ApplicationParams extends basemodel_1.default {
        /**
         * Creates a new `ApplicationParams` object.
         * @param approvalProgram - (approv) approval program.
         * @param clearStateProgram - (clearp) approval program.
         * @param creator - The address that created this application. This is the address where the
         * parameters and global state for this application can be found.
         * @param extraProgramPages - (epp) the amount of extra program pages available to this app.
         * @param globalState - [\gs) global schema
         * @param globalStateSchema - [\gsch) global schema
         * @param localStateSchema - [\lsch) local schema
         */
        constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema }) {
          super();
          this.approvalProgram = typeof approvalProgram === "string" ? new Uint8Array(buffer_1.Buffer.from(approvalProgram, "base64")) : approvalProgram;
          this.clearStateProgram = typeof clearStateProgram === "string" ? new Uint8Array(buffer_1.Buffer.from(clearStateProgram, "base64")) : clearStateProgram;
          this.creator = creator;
          this.extraProgramPages = extraProgramPages;
          this.globalState = globalState;
          this.globalStateSchema = globalStateSchema;
          this.localStateSchema = localStateSchema;
          this.attribute_map = {
            approvalProgram: "approval-program",
            clearStateProgram: "clear-state-program",
            creator: "creator",
            extraProgramPages: "extra-program-pages",
            globalState: "global-state",
            globalStateSchema: "global-state-schema",
            localStateSchema: "local-state-schema"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["approval-program"] === "undefined")
            throw new Error(`Response is missing required field 'approval-program': ${data}`);
          if (typeof data["clear-state-program"] === "undefined")
            throw new Error(`Response is missing required field 'clear-state-program': ${data}`);
          return new _ApplicationParams({
            approvalProgram: data["approval-program"],
            clearStateProgram: data["clear-state-program"],
            creator: data["creator"],
            extraProgramPages: data["extra-program-pages"],
            globalState: typeof data["global-state"] !== "undefined" ? data["global-state"].map(TealKeyValue.from_obj_for_encoding) : void 0,
            globalStateSchema: typeof data["global-state-schema"] !== "undefined" ? ApplicationStateSchema.from_obj_for_encoding(data["global-state-schema"]) : void 0,
            localStateSchema: typeof data["local-state-schema"] !== "undefined" ? ApplicationStateSchema.from_obj_for_encoding(data["local-state-schema"]) : void 0
          });
        }
      };
      exports.ApplicationParams = ApplicationParams;
      var ApplicationResponse = class _ApplicationResponse extends basemodel_1.default {
        /**
         * Creates a new `ApplicationResponse` object.
         * @param currentRound - Round at which the results were computed.
         * @param application - Application index and its parameters
         */
        constructor({ currentRound, application }) {
          super();
          this.currentRound = currentRound;
          this.application = application;
          this.attribute_map = {
            currentRound: "current-round",
            application: "application"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _ApplicationResponse({
            currentRound: data["current-round"],
            application: typeof data["application"] !== "undefined" ? Application.from_obj_for_encoding(data["application"]) : void 0
          });
        }
      };
      exports.ApplicationResponse = ApplicationResponse;
      var ApplicationStateSchema = class _ApplicationStateSchema extends basemodel_1.default {
        /**
         * Creates a new `ApplicationStateSchema` object.
         * @param numByteSlice - (nbs) num of byte slices.
         * @param numUint - (nui) num of uints.
         */
        constructor({ numByteSlice, numUint }) {
          super();
          this.numByteSlice = numByteSlice;
          this.numUint = numUint;
          this.attribute_map = {
            numByteSlice: "num-byte-slice",
            numUint: "num-uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["num-byte-slice"] === "undefined")
            throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);
          if (typeof data["num-uint"] === "undefined")
            throw new Error(`Response is missing required field 'num-uint': ${data}`);
          return new _ApplicationStateSchema({
            numByteSlice: data["num-byte-slice"],
            numUint: data["num-uint"]
          });
        }
      };
      exports.ApplicationStateSchema = ApplicationStateSchema;
      var ApplicationsResponse = class _ApplicationsResponse extends basemodel_1.default {
        /**
         * Creates a new `ApplicationsResponse` object.
         * @param applications -
         * @param currentRound - Round at which the results were computed.
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ applications, currentRound, nextToken }) {
          super();
          this.applications = applications;
          this.currentRound = currentRound;
          this.nextToken = nextToken;
          this.attribute_map = {
            applications: "applications",
            currentRound: "current-round",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["applications"]))
            throw new Error(`Response is missing required array field 'applications': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _ApplicationsResponse({
            applications: data["applications"].map(Application.from_obj_for_encoding),
            currentRound: data["current-round"],
            nextToken: data["next-token"]
          });
        }
      };
      exports.ApplicationsResponse = ApplicationsResponse;
      var Asset = class _Asset extends basemodel_1.default {
        /**
         * Creates a new `Asset` object.
         * @param index - unique asset identifier
         * @param params - AssetParams specifies the parameters for an asset.
         * (apar) when part of an AssetConfig transaction.
         * Definition:
         * data/transactions/asset.go : AssetParams
         * @param createdAtRound - Round during which this asset was created.
         * @param deleted - Whether or not this asset is currently deleted.
         * @param destroyedAtRound - Round during which this asset was destroyed.
         */
        constructor({ index, params, createdAtRound, deleted, destroyedAtRound }) {
          super();
          this.index = index;
          this.params = params;
          this.createdAtRound = createdAtRound;
          this.deleted = deleted;
          this.destroyedAtRound = destroyedAtRound;
          this.attribute_map = {
            index: "index",
            params: "params",
            createdAtRound: "created-at-round",
            deleted: "deleted",
            destroyedAtRound: "destroyed-at-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["index"] === "undefined")
            throw new Error(`Response is missing required field 'index': ${data}`);
          if (typeof data["params"] === "undefined")
            throw new Error(`Response is missing required field 'params': ${data}`);
          return new _Asset({
            index: data["index"],
            params: AssetParams.from_obj_for_encoding(data["params"]),
            createdAtRound: data["created-at-round"],
            deleted: data["deleted"],
            destroyedAtRound: data["destroyed-at-round"]
          });
        }
      };
      exports.Asset = Asset;
      var AssetBalancesResponse = class _AssetBalancesResponse extends basemodel_1.default {
        /**
         * Creates a new `AssetBalancesResponse` object.
         * @param balances -
         * @param currentRound - Round at which the results were computed.
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ balances, currentRound, nextToken }) {
          super();
          this.balances = balances;
          this.currentRound = currentRound;
          this.nextToken = nextToken;
          this.attribute_map = {
            balances: "balances",
            currentRound: "current-round",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["balances"]))
            throw new Error(`Response is missing required array field 'balances': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _AssetBalancesResponse({
            balances: data["balances"].map(MiniAssetHolding.from_obj_for_encoding),
            currentRound: data["current-round"],
            nextToken: data["next-token"]
          });
        }
      };
      exports.AssetBalancesResponse = AssetBalancesResponse;
      var AssetHolding = class _AssetHolding extends basemodel_1.default {
        /**
         * Creates a new `AssetHolding` object.
         * @param amount - (a) number of units held.
         * @param assetId - Asset ID of the holding.
         * @param isFrozen - (f) whether or not the holding is frozen.
         * @param deleted - Whether or not the asset holding is currently deleted from its account.
         * @param optedInAtRound - Round during which the account opted into this asset holding.
         * @param optedOutAtRound - Round during which the account opted out of this asset holding.
         */
        constructor({ amount, assetId, isFrozen, deleted, optedInAtRound, optedOutAtRound }) {
          super();
          this.amount = amount;
          this.assetId = assetId;
          this.isFrozen = isFrozen;
          this.deleted = deleted;
          this.optedInAtRound = optedInAtRound;
          this.optedOutAtRound = optedOutAtRound;
          this.attribute_map = {
            amount: "amount",
            assetId: "asset-id",
            isFrozen: "is-frozen",
            deleted: "deleted",
            optedInAtRound: "opted-in-at-round",
            optedOutAtRound: "opted-out-at-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["asset-id"] === "undefined")
            throw new Error(`Response is missing required field 'asset-id': ${data}`);
          if (typeof data["is-frozen"] === "undefined")
            throw new Error(`Response is missing required field 'is-frozen': ${data}`);
          return new _AssetHolding({
            amount: data["amount"],
            assetId: data["asset-id"],
            isFrozen: data["is-frozen"],
            deleted: data["deleted"],
            optedInAtRound: data["opted-in-at-round"],
            optedOutAtRound: data["opted-out-at-round"]
          });
        }
      };
      exports.AssetHolding = AssetHolding;
      var AssetHoldingsResponse = class _AssetHoldingsResponse extends basemodel_1.default {
        /**
         * Creates a new `AssetHoldingsResponse` object.
         * @param assets -
         * @param currentRound - Round at which the results were computed.
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ assets, currentRound, nextToken }) {
          super();
          this.assets = assets;
          this.currentRound = currentRound;
          this.nextToken = nextToken;
          this.attribute_map = {
            assets: "assets",
            currentRound: "current-round",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["assets"]))
            throw new Error(`Response is missing required array field 'assets': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _AssetHoldingsResponse({
            assets: data["assets"].map(AssetHolding.from_obj_for_encoding),
            currentRound: data["current-round"],
            nextToken: data["next-token"]
          });
        }
      };
      exports.AssetHoldingsResponse = AssetHoldingsResponse;
      var AssetParams = class _AssetParams extends basemodel_1.default {
        /**
         * Creates a new `AssetParams` object.
         * @param creator - The address that created this asset. This is the address where the parameters
         * for this asset can be found, and also the address where unwanted asset units can
         * be sent in the worst case.
         * @param decimals - (dc) The number of digits to use after the decimal point when displaying this
         * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in
         * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value
         * must be between 0 and 19 (inclusive).
         * @param total - (t) The total number of units of this asset.
         * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,
         * clawback is not permitted.
         * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.
         * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing
         * is not permitted.
         * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.
         * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this
         * metadata is up to the application.
         * @param name - (an) Name of this asset, as supplied by the creator. Included only when the
         * asset name is composed of printable utf-8 characters.
         * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.
         * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.
         * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only
         * when the name of a unit of this asset is composed of printable utf-8 characters.
         * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.
         * @param url - (au) URL where more information about the asset can be retrieved. Included only
         * when the URL is composed of printable utf-8 characters.
         * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.
         */
        constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64 }) {
          super();
          this.creator = creator;
          this.decimals = decimals;
          this.total = total;
          this.clawback = clawback;
          this.defaultFrozen = defaultFrozen;
          this.freeze = freeze;
          this.manager = manager;
          this.metadataHash = typeof metadataHash === "string" ? new Uint8Array(buffer_1.Buffer.from(metadataHash, "base64")) : metadataHash;
          this.name = name;
          this.nameB64 = typeof nameB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(nameB64, "base64")) : nameB64;
          this.reserve = reserve;
          this.unitName = unitName;
          this.unitNameB64 = typeof unitNameB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(unitNameB64, "base64")) : unitNameB64;
          this.url = url;
          this.urlB64 = typeof urlB64 === "string" ? new Uint8Array(buffer_1.Buffer.from(urlB64, "base64")) : urlB64;
          this.attribute_map = {
            creator: "creator",
            decimals: "decimals",
            total: "total",
            clawback: "clawback",
            defaultFrozen: "default-frozen",
            freeze: "freeze",
            manager: "manager",
            metadataHash: "metadata-hash",
            name: "name",
            nameB64: "name-b64",
            reserve: "reserve",
            unitName: "unit-name",
            unitNameB64: "unit-name-b64",
            url: "url",
            urlB64: "url-b64"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["creator"] === "undefined")
            throw new Error(`Response is missing required field 'creator': ${data}`);
          if (typeof data["decimals"] === "undefined")
            throw new Error(`Response is missing required field 'decimals': ${data}`);
          if (typeof data["total"] === "undefined")
            throw new Error(`Response is missing required field 'total': ${data}`);
          return new _AssetParams({
            creator: data["creator"],
            decimals: data["decimals"],
            total: data["total"],
            clawback: data["clawback"],
            defaultFrozen: data["default-frozen"],
            freeze: data["freeze"],
            manager: data["manager"],
            metadataHash: data["metadata-hash"],
            name: data["name"],
            nameB64: data["name-b64"],
            reserve: data["reserve"],
            unitName: data["unit-name"],
            unitNameB64: data["unit-name-b64"],
            url: data["url"],
            urlB64: data["url-b64"]
          });
        }
      };
      exports.AssetParams = AssetParams;
      var AssetResponse = class _AssetResponse extends basemodel_1.default {
        /**
         * Creates a new `AssetResponse` object.
         * @param asset - Specifies both the unique identifier and the parameters for an asset
         * @param currentRound - Round at which the results were computed.
         */
        constructor({ asset, currentRound }) {
          super();
          this.asset = asset;
          this.currentRound = currentRound;
          this.attribute_map = {
            asset: "asset",
            currentRound: "current-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["asset"] === "undefined")
            throw new Error(`Response is missing required field 'asset': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _AssetResponse({
            asset: Asset.from_obj_for_encoding(data["asset"]),
            currentRound: data["current-round"]
          });
        }
      };
      exports.AssetResponse = AssetResponse;
      var AssetsResponse = class _AssetsResponse extends basemodel_1.default {
        /**
         * Creates a new `AssetsResponse` object.
         * @param assets -
         * @param currentRound - Round at which the results were computed.
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ assets, currentRound, nextToken }) {
          super();
          this.assets = assets;
          this.currentRound = currentRound;
          this.nextToken = nextToken;
          this.attribute_map = {
            assets: "assets",
            currentRound: "current-round",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (!Array.isArray(data["assets"]))
            throw new Error(`Response is missing required array field 'assets': ${data}`);
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          return new _AssetsResponse({
            assets: data["assets"].map(Asset.from_obj_for_encoding),
            currentRound: data["current-round"],
            nextToken: data["next-token"]
          });
        }
      };
      exports.AssetsResponse = AssetsResponse;
      var Block = class _Block extends basemodel_1.default {
        /**
         * Creates a new `Block` object.
         * @param genesisHash - (gh) hash to which this block belongs.
         * @param genesisId - (gen) ID to which this block belongs.
         * @param previousBlockHash - (prev) Previous block hash.
         * @param round - (rnd) Current round on which this block was appended to the chain.
         * @param seed - (seed) Sortition seed.
         * @param timestamp - (ts) Block creation timestamp in seconds since eposh
         * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the
         * block. More specifically, it's the root of a merkle tree whose leaves are the
         * block's Txids, in lexicographic order. For the empty block, it's 0. Note that
         * the TxnRoot does not authenticate the signatures on the transactions, only the
         * transactions themselves. Two blocks with the same transactions but in a
         * different order and with different signatures will have the same TxnRoot.
         * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a
         * vector commitment instead of a merkle tree, and SHA256 hash function instead of
         * the default SHA512_256. This commitment can be used on environments where only
         * the SHA256 function exists.
         * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.
         * @param rewards - Fields relating to rewards,
         * @param stateProofTracking - Tracks the status of state proofs.
         * @param transactions - (txns) list of transactions corresponding to a given round.
         * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from
         * the time at which support for this feature was introduced.
         * Specifically, TxnCounter is the number of the next transaction that will be
         * committed after this block. It is 0 when no transactions have ever been
         * committed (since TxnCounter started being supported).
         * @param upgradeState - Fields relating to a protocol upgrade.
         * @param upgradeVote - Fields relating to voting for a protocol upgrade.
         */
        constructor({ genesisHash, genesisId, previousBlockHash, round, seed, timestamp, transactionsRoot, transactionsRootSha256, participationUpdates, rewards, stateProofTracking, transactions, txnCounter, upgradeState, upgradeVote }) {
          super();
          this.genesisHash = typeof genesisHash === "string" ? new Uint8Array(buffer_1.Buffer.from(genesisHash, "base64")) : genesisHash;
          this.genesisId = genesisId;
          this.previousBlockHash = typeof previousBlockHash === "string" ? new Uint8Array(buffer_1.Buffer.from(previousBlockHash, "base64")) : previousBlockHash;
          this.round = round;
          this.seed = typeof seed === "string" ? new Uint8Array(buffer_1.Buffer.from(seed, "base64")) : seed;
          this.timestamp = timestamp;
          this.transactionsRoot = typeof transactionsRoot === "string" ? new Uint8Array(buffer_1.Buffer.from(transactionsRoot, "base64")) : transactionsRoot;
          this.transactionsRootSha256 = typeof transactionsRootSha256 === "string" ? new Uint8Array(buffer_1.Buffer.from(transactionsRootSha256, "base64")) : transactionsRootSha256;
          this.participationUpdates = participationUpdates;
          this.rewards = rewards;
          this.stateProofTracking = stateProofTracking;
          this.transactions = transactions;
          this.txnCounter = txnCounter;
          this.upgradeState = upgradeState;
          this.upgradeVote = upgradeVote;
          this.attribute_map = {
            genesisHash: "genesis-hash",
            genesisId: "genesis-id",
            previousBlockHash: "previous-block-hash",
            round: "round",
            seed: "seed",
            timestamp: "timestamp",
            transactionsRoot: "transactions-root",
            transactionsRootSha256: "transactions-root-sha256",
            participationUpdates: "participation-updates",
            rewards: "rewards",
            stateProofTracking: "state-proof-tracking",
            transactions: "transactions",
            txnCounter: "txn-counter",
            upgradeState: "upgrade-state",
            upgradeVote: "upgrade-vote"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["genesis-hash"] === "undefined")
            throw new Error(`Response is missing required field 'genesis-hash': ${data}`);
          if (typeof data["genesis-id"] === "undefined")
            throw new Error(`Response is missing required field 'genesis-id': ${data}`);
          if (typeof data["previous-block-hash"] === "undefined")
            throw new Error(`Response is missing required field 'previous-block-hash': ${data}`);
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          if (typeof data["seed"] === "undefined")
            throw new Error(`Response is missing required field 'seed': ${data}`);
          if (typeof data["timestamp"] === "undefined")
            throw new Error(`Response is missing required field 'timestamp': ${data}`);
          if (typeof data["transactions-root"] === "undefined")
            throw new Error(`Response is missing required field 'transactions-root': ${data}`);
          if (typeof data["transactions-root-sha256"] === "undefined")
            throw new Error(`Response is missing required field 'transactions-root-sha256': ${data}`);
          return new _Block({
            genesisHash: data["genesis-hash"],
            genesisId: data["genesis-id"],
            previousBlockHash: data["previous-block-hash"],
            round: data["round"],
            seed: data["seed"],
            timestamp: data["timestamp"],
            transactionsRoot: data["transactions-root"],
            transactionsRootSha256: data["transactions-root-sha256"],
            participationUpdates: typeof data["participation-updates"] !== "undefined" ? ParticipationUpdates.from_obj_for_encoding(data["participation-updates"]) : void 0,
            rewards: typeof data["rewards"] !== "undefined" ? BlockRewards.from_obj_for_encoding(data["rewards"]) : void 0,
            stateProofTracking: typeof data["state-proof-tracking"] !== "undefined" ? data["state-proof-tracking"].map(StateProofTracking.from_obj_for_encoding) : void 0,
            transactions: typeof data["transactions"] !== "undefined" ? data["transactions"].map(Transaction.from_obj_for_encoding) : void 0,
            txnCounter: data["txn-counter"],
            upgradeState: typeof data["upgrade-state"] !== "undefined" ? BlockUpgradeState.from_obj_for_encoding(data["upgrade-state"]) : void 0,
            upgradeVote: typeof data["upgrade-vote"] !== "undefined" ? BlockUpgradeVote.from_obj_for_encoding(data["upgrade-vote"]) : void 0
          });
        }
      };
      exports.Block = Block;
      var BlockRewards = class _BlockRewards extends basemodel_1.default {
        /**
         * Creates a new `BlockRewards` object.
         * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.
         * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate
         * MicroAlgos for every reward unit in the next round.
         * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit
         * of MicroAlgos since genesis.
         * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually
         * redistributes them as rewards.
         * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at
         * the next round.
         * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of
         * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.
         */
        constructor({ feeSink, rewardsCalculationRound, rewardsLevel, rewardsPool, rewardsRate, rewardsResidue }) {
          super();
          this.feeSink = feeSink;
          this.rewardsCalculationRound = rewardsCalculationRound;
          this.rewardsLevel = rewardsLevel;
          this.rewardsPool = rewardsPool;
          this.rewardsRate = rewardsRate;
          this.rewardsResidue = rewardsResidue;
          this.attribute_map = {
            feeSink: "fee-sink",
            rewardsCalculationRound: "rewards-calculation-round",
            rewardsLevel: "rewards-level",
            rewardsPool: "rewards-pool",
            rewardsRate: "rewards-rate",
            rewardsResidue: "rewards-residue"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["fee-sink"] === "undefined")
            throw new Error(`Response is missing required field 'fee-sink': ${data}`);
          if (typeof data["rewards-calculation-round"] === "undefined")
            throw new Error(`Response is missing required field 'rewards-calculation-round': ${data}`);
          if (typeof data["rewards-level"] === "undefined")
            throw new Error(`Response is missing required field 'rewards-level': ${data}`);
          if (typeof data["rewards-pool"] === "undefined")
            throw new Error(`Response is missing required field 'rewards-pool': ${data}`);
          if (typeof data["rewards-rate"] === "undefined")
            throw new Error(`Response is missing required field 'rewards-rate': ${data}`);
          if (typeof data["rewards-residue"] === "undefined")
            throw new Error(`Response is missing required field 'rewards-residue': ${data}`);
          return new _BlockRewards({
            feeSink: data["fee-sink"],
            rewardsCalculationRound: data["rewards-calculation-round"],
            rewardsLevel: data["rewards-level"],
            rewardsPool: data["rewards-pool"],
            rewardsRate: data["rewards-rate"],
            rewardsResidue: data["rewards-residue"]
          });
        }
      };
      exports.BlockRewards = BlockRewards;
      var BlockUpgradeState = class _BlockUpgradeState extends basemodel_1.default {
        /**
         * Creates a new `BlockUpgradeState` object.
         * @param currentProtocol - (proto) The current protocol version.
         * @param nextProtocol - (nextproto) The next proposed protocol version.
         * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.
         * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.
         * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider
         * after this round).
         */
        constructor({ currentProtocol, nextProtocol, nextProtocolApprovals, nextProtocolSwitchOn, nextProtocolVoteBefore }) {
          super();
          this.currentProtocol = currentProtocol;
          this.nextProtocol = nextProtocol;
          this.nextProtocolApprovals = nextProtocolApprovals;
          this.nextProtocolSwitchOn = nextProtocolSwitchOn;
          this.nextProtocolVoteBefore = nextProtocolVoteBefore;
          this.attribute_map = {
            currentProtocol: "current-protocol",
            nextProtocol: "next-protocol",
            nextProtocolApprovals: "next-protocol-approvals",
            nextProtocolSwitchOn: "next-protocol-switch-on",
            nextProtocolVoteBefore: "next-protocol-vote-before"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["current-protocol"] === "undefined")
            throw new Error(`Response is missing required field 'current-protocol': ${data}`);
          return new _BlockUpgradeState({
            currentProtocol: data["current-protocol"],
            nextProtocol: data["next-protocol"],
            nextProtocolApprovals: data["next-protocol-approvals"],
            nextProtocolSwitchOn: data["next-protocol-switch-on"],
            nextProtocolVoteBefore: data["next-protocol-vote-before"]
          });
        }
      };
      exports.BlockUpgradeState = BlockUpgradeState;
      var BlockUpgradeVote = class _BlockUpgradeVote extends basemodel_1.default {
        /**
         * Creates a new `BlockUpgradeVote` object.
         * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.
         * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.
         * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.
         */
        constructor({ upgradeApprove, upgradeDelay, upgradePropose }) {
          super();
          this.upgradeApprove = upgradeApprove;
          this.upgradeDelay = upgradeDelay;
          this.upgradePropose = upgradePropose;
          this.attribute_map = {
            upgradeApprove: "upgrade-approve",
            upgradeDelay: "upgrade-delay",
            upgradePropose: "upgrade-propose"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _BlockUpgradeVote({
            upgradeApprove: data["upgrade-approve"],
            upgradeDelay: data["upgrade-delay"],
            upgradePropose: data["upgrade-propose"]
          });
        }
      };
      exports.BlockUpgradeVote = BlockUpgradeVote;
      var Box = class _Box extends basemodel_1.default {
        /**
         * Creates a new `Box` object.
         * @param name - (name) box name, base64 encoded
         * @param value - (value) box value, base64 encoded.
         */
        constructor({ name, value }) {
          super();
          this.name = typeof name === "string" ? new Uint8Array(buffer_1.Buffer.from(name, "base64")) : name;
          this.value = typeof value === "string" ? new Uint8Array(buffer_1.Buffer.from(value, "base64")) : value;
          this.attribute_map = {
            name: "name",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["name"] === "undefined")
            throw new Error(`Response is missing required field 'name': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _Box({
            name: data["name"],
            value: data["value"]
          });
        }
      };
      exports.Box = Box;
      var BoxDescriptor = class _BoxDescriptor extends basemodel_1.default {
        /**
         * Creates a new `BoxDescriptor` object.
         * @param name - Base64 encoded box name
         */
        constructor({ name }) {
          super();
          this.name = typeof name === "string" ? new Uint8Array(buffer_1.Buffer.from(name, "base64")) : name;
          this.attribute_map = {
            name: "name"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["name"] === "undefined")
            throw new Error(`Response is missing required field 'name': ${data}`);
          return new _BoxDescriptor({
            name: data["name"]
          });
        }
      };
      exports.BoxDescriptor = BoxDescriptor;
      var BoxesResponse = class _BoxesResponse extends basemodel_1.default {
        /**
         * Creates a new `BoxesResponse` object.
         * @param applicationId - (appidx) application index.
         * @param boxes -
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ applicationId, boxes, nextToken }) {
          super();
          this.applicationId = applicationId;
          this.boxes = boxes;
          this.nextToken = nextToken;
          this.attribute_map = {
            applicationId: "application-id",
            boxes: "boxes",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["application-id"] === "undefined")
            throw new Error(`Response is missing required field 'application-id': ${data}`);
          if (!Array.isArray(data["boxes"]))
            throw new Error(`Response is missing required array field 'boxes': ${data}`);
          return new _BoxesResponse({
            applicationId: data["application-id"],
            boxes: data["boxes"].map(BoxDescriptor.from_obj_for_encoding),
            nextToken: data["next-token"]
          });
        }
      };
      exports.BoxesResponse = BoxesResponse;
      var ErrorResponse = class _ErrorResponse extends basemodel_1.default {
        /**
         * Creates a new `ErrorResponse` object.
         * @param message -
         * @param data -
         */
        constructor({ message, data }) {
          super();
          this.message = message;
          this.data = data;
          this.attribute_map = {
            message: "message",
            data: "data"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["message"] === "undefined")
            throw new Error(`Response is missing required field 'message': ${data}`);
          return new _ErrorResponse({
            message: data["message"],
            data: data["data"]
          });
        }
      };
      exports.ErrorResponse = ErrorResponse;
      var EvalDelta = class _EvalDelta extends basemodel_1.default {
        /**
         * Creates a new `EvalDelta` object.
         * @param action - (at) delta action.
         * @param bytes - (bs) bytes value.
         * @param uint - (ui) uint value.
         */
        constructor({ action, bytes, uint }) {
          super();
          this.action = action;
          this.bytes = bytes;
          this.uint = uint;
          this.attribute_map = {
            action: "action",
            bytes: "bytes",
            uint: "uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["action"] === "undefined")
            throw new Error(`Response is missing required field 'action': ${data}`);
          return new _EvalDelta({
            action: data["action"],
            bytes: data["bytes"],
            uint: data["uint"]
          });
        }
      };
      exports.EvalDelta = EvalDelta;
      var EvalDeltaKeyValue = class _EvalDeltaKeyValue extends basemodel_1.default {
        /**
         * Creates a new `EvalDeltaKeyValue` object.
         * @param key -
         * @param value - Represents a TEAL value delta.
         */
        constructor({ key, value }) {
          super();
          this.key = key;
          this.value = value;
          this.attribute_map = {
            key: "key",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["key"] === "undefined")
            throw new Error(`Response is missing required field 'key': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _EvalDeltaKeyValue({
            key: data["key"],
            value: EvalDelta.from_obj_for_encoding(data["value"])
          });
        }
      };
      exports.EvalDeltaKeyValue = EvalDeltaKeyValue;
      var HashFactory = class _HashFactory extends basemodel_1.default {
        /**
         * Creates a new `HashFactory` object.
         * @param hashType - (t)
         */
        constructor({ hashType }) {
          super();
          this.hashType = hashType;
          this.attribute_map = {
            hashType: "hash-type"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _HashFactory({
            hashType: data["hash-type"]
          });
        }
      };
      exports.HashFactory = HashFactory;
      var HealthCheck = class _HealthCheck extends basemodel_1.default {
        /**
         * Creates a new `HealthCheck` object.
         * @param dbAvailable -
         * @param isMigrating -
         * @param message -
         * @param round -
         * @param version - Current version.
         * @param data -
         * @param errors -
         */
        constructor({ dbAvailable, isMigrating, message, round, version, data, errors }) {
          super();
          this.dbAvailable = dbAvailable;
          this.isMigrating = isMigrating;
          this.message = message;
          this.round = round;
          this.version = version;
          this.data = data;
          this.errors = errors;
          this.attribute_map = {
            dbAvailable: "db-available",
            isMigrating: "is-migrating",
            message: "message",
            round: "round",
            version: "version",
            data: "data",
            errors: "errors"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["db-available"] === "undefined")
            throw new Error(`Response is missing required field 'db-available': ${data}`);
          if (typeof data["is-migrating"] === "undefined")
            throw new Error(`Response is missing required field 'is-migrating': ${data}`);
          if (typeof data["message"] === "undefined")
            throw new Error(`Response is missing required field 'message': ${data}`);
          if (typeof data["round"] === "undefined")
            throw new Error(`Response is missing required field 'round': ${data}`);
          if (typeof data["version"] === "undefined")
            throw new Error(`Response is missing required field 'version': ${data}`);
          return new _HealthCheck({
            dbAvailable: data["db-available"],
            isMigrating: data["is-migrating"],
            message: data["message"],
            round: data["round"],
            version: data["version"],
            data: data["data"],
            errors: data["errors"]
          });
        }
      };
      exports.HealthCheck = HealthCheck;
      var IndexerStateProofMessage = class _IndexerStateProofMessage extends basemodel_1.default {
        /**
         * Creates a new `IndexerStateProofMessage` object.
         * @param blockHeadersCommitment - (b)
         * @param firstAttestedRound - (f)
         * @param latestAttestedRound - (l)
         * @param lnProvenWeight - (P)
         * @param votersCommitment - (v)
         */
        constructor({ blockHeadersCommitment, firstAttestedRound, latestAttestedRound, lnProvenWeight, votersCommitment }) {
          super();
          this.blockHeadersCommitment = typeof blockHeadersCommitment === "string" ? new Uint8Array(buffer_1.Buffer.from(blockHeadersCommitment, "base64")) : blockHeadersCommitment;
          this.firstAttestedRound = firstAttestedRound;
          this.latestAttestedRound = latestAttestedRound;
          this.lnProvenWeight = lnProvenWeight;
          this.votersCommitment = typeof votersCommitment === "string" ? new Uint8Array(buffer_1.Buffer.from(votersCommitment, "base64")) : votersCommitment;
          this.attribute_map = {
            blockHeadersCommitment: "block-headers-commitment",
            firstAttestedRound: "first-attested-round",
            latestAttestedRound: "latest-attested-round",
            lnProvenWeight: "ln-proven-weight",
            votersCommitment: "voters-commitment"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _IndexerStateProofMessage({
            blockHeadersCommitment: data["block-headers-commitment"],
            firstAttestedRound: data["first-attested-round"],
            latestAttestedRound: data["latest-attested-round"],
            lnProvenWeight: data["ln-proven-weight"],
            votersCommitment: data["voters-commitment"]
          });
        }
      };
      exports.IndexerStateProofMessage = IndexerStateProofMessage;
      var MerkleArrayProof = class _MerkleArrayProof extends basemodel_1.default {
        /**
         * Creates a new `MerkleArrayProof` object.
         * @param hashFactory -
         * @param path - (pth)
         * @param treeDepth - (td)
         */
        constructor({ hashFactory, path, treeDepth }) {
          super();
          this.hashFactory = hashFactory;
          this.path = path;
          this.treeDepth = treeDepth;
          this.attribute_map = {
            hashFactory: "hash-factory",
            path: "path",
            treeDepth: "tree-depth"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _MerkleArrayProof({
            hashFactory: typeof data["hash-factory"] !== "undefined" ? HashFactory.from_obj_for_encoding(data["hash-factory"]) : void 0,
            path: data["path"],
            treeDepth: data["tree-depth"]
          });
        }
      };
      exports.MerkleArrayProof = MerkleArrayProof;
      var MiniAssetHolding = class _MiniAssetHolding extends basemodel_1.default {
        /**
         * Creates a new `MiniAssetHolding` object.
         * @param address -
         * @param amount -
         * @param isFrozen -
         * @param deleted - Whether or not this asset holding is currently deleted from its account.
         * @param optedInAtRound - Round during which the account opted into the asset.
         * @param optedOutAtRound - Round during which the account opted out of the asset.
         */
        constructor({ address, amount, isFrozen, deleted, optedInAtRound, optedOutAtRound }) {
          super();
          this.address = address;
          this.amount = amount;
          this.isFrozen = isFrozen;
          this.deleted = deleted;
          this.optedInAtRound = optedInAtRound;
          this.optedOutAtRound = optedOutAtRound;
          this.attribute_map = {
            address: "address",
            amount: "amount",
            isFrozen: "is-frozen",
            deleted: "deleted",
            optedInAtRound: "opted-in-at-round",
            optedOutAtRound: "opted-out-at-round"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["address"] === "undefined")
            throw new Error(`Response is missing required field 'address': ${data}`);
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["is-frozen"] === "undefined")
            throw new Error(`Response is missing required field 'is-frozen': ${data}`);
          return new _MiniAssetHolding({
            address: data["address"],
            amount: data["amount"],
            isFrozen: data["is-frozen"],
            deleted: data["deleted"],
            optedInAtRound: data["opted-in-at-round"],
            optedOutAtRound: data["opted-out-at-round"]
          });
        }
      };
      exports.MiniAssetHolding = MiniAssetHolding;
      var ParticipationUpdates = class _ParticipationUpdates extends basemodel_1.default {
        /**
         * Creates a new `ParticipationUpdates` object.
         * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline
         * since their participation key expired.
         */
        constructor({ expiredParticipationAccounts }) {
          super();
          this.expiredParticipationAccounts = expiredParticipationAccounts;
          this.attribute_map = {
            expiredParticipationAccounts: "expired-participation-accounts"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _ParticipationUpdates({
            expiredParticipationAccounts: data["expired-participation-accounts"]
          });
        }
      };
      exports.ParticipationUpdates = ParticipationUpdates;
      var StateProofFields = class _StateProofFields extends basemodel_1.default {
        /**
         * Creates a new `StateProofFields` object.
         * @param partProofs - (P)
         * @param positionsToReveal - (pr) Sequence of reveal positions.
         * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual
         * msgp
         * @param saltVersion - (v) Salt version of the merkle signature.
         * @param sigCommit - (c)
         * @param sigProofs - (S)
         * @param signedWeight - (w)
         */
        constructor({ partProofs, positionsToReveal, reveals, saltVersion, sigCommit, sigProofs, signedWeight }) {
          super();
          this.partProofs = partProofs;
          this.positionsToReveal = positionsToReveal;
          this.reveals = reveals;
          this.saltVersion = saltVersion;
          this.sigCommit = typeof sigCommit === "string" ? new Uint8Array(buffer_1.Buffer.from(sigCommit, "base64")) : sigCommit;
          this.sigProofs = sigProofs;
          this.signedWeight = signedWeight;
          this.attribute_map = {
            partProofs: "part-proofs",
            positionsToReveal: "positions-to-reveal",
            reveals: "reveals",
            saltVersion: "salt-version",
            sigCommit: "sig-commit",
            sigProofs: "sig-proofs",
            signedWeight: "signed-weight"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofFields({
            partProofs: typeof data["part-proofs"] !== "undefined" ? MerkleArrayProof.from_obj_for_encoding(data["part-proofs"]) : void 0,
            positionsToReveal: data["positions-to-reveal"],
            reveals: typeof data["reveals"] !== "undefined" ? data["reveals"].map(StateProofReveal.from_obj_for_encoding) : void 0,
            saltVersion: data["salt-version"],
            sigCommit: data["sig-commit"],
            sigProofs: typeof data["sig-proofs"] !== "undefined" ? MerkleArrayProof.from_obj_for_encoding(data["sig-proofs"]) : void 0,
            signedWeight: data["signed-weight"]
          });
        }
      };
      exports.StateProofFields = StateProofFields;
      var StateProofParticipant = class _StateProofParticipant extends basemodel_1.default {
        /**
         * Creates a new `StateProofParticipant` object.
         * @param verifier - (p)
         * @param weight - (w)
         */
        constructor({ verifier, weight }) {
          super();
          this.verifier = verifier;
          this.weight = weight;
          this.attribute_map = {
            verifier: "verifier",
            weight: "weight"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofParticipant({
            verifier: typeof data["verifier"] !== "undefined" ? StateProofVerifier.from_obj_for_encoding(data["verifier"]) : void 0,
            weight: data["weight"]
          });
        }
      };
      exports.StateProofParticipant = StateProofParticipant;
      var StateProofReveal = class _StateProofReveal extends basemodel_1.default {
        /**
         * Creates a new `StateProofReveal` object.
         * @param participant - (p)
         * @param position - The position in the signature and participants arrays corresponding to this
         * entry.
         * @param sigSlot - (s)
         */
        constructor({ participant, position, sigSlot }) {
          super();
          this.participant = participant;
          this.position = position;
          this.sigSlot = sigSlot;
          this.attribute_map = {
            participant: "participant",
            position: "position",
            sigSlot: "sig-slot"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofReveal({
            participant: typeof data["participant"] !== "undefined" ? StateProofParticipant.from_obj_for_encoding(data["participant"]) : void 0,
            position: data["position"],
            sigSlot: typeof data["sig-slot"] !== "undefined" ? StateProofSigSlot.from_obj_for_encoding(data["sig-slot"]) : void 0
          });
        }
      };
      exports.StateProofReveal = StateProofReveal;
      var StateProofSigSlot = class _StateProofSigSlot extends basemodel_1.default {
        /**
         * Creates a new `StateProofSigSlot` object.
         * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.
         * @param signature -
         */
        constructor({ lowerSigWeight, signature }) {
          super();
          this.lowerSigWeight = lowerSigWeight;
          this.signature = signature;
          this.attribute_map = {
            lowerSigWeight: "lower-sig-weight",
            signature: "signature"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofSigSlot({
            lowerSigWeight: data["lower-sig-weight"],
            signature: typeof data["signature"] !== "undefined" ? StateProofSignature.from_obj_for_encoding(data["signature"]) : void 0
          });
        }
      };
      exports.StateProofSigSlot = StateProofSigSlot;
      var StateProofSignature = class _StateProofSignature extends basemodel_1.default {
        /**
         * Creates a new `StateProofSignature` object.
         * @param falconSignature -
         * @param merkleArrayIndex -
         * @param proof -
         * @param verifyingKey - (vkey)
         */
        constructor({ falconSignature, merkleArrayIndex, proof, verifyingKey }) {
          super();
          this.falconSignature = typeof falconSignature === "string" ? new Uint8Array(buffer_1.Buffer.from(falconSignature, "base64")) : falconSignature;
          this.merkleArrayIndex = merkleArrayIndex;
          this.proof = proof;
          this.verifyingKey = typeof verifyingKey === "string" ? new Uint8Array(buffer_1.Buffer.from(verifyingKey, "base64")) : verifyingKey;
          this.attribute_map = {
            falconSignature: "falcon-signature",
            merkleArrayIndex: "merkle-array-index",
            proof: "proof",
            verifyingKey: "verifying-key"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofSignature({
            falconSignature: data["falcon-signature"],
            merkleArrayIndex: data["merkle-array-index"],
            proof: typeof data["proof"] !== "undefined" ? MerkleArrayProof.from_obj_for_encoding(data["proof"]) : void 0,
            verifyingKey: data["verifying-key"]
          });
        }
      };
      exports.StateProofSignature = StateProofSignature;
      var StateProofTracking = class _StateProofTracking extends basemodel_1.default {
        /**
         * Creates a new `StateProofTracking` object.
         * @param nextRound - (n) Next round for which we will accept a state proof transaction.
         * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the
         * StateProof round.
         * @param type - State Proof Type. Note the raw object uses map with this as key.
         * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign
         * the proof.
         */
        constructor({ nextRound, onlineTotalWeight, type, votersCommitment }) {
          super();
          this.nextRound = nextRound;
          this.onlineTotalWeight = onlineTotalWeight;
          this.type = type;
          this.votersCommitment = typeof votersCommitment === "string" ? new Uint8Array(buffer_1.Buffer.from(votersCommitment, "base64")) : votersCommitment;
          this.attribute_map = {
            nextRound: "next-round",
            onlineTotalWeight: "online-total-weight",
            type: "type",
            votersCommitment: "voters-commitment"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofTracking({
            nextRound: data["next-round"],
            onlineTotalWeight: data["online-total-weight"],
            type: data["type"],
            votersCommitment: data["voters-commitment"]
          });
        }
      };
      exports.StateProofTracking = StateProofTracking;
      var StateProofVerifier = class _StateProofVerifier extends basemodel_1.default {
        /**
         * Creates a new `StateProofVerifier` object.
         * @param commitment - (cmt) Represents the root of the vector commitment tree.
         * @param keyLifetime - (lf) Key lifetime.
         */
        constructor({ commitment, keyLifetime }) {
          super();
          this.commitment = typeof commitment === "string" ? new Uint8Array(buffer_1.Buffer.from(commitment, "base64")) : commitment;
          this.keyLifetime = keyLifetime;
          this.attribute_map = {
            commitment: "commitment",
            keyLifetime: "key-lifetime"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _StateProofVerifier({
            commitment: data["commitment"],
            keyLifetime: data["key-lifetime"]
          });
        }
      };
      exports.StateProofVerifier = StateProofVerifier;
      var StateSchema = class _StateSchema extends basemodel_1.default {
        /**
         * Creates a new `StateSchema` object.
         * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.
         * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.
         */
        constructor({ numByteSlice, numUint }) {
          super();
          this.numByteSlice = numByteSlice;
          this.numUint = numUint;
          this.attribute_map = {
            numByteSlice: "num-byte-slice",
            numUint: "num-uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["num-byte-slice"] === "undefined")
            throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);
          if (typeof data["num-uint"] === "undefined")
            throw new Error(`Response is missing required field 'num-uint': ${data}`);
          return new _StateSchema({
            numByteSlice: data["num-byte-slice"],
            numUint: data["num-uint"]
          });
        }
      };
      exports.StateSchema = StateSchema;
      var TealKeyValue = class _TealKeyValue extends basemodel_1.default {
        /**
         * Creates a new `TealKeyValue` object.
         * @param key -
         * @param value - Represents a TEAL value.
         */
        constructor({ key, value }) {
          super();
          this.key = key;
          this.value = value;
          this.attribute_map = {
            key: "key",
            value: "value"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["key"] === "undefined")
            throw new Error(`Response is missing required field 'key': ${data}`);
          if (typeof data["value"] === "undefined")
            throw new Error(`Response is missing required field 'value': ${data}`);
          return new _TealKeyValue({
            key: data["key"],
            value: TealValue.from_obj_for_encoding(data["value"])
          });
        }
      };
      exports.TealKeyValue = TealKeyValue;
      var TealValue = class _TealValue extends basemodel_1.default {
        /**
         * Creates a new `TealValue` object.
         * @param bytes - (tb) bytes value.
         * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**
         * @param uint - (ui) uint value.
         */
        constructor({ bytes, type, uint }) {
          super();
          this.bytes = bytes;
          this.type = type;
          this.uint = uint;
          this.attribute_map = {
            bytes: "bytes",
            type: "type",
            uint: "uint"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["bytes"] === "undefined")
            throw new Error(`Response is missing required field 'bytes': ${data}`);
          if (typeof data["type"] === "undefined")
            throw new Error(`Response is missing required field 'type': ${data}`);
          if (typeof data["uint"] === "undefined")
            throw new Error(`Response is missing required field 'uint': ${data}`);
          return new _TealValue({
            bytes: data["bytes"],
            type: data["type"],
            uint: data["uint"]
          });
        }
      };
      exports.TealValue = TealValue;
      var Transaction = class _Transaction extends basemodel_1.default {
        /**
         * Creates a new `Transaction` object.
         * @param fee - (fee) Transaction fee.
         * @param firstValid - (fv) First valid round for this transaction.
         * @param lastValid - (lv) Last valid round for this transaction.
         * @param sender - (snd) Sender's address.
         * @param applicationTransaction - Fields for application transactions.
         * Definition:
         * data/transactions/application.go : ApplicationCallTxnFields
         * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.
         * A zero value for asset-id indicates asset creation.
         * A zero value for the params indicates asset destruction.
         * Definition:
         * data/transactions/asset.go : AssetConfigTxnFields
         * @param assetFreezeTransaction - Fields for an asset freeze transaction.
         * Definition:
         * data/transactions/asset.go : AssetFreezeTxnFields
         * @param assetTransferTransaction - Fields for an asset transfer transaction.
         * Definition:
         * data/transactions/asset.go : AssetTransferTxnFields
         * @param authAddr - (sgnr) this is included with signed transactions when the signing address does
         * not equal the sender. The backend can use this to ensure that auth addr is equal
         * to the accounts auth addr.
         * @param closeRewards - (rc) rewards applied to close-remainder-to account.
         * @param closingAmount - (ca) closing amount for transaction.
         * @param confirmedRound - Round when the transaction was confirmed.
         * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this
         * transaction.
         * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.
         * @param genesisHash - (gh) Hash of genesis block.
         * @param genesisId - (gen) genesis block ID.
         * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this
         * transaction.
         * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates
         * that this transaction is part of a transaction group and the value is the
         * sha512/256 hash of the transactions in that group.
         * @param id - Transaction ID
         * @param innerTxns - Inner transactions produced by application execution.
         * @param intraRoundOffset - Offset into the round where this transaction was confirmed.
         * @param keyregTransaction - Fields for a keyreg transaction.
         * Definition:
         * data/transactions/keyreg.go : KeyregTxnFields
         * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of
         * transactions. If this field is nonzero, then once the transaction is confirmed,
         * it acquires the lease identified by the (Sender, Lease) pair of the transaction
         * until the LastValid round passes. While this transaction possesses the lease, no
         * other transaction specifying this lease can be confirmed.
         * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this
         * transaction.
         * @param logs - (lg) Logs for the application being executed by this transaction.
         * @param note - (note) Free form data.
         * @param paymentTransaction - Fields for a payment transaction.
         * Definition:
         * data/transactions/payment.go : PaymentTxnFields
         * @param receiverRewards - (rr) rewards applied to receiver account.
         * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be
         * updated with this value and future signatures must be signed with the key
         * represented by this address.
         * @param roundTime - Time when the block this transaction is in was confirmed.
         * @param senderRewards - (rs) rewards applied to sender account.
         * @param signature - Validation signature associated with some data. Only one of the signatures
         * should be provided.
         * @param stateProofTransaction - Fields for a state proof transaction.
         * Definition:
         * data/transactions/stateproof.go : StateProofTxnFields
         * @param txType - (type) Indicates what type of transaction this is. Different types have
         * different fields.
         * Valid types, and where their fields are stored:
         * * (pay) payment-transaction
         * * (keyreg) keyreg-transaction
         * * (acfg) asset-config-transaction
         * * (axfer) asset-transfer-transaction
         * * (afrz) asset-freeze-transaction
         * * (appl) application-transaction
         * * (stpf) state-proof-transaction
         */
        constructor({ fee, firstValid, lastValid, sender, applicationTransaction, assetConfigTransaction, assetFreezeTransaction, assetTransferTransaction, authAddr, closeRewards, closingAmount, confirmedRound, createdApplicationIndex, createdAssetIndex, genesisHash, genesisId, globalStateDelta, group, id, innerTxns, intraRoundOffset, keyregTransaction, lease, localStateDelta, logs, note, paymentTransaction, receiverRewards, rekeyTo, roundTime, senderRewards, signature, stateProofTransaction, txType }) {
          super();
          this.fee = fee;
          this.firstValid = firstValid;
          this.lastValid = lastValid;
          this.sender = sender;
          this.applicationTransaction = applicationTransaction;
          this.assetConfigTransaction = assetConfigTransaction;
          this.assetFreezeTransaction = assetFreezeTransaction;
          this.assetTransferTransaction = assetTransferTransaction;
          this.authAddr = authAddr;
          this.closeRewards = closeRewards;
          this.closingAmount = closingAmount;
          this.confirmedRound = confirmedRound;
          this.createdApplicationIndex = createdApplicationIndex;
          this.createdAssetIndex = createdAssetIndex;
          this.genesisHash = typeof genesisHash === "string" ? new Uint8Array(buffer_1.Buffer.from(genesisHash, "base64")) : genesisHash;
          this.genesisId = genesisId;
          this.globalStateDelta = globalStateDelta;
          this.group = typeof group === "string" ? new Uint8Array(buffer_1.Buffer.from(group, "base64")) : group;
          this.id = id;
          this.innerTxns = innerTxns;
          this.intraRoundOffset = intraRoundOffset;
          this.keyregTransaction = keyregTransaction;
          this.lease = typeof lease === "string" ? new Uint8Array(buffer_1.Buffer.from(lease, "base64")) : lease;
          this.localStateDelta = localStateDelta;
          this.logs = logs;
          this.note = typeof note === "string" ? new Uint8Array(buffer_1.Buffer.from(note, "base64")) : note;
          this.paymentTransaction = paymentTransaction;
          this.receiverRewards = receiverRewards;
          this.rekeyTo = rekeyTo;
          this.roundTime = roundTime;
          this.senderRewards = senderRewards;
          this.signature = signature;
          this.stateProofTransaction = stateProofTransaction;
          this.txType = txType;
          this.attribute_map = {
            fee: "fee",
            firstValid: "first-valid",
            lastValid: "last-valid",
            sender: "sender",
            applicationTransaction: "application-transaction",
            assetConfigTransaction: "asset-config-transaction",
            assetFreezeTransaction: "asset-freeze-transaction",
            assetTransferTransaction: "asset-transfer-transaction",
            authAddr: "auth-addr",
            closeRewards: "close-rewards",
            closingAmount: "closing-amount",
            confirmedRound: "confirmed-round",
            createdApplicationIndex: "created-application-index",
            createdAssetIndex: "created-asset-index",
            genesisHash: "genesis-hash",
            genesisId: "genesis-id",
            globalStateDelta: "global-state-delta",
            group: "group",
            id: "id",
            innerTxns: "inner-txns",
            intraRoundOffset: "intra-round-offset",
            keyregTransaction: "keyreg-transaction",
            lease: "lease",
            localStateDelta: "local-state-delta",
            logs: "logs",
            note: "note",
            paymentTransaction: "payment-transaction",
            receiverRewards: "receiver-rewards",
            rekeyTo: "rekey-to",
            roundTime: "round-time",
            senderRewards: "sender-rewards",
            signature: "signature",
            stateProofTransaction: "state-proof-transaction",
            txType: "tx-type"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["fee"] === "undefined")
            throw new Error(`Response is missing required field 'fee': ${data}`);
          if (typeof data["first-valid"] === "undefined")
            throw new Error(`Response is missing required field 'first-valid': ${data}`);
          if (typeof data["last-valid"] === "undefined")
            throw new Error(`Response is missing required field 'last-valid': ${data}`);
          if (typeof data["sender"] === "undefined")
            throw new Error(`Response is missing required field 'sender': ${data}`);
          return new _Transaction({
            fee: data["fee"],
            firstValid: data["first-valid"],
            lastValid: data["last-valid"],
            sender: data["sender"],
            applicationTransaction: typeof data["application-transaction"] !== "undefined" ? TransactionApplication.from_obj_for_encoding(data["application-transaction"]) : void 0,
            assetConfigTransaction: typeof data["asset-config-transaction"] !== "undefined" ? TransactionAssetConfig.from_obj_for_encoding(data["asset-config-transaction"]) : void 0,
            assetFreezeTransaction: typeof data["asset-freeze-transaction"] !== "undefined" ? TransactionAssetFreeze.from_obj_for_encoding(data["asset-freeze-transaction"]) : void 0,
            assetTransferTransaction: typeof data["asset-transfer-transaction"] !== "undefined" ? TransactionAssetTransfer.from_obj_for_encoding(data["asset-transfer-transaction"]) : void 0,
            authAddr: data["auth-addr"],
            closeRewards: data["close-rewards"],
            closingAmount: data["closing-amount"],
            confirmedRound: data["confirmed-round"],
            createdApplicationIndex: data["created-application-index"],
            createdAssetIndex: data["created-asset-index"],
            genesisHash: data["genesis-hash"],
            genesisId: data["genesis-id"],
            globalStateDelta: typeof data["global-state-delta"] !== "undefined" ? data["global-state-delta"].map(EvalDeltaKeyValue.from_obj_for_encoding) : void 0,
            group: data["group"],
            id: data["id"],
            innerTxns: typeof data["inner-txns"] !== "undefined" ? data["inner-txns"].map(_Transaction.from_obj_for_encoding) : void 0,
            intraRoundOffset: data["intra-round-offset"],
            keyregTransaction: typeof data["keyreg-transaction"] !== "undefined" ? TransactionKeyreg.from_obj_for_encoding(data["keyreg-transaction"]) : void 0,
            lease: data["lease"],
            localStateDelta: typeof data["local-state-delta"] !== "undefined" ? data["local-state-delta"].map(AccountStateDelta.from_obj_for_encoding) : void 0,
            logs: data["logs"],
            note: data["note"],
            paymentTransaction: typeof data["payment-transaction"] !== "undefined" ? TransactionPayment.from_obj_for_encoding(data["payment-transaction"]) : void 0,
            receiverRewards: data["receiver-rewards"],
            rekeyTo: data["rekey-to"],
            roundTime: data["round-time"],
            senderRewards: data["sender-rewards"],
            signature: typeof data["signature"] !== "undefined" ? TransactionSignature.from_obj_for_encoding(data["signature"]) : void 0,
            stateProofTransaction: typeof data["state-proof-transaction"] !== "undefined" ? TransactionStateProof.from_obj_for_encoding(data["state-proof-transaction"]) : void 0,
            txType: data["tx-type"]
          });
        }
      };
      exports.Transaction = Transaction;
      var TransactionApplication = class _TransactionApplication extends basemodel_1.default {
        /**
         * Creates a new `TransactionApplication` object.
         * @param applicationId - (apid) ID of the application being configured or empty if creating.
         * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the
         * application's approval-program and clear-state-program.
         * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's
         * approval-program and clear-state-program.
         * @param approvalProgram - (apap) Logic executed for every application transaction, except when
         * on-completion is set to "clear". It can read and write global state for the
         * application, as well as account-specific local state. Approval programs may
         * reject the transaction.
         * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to
         * "clear". It can read and write global state for the application, as well as
         * account-specific local state. Clear state programs cannot reject the
         * transaction.
         * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.
         * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global
         * states may be accessed by this application's approval-program and
         * clear-state-program. The access is read-only.
         * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's
         * ApprovalProgram and ClearStateProgram. The access is read-only.
         * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas
         * determine how much storage may be used in a local-state or global-state for an
         * application. The more space used, the larger minimum balance must be maintained
         * in the account holding the data.
         * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas
         * determine how much storage may be used in a local-state or global-state for an
         * application. The more space used, the larger minimum balance must be maintained
         * in the account holding the data.
         * @param onCompletion - (apan) defines the what additional actions occur with the transaction.
         * Valid types:
         * * noop
         * * optin
         * * closeout
         * * clear
         * * update
         * * update
         * * delete
         */
        constructor({ applicationId, accounts, applicationArgs, approvalProgram, clearStateProgram, extraProgramPages, foreignApps, foreignAssets, globalStateSchema, localStateSchema, onCompletion }) {
          super();
          this.applicationId = applicationId;
          this.accounts = accounts;
          this.applicationArgs = applicationArgs;
          this.approvalProgram = typeof approvalProgram === "string" ? new Uint8Array(buffer_1.Buffer.from(approvalProgram, "base64")) : approvalProgram;
          this.clearStateProgram = typeof clearStateProgram === "string" ? new Uint8Array(buffer_1.Buffer.from(clearStateProgram, "base64")) : clearStateProgram;
          this.extraProgramPages = extraProgramPages;
          this.foreignApps = foreignApps;
          this.foreignAssets = foreignAssets;
          this.globalStateSchema = globalStateSchema;
          this.localStateSchema = localStateSchema;
          this.onCompletion = onCompletion;
          this.attribute_map = {
            applicationId: "application-id",
            accounts: "accounts",
            applicationArgs: "application-args",
            approvalProgram: "approval-program",
            clearStateProgram: "clear-state-program",
            extraProgramPages: "extra-program-pages",
            foreignApps: "foreign-apps",
            foreignAssets: "foreign-assets",
            globalStateSchema: "global-state-schema",
            localStateSchema: "local-state-schema",
            onCompletion: "on-completion"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["application-id"] === "undefined")
            throw new Error(`Response is missing required field 'application-id': ${data}`);
          return new _TransactionApplication({
            applicationId: data["application-id"],
            accounts: data["accounts"],
            applicationArgs: data["application-args"],
            approvalProgram: data["approval-program"],
            clearStateProgram: data["clear-state-program"],
            extraProgramPages: data["extra-program-pages"],
            foreignApps: data["foreign-apps"],
            foreignAssets: data["foreign-assets"],
            globalStateSchema: typeof data["global-state-schema"] !== "undefined" ? StateSchema.from_obj_for_encoding(data["global-state-schema"]) : void 0,
            localStateSchema: typeof data["local-state-schema"] !== "undefined" ? StateSchema.from_obj_for_encoding(data["local-state-schema"]) : void 0,
            onCompletion: data["on-completion"]
          });
        }
      };
      exports.TransactionApplication = TransactionApplication;
      var TransactionAssetConfig = class _TransactionAssetConfig extends basemodel_1.default {
        /**
         * Creates a new `TransactionAssetConfig` object.
         * @param assetId - (xaid) ID of the asset being configured or empty if creating.
         * @param params - AssetParams specifies the parameters for an asset.
         * (apar) when part of an AssetConfig transaction.
         * Definition:
         * data/transactions/asset.go : AssetParams
         */
        constructor({ assetId, params }) {
          super();
          this.assetId = assetId;
          this.params = params;
          this.attribute_map = {
            assetId: "asset-id",
            params: "params"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _TransactionAssetConfig({
            assetId: data["asset-id"],
            params: typeof data["params"] !== "undefined" ? AssetParams.from_obj_for_encoding(data["params"]) : void 0
          });
        }
      };
      exports.TransactionAssetConfig = TransactionAssetConfig;
      var TransactionAssetFreeze = class _TransactionAssetFreeze extends basemodel_1.default {
        /**
         * Creates a new `TransactionAssetFreeze` object.
         * @param address - (fadd) Address of the account whose asset is being frozen or thawed.
         * @param assetId - (faid) ID of the asset being frozen or thawed.
         * @param newFreezeStatus - (afrz) The new freeze status.
         */
        constructor({ address, assetId, newFreezeStatus }) {
          super();
          this.address = address;
          this.assetId = assetId;
          this.newFreezeStatus = newFreezeStatus;
          this.attribute_map = {
            address: "address",
            assetId: "asset-id",
            newFreezeStatus: "new-freeze-status"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["address"] === "undefined")
            throw new Error(`Response is missing required field 'address': ${data}`);
          if (typeof data["asset-id"] === "undefined")
            throw new Error(`Response is missing required field 'asset-id': ${data}`);
          if (typeof data["new-freeze-status"] === "undefined")
            throw new Error(`Response is missing required field 'new-freeze-status': ${data}`);
          return new _TransactionAssetFreeze({
            address: data["address"],
            assetId: data["asset-id"],
            newFreezeStatus: data["new-freeze-status"]
          });
        }
      };
      exports.TransactionAssetFreeze = TransactionAssetFreeze;
      var TransactionAssetTransfer = class _TransactionAssetTransfer extends basemodel_1.default {
        /**
         * Creates a new `TransactionAssetTransfer` object.
         * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates
         * that asset in the account's Assets map.
         * @param assetId - (xaid) ID of the asset being transferred.
         * @param receiver - (arcv) Recipient address of the transfer.
         * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.
         * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets
         * map, and specifies where the remaining asset holdings should be transferred.
         * It's always valid to transfer remaining asset holdings to the creator account.
         * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a
         * zero value, the real transaction sender must be the Clawback address from the
         * AssetParams.
         */
        constructor({ amount, assetId, receiver, closeAmount, closeTo, sender }) {
          super();
          this.amount = amount;
          this.assetId = assetId;
          this.receiver = receiver;
          this.closeAmount = closeAmount;
          this.closeTo = closeTo;
          this.sender = sender;
          this.attribute_map = {
            amount: "amount",
            assetId: "asset-id",
            receiver: "receiver",
            closeAmount: "close-amount",
            closeTo: "close-to",
            sender: "sender"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["asset-id"] === "undefined")
            throw new Error(`Response is missing required field 'asset-id': ${data}`);
          if (typeof data["receiver"] === "undefined")
            throw new Error(`Response is missing required field 'receiver': ${data}`);
          return new _TransactionAssetTransfer({
            amount: data["amount"],
            assetId: data["asset-id"],
            receiver: data["receiver"],
            closeAmount: data["close-amount"],
            closeTo: data["close-to"],
            sender: data["sender"]
          });
        }
      };
      exports.TransactionAssetTransfer = TransactionAssetTransfer;
      var TransactionKeyreg = class _TransactionKeyreg extends basemodel_1.default {
        /**
         * Creates a new `TransactionKeyreg` object.
         * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.
         * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during
         * committee selection.
         * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.
         * @param voteFirstValid - (votefst) First round this participation key is valid.
         * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.
         * @param voteLastValid - (votelst) Last round this participation key is valid.
         * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.
         */
        constructor({ nonParticipation, selectionParticipationKey, stateProofKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey }) {
          super();
          this.nonParticipation = nonParticipation;
          this.selectionParticipationKey = typeof selectionParticipationKey === "string" ? new Uint8Array(buffer_1.Buffer.from(selectionParticipationKey, "base64")) : selectionParticipationKey;
          this.stateProofKey = typeof stateProofKey === "string" ? new Uint8Array(buffer_1.Buffer.from(stateProofKey, "base64")) : stateProofKey;
          this.voteFirstValid = voteFirstValid;
          this.voteKeyDilution = voteKeyDilution;
          this.voteLastValid = voteLastValid;
          this.voteParticipationKey = typeof voteParticipationKey === "string" ? new Uint8Array(buffer_1.Buffer.from(voteParticipationKey, "base64")) : voteParticipationKey;
          this.attribute_map = {
            nonParticipation: "non-participation",
            selectionParticipationKey: "selection-participation-key",
            stateProofKey: "state-proof-key",
            voteFirstValid: "vote-first-valid",
            voteKeyDilution: "vote-key-dilution",
            voteLastValid: "vote-last-valid",
            voteParticipationKey: "vote-participation-key"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _TransactionKeyreg({
            nonParticipation: data["non-participation"],
            selectionParticipationKey: data["selection-participation-key"],
            stateProofKey: data["state-proof-key"],
            voteFirstValid: data["vote-first-valid"],
            voteKeyDilution: data["vote-key-dilution"],
            voteLastValid: data["vote-last-valid"],
            voteParticipationKey: data["vote-participation-key"]
          });
        }
      };
      exports.TransactionKeyreg = TransactionKeyreg;
      var TransactionPayment = class _TransactionPayment extends basemodel_1.default {
        /**
         * Creates a new `TransactionPayment` object.
         * @param amount - (amt) number of MicroAlgos intended to be transferred.
         * @param receiver - (rcv) receiver's address.
         * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when
         * closing the sender account.
         * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all
         * remaining funds be transferred to this address.
         */
        constructor({ amount, receiver, closeAmount, closeRemainderTo }) {
          super();
          this.amount = amount;
          this.receiver = receiver;
          this.closeAmount = closeAmount;
          this.closeRemainderTo = closeRemainderTo;
          this.attribute_map = {
            amount: "amount",
            receiver: "receiver",
            closeAmount: "close-amount",
            closeRemainderTo: "close-remainder-to"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["amount"] === "undefined")
            throw new Error(`Response is missing required field 'amount': ${data}`);
          if (typeof data["receiver"] === "undefined")
            throw new Error(`Response is missing required field 'receiver': ${data}`);
          return new _TransactionPayment({
            amount: data["amount"],
            receiver: data["receiver"],
            closeAmount: data["close-amount"],
            closeRemainderTo: data["close-remainder-to"]
          });
        }
      };
      exports.TransactionPayment = TransactionPayment;
      var TransactionResponse = class _TransactionResponse extends basemodel_1.default {
        /**
         * Creates a new `TransactionResponse` object.
         * @param currentRound - Round at which the results were computed.
         * @param transaction - Contains all fields common to all transactions and serves as an envelope to all
         * transactions type. Represents both regular and inner transactions.
         * Definition:
         * data/transactions/signedtxn.go : SignedTxn
         * data/transactions/transaction.go : Transaction
         */
        constructor({ currentRound, transaction }) {
          super();
          this.currentRound = currentRound;
          this.transaction = transaction;
          this.attribute_map = {
            currentRound: "current-round",
            transaction: "transaction"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          if (typeof data["transaction"] === "undefined")
            throw new Error(`Response is missing required field 'transaction': ${data}`);
          return new _TransactionResponse({
            currentRound: data["current-round"],
            transaction: Transaction.from_obj_for_encoding(data["transaction"])
          });
        }
      };
      exports.TransactionResponse = TransactionResponse;
      var TransactionSignature = class _TransactionSignature extends basemodel_1.default {
        /**
         * Creates a new `TransactionSignature` object.
         * @param logicsig - (lsig) Programatic transaction signature.
         * Definition:
         * data/transactions/logicsig.go
         * @param multisig - (msig) structure holding multiple subsignatures.
         * Definition:
         * crypto/multisig.go : MultisigSig
         * @param sig - (sig) Standard ed25519 signature.
         */
        constructor({ logicsig, multisig, sig }) {
          super();
          this.logicsig = logicsig;
          this.multisig = multisig;
          this.sig = typeof sig === "string" ? new Uint8Array(buffer_1.Buffer.from(sig, "base64")) : sig;
          this.attribute_map = {
            logicsig: "logicsig",
            multisig: "multisig",
            sig: "sig"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _TransactionSignature({
            logicsig: typeof data["logicsig"] !== "undefined" ? TransactionSignatureLogicsig.from_obj_for_encoding(data["logicsig"]) : void 0,
            multisig: typeof data["multisig"] !== "undefined" ? TransactionSignatureMultisig.from_obj_for_encoding(data["multisig"]) : void 0,
            sig: data["sig"]
          });
        }
      };
      exports.TransactionSignature = TransactionSignature;
      var TransactionSignatureLogicsig = class _TransactionSignatureLogicsig extends basemodel_1.default {
        /**
         * Creates a new `TransactionSignatureLogicsig` object.
         * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the
         * address of ana ccount. Base64 encoded TEAL program.
         * @param args - (arg) Logic arguments, base64 encoded.
         * @param multisigSignature - (msig) structure holding multiple subsignatures.
         * Definition:
         * crypto/multisig.go : MultisigSig
         * @param signature - (sig) ed25519 signature.
         */
        constructor({ logic, args, multisigSignature, signature }) {
          super();
          this.logic = typeof logic === "string" ? new Uint8Array(buffer_1.Buffer.from(logic, "base64")) : logic;
          this.args = args;
          this.multisigSignature = multisigSignature;
          this.signature = typeof signature === "string" ? new Uint8Array(buffer_1.Buffer.from(signature, "base64")) : signature;
          this.attribute_map = {
            logic: "logic",
            args: "args",
            multisigSignature: "multisig-signature",
            signature: "signature"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["logic"] === "undefined")
            throw new Error(`Response is missing required field 'logic': ${data}`);
          return new _TransactionSignatureLogicsig({
            logic: data["logic"],
            args: data["args"],
            multisigSignature: typeof data["multisig-signature"] !== "undefined" ? TransactionSignatureMultisig.from_obj_for_encoding(data["multisig-signature"]) : void 0,
            signature: data["signature"]
          });
        }
      };
      exports.TransactionSignatureLogicsig = TransactionSignatureLogicsig;
      var TransactionSignatureMultisig = class _TransactionSignatureMultisig extends basemodel_1.default {
        /**
         * Creates a new `TransactionSignatureMultisig` object.
         * @param subsignature - (subsig) holds pairs of public key and signatures.
         * @param threshold - (thr)
         * @param version - (v)
         */
        constructor({ subsignature, threshold, version }) {
          super();
          this.subsignature = subsignature;
          this.threshold = threshold;
          this.version = version;
          this.attribute_map = {
            subsignature: "subsignature",
            threshold: "threshold",
            version: "version"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _TransactionSignatureMultisig({
            subsignature: typeof data["subsignature"] !== "undefined" ? data["subsignature"].map(TransactionSignatureMultisigSubsignature.from_obj_for_encoding) : void 0,
            threshold: data["threshold"],
            version: data["version"]
          });
        }
      };
      exports.TransactionSignatureMultisig = TransactionSignatureMultisig;
      var TransactionSignatureMultisigSubsignature = class _TransactionSignatureMultisigSubsignature extends basemodel_1.default {
        /**
         * Creates a new `TransactionSignatureMultisigSubsignature` object.
         * @param publicKey - (pk)
         * @param signature - (s)
         */
        constructor({ publicKey, signature }) {
          super();
          this.publicKey = typeof publicKey === "string" ? new Uint8Array(buffer_1.Buffer.from(publicKey, "base64")) : publicKey;
          this.signature = typeof signature === "string" ? new Uint8Array(buffer_1.Buffer.from(signature, "base64")) : signature;
          this.attribute_map = {
            publicKey: "public-key",
            signature: "signature"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _TransactionSignatureMultisigSubsignature({
            publicKey: data["public-key"],
            signature: data["signature"]
          });
        }
      };
      exports.TransactionSignatureMultisigSubsignature = TransactionSignatureMultisigSubsignature;
      var TransactionStateProof = class _TransactionStateProof extends basemodel_1.default {
        /**
         * Creates a new `TransactionStateProof` object.
         * @param message - (spmsg)
         * @param stateProof - (sp) represents a state proof.
         * Definition:
         * crypto/stateproof/structs.go : StateProof
         * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in
         * protocol/stateproof.go
         */
        constructor({ message, stateProof, stateProofType }) {
          super();
          this.message = message;
          this.stateProof = stateProof;
          this.stateProofType = stateProofType;
          this.attribute_map = {
            message: "message",
            stateProof: "state-proof",
            stateProofType: "state-proof-type"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          return new _TransactionStateProof({
            message: typeof data["message"] !== "undefined" ? IndexerStateProofMessage.from_obj_for_encoding(data["message"]) : void 0,
            stateProof: typeof data["state-proof"] !== "undefined" ? StateProofFields.from_obj_for_encoding(data["state-proof"]) : void 0,
            stateProofType: data["state-proof-type"]
          });
        }
      };
      exports.TransactionStateProof = TransactionStateProof;
      var TransactionsResponse = class _TransactionsResponse extends basemodel_1.default {
        /**
         * Creates a new `TransactionsResponse` object.
         * @param currentRound - Round at which the results were computed.
         * @param transactions -
         * @param nextToken - Used for pagination, when making another request provide this token with the
         * next parameter.
         */
        constructor({ currentRound, transactions, nextToken }) {
          super();
          this.currentRound = currentRound;
          this.transactions = transactions;
          this.nextToken = nextToken;
          this.attribute_map = {
            currentRound: "current-round",
            transactions: "transactions",
            nextToken: "next-token"
          };
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(data) {
          if (typeof data["current-round"] === "undefined")
            throw new Error(`Response is missing required field 'current-round': ${data}`);
          if (!Array.isArray(data["transactions"]))
            throw new Error(`Response is missing required array field 'transactions': ${data}`);
          return new _TransactionsResponse({
            currentRound: data["current-round"],
            transactions: data["transactions"].map(Transaction.from_obj_for_encoding),
            nextToken: data["next-token"]
          });
        }
      };
      exports.TransactionsResponse = TransactionsResponse;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationBoxByIDandName.js
  var require_lookupApplicationBoxByIDandName = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationBoxByIDandName.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var buffer_1 = require_buffer2();
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types2();
      var LookupApplicationBoxByIDandName = class extends jsonrequest_1.default {
        /**
         * Returns information about indexed application boxes.
         *
         * #### Example
         * ```typescript
         * const boxName = Buffer.from("foo");
         * const boxResponse = await indexerClient
         *        .LookupApplicationBoxByIDandName(1234, boxName)
         *        .do();
         * const boxValue = boxResponse.value;
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)
         * @oaram index - application index.
         * @category GET
         */
        constructor(c, intDecoding, index, boxName) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
          const encodedName = buffer_1.Buffer.from(boxName).toString("base64");
          this.query.name = encodeURI(`b64:${encodedName}`);
        }
        /**
         * @returns `/v2/applications/${index}/box`
         */
        path() {
          return `/v2/applications/${this.index}/box`;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.Box.from_obj_for_encoding(body);
        }
      };
      exports.default = LookupApplicationBoxByIDandName;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/searchAccounts.js
  var require_searchAccounts = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/searchAccounts.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var SearchAccounts = class extends jsonrequest_1.default {
        /**
         * @returns `/v2/accounts`
         */
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/accounts";
        }
        /**
         * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
         *
         * #### Example 1
         * ```typescript
         * const minBalance = 300000;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetID = 163650;
         * const minBalance = 300000;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .assetID(assetID)
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         * @remarks
         * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.
         *
         * @param greater
         * @category query
         */
        currencyGreaterThan(greater) {
          this.query["currency-greater-than"] = greater.toString();
          return this;
        }
        /**
         * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
         *
         * #### Example 1
         * ```typescript
         * const maxBalance = 500000;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetID = 163650;
         * const maxBalance = 500000;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .assetID(assetID)
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * @param lesser
         * @category query
         */
        currencyLessThan(lesser) {
          this.query["currency-less-than"] = lesser;
          return this;
        }
        /**
         * Maximum number of results to return.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Asset ID to filter with.
         *
         * #### Example
         * ```typescript
         * const assetID = 163650;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .assetID(assetID)
         *        .do();
         * ```
         *
         * @param id
         * @category query
         */
        assetID(id) {
          this.query["asset-id"] = id;
          return this;
        }
        /**
         * The next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         *
         * const accountsPage1 = await indexerClient
         *        .searchAccounts()
         *        .limit(maxResults)
         *        .do();
         *
         * const accountsPage2 = await indexerClient
         *        .searchAccounts()
         *        .limit(maxResults)
         *        .nextToken(accountsPage1["next-token"])
         *        .do();
         * ```
         *
         * @param nextToken - provided by the previous results
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Include results for the specified round.
         *
         * #### Example
         * ```typescript
         * const targetBlock = 18309917;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .round(targetBlock)
         *        .do();
         * ```
         * @remarks For performance reasons, this parameter may be disabled on some configurations.
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Include accounts that use this spending key.
         *
         * #### Example
         * ```typescript
         * const authAddr = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .authAddr(authAddr)
         *        .do();
         * ```
         *
         * @param authAddr
         */
        authAddr(authAddr) {
          this.query["auth-addr"] = authAddr;
          return this;
        }
        /**
         * Filter for this application.
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .applicationID(appId)
         *        .do();
         * ```
         *
         * @param applicationID
         * @category query
         */
        applicationID(applicationID) {
          this.query["application-id"] = applicationID;
          return this;
        }
        /**
         * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example 1
         * ```typescript
         * const assetId = 163650;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetId = 163650;
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .includeAll()
         *        .do();
         * ```
         *
         * @param value - default true when called without passing a value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
        /**
         * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
         *
         * #### Example 1
         * ```typescript
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .exclude("all")
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const accounts = await indexerClient
         *        .searchAccounts()
         *        .exclude("assets,created-assets")
         *        .do();
         * ```
         * @remarks By default, it behaves as exclude=none
         * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`
         * @category query
         */
        exclude(exclude) {
          this.query.exclude = exclude;
          return this;
        }
      };
      exports.default = SearchAccounts;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/searchForTransactions.js
  var require_searchForTransactions = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/searchForTransactions.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var lookupAccountTransactions_1 = require_lookupAccountTransactions();
      var SearchForTransactions = class extends jsonrequest_1.default {
        /**
         * @returns `/v2/transactions`
         */
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/transactions";
        }
        /**
         * Specifies a prefix which must be contained in the note field.
         *
         * #### Example
         * ```typescript
         * const notePrefixBase64Encoded = "Y3JlYXRl";
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .notePrefix(notePrefixBase64Encoded)
         *        .do();
         * ```
         *
         * @param prefix - base64 string or uint8array
         * @category query
         */
        notePrefix(prefix) {
          this.query["note-prefix"] = (0, lookupAccountTransactions_1.base64StringFunnel)(prefix);
          return this;
        }
        /**
         * Type of transaction to filter with.
         *
         * #### Example
         * ```typescript
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .txType("keyreg")
         *        .do();
         * ```
         *
         * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`
         * @category query
         */
        txType(type) {
          this.query["tx-type"] = type;
          return this;
        }
        /**
         * Type of signature to filter with.
         * - sig: Standard
         * - msig: MultiSig
         * - lsig: LogicSig
         *
         * #### Example
         * ```typescript
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .sigType("sig")
         *        .do();
         * ```
         *
         * @param type - one of `sig`, `msig`, `lsig`
         * @category query
         */
        sigType(type) {
          this.query["sig-type"] = type;
          return this;
        }
        /**
         * Lookup the specific transaction by ID.
         *
         * #### Example
         * ```typescript
         * const txId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .txid(txId)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`
         * @param txid
         * @category query
         */
        txid(txid) {
          this.query.txid = txid;
          return this;
        }
        /**
         * Include results for the specified round.
         *
         * #### Example
         * ```typescript
         * const targetBlock = 18309917;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .round(targetBlock)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`
         * @param round
         * @category query
         */
        round(round) {
          this.query.round = round;
          return this;
        }
        /**
         * Include results at or after the specified min-round.
         *
         * #### Example
         * ```typescript
         * const minRound = 18309917;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .minRound(minRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        minRound(round) {
          this.query["min-round"] = round;
          return this;
        }
        /**
         * Include results at or before the specified max-round.
         *
         * #### Example
         * ```typescript
         * const maxRound = 18309917;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .maxRound(maxRound)
         *        .do();
         * ```
         *
         * @param round
         * @category query
         */
        maxRound(round) {
          this.query["max-round"] = round;
          return this;
        }
        /**
         * Asset ID to filter with.
         *
         * #### Example
         * ```typescript
         * const assetID = 163650;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .assetID(assetID)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`
         * @param id
         * @category query
         */
        assetID(id) {
          this.query["asset-id"] = id;
          return this;
        }
        /**
         * Maximum number of results to return.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Include results before the given time.
         *
         * #### Example
         * ```typescript
         * const beforeTime = "2022-02-02T20:20:22.02Z";
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .beforeTime(beforeTime)
         *        .do();
         * ```
         *
         * @param before - rfc3339 string
         * @category query
         */
        beforeTime(before) {
          this.query["before-time"] = before;
          return this;
        }
        /**
         * Include results after the given time.
         *
         * #### Example
         * ```typescript
         * const afterTime = "2022-10-21T00:00:11.55Z";
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .afterTime(afterTime)
         *        .do();
         * ```
         *
         * @param after - rfc3339 string
         * @category query
         */
        afterTime(after) {
          this.query["after-time"] = after;
          return this;
        }
        /**
         * Combined with address, defines what address to filter on, as string.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const role = "freeze-target";
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .address(address)
         *        .addressRole(role)
         *        .do();
         * ```
         *
         * @param role - one of `sender`, `receiver`, `freeze-target`
         * @category query
         */
        addressRole(role) {
          this.query["address-role"] = role;
          return this;
        }
        /**
         * Only include transactions with this address in one of the transaction fields.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .address(address)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`
         * @param address
         * @category query
         */
        address(address) {
          this.query.address = address;
          return this;
        }
        /**
         * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.
         *
         * #### Example
         * ```typescript
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .excludeCloseTo(true)
         *        .do();
         * ```
         *
         * @param exclude
         * @category query
         */
        excludeCloseTo(exclude) {
          this.query["exclude-close-to"] = exclude;
          return this;
        }
        /**
         * The next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 25;
         *
         * const txnsPage1 = await indexerClient
         *        .searchForTransactions()
         *        .limit(maxResults)
         *        .do();
         *
         * const txnsPage2 = await indexerClient
         *        .searchForTransactions()
         *        .limit(maxResults)
         *        .nextToken(txnsPage1["next-token"])
         *        .do();
         * ```
         *
         * @param nextToken - provided by the previous results
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Whether or not to include rekeying transactions.
         *
         * #### Example
         * ```typescript
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .rekeyTo(false)
         *        .do();
         * ```
         *
         * @param rekeyTo
         * @category query
         */
        rekeyTo(rekeyTo) {
          this.query["rekey-to"] = rekeyTo;
          return this;
        }
        /**
         * Filter for this application.
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .applicationID(appId)
         *        .do();
         * ```
         *
         * @param applicationID
         * @category query
         */
        applicationID(applicationID) {
          this.query["application-id"] = applicationID;
          return this;
        }
        /**
         * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
         *
         * #### Example 1
         * ```typescript
         * const minBalance = 300000;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetID = 163650;
         * const minBalance = 300000;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .assetID(assetID)
         *        .currencyGreaterThan(minBalance - 1)
         *        .do();
         * ```
         *
         * @param greater
         * @category query
         */
        currencyGreaterThan(greater) {
          this.query["currency-greater-than"] = greater.toString();
          return this;
        }
        /**
         * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.
         *
         * #### Example 1
         * ```typescript
         * const maxBalance = 500000;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assetID = 163650;
         * const maxBalance = 500000;
         * const txns = await indexerClient
         *        .searchForTransactions()
         *        .assetID(assetID)
         *        .currencyLessThan(maxBalance + 1)
         *        .do();
         * ```
         *
         * @param lesser
         * @category query
         */
        currencyLessThan(lesser) {
          this.query["currency-less-than"] = lesser;
          return this;
        }
      };
      exports.default = SearchForTransactions;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/searchForAssets.js
  var require_searchForAssets = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/searchForAssets.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var SearchForAssets = class extends jsonrequest_1.default {
        /**
         * @returns `/v2/assets`
         */
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/assets";
        }
        /**
         * Limit results for pagination.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Filter just assets with the given creator address.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .creator(address)
         *        .do();
         * ```
         *
         * @param creator
         * @category query
         */
        creator(creator) {
          this.query.creator = creator;
          return this;
        }
        /**
         * Filter just assets with the given name.
         *
         * #### Example
         * ```typescript
         * const name = "Test Token";
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .name(name)
         *        .do();
         * ```
         *
         * @param name
         * @category query
         */
        name(name) {
          this.query.name = name;
          return this;
        }
        /**
         * Filter just assets with the given unit.
         *
         * #### Example
         * ```typescript
         * const unit = "test";
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .unit(unit)
         *        .do();
         * ```
         *
         * @param unit
         * @category query
         */
        unit(unit) {
          this.query.unit = unit;
          return this;
        }
        /**
         * Asset ID for filter, as int.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .index(assetId)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`
         * @param index
         * @category query
         */
        index(index) {
          this.query["asset-id"] = index;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         *
         * const assetsPage1 = await indexerClient
         *        .searchForAssets()
         *        .limit(maxResults)
         *        .do();
         *
         * const assetsPage2 = await indexerClient
         *        .searchForAssets()
         *        .limit(maxResults)
         *        .nextToken(assetsPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(nextToken) {
          this.query.next = nextToken;
          return this;
        }
        /**
         * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example 1
         * ```typescript
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const assets = await indexerClient
         *        .searchForAssets()
         *        .includeAll()
         *        .do();
         * ```
         *
         * @param value - default true when called without passing a value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
      };
      exports.default = SearchForAssets;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplications.js
  var require_searchForApplications = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplications.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var SearchForApplications = class extends jsonrequest_1.default {
        /**
         * @returns `/v2/applications`
         */
        // eslint-disable-next-line class-methods-use-this
        path() {
          return "/v2/applications";
        }
        /**
         * Application ID for filter, as int
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const apps = await indexerClient
         *        .searchForApplications()
         *        .index(appId)
         *        .do();
         * ```
         * @remarks Alternatively, use `indexerClient.lookupApplications(appId).do()`
         * @param index
         * @category query
         */
        index(index) {
          this.query["application-id"] = index;
          return this;
        }
        /**
         * Creator for filter, as string
         *
         * #### Example
         * ```typescript
         * const creator = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const apps = await indexerClient
         *        .searchForApplications()
         *        .creator(creator)
         *        .do();
         * ```
         * @param creator
         * @category query
         */
        creator(creator) {
          this.query.creator = creator;
          return this;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         *
         * const appsPage1 = await indexerClient
         *        .searchForApplications()
         *        .limit(maxResults)
         *        .do();
         *
         * const appsPage2 = await indexerClient
         *        .searchForApplications()
         *        .limit(maxResults)
         *        .nextToken(appsPage1["next-token"])
         *        .do();
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(next) {
          this.query.next = next;
          return this;
        }
        /**
         * Limit results for pagination.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const apps = await indexerClient
         *        .searchForApplications()
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        /**
         * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates
         *
         * #### Example 1
         * ```typescript
         * const apps = await indexerClient
         *        .searchForApplications()
         *        .includeAll(false)
         *        .do();
         * ```
         *
         * #### Example 2
         * ```typescript
         * const apps = await indexerClient
         *        .searchForApplications()
         *        .includeAll()
         *        .do();
         * ```
         *
         * @param value - default true when called without passing a value
         * @category query
         */
        includeAll(value = true) {
          this.query["include-all"] = value;
          return this;
        }
      };
      exports.default = SearchForApplications;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplicationBoxes.js
  var require_searchForApplicationBoxes = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplicationBoxes.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var jsonrequest_1 = __importDefault2(require_jsonrequest());
      var types_1 = require_types2();
      var SearchForApplicationBoxes = class extends jsonrequest_1.default {
        /**
         * Returns information about indexed application boxes.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const appID = 1234;
         *
         * const responsePage1 = await indexerClient
         *        .searchForApplicationBoxes(appID)
         *        .limit(maxResults)
         *        .do();
         * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);
         *
         * const responsePage2 = await indexerClient
         *        .searchForApplicationBoxes(appID)
         *        .limit(maxResults)
         *        .nextToken(responsePage1.nextToken)
         *        .do();
         * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)
         * @oaram index - application index.
         * @category GET
         */
        constructor(c, intDecoding, index) {
          super(c, intDecoding);
          this.index = index;
          this.index = index;
        }
        /**
         * @returns `/v2/applications/${index}/boxes`
         */
        path() {
          return `/v2/applications/${this.index}/boxes`;
        }
        /**
         * Specify the next page of results.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const appID = 1234;
         *
         * const responsePage1 = await indexerClient
         *        .searchForApplicationBoxes(appID)
         *        .limit(maxResults)
         *        .do();
         * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);
         *
         * const responsePage2 = await indexerClient
         *        .searchForApplicationBoxes(appID)
         *        .limit(maxResults)
         *        .nextToken(responsePage1.nextToken)
         *        .do();
         * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);
         * ```
         * @param nextToken - provided by the previous results.
         * @category query
         */
        nextToken(next) {
          this.query.next = next;
          return this;
        }
        /**
         * Limit results for pagination.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const boxesResponse = await indexerClient
         *        .searchForApplicationBoxes(1234)
         *        .limit(maxResults)
         *        .do();
         * ```
         *
         * @param limit - maximum number of results to return.
         * @category query
         */
        limit(limit) {
          this.query.limit = limit;
          return this;
        }
        // eslint-disable-next-line class-methods-use-this
        prepare(body) {
          return types_1.BoxesResponse.from_obj_for_encoding(body);
        }
      };
      exports.default = SearchForApplicationBoxes;
    }
  });

  // node_modules/algosdk/dist/cjs/client/v2/indexer/indexer.js
  var require_indexer = __commonJS({
    "node_modules/algosdk/dist/cjs/client/v2/indexer/indexer.js"(exports) {
      "use strict";
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var serviceClient_1 = __importDefault2(require_serviceClient());
      var makeHealthCheck_1 = __importDefault2(require_makeHealthCheck());
      var lookupAssetBalances_1 = __importDefault2(require_lookupAssetBalances());
      var lookupAssetTransactions_1 = __importDefault2(require_lookupAssetTransactions());
      var lookupAccountTransactions_1 = __importDefault2(require_lookupAccountTransactions());
      var lookupBlock_1 = __importDefault2(require_lookupBlock());
      var lookupTransactionByID_1 = __importDefault2(require_lookupTransactionByID());
      var lookupAccountByID_1 = __importDefault2(require_lookupAccountByID());
      var lookupAccountAssets_1 = __importDefault2(require_lookupAccountAssets());
      var lookupAccountCreatedAssets_1 = __importDefault2(require_lookupAccountCreatedAssets());
      var lookupAccountAppLocalStates_1 = __importDefault2(require_lookupAccountAppLocalStates());
      var lookupAccountCreatedApplications_1 = __importDefault2(require_lookupAccountCreatedApplications());
      var lookupAssetByID_1 = __importDefault2(require_lookupAssetByID());
      var lookupApplications_1 = __importDefault2(require_lookupApplications());
      var lookupApplicationLogs_1 = __importDefault2(require_lookupApplicationLogs());
      var lookupApplicationBoxByIDandName_1 = __importDefault2(require_lookupApplicationBoxByIDandName());
      var searchAccounts_1 = __importDefault2(require_searchAccounts());
      var searchForTransactions_1 = __importDefault2(require_searchForTransactions());
      var searchForAssets_1 = __importDefault2(require_searchForAssets());
      var searchForApplications_1 = __importDefault2(require_searchForApplications());
      var searchForApplicationBoxes_1 = __importDefault2(require_searchForApplicationBoxes());
      var IndexerClient = class extends serviceClient_1.default {
        /**
         * Create an IndexerClient from
         * * either a token, baseServer, port, and optional headers
         * * or a base client server for interoperability with external dApp wallets
         *
         * #### Example
         * ```typescript
         * const token  = "";
         * const server = "http://localhost";
         * const port   = 8980;
         * const indexerClient = new algosdk.Indexer(token, server, port);
         * ```
         * @remarks
         * The above configuration is for a sandbox private network.
         * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.
         *
         * @param tokenOrBaseClient - The API token for the Indexer API
         * @param baseServer - REST endpoint
         * @param port - Port number if specifically configured by the server
         * @param headers - Optional headers
         */
        constructor(tokenOrBaseClient, baseServer = "http://127.0.0.1", port = 8080, headers = {}) {
          super("X-Indexer-API-Token", tokenOrBaseClient, baseServer, port, headers);
        }
        /**
         * Returns the health object for the service.
         * Returns 200 if healthy.
         *
         * #### Example
         * ```typescript
         * const health = await indexerClient.makeHealthCheck().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)
         * @category GET
         */
        makeHealthCheck() {
          return new makeHealthCheck_1.default(this.c, this.intDecoding);
        }
        /**
         * Returns the list of accounts who hold the given asset and their balance.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)
         * @param index - The asset ID to look up.
         * @category GET
         */
        lookupAssetBalances(index) {
          return new lookupAssetBalances_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Returns transactions relating to the given asset.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)
         * @param index - The asset ID to look up.
         * @category GET
         */
        lookupAssetTransactions(index) {
          return new lookupAssetTransactions_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Returns transactions relating to the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)
         * @param account - The address of the account.
         * @category GET
         */
        lookupAccountTransactions(account) {
          return new lookupAccountTransactions_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns the block for the passed round.
         *
         * #### Example
         * ```typescript
         * const targetBlock = 18309917;
         * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)
         * @param round - The number of the round to look up.
         * @category GET
         */
        lookupBlock(round) {
          return new lookupBlock_1.default(this.c, this.intDecoding, round);
        }
        /**
         * Returns information about the given transaction.
         *
         * #### Example
         * ```typescript
         * const txnId = "MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA";
         * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)
         * @param txID - The ID of the transaction to look up.
         * @category GET
         */
        lookupTransactionByID(txID) {
          return new lookupTransactionByID_1.default(this.c, this.intDecoding, txID);
        }
        /**
         * Returns information about the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountInfo = await indexerClient.lookupAccountByID(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)
         * @param account - The address of the account to look up.
         * @category GET
         */
        lookupAccountByID(account) {
          return new lookupAccountByID_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns asset about the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAssets = await indexerClient.lookupAccountAssets(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)
         * @param account - The address of the account to look up.
         * @category GET
         */
        lookupAccountAssets(account) {
          return new lookupAccountAssets_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns asset information created by the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)
         * @param account - The address of the account to look up.
         * @category GET
         */
        lookupAccountCreatedAssets(account) {
          return new lookupAccountCreatedAssets_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns application local state about the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)
         * @param account - The address of the account to look up.
         * @category GET
         */
        lookupAccountAppLocalStates(account) {
          return new lookupAccountAppLocalStates_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns application information created by the given account.
         *
         * #### Example
         * ```typescript
         * const address = "XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA";
         * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)
         * @param account - The address of the account to look up.
         * @category GET
         */
        lookupAccountCreatedApplications(account) {
          return new lookupAccountCreatedApplications_1.default(this.c, this.intDecoding, account);
        }
        /**
         * Returns information about the passed asset.
         *
         * #### Example
         * ```typescript
         * const assetId = 163650;
         * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)
         * @param index - The ID of the asset ot look up.
         * @category GET
         */
        lookupAssetByID(index) {
          return new lookupAssetByID_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Returns information about the passed application.
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const appInfo = await indexerClient.lookupApplications(appId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)
         * @param index - The ID of the application to look up.
         * @category GET
         */
        lookupApplications(index) {
          return new lookupApplications_1.default(this.c, this.intDecoding, index);
        }
        /**
         * Returns log messages generated by the passed in application.
         *
         * #### Example
         * ```typescript
         * const appId = 60553466;
         * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)
         * @param appID - The ID of the application which generated the logs.
         * @category GET
         */
        lookupApplicationLogs(appID) {
          return new lookupApplicationLogs_1.default(this.c, this.intDecoding, appID);
        }
        /**
         * Returns information about indexed accounts.
         *
         * #### Example
         * ```typescript
         * const accounts = await indexerClient.searchAccounts().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)
         * @category GET
         */
        searchAccounts() {
          return new searchAccounts_1.default(this.c, this.intDecoding);
        }
        /**
         * Returns information about indexed transactions.
         *
         * #### Example
         * ```typescript
         * const txns = await indexerClient.searchForTransactions().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)
         * @category GET
         */
        searchForTransactions() {
          return new searchForTransactions_1.default(this.c, this.intDecoding);
        }
        /**
         * Returns information about indexed assets.
         *
         * #### Example
         * ```typescript
         * const assets = await indexerClient.searchForAssets().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)
         * @category GET
         */
        searchForAssets() {
          return new searchForAssets_1.default(this.c, this.intDecoding);
        }
        /**
         * Returns information about indexed applications.
         *
         * #### Example
         * ```typescript
         * const apps = await indexerClient.searchForApplications().do();
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)
         * @category GET
         */
        searchForApplications() {
          return new searchForApplications_1.default(this.c, this.intDecoding);
        }
        /**
         * Returns information about indexed application boxes.
         *
         * #### Example
         * ```typescript
         * const maxResults = 20;
         * const appID = 1234;
         *
         * const responsePage1 = await indexerClient
         *        .searchForApplicationBoxes(appID)
         *        .limit(maxResults)
         *        .do();
         * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);
         *
         * const responsePage2 = await indexerClient
         *        .searchForApplicationBoxes(appID)
         *        .limit(maxResults)
         *        .nextToken(responsePage1.nextToken)
         *        .do();
         * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)
         * @param appID - The ID of the application with boxes.
         * @category GET
         */
        searchForApplicationBoxes(appID) {
          return new searchForApplicationBoxes_1.default(this.c, this.intDecoding, appID);
        }
        /**
         * Returns information about the application box given its name.
         *
         * #### Example
         * ```typescript
         * const boxName = Buffer.from("foo");
         * const boxResponse = await indexerClient
         *        .LookupApplicationBoxByIDandName(1234, boxName)
         *        .do();
         * const boxValue = boxResponse.value;
         * ```
         *
         * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)
         * @param appID - The ID of the application with boxes.
         * @category GET
         */
        lookupApplicationBoxByIDandName(appID, boxName) {
          return new lookupApplicationBoxByIDandName_1.default(this.c, this.intDecoding, appID, boxName);
        }
      };
      exports.default = IndexerClient;
    }
  });

  // node_modules/algosdk/dist/cjs/wait.js
  var require_wait = __commonJS({
    "node_modules/algosdk/dist/cjs/wait.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.waitForConfirmation = void 0;
      async function waitForConfirmation(client, txid, waitRounds) {
        const status = await client.status().do();
        if (typeof status === "undefined") {
          throw new Error("Unable to get node status");
        }
        const startRound = status["last-round"] + 1;
        let currentRound = startRound;
        while (currentRound < startRound + waitRounds) {
          let poolError = false;
          try {
            const pendingInfo = await client.pendingTransactionInformation(txid).do();
            if (pendingInfo["confirmed-round"]) {
              return pendingInfo;
            }
            if (pendingInfo["pool-error"]) {
              poolError = true;
              throw new Error(`Transaction Rejected: ${pendingInfo["pool-error"]}`);
            }
          } catch (err) {
            if (poolError) {
              throw err;
            }
          }
          await client.statusAfterBlock(currentRound).do();
          currentRound += 1;
        }
        throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);
      }
      exports.waitForConfirmation = waitForConfirmation;
    }
  });

  // node_modules/algosdk/dist/cjs/encoding/bigint.js
  var require_bigint = __commonJS({
    "node_modules/algosdk/dist/cjs/encoding/bigint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.bytesToBigInt = exports.bigIntToBytes = void 0;
      var buffer_1 = require_buffer2();
      function bigIntToBytes(bi, size) {
        let hex = bi.toString(16);
        if (hex.length !== size * 2) {
          hex = hex.padStart(size * 2, "0");
        }
        const byteArray = new Uint8Array(hex.length / 2);
        for (let i = 0, j = 0; i < hex.length / 2; i++, j += 2) {
          byteArray[i] = parseInt(hex.slice(j, j + 2), 16);
        }
        return byteArray;
      }
      exports.bigIntToBytes = bigIntToBytes;
      function bytesToBigInt(bytes) {
        let res = BigInt(0);
        const buf = buffer_1.Buffer.from(bytes);
        for (let i = 0; i < bytes.length; i++) {
          res = BigInt(Number(buf.readUIntBE(i, 1))) + res * BigInt(256);
        }
        return res;
      }
      exports.bytesToBigInt = bytesToBigInt;
    }
  });

  // node_modules/algosdk/dist/cjs/account.js
  var require_account = __commonJS({
    "node_modules/algosdk/dist/cjs/account.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var nacl = __importStar2(require_naclWrappers());
      var address = __importStar2(require_address());
      function generateAccount() {
        const keys = nacl.keyPair();
        const encodedPk = address.encodeAddress(keys.publicKey);
        return { addr: encodedPk, sk: keys.secretKey };
      }
      exports.default = generateAccount;
    }
  });

  // node_modules/algosdk/dist/cjs/mnemonic/wordlists/english.js
  var require_english = __commonJS({
    "node_modules/algosdk/dist/cjs/mnemonic/wordlists/english.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var english = [
        "abandon",
        "ability",
        "able",
        "about",
        "above",
        "absent",
        "absorb",
        "abstract",
        "absurd",
        "abuse",
        "access",
        "accident",
        "account",
        "accuse",
        "achieve",
        "acid",
        "acoustic",
        "acquire",
        "across",
        "act",
        "action",
        "actor",
        "actress",
        "actual",
        "adapt",
        "add",
        "addict",
        "address",
        "adjust",
        "admit",
        "adult",
        "advance",
        "advice",
        "aerobic",
        "affair",
        "afford",
        "afraid",
        "again",
        "age",
        "agent",
        "agree",
        "ahead",
        "aim",
        "air",
        "airport",
        "aisle",
        "alarm",
        "album",
        "alcohol",
        "alert",
        "alien",
        "all",
        "alley",
        "allow",
        "almost",
        "alone",
        "alpha",
        "already",
        "also",
        "alter",
        "always",
        "amateur",
        "amazing",
        "among",
        "amount",
        "amused",
        "analyst",
        "anchor",
        "ancient",
        "anger",
        "angle",
        "angry",
        "animal",
        "ankle",
        "announce",
        "annual",
        "another",
        "answer",
        "antenna",
        "antique",
        "anxiety",
        "any",
        "apart",
        "apology",
        "appear",
        "apple",
        "approve",
        "april",
        "arch",
        "arctic",
        "area",
        "arena",
        "argue",
        "arm",
        "armed",
        "armor",
        "army",
        "around",
        "arrange",
        "arrest",
        "arrive",
        "arrow",
        "art",
        "artefact",
        "artist",
        "artwork",
        "ask",
        "aspect",
        "assault",
        "asset",
        "assist",
        "assume",
        "asthma",
        "athlete",
        "atom",
        "attack",
        "attend",
        "attitude",
        "attract",
        "auction",
        "audit",
        "august",
        "aunt",
        "author",
        "auto",
        "autumn",
        "average",
        "avocado",
        "avoid",
        "awake",
        "aware",
        "away",
        "awesome",
        "awful",
        "awkward",
        "axis",
        "baby",
        "bachelor",
        "bacon",
        "badge",
        "bag",
        "balance",
        "balcony",
        "ball",
        "bamboo",
        "banana",
        "banner",
        "bar",
        "barely",
        "bargain",
        "barrel",
        "base",
        "basic",
        "basket",
        "battle",
        "beach",
        "bean",
        "beauty",
        "because",
        "become",
        "beef",
        "before",
        "begin",
        "behave",
        "behind",
        "believe",
        "below",
        "belt",
        "bench",
        "benefit",
        "best",
        "betray",
        "better",
        "between",
        "beyond",
        "bicycle",
        "bid",
        "bike",
        "bind",
        "biology",
        "bird",
        "birth",
        "bitter",
        "black",
        "blade",
        "blame",
        "blanket",
        "blast",
        "bleak",
        "bless",
        "blind",
        "blood",
        "blossom",
        "blouse",
        "blue",
        "blur",
        "blush",
        "board",
        "boat",
        "body",
        "boil",
        "bomb",
        "bone",
        "bonus",
        "book",
        "boost",
        "border",
        "boring",
        "borrow",
        "boss",
        "bottom",
        "bounce",
        "box",
        "boy",
        "bracket",
        "brain",
        "brand",
        "brass",
        "brave",
        "bread",
        "breeze",
        "brick",
        "bridge",
        "brief",
        "bright",
        "bring",
        "brisk",
        "broccoli",
        "broken",
        "bronze",
        "broom",
        "brother",
        "brown",
        "brush",
        "bubble",
        "buddy",
        "budget",
        "buffalo",
        "build",
        "bulb",
        "bulk",
        "bullet",
        "bundle",
        "bunker",
        "burden",
        "burger",
        "burst",
        "bus",
        "business",
        "busy",
        "butter",
        "buyer",
        "buzz",
        "cabbage",
        "cabin",
        "cable",
        "cactus",
        "cage",
        "cake",
        "call",
        "calm",
        "camera",
        "camp",
        "can",
        "canal",
        "cancel",
        "candy",
        "cannon",
        "canoe",
        "canvas",
        "canyon",
        "capable",
        "capital",
        "captain",
        "car",
        "carbon",
        "card",
        "cargo",
        "carpet",
        "carry",
        "cart",
        "case",
        "cash",
        "casino",
        "castle",
        "casual",
        "cat",
        "catalog",
        "catch",
        "category",
        "cattle",
        "caught",
        "cause",
        "caution",
        "cave",
        "ceiling",
        "celery",
        "cement",
        "census",
        "century",
        "cereal",
        "certain",
        "chair",
        "chalk",
        "champion",
        "change",
        "chaos",
        "chapter",
        "charge",
        "chase",
        "chat",
        "cheap",
        "check",
        "cheese",
        "chef",
        "cherry",
        "chest",
        "chicken",
        "chief",
        "child",
        "chimney",
        "choice",
        "choose",
        "chronic",
        "chuckle",
        "chunk",
        "churn",
        "cigar",
        "cinnamon",
        "circle",
        "citizen",
        "city",
        "civil",
        "claim",
        "clap",
        "clarify",
        "claw",
        "clay",
        "clean",
        "clerk",
        "clever",
        "click",
        "client",
        "cliff",
        "climb",
        "clinic",
        "clip",
        "clock",
        "clog",
        "close",
        "cloth",
        "cloud",
        "clown",
        "club",
        "clump",
        "cluster",
        "clutch",
        "coach",
        "coast",
        "coconut",
        "code",
        "coffee",
        "coil",
        "coin",
        "collect",
        "color",
        "column",
        "combine",
        "come",
        "comfort",
        "comic",
        "common",
        "company",
        "concert",
        "conduct",
        "confirm",
        "congress",
        "connect",
        "consider",
        "control",
        "convince",
        "cook",
        "cool",
        "copper",
        "copy",
        "coral",
        "core",
        "corn",
        "correct",
        "cost",
        "cotton",
        "couch",
        "country",
        "couple",
        "course",
        "cousin",
        "cover",
        "coyote",
        "crack",
        "cradle",
        "craft",
        "cram",
        "crane",
        "crash",
        "crater",
        "crawl",
        "crazy",
        "cream",
        "credit",
        "creek",
        "crew",
        "cricket",
        "crime",
        "crisp",
        "critic",
        "crop",
        "cross",
        "crouch",
        "crowd",
        "crucial",
        "cruel",
        "cruise",
        "crumble",
        "crunch",
        "crush",
        "cry",
        "crystal",
        "cube",
        "culture",
        "cup",
        "cupboard",
        "curious",
        "current",
        "curtain",
        "curve",
        "cushion",
        "custom",
        "cute",
        "cycle",
        "dad",
        "damage",
        "damp",
        "dance",
        "danger",
        "daring",
        "dash",
        "daughter",
        "dawn",
        "day",
        "deal",
        "debate",
        "debris",
        "decade",
        "december",
        "decide",
        "decline",
        "decorate",
        "decrease",
        "deer",
        "defense",
        "define",
        "defy",
        "degree",
        "delay",
        "deliver",
        "demand",
        "demise",
        "denial",
        "dentist",
        "deny",
        "depart",
        "depend",
        "deposit",
        "depth",
        "deputy",
        "derive",
        "describe",
        "desert",
        "design",
        "desk",
        "despair",
        "destroy",
        "detail",
        "detect",
        "develop",
        "device",
        "devote",
        "diagram",
        "dial",
        "diamond",
        "diary",
        "dice",
        "diesel",
        "diet",
        "differ",
        "digital",
        "dignity",
        "dilemma",
        "dinner",
        "dinosaur",
        "direct",
        "dirt",
        "disagree",
        "discover",
        "disease",
        "dish",
        "dismiss",
        "disorder",
        "display",
        "distance",
        "divert",
        "divide",
        "divorce",
        "dizzy",
        "doctor",
        "document",
        "dog",
        "doll",
        "dolphin",
        "domain",
        "donate",
        "donkey",
        "donor",
        "door",
        "dose",
        "double",
        "dove",
        "draft",
        "dragon",
        "drama",
        "drastic",
        "draw",
        "dream",
        "dress",
        "drift",
        "drill",
        "drink",
        "drip",
        "drive",
        "drop",
        "drum",
        "dry",
        "duck",
        "dumb",
        "dune",
        "during",
        "dust",
        "dutch",
        "duty",
        "dwarf",
        "dynamic",
        "eager",
        "eagle",
        "early",
        "earn",
        "earth",
        "easily",
        "east",
        "easy",
        "echo",
        "ecology",
        "economy",
        "edge",
        "edit",
        "educate",
        "effort",
        "egg",
        "eight",
        "either",
        "elbow",
        "elder",
        "electric",
        "elegant",
        "element",
        "elephant",
        "elevator",
        "elite",
        "else",
        "embark",
        "embody",
        "embrace",
        "emerge",
        "emotion",
        "employ",
        "empower",
        "empty",
        "enable",
        "enact",
        "end",
        "endless",
        "endorse",
        "enemy",
        "energy",
        "enforce",
        "engage",
        "engine",
        "enhance",
        "enjoy",
        "enlist",
        "enough",
        "enrich",
        "enroll",
        "ensure",
        "enter",
        "entire",
        "entry",
        "envelope",
        "episode",
        "equal",
        "equip",
        "era",
        "erase",
        "erode",
        "erosion",
        "error",
        "erupt",
        "escape",
        "essay",
        "essence",
        "estate",
        "eternal",
        "ethics",
        "evidence",
        "evil",
        "evoke",
        "evolve",
        "exact",
        "example",
        "excess",
        "exchange",
        "excite",
        "exclude",
        "excuse",
        "execute",
        "exercise",
        "exhaust",
        "exhibit",
        "exile",
        "exist",
        "exit",
        "exotic",
        "expand",
        "expect",
        "expire",
        "explain",
        "expose",
        "express",
        "extend",
        "extra",
        "eye",
        "eyebrow",
        "fabric",
        "face",
        "faculty",
        "fade",
        "faint",
        "faith",
        "fall",
        "false",
        "fame",
        "family",
        "famous",
        "fan",
        "fancy",
        "fantasy",
        "farm",
        "fashion",
        "fat",
        "fatal",
        "father",
        "fatigue",
        "fault",
        "favorite",
        "feature",
        "february",
        "federal",
        "fee",
        "feed",
        "feel",
        "female",
        "fence",
        "festival",
        "fetch",
        "fever",
        "few",
        "fiber",
        "fiction",
        "field",
        "figure",
        "file",
        "film",
        "filter",
        "final",
        "find",
        "fine",
        "finger",
        "finish",
        "fire",
        "firm",
        "first",
        "fiscal",
        "fish",
        "fit",
        "fitness",
        "fix",
        "flag",
        "flame",
        "flash",
        "flat",
        "flavor",
        "flee",
        "flight",
        "flip",
        "float",
        "flock",
        "floor",
        "flower",
        "fluid",
        "flush",
        "fly",
        "foam",
        "focus",
        "fog",
        "foil",
        "fold",
        "follow",
        "food",
        "foot",
        "force",
        "forest",
        "forget",
        "fork",
        "fortune",
        "forum",
        "forward",
        "fossil",
        "foster",
        "found",
        "fox",
        "fragile",
        "frame",
        "frequent",
        "fresh",
        "friend",
        "fringe",
        "frog",
        "front",
        "frost",
        "frown",
        "frozen",
        "fruit",
        "fuel",
        "fun",
        "funny",
        "furnace",
        "fury",
        "future",
        "gadget",
        "gain",
        "galaxy",
        "gallery",
        "game",
        "gap",
        "garage",
        "garbage",
        "garden",
        "garlic",
        "garment",
        "gas",
        "gasp",
        "gate",
        "gather",
        "gauge",
        "gaze",
        "general",
        "genius",
        "genre",
        "gentle",
        "genuine",
        "gesture",
        "ghost",
        "giant",
        "gift",
        "giggle",
        "ginger",
        "giraffe",
        "girl",
        "give",
        "glad",
        "glance",
        "glare",
        "glass",
        "glide",
        "glimpse",
        "globe",
        "gloom",
        "glory",
        "glove",
        "glow",
        "glue",
        "goat",
        "goddess",
        "gold",
        "good",
        "goose",
        "gorilla",
        "gospel",
        "gossip",
        "govern",
        "gown",
        "grab",
        "grace",
        "grain",
        "grant",
        "grape",
        "grass",
        "gravity",
        "great",
        "green",
        "grid",
        "grief",
        "grit",
        "grocery",
        "group",
        "grow",
        "grunt",
        "guard",
        "guess",
        "guide",
        "guilt",
        "guitar",
        "gun",
        "gym",
        "habit",
        "hair",
        "half",
        "hammer",
        "hamster",
        "hand",
        "happy",
        "harbor",
        "hard",
        "harsh",
        "harvest",
        "hat",
        "have",
        "hawk",
        "hazard",
        "head",
        "health",
        "heart",
        "heavy",
        "hedgehog",
        "height",
        "hello",
        "helmet",
        "help",
        "hen",
        "hero",
        "hidden",
        "high",
        "hill",
        "hint",
        "hip",
        "hire",
        "history",
        "hobby",
        "hockey",
        "hold",
        "hole",
        "holiday",
        "hollow",
        "home",
        "honey",
        "hood",
        "hope",
        "horn",
        "horror",
        "horse",
        "hospital",
        "host",
        "hotel",
        "hour",
        "hover",
        "hub",
        "huge",
        "human",
        "humble",
        "humor",
        "hundred",
        "hungry",
        "hunt",
        "hurdle",
        "hurry",
        "hurt",
        "husband",
        "hybrid",
        "ice",
        "icon",
        "idea",
        "identify",
        "idle",
        "ignore",
        "ill",
        "illegal",
        "illness",
        "image",
        "imitate",
        "immense",
        "immune",
        "impact",
        "impose",
        "improve",
        "impulse",
        "inch",
        "include",
        "income",
        "increase",
        "index",
        "indicate",
        "indoor",
        "industry",
        "infant",
        "inflict",
        "inform",
        "inhale",
        "inherit",
        "initial",
        "inject",
        "injury",
        "inmate",
        "inner",
        "innocent",
        "input",
        "inquiry",
        "insane",
        "insect",
        "inside",
        "inspire",
        "install",
        "intact",
        "interest",
        "into",
        "invest",
        "invite",
        "involve",
        "iron",
        "island",
        "isolate",
        "issue",
        "item",
        "ivory",
        "jacket",
        "jaguar",
        "jar",
        "jazz",
        "jealous",
        "jeans",
        "jelly",
        "jewel",
        "job",
        "join",
        "joke",
        "journey",
        "joy",
        "judge",
        "juice",
        "jump",
        "jungle",
        "junior",
        "junk",
        "just",
        "kangaroo",
        "keen",
        "keep",
        "ketchup",
        "key",
        "kick",
        "kid",
        "kidney",
        "kind",
        "kingdom",
        "kiss",
        "kit",
        "kitchen",
        "kite",
        "kitten",
        "kiwi",
        "knee",
        "knife",
        "knock",
        "know",
        "lab",
        "label",
        "labor",
        "ladder",
        "lady",
        "lake",
        "lamp",
        "language",
        "laptop",
        "large",
        "later",
        "latin",
        "laugh",
        "laundry",
        "lava",
        "law",
        "lawn",
        "lawsuit",
        "layer",
        "lazy",
        "leader",
        "leaf",
        "learn",
        "leave",
        "lecture",
        "left",
        "leg",
        "legal",
        "legend",
        "leisure",
        "lemon",
        "lend",
        "length",
        "lens",
        "leopard",
        "lesson",
        "letter",
        "level",
        "liar",
        "liberty",
        "library",
        "license",
        "life",
        "lift",
        "light",
        "like",
        "limb",
        "limit",
        "link",
        "lion",
        "liquid",
        "list",
        "little",
        "live",
        "lizard",
        "load",
        "loan",
        "lobster",
        "local",
        "lock",
        "logic",
        "lonely",
        "long",
        "loop",
        "lottery",
        "loud",
        "lounge",
        "love",
        "loyal",
        "lucky",
        "luggage",
        "lumber",
        "lunar",
        "lunch",
        "luxury",
        "lyrics",
        "machine",
        "mad",
        "magic",
        "magnet",
        "maid",
        "mail",
        "main",
        "major",
        "make",
        "mammal",
        "man",
        "manage",
        "mandate",
        "mango",
        "mansion",
        "manual",
        "maple",
        "marble",
        "march",
        "margin",
        "marine",
        "market",
        "marriage",
        "mask",
        "mass",
        "master",
        "match",
        "material",
        "math",
        "matrix",
        "matter",
        "maximum",
        "maze",
        "meadow",
        "mean",
        "measure",
        "meat",
        "mechanic",
        "medal",
        "media",
        "melody",
        "melt",
        "member",
        "memory",
        "mention",
        "menu",
        "mercy",
        "merge",
        "merit",
        "merry",
        "mesh",
        "message",
        "metal",
        "method",
        "middle",
        "midnight",
        "milk",
        "million",
        "mimic",
        "mind",
        "minimum",
        "minor",
        "minute",
        "miracle",
        "mirror",
        "misery",
        "miss",
        "mistake",
        "mix",
        "mixed",
        "mixture",
        "mobile",
        "model",
        "modify",
        "mom",
        "moment",
        "monitor",
        "monkey",
        "monster",
        "month",
        "moon",
        "moral",
        "more",
        "morning",
        "mosquito",
        "mother",
        "motion",
        "motor",
        "mountain",
        "mouse",
        "move",
        "movie",
        "much",
        "muffin",
        "mule",
        "multiply",
        "muscle",
        "museum",
        "mushroom",
        "music",
        "must",
        "mutual",
        "myself",
        "mystery",
        "myth",
        "naive",
        "name",
        "napkin",
        "narrow",
        "nasty",
        "nation",
        "nature",
        "near",
        "neck",
        "need",
        "negative",
        "neglect",
        "neither",
        "nephew",
        "nerve",
        "nest",
        "net",
        "network",
        "neutral",
        "never",
        "news",
        "next",
        "nice",
        "night",
        "noble",
        "noise",
        "nominee",
        "noodle",
        "normal",
        "north",
        "nose",
        "notable",
        "note",
        "nothing",
        "notice",
        "novel",
        "now",
        "nuclear",
        "number",
        "nurse",
        "nut",
        "oak",
        "obey",
        "object",
        "oblige",
        "obscure",
        "observe",
        "obtain",
        "obvious",
        "occur",
        "ocean",
        "october",
        "odor",
        "off",
        "offer",
        "office",
        "often",
        "oil",
        "okay",
        "old",
        "olive",
        "olympic",
        "omit",
        "once",
        "one",
        "onion",
        "online",
        "only",
        "open",
        "opera",
        "opinion",
        "oppose",
        "option",
        "orange",
        "orbit",
        "orchard",
        "order",
        "ordinary",
        "organ",
        "orient",
        "original",
        "orphan",
        "ostrich",
        "other",
        "outdoor",
        "outer",
        "output",
        "outside",
        "oval",
        "oven",
        "over",
        "own",
        "owner",
        "oxygen",
        "oyster",
        "ozone",
        "pact",
        "paddle",
        "page",
        "pair",
        "palace",
        "palm",
        "panda",
        "panel",
        "panic",
        "panther",
        "paper",
        "parade",
        "parent",
        "park",
        "parrot",
        "party",
        "pass",
        "patch",
        "path",
        "patient",
        "patrol",
        "pattern",
        "pause",
        "pave",
        "payment",
        "peace",
        "peanut",
        "pear",
        "peasant",
        "pelican",
        "pen",
        "penalty",
        "pencil",
        "people",
        "pepper",
        "perfect",
        "permit",
        "person",
        "pet",
        "phone",
        "photo",
        "phrase",
        "physical",
        "piano",
        "picnic",
        "picture",
        "piece",
        "pig",
        "pigeon",
        "pill",
        "pilot",
        "pink",
        "pioneer",
        "pipe",
        "pistol",
        "pitch",
        "pizza",
        "place",
        "planet",
        "plastic",
        "plate",
        "play",
        "please",
        "pledge",
        "pluck",
        "plug",
        "plunge",
        "poem",
        "poet",
        "point",
        "polar",
        "pole",
        "police",
        "pond",
        "pony",
        "pool",
        "popular",
        "portion",
        "position",
        "possible",
        "post",
        "potato",
        "pottery",
        "poverty",
        "powder",
        "power",
        "practice",
        "praise",
        "predict",
        "prefer",
        "prepare",
        "present",
        "pretty",
        "prevent",
        "price",
        "pride",
        "primary",
        "print",
        "priority",
        "prison",
        "private",
        "prize",
        "problem",
        "process",
        "produce",
        "profit",
        "program",
        "project",
        "promote",
        "proof",
        "property",
        "prosper",
        "protect",
        "proud",
        "provide",
        "public",
        "pudding",
        "pull",
        "pulp",
        "pulse",
        "pumpkin",
        "punch",
        "pupil",
        "puppy",
        "purchase",
        "purity",
        "purpose",
        "purse",
        "push",
        "put",
        "puzzle",
        "pyramid",
        "quality",
        "quantum",
        "quarter",
        "question",
        "quick",
        "quit",
        "quiz",
        "quote",
        "rabbit",
        "raccoon",
        "race",
        "rack",
        "radar",
        "radio",
        "rail",
        "rain",
        "raise",
        "rally",
        "ramp",
        "ranch",
        "random",
        "range",
        "rapid",
        "rare",
        "rate",
        "rather",
        "raven",
        "raw",
        "razor",
        "ready",
        "real",
        "reason",
        "rebel",
        "rebuild",
        "recall",
        "receive",
        "recipe",
        "record",
        "recycle",
        "reduce",
        "reflect",
        "reform",
        "refuse",
        "region",
        "regret",
        "regular",
        "reject",
        "relax",
        "release",
        "relief",
        "rely",
        "remain",
        "remember",
        "remind",
        "remove",
        "render",
        "renew",
        "rent",
        "reopen",
        "repair",
        "repeat",
        "replace",
        "report",
        "require",
        "rescue",
        "resemble",
        "resist",
        "resource",
        "response",
        "result",
        "retire",
        "retreat",
        "return",
        "reunion",
        "reveal",
        "review",
        "reward",
        "rhythm",
        "rib",
        "ribbon",
        "rice",
        "rich",
        "ride",
        "ridge",
        "rifle",
        "right",
        "rigid",
        "ring",
        "riot",
        "ripple",
        "risk",
        "ritual",
        "rival",
        "river",
        "road",
        "roast",
        "robot",
        "robust",
        "rocket",
        "romance",
        "roof",
        "rookie",
        "room",
        "rose",
        "rotate",
        "rough",
        "round",
        "route",
        "royal",
        "rubber",
        "rude",
        "rug",
        "rule",
        "run",
        "runway",
        "rural",
        "sad",
        "saddle",
        "sadness",
        "safe",
        "sail",
        "salad",
        "salmon",
        "salon",
        "salt",
        "salute",
        "same",
        "sample",
        "sand",
        "satisfy",
        "satoshi",
        "sauce",
        "sausage",
        "save",
        "say",
        "scale",
        "scan",
        "scare",
        "scatter",
        "scene",
        "scheme",
        "school",
        "science",
        "scissors",
        "scorpion",
        "scout",
        "scrap",
        "screen",
        "script",
        "scrub",
        "sea",
        "search",
        "season",
        "seat",
        "second",
        "secret",
        "section",
        "security",
        "seed",
        "seek",
        "segment",
        "select",
        "sell",
        "seminar",
        "senior",
        "sense",
        "sentence",
        "series",
        "service",
        "session",
        "settle",
        "setup",
        "seven",
        "shadow",
        "shaft",
        "shallow",
        "share",
        "shed",
        "shell",
        "sheriff",
        "shield",
        "shift",
        "shine",
        "ship",
        "shiver",
        "shock",
        "shoe",
        "shoot",
        "shop",
        "short",
        "shoulder",
        "shove",
        "shrimp",
        "shrug",
        "shuffle",
        "shy",
        "sibling",
        "sick",
        "side",
        "siege",
        "sight",
        "sign",
        "silent",
        "silk",
        "silly",
        "silver",
        "similar",
        "simple",
        "since",
        "sing",
        "siren",
        "sister",
        "situate",
        "six",
        "size",
        "skate",
        "sketch",
        "ski",
        "skill",
        "skin",
        "skirt",
        "skull",
        "slab",
        "slam",
        "sleep",
        "slender",
        "slice",
        "slide",
        "slight",
        "slim",
        "slogan",
        "slot",
        "slow",
        "slush",
        "small",
        "smart",
        "smile",
        "smoke",
        "smooth",
        "snack",
        "snake",
        "snap",
        "sniff",
        "snow",
        "soap",
        "soccer",
        "social",
        "sock",
        "soda",
        "soft",
        "solar",
        "soldier",
        "solid",
        "solution",
        "solve",
        "someone",
        "song",
        "soon",
        "sorry",
        "sort",
        "soul",
        "sound",
        "soup",
        "source",
        "south",
        "space",
        "spare",
        "spatial",
        "spawn",
        "speak",
        "special",
        "speed",
        "spell",
        "spend",
        "sphere",
        "spice",
        "spider",
        "spike",
        "spin",
        "spirit",
        "split",
        "spoil",
        "sponsor",
        "spoon",
        "sport",
        "spot",
        "spray",
        "spread",
        "spring",
        "spy",
        "square",
        "squeeze",
        "squirrel",
        "stable",
        "stadium",
        "staff",
        "stage",
        "stairs",
        "stamp",
        "stand",
        "start",
        "state",
        "stay",
        "steak",
        "steel",
        "stem",
        "step",
        "stereo",
        "stick",
        "still",
        "sting",
        "stock",
        "stomach",
        "stone",
        "stool",
        "story",
        "stove",
        "strategy",
        "street",
        "strike",
        "strong",
        "struggle",
        "student",
        "stuff",
        "stumble",
        "style",
        "subject",
        "submit",
        "subway",
        "success",
        "such",
        "sudden",
        "suffer",
        "sugar",
        "suggest",
        "suit",
        "summer",
        "sun",
        "sunny",
        "sunset",
        "super",
        "supply",
        "supreme",
        "sure",
        "surface",
        "surge",
        "surprise",
        "surround",
        "survey",
        "suspect",
        "sustain",
        "swallow",
        "swamp",
        "swap",
        "swarm",
        "swear",
        "sweet",
        "swift",
        "swim",
        "swing",
        "switch",
        "sword",
        "symbol",
        "symptom",
        "syrup",
        "system",
        "table",
        "tackle",
        "tag",
        "tail",
        "talent",
        "talk",
        "tank",
        "tape",
        "target",
        "task",
        "taste",
        "tattoo",
        "taxi",
        "teach",
        "team",
        "tell",
        "ten",
        "tenant",
        "tennis",
        "tent",
        "term",
        "test",
        "text",
        "thank",
        "that",
        "theme",
        "then",
        "theory",
        "there",
        "they",
        "thing",
        "this",
        "thought",
        "three",
        "thrive",
        "throw",
        "thumb",
        "thunder",
        "ticket",
        "tide",
        "tiger",
        "tilt",
        "timber",
        "time",
        "tiny",
        "tip",
        "tired",
        "tissue",
        "title",
        "toast",
        "tobacco",
        "today",
        "toddler",
        "toe",
        "together",
        "toilet",
        "token",
        "tomato",
        "tomorrow",
        "tone",
        "tongue",
        "tonight",
        "tool",
        "tooth",
        "top",
        "topic",
        "topple",
        "torch",
        "tornado",
        "tortoise",
        "toss",
        "total",
        "tourist",
        "toward",
        "tower",
        "town",
        "toy",
        "track",
        "trade",
        "traffic",
        "tragic",
        "train",
        "transfer",
        "trap",
        "trash",
        "travel",
        "tray",
        "treat",
        "tree",
        "trend",
        "trial",
        "tribe",
        "trick",
        "trigger",
        "trim",
        "trip",
        "trophy",
        "trouble",
        "truck",
        "true",
        "truly",
        "trumpet",
        "trust",
        "truth",
        "try",
        "tube",
        "tuition",
        "tumble",
        "tuna",
        "tunnel",
        "turkey",
        "turn",
        "turtle",
        "twelve",
        "twenty",
        "twice",
        "twin",
        "twist",
        "two",
        "type",
        "typical",
        "ugly",
        "umbrella",
        "unable",
        "unaware",
        "uncle",
        "uncover",
        "under",
        "undo",
        "unfair",
        "unfold",
        "unhappy",
        "uniform",
        "unique",
        "unit",
        "universe",
        "unknown",
        "unlock",
        "until",
        "unusual",
        "unveil",
        "update",
        "upgrade",
        "uphold",
        "upon",
        "upper",
        "upset",
        "urban",
        "urge",
        "usage",
        "use",
        "used",
        "useful",
        "useless",
        "usual",
        "utility",
        "vacant",
        "vacuum",
        "vague",
        "valid",
        "valley",
        "valve",
        "van",
        "vanish",
        "vapor",
        "various",
        "vast",
        "vault",
        "vehicle",
        "velvet",
        "vendor",
        "venture",
        "venue",
        "verb",
        "verify",
        "version",
        "very",
        "vessel",
        "veteran",
        "viable",
        "vibrant",
        "vicious",
        "victory",
        "video",
        "view",
        "village",
        "vintage",
        "violin",
        "virtual",
        "virus",
        "visa",
        "visit",
        "visual",
        "vital",
        "vivid",
        "vocal",
        "voice",
        "void",
        "volcano",
        "volume",
        "vote",
        "voyage",
        "wage",
        "wagon",
        "wait",
        "walk",
        "wall",
        "walnut",
        "want",
        "warfare",
        "warm",
        "warrior",
        "wash",
        "wasp",
        "waste",
        "water",
        "wave",
        "way",
        "wealth",
        "weapon",
        "wear",
        "weasel",
        "weather",
        "web",
        "wedding",
        "weekend",
        "weird",
        "welcome",
        "west",
        "wet",
        "whale",
        "what",
        "wheat",
        "wheel",
        "when",
        "where",
        "whip",
        "whisper",
        "wide",
        "width",
        "wife",
        "wild",
        "will",
        "win",
        "window",
        "wine",
        "wing",
        "wink",
        "winner",
        "winter",
        "wire",
        "wisdom",
        "wise",
        "wish",
        "witness",
        "wolf",
        "woman",
        "wonder",
        "wood",
        "wool",
        "word",
        "work",
        "world",
        "worry",
        "worth",
        "wrap",
        "wreck",
        "wrestle",
        "wrist",
        "write",
        "wrong",
        "yard",
        "year",
        "yellow",
        "you",
        "young",
        "youth",
        "zebra",
        "zero",
        "zone",
        "zoo"
      ];
      exports.default = english;
    }
  });

  // node_modules/algosdk/dist/cjs/mnemonic/mnemonic.js
  var require_mnemonic = __commonJS({
    "node_modules/algosdk/dist/cjs/mnemonic/mnemonic.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.masterDerivationKeyToMnemonic = exports.mnemonicToMasterDerivationKey = exports.secretKeyToMnemonic = exports.mnemonicToSecretKey = exports.seedFromMnemonic = exports.mnemonicFromSeed = exports.NOT_IN_WORDS_LIST_ERROR_MSG = exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = void 0;
      var english_1 = __importDefault2(require_english());
      var nacl = __importStar2(require_naclWrappers());
      var address = __importStar2(require_address());
      exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = "failed to decode mnemonic";
      exports.NOT_IN_WORDS_LIST_ERROR_MSG = "the mnemonic contains a word that is not in the wordlist";
      function toUint11Array(buffer8) {
        const buffer11 = [];
        let acc = 0;
        let accBits = 0;
        function add(octet) {
          acc |= octet << accBits;
          accBits += 8;
          if (accBits >= 11) {
            buffer11.push(acc & 2047);
            acc >>= 11;
            accBits -= 11;
          }
        }
        function flush() {
          if (accBits) {
            buffer11.push(acc);
          }
        }
        buffer8.forEach(add);
        flush();
        return buffer11;
      }
      function applyWords(nums) {
        return nums.map((n) => english_1.default[n]);
      }
      function computeChecksum(seed) {
        const hashBuffer = nacl.genericHash(seed);
        const uint11Hash = toUint11Array(hashBuffer);
        const words = applyWords(uint11Hash);
        return words[0];
      }
      function mnemonicFromSeed(seed) {
        if (seed.length !== nacl.SEED_BTYES_LENGTH) {
          throw new RangeError(`Seed length must be ${nacl.SEED_BTYES_LENGTH}`);
        }
        const uint11Array = toUint11Array(seed);
        const words = applyWords(uint11Array);
        const checksumWord = computeChecksum(seed);
        return `${words.join(" ")} ${checksumWord}`;
      }
      exports.mnemonicFromSeed = mnemonicFromSeed;
      function toUint8Array(buffer11) {
        const buffer8 = [];
        let acc = 0;
        let accBits = 0;
        function add(ui11) {
          acc |= ui11 << accBits;
          accBits += 11;
          while (accBits >= 8) {
            buffer8.push(acc & 255);
            acc >>= 8;
            accBits -= 8;
          }
        }
        function flush() {
          if (accBits) {
            buffer8.push(acc);
          }
        }
        buffer11.forEach(add);
        flush();
        return new Uint8Array(buffer8);
      }
      function seedFromMnemonic(mnemonic) {
        const words = mnemonic.split(" ");
        const key = words.slice(0, 24);
        for (const w of key) {
          if (english_1.default.indexOf(w) === -1)
            throw new Error(exports.NOT_IN_WORDS_LIST_ERROR_MSG);
        }
        const checksum = words[words.length - 1];
        const uint11Array = key.map((word) => english_1.default.indexOf(word));
        let uint8Array = toUint8Array(uint11Array);
        if (uint8Array.length !== 33)
          throw new Error(exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);
        if (uint8Array[uint8Array.length - 1] !== 0)
          throw new Error(exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);
        uint8Array = uint8Array.slice(0, uint8Array.length - 1);
        const cs = computeChecksum(uint8Array);
        if (cs === checksum)
          return uint8Array;
        throw new Error(exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);
      }
      exports.seedFromMnemonic = seedFromMnemonic;
      function mnemonicToSecretKey(mn) {
        const seed = seedFromMnemonic(mn);
        const keys = nacl.keyPairFromSeed(seed);
        const encodedPk = address.encodeAddress(keys.publicKey);
        return { addr: encodedPk, sk: keys.secretKey };
      }
      exports.mnemonicToSecretKey = mnemonicToSecretKey;
      function secretKeyToMnemonic(sk) {
        const seed = sk.slice(0, nacl.SEED_BTYES_LENGTH);
        return mnemonicFromSeed(seed);
      }
      exports.secretKeyToMnemonic = secretKeyToMnemonic;
      function mnemonicToMasterDerivationKey(mn) {
        return seedFromMnemonic(mn);
      }
      exports.mnemonicToMasterDerivationKey = mnemonicToMasterDerivationKey;
      function masterDerivationKeyToMnemonic(mdk) {
        return mnemonicFromSeed(mdk);
      }
      exports.masterDerivationKeyToMnemonic = masterDerivationKeyToMnemonic;
    }
  });

  // node_modules/algosdk/dist/cjs/group.js
  var require_group = __commonJS({
    "node_modules/algosdk/dist/cjs/group.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assignGroupID = exports.computeGroupID = exports.TxGroup = void 0;
      var buffer_1 = require_buffer2();
      var txnBuilder = __importStar2(require_transaction());
      var nacl = __importStar2(require_naclWrappers());
      var encoding = __importStar2(require_encoding());
      var address = __importStar2(require_address());
      var utils = __importStar2(require_utils());
      var ALGORAND_MAX_TX_GROUP_SIZE = 16;
      var TxGroup = class {
        constructor(hashes) {
          this.name = "Transaction group";
          this.tag = buffer_1.Buffer.from("TG");
          if (hashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {
            const errorMsg = `${hashes.length.toString()} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE.toString()}`;
            throw Error(errorMsg);
          }
          this.txGroupHashes = hashes;
        }
        // eslint-disable-next-line camelcase
        get_obj_for_encoding() {
          const txgroup = {
            txlist: this.txGroupHashes
          };
          return txgroup;
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(txgroupForEnc) {
          const txn = Object.create(this.prototype);
          txn.name = "Transaction group";
          txn.tag = buffer_1.Buffer.from("TG");
          txn.txGroupHashes = [];
          for (const hash of txgroupForEnc.txlist) {
            txn.txGroupHashes.push(buffer_1.Buffer.from(hash));
          }
          return txn;
        }
        toByte() {
          return encoding.encode(this.get_obj_for_encoding());
        }
      };
      exports.TxGroup = TxGroup;
      function computeGroupID(txns) {
        const hashes = [];
        for (const txn of txns) {
          const tx = txnBuilder.instantiateTxnIfNeeded(txn);
          hashes.push(tx.rawTxID());
        }
        const txgroup = new TxGroup(hashes);
        const bytes = txgroup.toByte();
        const toBeHashed = buffer_1.Buffer.from(utils.concatArrays(txgroup.tag, bytes));
        const gid = nacl.genericHash(toBeHashed);
        return buffer_1.Buffer.from(gid);
      }
      exports.computeGroupID = computeGroupID;
      function assignGroupID(txns, from) {
        const gid = computeGroupID(txns);
        const result = [];
        for (const txn of txns) {
          const tx = txnBuilder.instantiateTxnIfNeeded(txn);
          if (!from || address.encodeAddress(tx.from.publicKey) === from) {
            tx.group = gid;
            result.push(tx);
          }
        }
        return result;
      }
      exports.assignGroupID = assignGroupID;
      exports.default = TxGroup;
    }
  });

  // node_modules/algosdk/dist/cjs/multisig.js
  var require_multisig = __commonJS({
    "node_modules/algosdk/dist/cjs/multisig.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.multisigAddress = exports.appendSignRawMultisigSignature = exports.appendSignMultisigTransaction = exports.signMultisigTransaction = exports.verifyMultisig = exports.mergeMultisigTransactions = exports.MultisigTransaction = exports.createMultisigTransaction = exports.MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = exports.MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG = exports.MULTISIG_NO_MUTATE_ERROR_MSG = exports.MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = exports.MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = exports.MULTISIG_MERGE_MISMATCH_ERROR_MSG = exports.MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = void 0;
      var buffer_1 = require_buffer2();
      var nacl = __importStar2(require_naclWrappers());
      var address = __importStar2(require_address());
      var encoding = __importStar2(require_encoding());
      var txnBuilder = __importStar2(require_transaction());
      var utils = __importStar2(require_utils());
      exports.MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = "Not enough multisig transactions to merge. Need at least two";
      exports.MULTISIG_MERGE_MISMATCH_ERROR_MSG = "Cannot merge txs. txIDs differ";
      exports.MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = "Cannot merge txs. Auth addrs differ";
      exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = "Cannot merge txs. Multisig preimages differ";
      exports.MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = "Cannot merge txs. subsigs are mismatched.";
      var MULTISIG_KEY_NOT_EXIST_ERROR_MSG = "Key does not exist";
      exports.MULTISIG_NO_MUTATE_ERROR_MSG = "Cannot mutate a multisig field as it would invalidate all existing signatures.";
      exports.MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG = "Cannot sign a multisig transaction using `signTxn`. Use `partialSignTxn` instead.";
      exports.MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = "Cannot add multisig signature. Signature is not of the correct length.";
      function createMultisigTransaction(txn, { version, threshold, addrs }) {
        const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);
        const subsigs = pks.map((pk) => ({ pk: buffer_1.Buffer.from(pk) }));
        const msig = {
          v: version,
          thr: threshold,
          subsig: subsigs
        };
        const txnForEncoding = txn.get_obj_for_encoding();
        const signedTxn = {
          msig,
          txn: txnForEncoding
        };
        const msigAddr = address.fromMultisigPreImg({
          version,
          threshold,
          pks
        });
        if (address.encodeAddress(txnForEncoding.snd) !== address.encodeAddress(msigAddr)) {
          signedTxn.sgnr = buffer_1.Buffer.from(msigAddr);
        }
        return new Uint8Array(encoding.encode(signedTxn));
      }
      exports.createMultisigTransaction = createMultisigTransaction;
      function createMultisigTransactionWithSignature(txn, { rawSig, myPk }, { version, threshold, pks }) {
        const encodedMsig = createMultisigTransaction(txn, {
          version,
          threshold,
          addrs: pks.map((pk) => address.encodeAddress(pk))
        });
        const signedTxn = encoding.decode(encodedMsig);
        let keyExist = false;
        signedTxn.msig.subsig.forEach((subsig, i) => {
          if (nacl.bytesEqual(subsig.pk, myPk)) {
            keyExist = true;
            signedTxn.msig.subsig[i].s = rawSig;
          }
        });
        if (keyExist === false) {
          throw new Error(MULTISIG_KEY_NOT_EXIST_ERROR_MSG);
        }
        const msigAddr = address.fromMultisigPreImg({
          version,
          threshold,
          pks
        });
        if (address.encodeAddress(signedTxn.txn.snd) !== address.encodeAddress(msigAddr)) {
          signedTxn.sgnr = buffer_1.Buffer.from(msigAddr);
        }
        return new Uint8Array(encoding.encode(signedTxn));
      }
      var MultisigTransaction = class extends txnBuilder.Transaction {
        /* eslint-disable class-methods-use-this,@typescript-eslint/no-unused-vars,no-dupe-class-members */
        /**
         * Override inherited method to throw an error, as mutating transactions are prohibited in this context
         */
        addLease() {
          throw new Error(exports.MULTISIG_NO_MUTATE_ERROR_MSG);
        }
        /**
         * Override inherited method to throw an error, as mutating transactions are prohibited in this context
         */
        addRekey() {
          throw new Error(exports.MULTISIG_NO_MUTATE_ERROR_MSG);
        }
        signTxn(sk) {
          throw new Error(exports.MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG);
        }
        /* eslint-enable class-methods-use-this,@typescript-eslint/no-unused-vars,no-dupe-class-members */
        /**
         * partialSignTxn partially signs this transaction and returns a partially-signed multisig transaction,
         * encoded with msgpack as a typed array.
         * @param version - multisig version
         * @param threshold - multisig threshold
         * @param pks - multisig public key list, order is important.
         * @param sk - an Algorand secret key to sign with.
         * @returns an encoded, partially signed multisig transaction.
         */
        partialSignTxn({ version, threshold, pks }, sk) {
          const myPk = nacl.keyPairFromSecretKey(sk).publicKey;
          return createMultisigTransactionWithSignature(this, { rawSig: this.rawSignTxn(sk), myPk }, { version, threshold, pks });
        }
        /**
         * partialSignWithMultisigSignature partially signs this transaction with an external raw multisig signature and returns
         * a partially-signed multisig transaction, encoded with msgpack as a typed array.
         * @param metadata - multisig metadata
         * @param signerAddr - address of the signer
         * @param signature - raw multisig signature
         * @returns an encoded, partially signed multisig transaction.
         */
        partialSignWithMultisigSignature(metadata, signerAddr, signature) {
          if (!nacl.isValidSignatureLength(signature.length)) {
            throw new Error(exports.MULTISIG_SIGNATURE_LENGTH_ERROR_MSG);
          }
          return createMultisigTransactionWithSignature(this, {
            rawSig: signature,
            myPk: address.decodeAddress(signerAddr).publicKey
          }, metadata);
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(txnForEnc) {
          return super.from_obj_for_encoding(txnForEnc);
        }
      };
      exports.MultisigTransaction = MultisigTransaction;
      function mergeMultisigTransactions(multisigTxnBlobs) {
        if (multisigTxnBlobs.length < 2) {
          throw new Error(exports.MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG);
        }
        const refSigTx = encoding.decode(multisigTxnBlobs[0]);
        const refTxID = MultisigTransaction.from_obj_for_encoding(refSigTx.txn).txID();
        const refAuthAddr = refSigTx.sgnr ? address.encodeAddress(refSigTx.sgnr) : void 0;
        const refPreImage = {
          version: refSigTx.msig.v,
          threshold: refSigTx.msig.thr,
          pks: refSigTx.msig.subsig.map((subsig) => subsig.pk)
        };
        const refMsigAddr = address.encodeAddress(address.fromMultisigPreImg(refPreImage));
        const newSubsigs = refSigTx.msig.subsig.map((sig) => ({ ...sig }));
        for (let i = 1; i < multisigTxnBlobs.length; i++) {
          const unisig = encoding.decode(multisigTxnBlobs[i]);
          const unisigAlgoTxn = MultisigTransaction.from_obj_for_encoding(unisig.txn);
          if (unisigAlgoTxn.txID() !== refTxID) {
            throw new Error(exports.MULTISIG_MERGE_MISMATCH_ERROR_MSG);
          }
          const authAddr = unisig.sgnr ? address.encodeAddress(unisig.sgnr) : void 0;
          if (refAuthAddr !== authAddr) {
            throw new Error(exports.MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG);
          }
          if (unisig.msig.subsig.length !== refSigTx.msig.subsig.length) {
            throw new Error(exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);
          }
          const preimg = {
            version: unisig.msig.v,
            threshold: unisig.msig.thr,
            pks: unisig.msig.subsig.map((subsig) => subsig.pk)
          };
          const msgigAddr = address.encodeAddress(address.fromMultisigPreImg(preimg));
          if (refMsigAddr !== msgigAddr) {
            throw new Error(exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);
          }
          unisig.msig.subsig.forEach((uniSubsig, index) => {
            if (!uniSubsig.s)
              return;
            const current = newSubsigs[index];
            if (current.s && buffer_1.Buffer.compare(buffer_1.Buffer.from(uniSubsig.s), buffer_1.Buffer.from(current.s)) !== 0) {
              throw new Error(exports.MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG);
            }
            current.s = uniSubsig.s;
          });
        }
        const msig = {
          v: refSigTx.msig.v,
          thr: refSigTx.msig.thr,
          subsig: newSubsigs
        };
        const signedTxn = {
          msig,
          txn: refSigTx.txn
        };
        if (typeof refAuthAddr !== "undefined") {
          signedTxn.sgnr = buffer_1.Buffer.from(address.decodeAddress(refAuthAddr).publicKey);
        }
        return new Uint8Array(encoding.encode(signedTxn));
      }
      exports.mergeMultisigTransactions = mergeMultisigTransactions;
      function verifyMultisig(toBeVerified, msig, publicKey) {
        const version = msig.v;
        const threshold = msig.thr;
        const subsigs = msig.subsig;
        const pks = subsigs.map((subsig) => subsig.pk);
        if (msig.subsig.length < threshold) {
          return false;
        }
        let pk;
        try {
          pk = address.fromMultisigPreImg({ version, threshold, pks });
        } catch (e) {
          return false;
        }
        if (!utils.arrayEqual(pk, publicKey)) {
          return false;
        }
        let counter = 0;
        for (const subsig of subsigs) {
          if (subsig.s !== void 0) {
            counter += 1;
          }
        }
        if (counter < threshold) {
          return false;
        }
        let verifiedCounter = 0;
        for (const subsig of subsigs) {
          if (subsig.s !== void 0) {
            if (nacl.verify(toBeVerified, subsig.s, subsig.pk)) {
              verifiedCounter += 1;
            }
          }
        }
        if (verifiedCounter < threshold) {
          return false;
        }
        return true;
      }
      exports.verifyMultisig = verifyMultisig;
      function signMultisigTransaction(txn, { version, threshold, addrs }, sk) {
        const expectedFromRaw = address.fromMultisigPreImgAddrs({
          version,
          threshold,
          addrs
        });
        if (!Object.prototype.hasOwnProperty.call(txn, "from")) {
          txn.from = expectedFromRaw;
        }
        const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);
        const txnAlreadyBuilt = txn instanceof txnBuilder.Transaction;
        let algoTxn;
        let blob;
        if (txnAlreadyBuilt) {
          algoTxn = txn;
          blob = MultisigTransaction.prototype.partialSignTxn.call(algoTxn, { version, threshold, pks }, sk);
        } else {
          algoTxn = new MultisigTransaction(txn);
          blob = algoTxn.partialSignTxn({ version, threshold, pks }, sk);
        }
        return {
          txID: algoTxn.txID().toString(),
          blob
        };
      }
      exports.signMultisigTransaction = signMultisigTransaction;
      function appendSignMultisigTransaction(multisigTxnBlob, { version, threshold, addrs }, sk) {
        const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);
        const multisigTxObj = encoding.decode(multisigTxnBlob);
        const msigTxn = MultisigTransaction.from_obj_for_encoding(multisigTxObj.txn);
        const partialSignedBlob = msigTxn.partialSignTxn({ version, threshold, pks }, sk);
        return {
          txID: msigTxn.txID().toString(),
          blob: mergeMultisigTransactions([multisigTxnBlob, partialSignedBlob])
        };
      }
      exports.appendSignMultisigTransaction = appendSignMultisigTransaction;
      function appendSignRawMultisigSignature(multisigTxnBlob, { version, threshold, addrs }, signerAddr, signature) {
        const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);
        const multisigTxObj = encoding.decode(multisigTxnBlob);
        const msigTxn = MultisigTransaction.from_obj_for_encoding(multisigTxObj.txn);
        const partialSignedBlob = msigTxn.partialSignWithMultisigSignature({ version, threshold, pks }, signerAddr, signature);
        return {
          txID: msigTxn.txID().toString(),
          blob: mergeMultisigTransactions([multisigTxnBlob, partialSignedBlob])
        };
      }
      exports.appendSignRawMultisigSignature = appendSignRawMultisigSignature;
      function multisigAddress({ version, threshold, addrs }) {
        return address.fromMultisigPreImgAddrs({ version, threshold, addrs });
      }
      exports.multisigAddress = multisigAddress;
    }
  });

  // node_modules/algosdk/dist/cjs/logicsig.js
  var require_logicsig = __commonJS({
    "node_modules/algosdk/dist/cjs/logicsig.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.tealSignFromProgram = exports.verifyTealSign = exports.tealSign = exports.logicSigFromByte = exports.signLogicSigTransaction = exports.signLogicSigTransactionObject = exports.LogicSigAccount = exports.LogicSig = exports.sanityCheckProgram = void 0;
      var buffer_1 = require_buffer2();
      var nacl = __importStar2(require_naclWrappers());
      var address = __importStar2(require_address());
      var encoding = __importStar2(require_encoding());
      var multisig_1 = require_multisig();
      var utils = __importStar2(require_utils());
      var txnBuilder = __importStar2(require_transaction());
      var address_1 = require_address();
      function sanityCheckProgram(program) {
        if (!program || program.length === 0)
          throw new Error("empty program");
        const lineBreakOrd = "\n".charCodeAt(0);
        const blankSpaceOrd = " ".charCodeAt(0);
        const tildeOrd = "~".charCodeAt(0);
        const isPrintable = (x) => blankSpaceOrd <= x && x <= tildeOrd;
        const isAsciiPrintable = program.every((x) => x === lineBreakOrd || isPrintable(x));
        if (isAsciiPrintable) {
          const programStr = buffer_1.Buffer.from(program).toString();
          if ((0, address_1.isValidAddress)(programStr))
            throw new Error("requesting program bytes, get Algorand address");
          if (buffer_1.Buffer.from(programStr, "base64").toString("base64") === programStr)
            throw new Error("program should not be b64 encoded");
          throw new Error("program bytes are all ASCII printable characters, not looking like Teal byte code");
        }
      }
      exports.sanityCheckProgram = sanityCheckProgram;
      var LogicSig = class _LogicSig {
        constructor(program, programArgs) {
          this.tag = buffer_1.Buffer.from("Program");
          if (programArgs && (!Array.isArray(programArgs) || !programArgs.every((arg) => arg.constructor === Uint8Array || buffer_1.Buffer.isBuffer(arg)))) {
            throw new TypeError("Invalid arguments");
          }
          let args;
          if (programArgs != null)
            args = programArgs.map((arg) => new Uint8Array(arg));
          sanityCheckProgram(program);
          this.logic = program;
          this.args = args;
          this.sig = void 0;
          this.msig = void 0;
        }
        // eslint-disable-next-line camelcase
        get_obj_for_encoding() {
          const obj = {
            l: this.logic
          };
          if (this.args) {
            obj.arg = this.args;
          }
          if (this.sig) {
            obj.sig = this.sig;
          } else if (this.msig) {
            obj.msig = this.msig;
          }
          return obj;
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(encoded) {
          const lsig = new _LogicSig(encoded.l, encoded.arg);
          lsig.sig = encoded.sig;
          lsig.msig = encoded.msig;
          return lsig;
        }
        /**
         * Performs signature verification
         * @param publicKey - Verification key (derived from sender address or escrow address)
         */
        verify(publicKey) {
          if (this.sig && this.msig) {
            return false;
          }
          try {
            sanityCheckProgram(this.logic);
          } catch (e) {
            return false;
          }
          const toBeSigned = utils.concatArrays(this.tag, this.logic);
          if (!this.sig && !this.msig) {
            const hash = nacl.genericHash(toBeSigned);
            return utils.arrayEqual(hash, publicKey);
          }
          if (this.sig) {
            return nacl.verify(toBeSigned, this.sig, publicKey);
          }
          return (0, multisig_1.verifyMultisig)(toBeSigned, this.msig, publicKey);
        }
        /**
         * Compute hash of the logic sig program (that is the same as escrow account address) as string address
         * @returns String representation of the address
         */
        address() {
          const toBeSigned = utils.concatArrays(this.tag, this.logic);
          const hash = nacl.genericHash(toBeSigned);
          return address.encodeAddress(new Uint8Array(hash));
        }
        /**
         * Creates signature (if no msig provided) or multi signature otherwise
         * @param secretKey - Secret key to sign with
         * @param msig - Multisig account as \{version, threshold, addrs\}
         */
        sign(secretKey, msig) {
          if (msig == null) {
            this.sig = this.signProgram(secretKey);
          } else {
            const subsigs = msig.addrs.map((addr) => ({
              pk: address.decodeAddress(addr).publicKey
            }));
            this.msig = {
              v: msig.version,
              thr: msig.threshold,
              subsig: subsigs
            };
            const [sig, index] = this.singleSignMultisig(secretKey, this.msig);
            this.msig.subsig[index].s = sig;
          }
        }
        /**
         * Appends a signature to multi signature
         * @param secretKey - Secret key to sign with
         */
        appendToMultisig(secretKey) {
          if (this.msig === void 0) {
            throw new Error("no multisig present");
          }
          const [sig, index] = this.singleSignMultisig(secretKey, this.msig);
          this.msig.subsig[index].s = sig;
        }
        signProgram(secretKey) {
          const toBeSigned = utils.concatArrays(this.tag, this.logic);
          const sig = nacl.sign(toBeSigned, secretKey);
          return sig;
        }
        singleSignMultisig(secretKey, msig) {
          let index = -1;
          const myPk = nacl.keyPairFromSecretKey(secretKey).publicKey;
          for (let i = 0; i < msig.subsig.length; i++) {
            const { pk } = msig.subsig[i];
            if (utils.arrayEqual(pk, myPk)) {
              index = i;
              break;
            }
          }
          if (index === -1) {
            throw new Error("invalid secret key");
          }
          const sig = this.signProgram(secretKey);
          return [sig, index];
        }
        toByte() {
          return encoding.encode(this.get_obj_for_encoding());
        }
        static fromByte(encoded) {
          const decodedObj = encoding.decode(encoded);
          return _LogicSig.from_obj_for_encoding(decodedObj);
        }
      };
      exports.LogicSig = LogicSig;
      var LogicSigAccount = class _LogicSigAccount {
        /**
         * Create a new LogicSigAccount. By default this will create an escrow
         * LogicSig account. Call `sign` or `signMultisig` on the newly created
         * LogicSigAccount to make it a delegated account.
         *
         * @param program - The compiled TEAL program which contains the logic for
         *   this LogicSig.
         * @param args - An optional array of arguments for the program.
         */
        constructor(program, args) {
          this.lsig = new LogicSig(program, args);
          this.sigkey = void 0;
        }
        // eslint-disable-next-line camelcase
        get_obj_for_encoding() {
          const obj = {
            lsig: this.lsig.get_obj_for_encoding()
          };
          if (this.sigkey) {
            obj.sigkey = this.sigkey;
          }
          return obj;
        }
        // eslint-disable-next-line camelcase
        static from_obj_for_encoding(encoded) {
          const lsigAccount = new _LogicSigAccount(encoded.lsig.l, encoded.lsig.arg);
          lsigAccount.lsig = LogicSig.from_obj_for_encoding(encoded.lsig);
          lsigAccount.sigkey = encoded.sigkey;
          return lsigAccount;
        }
        /**
         * Encode this object into msgpack.
         */
        toByte() {
          return encoding.encode(this.get_obj_for_encoding());
        }
        /**
         * Decode a msgpack object into a LogicSigAccount.
         * @param encoded - The encoded LogicSigAccount.
         */
        static fromByte(encoded) {
          const decodedObj = encoding.decode(encoded);
          return _LogicSigAccount.from_obj_for_encoding(decodedObj);
        }
        /**
         * Check if this LogicSigAccount has been delegated to another account with a
         * signature.
         *
         * Note this function only checks for the presence of a delegation signature.
         * To verify the delegation signature, use `verify`.
         */
        isDelegated() {
          return !!(this.lsig.sig || this.lsig.msig);
        }
        /**
         * Verifies this LogicSig's program and signatures.
         * @returns true if and only if the LogicSig program and signatures are valid.
         */
        verify() {
          const addr = this.address();
          return this.lsig.verify(address.decodeAddress(addr).publicKey);
        }
        /**
         * Get the address of this LogicSigAccount.
         *
         * If the LogicSig is delegated to another account, this will return the
         * address of that account.
         *
         * If the LogicSig is not delegated to another account, this will return an
         *  escrow address that is the hash of the LogicSig's program code.
         */
        address() {
          if (this.lsig.sig && this.lsig.msig) {
            throw new Error("LogicSig has too many signatures. At most one of sig or msig may be present");
          }
          if (this.lsig.sig) {
            if (!this.sigkey) {
              throw new Error("Signing key for delegated account is missing");
            }
            return address.encodeAddress(this.sigkey);
          }
          if (this.lsig.msig) {
            const msigMetadata = {
              version: this.lsig.msig.v,
              threshold: this.lsig.msig.thr,
              pks: this.lsig.msig.subsig.map((subsig) => subsig.pk)
            };
            return address.encodeAddress(address.fromMultisigPreImg(msigMetadata));
          }
          return this.lsig.address();
        }
        /**
         * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig
         * has the authority to sign transactions on behalf of another account, called
         * the delegating account. Use this function if the delegating account is a
         * multisig account.
         *
         * @param msig - The multisig delegating account
         * @param secretKey - The secret key of one of the members of the delegating
         *   multisig account. Use `appendToMultisig` to add additional signatures
         *   from other members.
         */
        signMultisig(msig, secretKey) {
          this.lsig.sign(secretKey, msig);
        }
        /**
         * Adds an additional signature from a member of the delegating multisig
         * account.
         *
         * @param secretKey - The secret key of one of the members of the delegating
         *   multisig account.
         */
        appendToMultisig(secretKey) {
          this.lsig.appendToMultisig(secretKey);
        }
        /**
         * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig
         * has the authority to sign transactions on behalf of another account, called
         * the delegating account. If the delegating account is a multisig account,
         * use `signMultisig` instead.
         *
         * @param secretKey - The secret key of the delegating account.
         */
        sign(secretKey) {
          this.lsig.sign(secretKey);
          this.sigkey = nacl.keyPairFromSecretKey(secretKey).publicKey;
        }
      };
      exports.LogicSigAccount = LogicSigAccount;
      function signLogicSigTransactionWithAddress(txn, lsig, lsigAddress) {
        if (!lsig.verify(lsigAddress)) {
          throw new Error("Logic signature verification failed. Ensure the program and signature are valid.");
        }
        const signedTxn = {
          lsig: lsig.get_obj_for_encoding(),
          txn: txn.get_obj_for_encoding()
        };
        if (!nacl.bytesEqual(lsigAddress, txn.from.publicKey)) {
          signedTxn.sgnr = buffer_1.Buffer.from(lsigAddress);
        }
        return {
          txID: txn.txID().toString(),
          blob: encoding.encode(signedTxn)
        };
      }
      function signLogicSigTransactionObject(txn, lsigObject) {
        let lsig;
        let lsigAddress;
        if (lsigObject instanceof LogicSigAccount) {
          lsig = lsigObject.lsig;
          lsigAddress = address.decodeAddress(lsigObject.address()).publicKey;
        } else {
          lsig = lsigObject;
          if (lsig.sig) {
            lsigAddress = txn.from.publicKey;
          } else if (lsig.msig) {
            const msigMetadata = {
              version: lsig.msig.v,
              threshold: lsig.msig.thr,
              pks: lsig.msig.subsig.map((subsig) => subsig.pk)
            };
            lsigAddress = address.fromMultisigPreImg(msigMetadata);
          } else {
            lsigAddress = address.decodeAddress(lsig.address()).publicKey;
          }
        }
        return signLogicSigTransactionWithAddress(txn, lsig, lsigAddress);
      }
      exports.signLogicSigTransactionObject = signLogicSigTransactionObject;
      function signLogicSigTransaction(txn, lsigObject) {
        const algoTxn = txnBuilder.instantiateTxnIfNeeded(txn);
        return signLogicSigTransactionObject(algoTxn, lsigObject);
      }
      exports.signLogicSigTransaction = signLogicSigTransaction;
      function logicSigFromByte(encoded) {
        return LogicSig.fromByte(encoded);
      }
      exports.logicSigFromByte = logicSigFromByte;
      var SIGN_PROGRAM_DATA_PREFIX = buffer_1.Buffer.from("ProgData");
      function tealSign(sk, data, programHash) {
        const parts = utils.concatArrays(address.decodeAddress(programHash).publicKey, data);
        const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts));
        return nacl.sign(toBeSigned, sk);
      }
      exports.tealSign = tealSign;
      function verifyTealSign(data, programHash, sig, pk) {
        const parts = utils.concatArrays(address.decodeAddress(programHash).publicKey, data);
        const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts));
        return nacl.verify(toBeSigned, sig, pk);
      }
      exports.verifyTealSign = verifyTealSign;
      function tealSignFromProgram(sk, data, program) {
        const lsig = new LogicSig(program);
        const contractAddress = lsig.address();
        return tealSign(sk, data, contractAddress);
      }
      exports.tealSignFromProgram = tealSignFromProgram;
    }
  });

  // node_modules/vlq/dist/index.cjs
  var require_dist = __commonJS({
    "node_modules/vlq/dist/index.cjs"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.vlq = {}));
      })(exports, function(exports2) {
        "use strict";
        let char_to_integer = {};
        let integer_to_char = {};
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split("").forEach(function(char, i) {
          char_to_integer[char] = i;
          integer_to_char[i] = char;
        });
        function decode(string) {
          let result = [];
          let shift = 0;
          let value = 0;
          for (let i = 0; i < string.length; i += 1) {
            let integer = char_to_integer[string[i]];
            if (integer === void 0) {
              throw new Error("Invalid character (" + string[i] + ")");
            }
            const has_continuation_bit = integer & 32;
            integer &= 31;
            value += integer << shift;
            if (has_continuation_bit) {
              shift += 5;
            } else {
              const should_negate = value & 1;
              value >>>= 1;
              if (should_negate) {
                result.push(value === 0 ? -2147483648 : -value);
              } else {
                result.push(value);
              }
              value = shift = 0;
            }
          }
          return result;
        }
        function encode(value) {
          if (typeof value === "number") {
            return encode_integer(value);
          }
          let result = "";
          for (let i = 0; i < value.length; i += 1) {
            result += encode_integer(value[i]);
          }
          return result;
        }
        function encode_integer(num) {
          let result = "";
          if (num < 0) {
            num = -num << 1 | 1;
          } else {
            num <<= 1;
          }
          do {
            let clamped = num & 31;
            num >>>= 5;
            if (num > 0) {
              clamped |= 32;
            }
            result += integer_to_char[clamped];
          } while (num > 0);
          return result;
        }
        exports2.decode = decode;
        exports2.encode = encode;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/algosdk/dist/cjs/logic/sourcemap.js
  var require_sourcemap = __commonJS({
    "node_modules/algosdk/dist/cjs/logic/sourcemap.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SourceMap = void 0;
      var vlq = __importStar2(require_dist());
      var SourceMap = class {
        constructor({ version, sources, names, mappings }) {
          this.version = version;
          this.sources = sources;
          this.names = names;
          this.mappings = mappings;
          if (this.version !== 3)
            throw new Error(`Only version 3 is supported, got ${this.version}`);
          if (this.mappings === void 0)
            throw new Error("mapping undefined, cannot build source map without `mapping`");
          const pcList = this.mappings.split(";").map((m) => {
            const decoded = vlq.decode(m);
            if (decoded.length > 2)
              return decoded[2];
            return void 0;
          });
          this.pcToLine = {};
          this.lineToPc = {};
          let lastLine = 0;
          for (const [pc, lineDelta] of pcList.entries()) {
            if (lineDelta !== void 0) {
              lastLine += lineDelta;
            }
            if (!(lastLine in this.lineToPc))
              this.lineToPc[lastLine] = [];
            this.lineToPc[lastLine].push(pc);
            this.pcToLine[pc] = lastLine;
          }
        }
        getLineForPc(pc) {
          return this.pcToLine[pc];
        }
        getPcsForLine(line) {
          return this.lineToPc[line];
        }
      };
      exports.SourceMap = SourceMap;
    }
  });

  // node_modules/algosdk/dist/cjs/types/transactions/encoded.js
  var require_encoded = __commonJS({
    "node_modules/algosdk/dist/cjs/types/transactions/encoded.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/algosdk/dist/cjs/types/transactions/index.js
  var require_transactions = __commonJS({
    "node_modules/algosdk/dist/cjs/types/transactions/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TransactionType = void 0;
      var base_1 = require_base();
      Object.defineProperty(exports, "TransactionType", { enumerable: true, get: function() {
        return base_1.TransactionType;
      } });
      __exportStar2(require_encoded(), exports);
    }
  });

  // node_modules/algosdk/dist/cjs/dryrun.js
  var require_dryrun2 = __commonJS({
    "node_modules/algosdk/dist/cjs/dryrun.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DryrunResult = exports.createDryrun = void 0;
      var buffer_1 = require_buffer2();
      var types_1 = require_types();
      var transactions_1 = require_transactions();
      var address_1 = require_address();
      var defaultAppId = 1380011588;
      var defaultMaxWidth = 30;
      function decodePrograms(ap) {
        ap.params["approval-program"] = buffer_1.Buffer.from(ap.params["approval-program"].toString(), "base64");
        ap.params["clear-state-program"] = buffer_1.Buffer.from(ap.params["clear-state-program"].toString(), "base64");
        return ap;
      }
      async function createDryrun({ client, txns, protocolVersion, latestTimestamp, round, sources }) {
        const appInfos = [];
        const acctInfos = [];
        const apps = [];
        const assets = [];
        const accts = [];
        for (const t of txns) {
          if (t.txn.type === transactions_1.TransactionType.appl) {
            accts.push((0, address_1.encodeAddress)(t.txn.from.publicKey));
            if (t.txn.appAccounts)
              accts.push(...t.txn.appAccounts.map((a) => (0, address_1.encodeAddress)(a.publicKey)));
            if (t.txn.appForeignApps) {
              apps.push(...t.txn.appForeignApps);
              accts.push(...t.txn.appForeignApps.map((aidx) => (0, address_1.getApplicationAddress)(aidx)));
            }
            if (t.txn.appForeignAssets)
              assets.push(...t.txn.appForeignAssets);
            if (t.txn.appIndex === void 0 || t.txn.appIndex === 0) {
              appInfos.push(new types_1.Application({
                id: defaultAppId,
                params: new types_1.ApplicationParams({
                  creator: (0, address_1.encodeAddress)(t.txn.from.publicKey),
                  approvalProgram: t.txn.appApprovalProgram,
                  clearStateProgram: t.txn.appClearProgram,
                  localStateSchema: new types_1.ApplicationStateSchema({
                    numUint: t.txn.appLocalInts,
                    numByteSlice: t.txn.appLocalByteSlices
                  }),
                  globalStateSchema: new types_1.ApplicationStateSchema({
                    numUint: t.txn.appGlobalInts,
                    numByteSlice: t.txn.appGlobalByteSlices
                  })
                })
              }));
            } else {
              apps.push(t.txn.appIndex);
              accts.push((0, address_1.getApplicationAddress)(t.txn.appIndex));
            }
          }
        }
        const assetPromises = [];
        for (const assetId of [...new Set(assets)]) {
          assetPromises.push(client.getAssetByID(assetId).do().then((assetInfo) => {
            accts.push(assetInfo.params.creator);
          }));
        }
        await Promise.all(assetPromises);
        const appPromises = [];
        for (const appId of [...new Set(apps)]) {
          appPromises.push(client.getApplicationByID(appId).do().then((appInfo) => {
            const ai = decodePrograms(appInfo);
            appInfos.push(ai);
            accts.push(ai.params.creator);
          }));
        }
        await Promise.all(appPromises);
        const acctPromises = [];
        for (const acct of [...new Set(accts)]) {
          acctPromises.push(client.accountInformation(acct).do().then((acctInfo) => {
            if ("created-apps" in acctInfo) {
              acctInfo["created-apps"] = acctInfo["created-apps"].map((app) => decodePrograms(app));
            }
            acctInfos.push(acctInfo);
          }));
        }
        await Promise.all(acctPromises);
        return new types_1.DryrunRequest({
          txns: txns.map((st) => ({ ...st, txn: st.txn.get_obj_for_encoding() })),
          accounts: acctInfos,
          apps: appInfos,
          latestTimestamp,
          round,
          protocolVersion,
          sources
        });
      }
      exports.createDryrun = createDryrun;
      var DryrunStackValue = class {
        constructor(sv) {
          this.type = 0;
          this.bytes = "";
          this.uint = 0;
          this.type = sv.type;
          this.bytes = sv.bytes;
          this.uint = sv.uint;
        }
        toString() {
          if (this.type === 1) {
            return `0x${buffer_1.Buffer.from(this.bytes, "base64").toString("hex")}`;
          }
          return this.uint.toString();
        }
      };
      var DryrunTraceLine = class {
        constructor(line) {
          this.error = "";
          this.line = 0;
          this.pc = 0;
          this.scratch = [];
          this.stack = [];
          this.error = line.error === void 0 ? "" : line.error;
          this.line = line.line;
          this.pc = line.pc;
          this.scratch = line.scratch;
          this.stack = line.stack.map((sv) => new DryrunStackValue(sv));
        }
      };
      var DryrunTrace = class {
        constructor(t) {
          this.trace = [];
          if (t == null)
            return;
          this.trace = t.map((line) => new DryrunTraceLine(line));
        }
      };
      function truncate(str, maxValueWidth) {
        if (str.length > maxValueWidth && maxValueWidth > 0) {
          return `${str.slice(0, maxValueWidth)}...`;
        }
        return str;
      }
      function scratchToString(prevScratch, currScratch) {
        if (currScratch.length === 0)
          return "";
        let newScratchIdx = null;
        for (let idx = 0; idx < currScratch.length; idx++) {
          if (idx > prevScratch.length) {
            newScratchIdx = idx;
            continue;
          }
          if (JSON.stringify(prevScratch[idx]) !== JSON.stringify(currScratch[idx])) {
            newScratchIdx = idx;
          }
        }
        if (newScratchIdx == null)
          return "";
        const newScratch = currScratch[newScratchIdx];
        if (newScratch.bytes.length > 0) {
          return `${newScratchIdx} = 0x${buffer_1.Buffer.from(newScratch.bytes, "base64").toString("hex")}`;
        }
        return `${newScratchIdx} = ${newScratch.uint.toString()}`;
      }
      function stackToString(stack, reverse) {
        const svs = reverse ? stack.reverse() : stack;
        return `[${svs.map((sv) => {
          switch (sv.type) {
            case 1:
              return `0x${buffer_1.Buffer.from(sv.bytes, "base64").toString("hex")}`;
            case 2:
              return `${sv.uint.toString()}`;
            default:
              return "";
          }
        }).join(", ")}]`;
      }
      var DryrunTransactionResult = class _DryrunTransactionResult {
        constructor(dtr) {
          this.disassembly = [];
          this.appCallMessages = [];
          this.localDeltas = [];
          this.globalDelta = [];
          this.cost = 0;
          this.logicSigMessages = [];
          this.logicSigDisassembly = [];
          this.logs = [];
          this.appCallTrace = void 0;
          this.logicSigTrace = void 0;
          this.required = ["disassembly"];
          this.optionals = [
            "app-call-messages",
            "local-deltas",
            "global-delta",
            "cost",
            "logic-sig-messages",
            "logic-sig-disassembly",
            "logs"
          ];
          this.traces = ["app-call-trace", "logic-sig-trace"];
          this.disassembly = dtr.disassembly;
          this.appCallMessages = dtr["app-call-messages"];
          this.localDeltas = dtr["local-deltas"];
          this.globalDelta = dtr["global-delta"];
          this.cost = dtr.cost;
          this.logicSigMessages = dtr["logic-sig-messages"];
          this.logicSigDisassembly = dtr["logic-sig-disassembly"];
          this.logs = dtr.logs;
          this.appCallTrace = new DryrunTrace(dtr["app-call-trace"]);
          this.logicSigTrace = new DryrunTrace(dtr["logic-sig-trace"]);
        }
        appCallRejected() {
          return this.appCallMessages !== void 0 && this.appCallMessages.includes("REJECT");
        }
        logicSigRejected() {
          return this.logicSigMessages !== void 0 && this.logicSigMessages.includes("REJECT");
        }
        static trace(drt, disassembly, spc) {
          const maxWidth = spc.maxValueWidth || defaultMaxWidth;
          const lines = [["pc#", "ln#", "source", "scratch", "stack"]];
          for (let idx = 0; idx < drt.trace.length; idx++) {
            const { line, error, pc, scratch, stack } = drt.trace[idx];
            const currScratch = scratch !== void 0 ? scratch : [];
            const prevScratch = idx > 0 && drt.trace[idx - 1].scratch !== void 0 ? drt.trace[idx - 1].scratch : [];
            const src = error === "" ? disassembly[line] : `!! ${error} !!`;
            lines.push([
              pc.toString().padEnd(3, " "),
              line.toString().padEnd(3, " "),
              truncate(src, maxWidth),
              truncate(scratchToString(prevScratch, currScratch), maxWidth),
              truncate(stackToString(stack, spc.topOfStackFirst), maxWidth)
            ]);
          }
          const maxLengths = lines.reduce((prev, curr) => {
            const newVal = new Array(lines[0].length).fill(0);
            for (let idx = 0; idx < prev.length; idx++) {
              newVal[idx] = curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];
            }
            return newVal;
          }, new Array(lines[0].length).fill(0));
          return `${lines.map((line) => line.map((v, idx) => v.padEnd(maxLengths[idx] + 1, " ")).join("|").trim()).join("\n")}
`;
        }
        appTrace(spc) {
          if (this.appCallTrace === void 0 || !this.disassembly)
            return "";
          let conf = spc;
          if (spc === void 0)
            conf = {
              maxValueWidth: defaultMaxWidth,
              topOfStackFirst: false
            };
          return _DryrunTransactionResult.trace(this.appCallTrace, this.disassembly, conf);
        }
        lsigTrace(spc) {
          if (this.logicSigTrace === void 0 || this.logicSigDisassembly === void 0)
            return "";
          let conf = spc;
          if (spc === void 0)
            conf = {
              maxValueWidth: defaultMaxWidth,
              topOfStackFirst: true
            };
          return _DryrunTransactionResult.trace(this.logicSigTrace, this.logicSigDisassembly, conf);
        }
      };
      var DryrunResult = class {
        constructor(drrResp) {
          this.error = "";
          this.protocolVersion = "";
          this.txns = [];
          this.error = drrResp.error;
          this.protocolVersion = drrResp["protocol-version"];
          this.txns = drrResp.txns.map((txn) => new DryrunTransactionResult(txn));
        }
      };
      exports.DryrunResult = DryrunResult;
    }
  });

  // node_modules/algosdk/dist/cjs/makeTxn.js
  var require_makeTxn = __commonJS({
    "node_modules/algosdk/dist/cjs/makeTxn.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.makeApplicationCallTxnFromObject = exports.OnApplicationComplete = exports.makeApplicationNoOpTxnFromObject = exports.makeApplicationNoOpTxn = exports.makeApplicationClearStateTxnFromObject = exports.makeApplicationClearStateTxn = exports.makeApplicationCloseOutTxnFromObject = exports.makeApplicationCloseOutTxn = exports.makeApplicationOptInTxnFromObject = exports.makeApplicationOptInTxn = exports.makeApplicationDeleteTxnFromObject = exports.makeApplicationDeleteTxn = exports.makeApplicationUpdateTxnFromObject = exports.makeApplicationUpdateTxn = exports.makeApplicationCreateTxnFromObject = exports.makeApplicationCreateTxn = exports.makeAssetTransferTxnWithSuggestedParamsFromObject = exports.makeAssetTransferTxnWithSuggestedParams = exports.makeAssetFreezeTxnWithSuggestedParamsFromObject = exports.makeAssetFreezeTxnWithSuggestedParams = exports.makeAssetDestroyTxnWithSuggestedParamsFromObject = exports.makeAssetDestroyTxnWithSuggestedParams = exports.makeAssetConfigTxnWithSuggestedParamsFromObject = exports.makeAssetConfigTxnWithSuggestedParams = exports.makeAssetCreateTxnWithSuggestedParamsFromObject = exports.makeAssetCreateTxnWithSuggestedParams = exports.makeKeyRegistrationTxnWithSuggestedParamsFromObject = exports.makeKeyRegistrationTxnWithSuggestedParams = exports.makePaymentTxnWithSuggestedParamsFromObject = exports.makePaymentTxnWithSuggestedParams = void 0;
      var txnBuilder = __importStar2(require_transaction());
      var base_1 = require_base();
      var transactions_1 = require_transactions();
      function makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {
        const o = {
          from,
          to,
          amount,
          closeRemainderTo,
          note,
          suggestedParams,
          type: transactions_1.TransactionType.pay,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makePaymentTxnWithSuggestedParams = makePaymentTxnWithSuggestedParams;
      function makePaymentTxnWithSuggestedParamsFromObject(o) {
        return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);
      }
      exports.makePaymentTxnWithSuggestedParamsFromObject = makePaymentTxnWithSuggestedParamsFromObject;
      function makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation = false, stateProofKey = void 0) {
        const o = {
          from,
          note,
          voteKey,
          selectionKey,
          voteFirst,
          voteLast,
          voteKeyDilution,
          suggestedParams,
          type: transactions_1.TransactionType.keyreg,
          reKeyTo: rekeyTo,
          nonParticipation,
          stateProofKey
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeKeyRegistrationTxnWithSuggestedParams = makeKeyRegistrationTxnWithSuggestedParams;
      function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {
        return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);
      }
      exports.makeKeyRegistrationTxnWithSuggestedParamsFromObject = makeKeyRegistrationTxnWithSuggestedParamsFromObject;
      function makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {
        const o = {
          from,
          note,
          suggestedParams,
          assetTotal: total,
          assetDecimals: decimals,
          assetDefaultFrozen: defaultFrozen,
          assetUnitName: unitName,
          assetName,
          assetURL,
          assetMetadataHash,
          assetManager: manager,
          assetReserve: reserve,
          assetFreeze: freeze,
          assetClawback: clawback,
          type: transactions_1.TransactionType.acfg,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeAssetCreateTxnWithSuggestedParams = makeAssetCreateTxnWithSuggestedParams;
      function makeAssetCreateTxnWithSuggestedParamsFromObject(o) {
        return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);
      }
      exports.makeAssetCreateTxnWithSuggestedParamsFromObject = makeAssetCreateTxnWithSuggestedParamsFromObject;
      function makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking = true, rekeyTo) {
        if (strictEmptyAddressChecking && (manager === void 0 || reserve === void 0 || freeze === void 0 || clawback === void 0)) {
          throw Error("strict empty address checking was turned on, but at least one empty address was provided");
        }
        const o = {
          from,
          suggestedParams,
          assetIndex,
          assetManager: manager,
          assetReserve: reserve,
          assetFreeze: freeze,
          assetClawback: clawback,
          type: transactions_1.TransactionType.acfg,
          note,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeAssetConfigTxnWithSuggestedParams = makeAssetConfigTxnWithSuggestedParams;
      function makeAssetConfigTxnWithSuggestedParamsFromObject(o) {
        return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);
      }
      exports.makeAssetConfigTxnWithSuggestedParamsFromObject = makeAssetConfigTxnWithSuggestedParamsFromObject;
      function makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {
        const o = {
          from,
          suggestedParams,
          assetIndex,
          type: transactions_1.TransactionType.acfg,
          note,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeAssetDestroyTxnWithSuggestedParams = makeAssetDestroyTxnWithSuggestedParams;
      function makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {
        return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);
      }
      exports.makeAssetDestroyTxnWithSuggestedParamsFromObject = makeAssetDestroyTxnWithSuggestedParamsFromObject;
      function makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {
        const o = {
          from,
          type: transactions_1.TransactionType.afrz,
          freezeAccount: freezeTarget,
          assetIndex,
          freezeState,
          note,
          suggestedParams,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeAssetFreezeTxnWithSuggestedParams = makeAssetFreezeTxnWithSuggestedParams;
      function makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {
        return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);
      }
      exports.makeAssetFreezeTxnWithSuggestedParamsFromObject = makeAssetFreezeTxnWithSuggestedParamsFromObject;
      function makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {
        const o = {
          type: transactions_1.TransactionType.axfer,
          from,
          to,
          amount,
          suggestedParams,
          assetIndex,
          note,
          assetRevocationTarget: revocationTarget,
          closeRemainderTo,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeAssetTransferTxnWithSuggestedParams = makeAssetTransferTxnWithSuggestedParams;
      function makeAssetTransferTxnWithSuggestedParamsFromObject(o) {
        return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);
      }
      exports.makeAssetTransferTxnWithSuggestedParamsFromObject = makeAssetTransferTxnWithSuggestedParamsFromObject;
      function makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex: 0,
          appOnComplete: onComplete,
          appLocalInts: numLocalInts,
          appLocalByteSlices: numLocalByteSlices,
          appGlobalInts: numGlobalInts,
          appGlobalByteSlices: numGlobalByteSlices,
          appApprovalProgram: approvalProgram,
          appClearProgram: clearProgram,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo,
          extraPages
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationCreateTxn = makeApplicationCreateTxn;
      function makeApplicationCreateTxnFromObject(o) {
        return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);
      }
      exports.makeApplicationCreateTxnFromObject = makeApplicationCreateTxnFromObject;
      function makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex,
          appApprovalProgram: approvalProgram,
          appOnComplete: base_1.OnApplicationComplete.UpdateApplicationOC,
          appClearProgram: clearProgram,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationUpdateTxn = makeApplicationUpdateTxn;
      function makeApplicationUpdateTxnFromObject(o) {
        return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);
      }
      exports.makeApplicationUpdateTxnFromObject = makeApplicationUpdateTxnFromObject;
      function makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex,
          appOnComplete: base_1.OnApplicationComplete.DeleteApplicationOC,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationDeleteTxn = makeApplicationDeleteTxn;
      function makeApplicationDeleteTxnFromObject(o) {
        return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);
      }
      exports.makeApplicationDeleteTxnFromObject = makeApplicationDeleteTxnFromObject;
      function makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex,
          appOnComplete: base_1.OnApplicationComplete.OptInOC,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationOptInTxn = makeApplicationOptInTxn;
      function makeApplicationOptInTxnFromObject(o) {
        return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);
      }
      exports.makeApplicationOptInTxnFromObject = makeApplicationOptInTxnFromObject;
      function makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex,
          appOnComplete: base_1.OnApplicationComplete.CloseOutOC,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationCloseOutTxn = makeApplicationCloseOutTxn;
      function makeApplicationCloseOutTxnFromObject(o) {
        return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);
      }
      exports.makeApplicationCloseOutTxnFromObject = makeApplicationCloseOutTxnFromObject;
      function makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex,
          appOnComplete: base_1.OnApplicationComplete.ClearStateOC,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationClearStateTxn = makeApplicationClearStateTxn;
      function makeApplicationClearStateTxnFromObject(o) {
        return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);
      }
      exports.makeApplicationClearStateTxnFromObject = makeApplicationClearStateTxnFromObject;
      function makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from,
          suggestedParams,
          appIndex,
          appOnComplete: base_1.OnApplicationComplete.NoOpOC,
          appArgs,
          appAccounts: accounts,
          appForeignApps: foreignApps,
          appForeignAssets: foreignAssets,
          boxes,
          note,
          lease,
          reKeyTo: rekeyTo
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationNoOpTxn = makeApplicationNoOpTxn;
      function makeApplicationNoOpTxnFromObject(o) {
        return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);
      }
      exports.makeApplicationNoOpTxnFromObject = makeApplicationNoOpTxnFromObject;
      var base_2 = require_base();
      Object.defineProperty(exports, "OnApplicationComplete", { enumerable: true, get: function() {
        return base_2.OnApplicationComplete;
      } });
      function makeApplicationCallTxnFromObject(options) {
        const o = {
          type: transactions_1.TransactionType.appl,
          from: options.from,
          suggestedParams: options.suggestedParams,
          appIndex: options.appIndex,
          appOnComplete: options.onComplete,
          appLocalInts: options.numLocalInts,
          appLocalByteSlices: options.numLocalByteSlices,
          appGlobalInts: options.numGlobalInts,
          appGlobalByteSlices: options.numGlobalByteSlices,
          appApprovalProgram: options.approvalProgram,
          appClearProgram: options.clearProgram,
          appArgs: options.appArgs,
          appAccounts: options.accounts,
          appForeignApps: options.foreignApps,
          appForeignAssets: options.foreignAssets,
          boxes: options.boxes,
          note: options.note,
          lease: options.lease,
          reKeyTo: options.rekeyTo,
          extraPages: options.extraPages
        };
        return new txnBuilder.Transaction(o);
      }
      exports.makeApplicationCallTxnFromObject = makeApplicationCallTxnFromObject;
    }
  });

  // node_modules/algosdk/dist/cjs/signer.js
  var require_signer = __commonJS({
    "node_modules/algosdk/dist/cjs/signer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isTransactionWithSigner = exports.makeEmptyTransactionSigner = exports.makeMultiSigAccountTransactionSigner = exports.makeLogicSigAccountTransactionSigner = exports.makeBasicAccountTransactionSigner = void 0;
      var transaction_1 = require_transaction();
      var logicsig_1 = require_logicsig();
      var multisig_1 = require_multisig();
      function makeBasicAccountTransactionSigner(account) {
        return (txnGroup, indexesToSign) => {
          const signed = [];
          for (const index of indexesToSign) {
            signed.push(txnGroup[index].signTxn(account.sk));
          }
          return Promise.resolve(signed);
        };
      }
      exports.makeBasicAccountTransactionSigner = makeBasicAccountTransactionSigner;
      function makeLogicSigAccountTransactionSigner(account) {
        return (txnGroup, indexesToSign) => {
          const signed = [];
          for (const index of indexesToSign) {
            const { blob } = (0, logicsig_1.signLogicSigTransactionObject)(txnGroup[index], account);
            signed.push(blob);
          }
          return Promise.resolve(signed);
        };
      }
      exports.makeLogicSigAccountTransactionSigner = makeLogicSigAccountTransactionSigner;
      function makeMultiSigAccountTransactionSigner(msig, sks) {
        return (txnGroup, indexesToSign) => {
          const signed = [];
          for (const index of indexesToSign) {
            const txn = txnGroup[index];
            const partialSigs = [];
            for (const sk of sks) {
              const { blob } = (0, multisig_1.signMultisigTransaction)(txn, msig, sk);
              partialSigs.push(blob);
            }
            if (partialSigs.length > 1) {
              signed.push((0, multisig_1.mergeMultisigTransactions)(partialSigs));
            } else {
              signed.push(partialSigs[0]);
            }
          }
          return Promise.resolve(signed);
        };
      }
      exports.makeMultiSigAccountTransactionSigner = makeMultiSigAccountTransactionSigner;
      function makeEmptyTransactionSigner() {
        return (txnGroup, indexesToSign) => {
          const unsigned = [];
          for (const index of indexesToSign) {
            unsigned.push((0, transaction_1.encodeUnsignedSimulateTransaction)(txnGroup[index]));
          }
          return Promise.resolve(unsigned);
        };
      }
      exports.makeEmptyTransactionSigner = makeEmptyTransactionSigner;
      function isTransactionWithSigner(value) {
        return typeof value === "object" && Object.keys(value).length === 2 && typeof value.txn === "object" && typeof value.signer === "function";
      }
      exports.isTransactionWithSigner = isTransactionWithSigner;
    }
  });

  // node_modules/algosdk/dist/cjs/abi/abi_type.js
  var require_abi_type = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/abi_type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ABITupleType = exports.ABIArrayDynamicType = exports.ABIArrayStaticType = exports.ABIStringType = exports.ABIByteType = exports.ABIBoolType = exports.ABIAddressType = exports.ABIUfixedType = exports.ABIUintType = exports.ABIType = exports.LENGTH_ENCODE_BYTE_SIZE = exports.SINGLE_BOOL_SIZE = exports.SINGLE_BYTE_SIZE = exports.ADDR_BYTE_SIZE = exports.MAX_LEN = void 0;
      var buffer_1 = require_buffer2();
      var address_1 = require_address();
      var bigint_1 = require_bigint();
      var utils_1 = require_utils();
      exports.MAX_LEN = 2 ** 16 - 1;
      exports.ADDR_BYTE_SIZE = 32;
      exports.SINGLE_BYTE_SIZE = 1;
      exports.SINGLE_BOOL_SIZE = 1;
      exports.LENGTH_ENCODE_BYTE_SIZE = 2;
      var staticArrayRegexp = /^([a-z\d[\](),]+)\[(0|[1-9][\d]*)]$/;
      var ufixedRegexp = /^ufixed([1-9][\d]*)x([1-9][\d]*)$/;
      var ABIType = class _ABIType {
        // De-serializes the ABI type from a string using the ABI specs
        static from(str) {
          if (str.endsWith("[]")) {
            const arrayArgType = _ABIType.from(str.slice(0, str.length - 2));
            return new ABIArrayDynamicType(arrayArgType);
          }
          if (str.endsWith("]")) {
            const stringMatches = str.match(staticArrayRegexp);
            if (stringMatches.length !== 3) {
              throw new Error(`malformed static array string: ${str}`);
            }
            const arrayLengthStr = stringMatches[2];
            const arrayLength = parseInt(arrayLengthStr, 10);
            if (arrayLength > exports.MAX_LEN) {
              throw new Error(`array length exceeds limit ${exports.MAX_LEN}`);
            }
            const arrayType = _ABIType.from(stringMatches[1]);
            return new ABIArrayStaticType(arrayType, arrayLength);
          }
          if (str.startsWith("uint")) {
            const digitsOnly = (string) => [...string].every((c) => "0123456789".includes(c));
            const typeSizeStr = str.slice(4, str.length);
            if (!digitsOnly(typeSizeStr)) {
              throw new Error(`malformed uint string: ${typeSizeStr}`);
            }
            const typeSize = parseInt(typeSizeStr, 10);
            if (typeSize > exports.MAX_LEN) {
              throw new Error(`malformed uint string: ${typeSize}`);
            }
            return new ABIUintType(typeSize);
          }
          if (str === "byte") {
            return new ABIByteType();
          }
          if (str.startsWith("ufixed")) {
            const stringMatches = str.match(ufixedRegexp);
            if (stringMatches.length !== 3) {
              throw new Error(`malformed ufixed type: ${str}`);
            }
            const ufixedSize = parseInt(stringMatches[1], 10);
            const ufixedPrecision = parseInt(stringMatches[2], 10);
            return new ABIUfixedType(ufixedSize, ufixedPrecision);
          }
          if (str === "bool") {
            return new ABIBoolType();
          }
          if (str === "address") {
            return new ABIAddressType();
          }
          if (str === "string") {
            return new ABIStringType();
          }
          if (str.length >= 2 && str[0] === "(" && str[str.length - 1] === ")") {
            const tupleContent = ABITupleType.parseTupleContent(str.slice(1, str.length - 1));
            const tupleTypes = [];
            for (let i = 0; i < tupleContent.length; i++) {
              const ti = _ABIType.from(tupleContent[i]);
              tupleTypes.push(ti);
            }
            return new ABITupleType(tupleTypes);
          }
          throw new Error(`cannot convert a string ${str} to an ABI type`);
        }
      };
      exports.ABIType = ABIType;
      var ABIUintType = class _ABIUintType extends ABIType {
        constructor(size) {
          super();
          if (size % 8 !== 0 || size < 8 || size > 512) {
            throw new Error(`unsupported uint type bitSize: ${size}`);
          }
          this.bitSize = size;
        }
        toString() {
          return `uint${this.bitSize}`;
        }
        equals(other) {
          return other instanceof _ABIUintType && this.bitSize === other.bitSize;
        }
        isDynamic() {
          return false;
        }
        byteLen() {
          return this.bitSize / 8;
        }
        encode(value) {
          if (typeof value !== "bigint" && typeof value !== "number") {
            throw new Error(`Cannot encode value as uint${this.bitSize}: ${value}`);
          }
          if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {
            throw new Error(`${value} is not a non-negative int or too big to fit in size uint${this.bitSize}`);
          }
          if (typeof value === "number" && !Number.isSafeInteger(value)) {
            throw new Error(`${value} should be converted into a BigInt before it is encoded`);
          }
          return (0, bigint_1.bigIntToBytes)(value, this.bitSize / 8);
        }
        decode(byteString) {
          if (byteString.length !== this.bitSize / 8) {
            throw new Error(`byte string must correspond to a uint${this.bitSize}`);
          }
          return (0, bigint_1.bytesToBigInt)(byteString);
        }
      };
      exports.ABIUintType = ABIUintType;
      var ABIUfixedType = class _ABIUfixedType extends ABIType {
        constructor(size, denominator) {
          super();
          if (size % 8 !== 0 || size < 8 || size > 512) {
            throw new Error(`unsupported ufixed type bitSize: ${size}`);
          }
          if (denominator > 160 || denominator < 1) {
            throw new Error(`unsupported ufixed type precision: ${denominator}`);
          }
          this.bitSize = size;
          this.precision = denominator;
        }
        toString() {
          return `ufixed${this.bitSize}x${this.precision}`;
        }
        equals(other) {
          return other instanceof _ABIUfixedType && this.bitSize === other.bitSize && this.precision === other.precision;
        }
        isDynamic() {
          return false;
        }
        byteLen() {
          return this.bitSize / 8;
        }
        encode(value) {
          if (typeof value !== "bigint" && typeof value !== "number") {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
          }
          if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {
            throw new Error(`${value} is not a non-negative int or too big to fit in size ${this.toString()}`);
          }
          if (typeof value === "number" && !Number.isSafeInteger(value)) {
            throw new Error(`${value} should be converted into a BigInt before it is encoded`);
          }
          return (0, bigint_1.bigIntToBytes)(value, this.bitSize / 8);
        }
        decode(byteString) {
          if (byteString.length !== this.bitSize / 8) {
            throw new Error(`byte string must correspond to a ${this.toString()}`);
          }
          return (0, bigint_1.bytesToBigInt)(byteString);
        }
      };
      exports.ABIUfixedType = ABIUfixedType;
      var ABIAddressType = class _ABIAddressType extends ABIType {
        toString() {
          return "address";
        }
        equals(other) {
          return other instanceof _ABIAddressType;
        }
        isDynamic() {
          return false;
        }
        byteLen() {
          return exports.ADDR_BYTE_SIZE;
        }
        encode(value) {
          if (typeof value !== "string" && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
          }
          if (typeof value === "string") {
            const decodedAddress = (0, address_1.decodeAddress)(value);
            return decodedAddress.publicKey;
          }
          if (value.byteLength !== 32) {
            throw new Error(`byte string must be 32 bytes long for an address`);
          }
          return value;
        }
        decode(byteString) {
          if (byteString.byteLength !== 32) {
            throw new Error(`byte string must be 32 bytes long for an address`);
          }
          return (0, address_1.encodeAddress)(byteString);
        }
      };
      exports.ABIAddressType = ABIAddressType;
      var ABIBoolType = class _ABIBoolType extends ABIType {
        toString() {
          return "bool";
        }
        equals(other) {
          return other instanceof _ABIBoolType;
        }
        isDynamic() {
          return false;
        }
        byteLen() {
          return exports.SINGLE_BOOL_SIZE;
        }
        encode(value) {
          if (typeof value !== "boolean") {
            throw new Error(`Cannot encode value as bool: ${value}`);
          }
          if (value) {
            return new Uint8Array([128]);
          }
          return new Uint8Array([0]);
        }
        decode(byteString) {
          if (byteString.byteLength !== 1) {
            throw new Error(`bool string must be 1 byte long`);
          }
          const value = byteString[0];
          if (value === 128) {
            return true;
          }
          if (value === 0) {
            return false;
          }
          throw new Error(`boolean could not be decoded from the byte string`);
        }
      };
      exports.ABIBoolType = ABIBoolType;
      var ABIByteType = class _ABIByteType extends ABIType {
        toString() {
          return "byte";
        }
        equals(other) {
          return other instanceof _ABIByteType;
        }
        isDynamic() {
          return false;
        }
        byteLen() {
          return exports.SINGLE_BYTE_SIZE;
        }
        encode(value) {
          if (typeof value !== "number" && typeof value !== "bigint") {
            throw new Error(`Cannot encode value as byte: ${value}`);
          }
          if (typeof value === "bigint") {
            value = Number(value);
          }
          if (value < 0 || value > 255) {
            throw new Error(`${value} cannot be encoded into a byte`);
          }
          return new Uint8Array([value]);
        }
        decode(byteString) {
          if (byteString.byteLength !== 1) {
            throw new Error(`byte string must be 1 byte long`);
          }
          return byteString[0];
        }
      };
      exports.ABIByteType = ABIByteType;
      var ABIStringType = class _ABIStringType extends ABIType {
        toString() {
          return "string";
        }
        equals(other) {
          return other instanceof _ABIStringType;
        }
        isDynamic() {
          return true;
        }
        byteLen() {
          throw new Error(`${this.toString()} is a dynamic type`);
        }
        encode(value) {
          if (typeof value !== "string" && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as string: ${value}`);
          }
          const encodedBytes = buffer_1.Buffer.from(value);
          const encodedLength = (0, bigint_1.bigIntToBytes)(encodedBytes.length, exports.LENGTH_ENCODE_BYTE_SIZE);
          const mergedBytes = new Uint8Array(encodedBytes.length + exports.LENGTH_ENCODE_BYTE_SIZE);
          mergedBytes.set(encodedLength);
          mergedBytes.set(encodedBytes, exports.LENGTH_ENCODE_BYTE_SIZE);
          return mergedBytes;
        }
        decode(byteString) {
          if (byteString.length < exports.LENGTH_ENCODE_BYTE_SIZE) {
            throw new Error(`byte string is too short to be decoded. Actual length is ${byteString.length}, but expected at least ${exports.LENGTH_ENCODE_BYTE_SIZE}`);
          }
          const buf = buffer_1.Buffer.from(byteString);
          const byteLength = buf.readUIntBE(0, exports.LENGTH_ENCODE_BYTE_SIZE);
          const byteValue = byteString.slice(exports.LENGTH_ENCODE_BYTE_SIZE, byteString.length);
          if (byteLength !== byteValue.length) {
            throw new Error(`string length bytes do not match the actual length of string. Expected ${byteLength}, got ${byteValue.length}`);
          }
          return buffer_1.Buffer.from(byteValue).toString("utf-8");
        }
      };
      exports.ABIStringType = ABIStringType;
      var ABIArrayStaticType = class _ABIArrayStaticType extends ABIType {
        constructor(argType, arrayLength) {
          super();
          if (arrayLength < 0) {
            throw new Error(`static array must have a non negative length: ${arrayLength}`);
          }
          this.childType = argType;
          this.staticLength = arrayLength;
        }
        toString() {
          return `${this.childType.toString()}[${this.staticLength}]`;
        }
        equals(other) {
          return other instanceof _ABIArrayStaticType && this.staticLength === other.staticLength && this.childType.equals(other.childType);
        }
        isDynamic() {
          return this.childType.isDynamic();
        }
        byteLen() {
          if (this.childType.constructor === ABIBoolType) {
            return Math.ceil(this.staticLength / 8);
          }
          return this.staticLength * this.childType.byteLen();
        }
        encode(value) {
          if (!Array.isArray(value) && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
          }
          if (value.length !== this.staticLength) {
            throw new Error(`Value array does not match static array length. Expected ${this.staticLength}, got ${value.length}`);
          }
          const convertedTuple = this.toABITupleType();
          return convertedTuple.encode(value);
        }
        decode(byteString) {
          const convertedTuple = this.toABITupleType();
          return convertedTuple.decode(byteString);
        }
        toABITupleType() {
          return new ABITupleType(Array(this.staticLength).fill(this.childType));
        }
      };
      exports.ABIArrayStaticType = ABIArrayStaticType;
      var ABIArrayDynamicType = class _ABIArrayDynamicType extends ABIType {
        constructor(argType) {
          super();
          this.childType = argType;
        }
        toString() {
          return `${this.childType.toString()}[]`;
        }
        equals(other) {
          return other instanceof _ABIArrayDynamicType && this.childType.equals(other.childType);
        }
        isDynamic() {
          return true;
        }
        byteLen() {
          throw new Error(`${this.toString()} is a dynamic type`);
        }
        encode(value) {
          if (!Array.isArray(value) && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
          }
          const convertedTuple = this.toABITupleType(value.length);
          const encodedTuple = convertedTuple.encode(value);
          const encodedLength = (0, bigint_1.bigIntToBytes)(convertedTuple.childTypes.length, exports.LENGTH_ENCODE_BYTE_SIZE);
          const mergedBytes = (0, utils_1.concatArrays)(encodedLength, encodedTuple);
          return mergedBytes;
        }
        decode(byteString) {
          const buf = buffer_1.Buffer.from(byteString);
          const byteLength = buf.readUIntBE(0, exports.LENGTH_ENCODE_BYTE_SIZE);
          const convertedTuple = this.toABITupleType(byteLength);
          return convertedTuple.decode(byteString.slice(exports.LENGTH_ENCODE_BYTE_SIZE, byteString.length));
        }
        toABITupleType(length) {
          return new ABITupleType(Array(length).fill(this.childType));
        }
      };
      exports.ABIArrayDynamicType = ABIArrayDynamicType;
      var ABITupleType = class _ABITupleType extends ABIType {
        constructor(argTypes) {
          super();
          if (argTypes.length >= exports.MAX_LEN) {
            throw new Error("tuple type child type number larger than maximum uint16 error");
          }
          this.childTypes = argTypes;
        }
        toString() {
          const typeStrings = [];
          for (let i = 0; i < this.childTypes.length; i++) {
            typeStrings[i] = this.childTypes[i].toString();
          }
          return `(${typeStrings.join(",")})`;
        }
        equals(other) {
          return other instanceof _ABITupleType && this.childTypes.length === other.childTypes.length && this.childTypes.every((child, index) => child.equals(other.childTypes[index]));
        }
        isDynamic() {
          const isDynamic = (child) => child.isDynamic();
          return this.childTypes.some(isDynamic);
        }
        byteLen() {
          let size = 0;
          for (let i = 0; i < this.childTypes.length; i++) {
            if (this.childTypes[i].constructor === ABIBoolType) {
              const after = findBoolLR(this.childTypes, i, 1);
              const boolNum = after + 1;
              i += after;
              size += Math.trunc((boolNum + 7) / 8);
            } else {
              const childByteSize = this.childTypes[i].byteLen();
              size += childByteSize;
            }
          }
          return size;
        }
        encode(value) {
          if (!Array.isArray(value) && !(value instanceof Uint8Array)) {
            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);
          }
          const values = Array.from(value);
          if (value.length > exports.MAX_LEN) {
            throw new Error("length of tuple array should not exceed a uint16");
          }
          const tupleTypes = this.childTypes;
          const heads = [];
          const tails = [];
          const isDynamicIndex = /* @__PURE__ */ new Map();
          let i = 0;
          while (i < tupleTypes.length) {
            const tupleType = tupleTypes[i];
            if (tupleType.isDynamic()) {
              isDynamicIndex.set(heads.length, true);
              heads.push(new Uint8Array([0, 0]));
              tails.push(tupleType.encode(values[i]));
            } else {
              if (tupleType.constructor === ABIBoolType) {
                const before = findBoolLR(tupleTypes, i, -1);
                let after = findBoolLR(tupleTypes, i, 1);
                if (before % 8 !== 0) {
                  throw new Error("expected before index should have number of bool mod 8 equal 0");
                }
                after = Math.min(7, after);
                const compressedInt = compressMultipleBool(values.slice(i, i + after + 1));
                heads.push((0, bigint_1.bigIntToBytes)(compressedInt, 1));
                i += after;
              } else {
                const encodedTupleValue = tupleType.encode(values[i]);
                heads.push(encodedTupleValue);
              }
              isDynamicIndex.set(i, false);
              tails.push(new Uint8Array());
            }
            i += 1;
          }
          let headLength = 0;
          for (const headElement of heads) {
            headLength += headElement.length;
          }
          let tailLength = 0;
          for (let j = 0; j < heads.length; j++) {
            if (isDynamicIndex.get(j)) {
              const headValue = headLength + tailLength;
              if (headValue > exports.MAX_LEN) {
                throw new Error(`byte length of ${headValue} should not exceed a uint16`);
              }
              heads[j] = (0, bigint_1.bigIntToBytes)(headValue, exports.LENGTH_ENCODE_BYTE_SIZE);
            }
            tailLength += tails[j].length;
          }
          return (0, utils_1.concatArrays)(...heads, ...tails);
        }
        decode(byteString) {
          const tupleTypes = this.childTypes;
          const dynamicSegments = [];
          const valuePartition = [];
          let i = 0;
          let iterIndex = 0;
          const buf = buffer_1.Buffer.from(byteString);
          while (i < tupleTypes.length) {
            const tupleType = tupleTypes[i];
            if (tupleType.isDynamic()) {
              if (byteString.slice(iterIndex, byteString.length).length < exports.LENGTH_ENCODE_BYTE_SIZE) {
                throw new Error("dynamic type in tuple is too short to be decoded");
              }
              const dynamicIndex = buf.readUIntBE(iterIndex, exports.LENGTH_ENCODE_BYTE_SIZE);
              if (dynamicSegments.length > 0) {
                dynamicSegments[dynamicSegments.length - 1].right = dynamicIndex;
                if (dynamicIndex < dynamicSegments[dynamicSegments.length - 1].left) {
                  throw new Error("dynamic index segment miscalculation: left is greater than right index");
                }
              }
              const seg = {
                left: dynamicIndex,
                right: -1
              };
              dynamicSegments.push(seg);
              valuePartition.push(null);
              iterIndex += exports.LENGTH_ENCODE_BYTE_SIZE;
            } else {
              if (tupleType.constructor === ABIBoolType) {
                const before = findBoolLR(this.childTypes, i, -1);
                let after = findBoolLR(this.childTypes, i, 1);
                if (before % 8 !== 0) {
                  throw new Error("expected before bool number mod 8 === 0");
                }
                after = Math.min(7, after);
                for (let boolIndex = 0; boolIndex <= after; boolIndex++) {
                  const boolMask = 128 >> boolIndex;
                  if ((byteString[iterIndex] & boolMask) > 0) {
                    valuePartition.push(new Uint8Array([128]));
                  } else {
                    valuePartition.push(new Uint8Array([0]));
                  }
                }
                i += after;
                iterIndex += 1;
              } else {
                const currLen = tupleType.byteLen();
                valuePartition.push(byteString.slice(iterIndex, iterIndex + currLen));
                iterIndex += currLen;
              }
            }
            if (i !== tupleTypes.length - 1 && iterIndex >= byteString.length) {
              throw new Error("input byte not enough to decode");
            }
            i += 1;
          }
          if (dynamicSegments.length > 0) {
            dynamicSegments[dynamicSegments.length - 1].right = byteString.length;
            iterIndex = byteString.length;
          }
          if (iterIndex < byteString.length) {
            throw new Error("input byte not fully consumed");
          }
          for (let j = 0; j < dynamicSegments.length; j++) {
            const seg = dynamicSegments[j];
            if (seg.left > seg.right) {
              throw new Error("dynamic segment should display a [l, r] space with l <= r");
            }
            if (j !== dynamicSegments.length - 1 && seg.right !== dynamicSegments[j + 1].left) {
              throw new Error("dynamic segment should be consecutive");
            }
          }
          let segIndex = 0;
          for (let j = 0; j < tupleTypes.length; j++) {
            if (tupleTypes[j].isDynamic()) {
              valuePartition[j] = byteString.slice(dynamicSegments[segIndex].left, dynamicSegments[segIndex].right);
              segIndex += 1;
            }
          }
          const returnValues = [];
          for (let j = 0; j < tupleTypes.length; j++) {
            const valueTi = tupleTypes[j].decode(valuePartition[j]);
            returnValues.push(valueTi);
          }
          return returnValues;
        }
        static parseTupleContent(str) {
          if (str.length === 0) {
            return [];
          }
          if (str.endsWith(",") || str.startsWith(",")) {
            throw new Error("tuple string should not start with comma");
          }
          if (str.includes(",,")) {
            throw new Error("tuple string should not have consecutive commas");
          }
          const tupleStrings = [];
          let depth = 0;
          let word = "";
          for (const char of str) {
            word += char;
            if (char === "(") {
              depth += 1;
            } else if (char === ")") {
              depth -= 1;
            } else if (char === ",") {
              if (depth === 0) {
                tupleStrings.push(word.slice(0, word.length - 1));
                word = "";
              }
            }
          }
          if (word.length !== 0) {
            tupleStrings.push(word);
          }
          if (depth !== 0) {
            throw new Error("tuple string has mismatched parentheses");
          }
          return tupleStrings;
        }
      };
      exports.ABITupleType = ABITupleType;
      function compressMultipleBool(valueList) {
        let res = 0;
        if (valueList.length > 8) {
          throw new Error("value list passed in should be no greater than length 8");
        }
        for (let i = 0; i < valueList.length; i++) {
          const boolVal = valueList[i];
          if (typeof boolVal !== "boolean") {
            throw new Error("non-boolean values cannot be compressed into a byte");
          }
          if (boolVal) {
            res |= 1 << 7 - i;
          }
        }
        return res;
      }
      function findBoolLR(typeList, index, delta) {
        let until = 0;
        while (true) {
          const curr = index + delta * until;
          if (typeList[curr].constructor === ABIBoolType) {
            if (curr !== typeList.length - 1 && delta === 1) {
              until += 1;
            } else if (curr > 0 && delta === -1) {
              until += 1;
            } else {
              break;
            }
          } else {
            until -= 1;
            break;
          }
        }
        return until;
      }
    }
  });

  // node_modules/algosdk/dist/cjs/abi/transaction.js
  var require_transaction2 = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/transaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.abiCheckTransactionType = exports.abiTypeIsTransaction = exports.ABITransactionType = void 0;
      var ABITransactionType;
      (function(ABITransactionType2) {
        ABITransactionType2["any"] = "txn";
        ABITransactionType2["pay"] = "pay";
        ABITransactionType2["keyreg"] = "keyreg";
        ABITransactionType2["acfg"] = "acfg";
        ABITransactionType2["axfer"] = "axfer";
        ABITransactionType2["afrz"] = "afrz";
        ABITransactionType2["appl"] = "appl";
      })(ABITransactionType = exports.ABITransactionType || (exports.ABITransactionType = {}));
      function abiTypeIsTransaction(type) {
        return type === ABITransactionType.any || type === ABITransactionType.pay || type === ABITransactionType.keyreg || type === ABITransactionType.acfg || type === ABITransactionType.axfer || type === ABITransactionType.afrz || type === ABITransactionType.appl;
      }
      exports.abiTypeIsTransaction = abiTypeIsTransaction;
      function abiCheckTransactionType(type, txn) {
        if (type === ABITransactionType.any) {
          return true;
        }
        return txn.type && txn.type.toString() === type.toString();
      }
      exports.abiCheckTransactionType = abiCheckTransactionType;
    }
  });

  // node_modules/algosdk/dist/cjs/abi/reference.js
  var require_reference = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/reference.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.abiTypeIsReference = exports.ABIReferenceType = void 0;
      var ABIReferenceType;
      (function(ABIReferenceType2) {
        ABIReferenceType2["account"] = "account";
        ABIReferenceType2["application"] = "application";
        ABIReferenceType2["asset"] = "asset";
      })(ABIReferenceType = exports.ABIReferenceType || (exports.ABIReferenceType = {}));
      function abiTypeIsReference(type) {
        return type === ABIReferenceType.account || type === ABIReferenceType.application || type === ABIReferenceType.asset;
      }
      exports.abiTypeIsReference = abiTypeIsReference;
    }
  });

  // node_modules/algosdk/dist/cjs/abi/method.js
  var require_method = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/method.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getMethodByName = exports.ABIMethod = void 0;
      var naclWrappers_1 = require_naclWrappers();
      var abi_type_1 = require_abi_type();
      var transaction_1 = require_transaction2();
      var reference_1 = require_reference();
      function parseMethodSignature(signature) {
        const argsStart = signature.indexOf("(");
        if (argsStart === -1) {
          throw new Error(`Invalid method signature: ${signature}`);
        }
        let argsEnd = -1;
        let depth = 0;
        for (let i = argsStart; i < signature.length; i++) {
          const char = signature[i];
          if (char === "(") {
            depth += 1;
          } else if (char === ")") {
            if (depth === 0) {
              break;
            }
            depth -= 1;
            if (depth === 0) {
              argsEnd = i;
              break;
            }
          }
        }
        if (argsEnd === -1) {
          throw new Error(`Invalid method signature: ${signature}`);
        }
        return {
          name: signature.slice(0, argsStart),
          args: abi_type_1.ABITupleType.parseTupleContent(signature.slice(argsStart + 1, argsEnd)),
          returns: signature.slice(argsEnd + 1)
        };
      }
      var ABIMethod = class _ABIMethod {
        constructor(params) {
          if (typeof params.name !== "string" || typeof params.returns !== "object" || !Array.isArray(params.args)) {
            throw new Error("Invalid ABIMethod parameters");
          }
          this.name = params.name;
          this.description = params.desc;
          this.args = params.args.map(({ type, name, desc }) => {
            if ((0, transaction_1.abiTypeIsTransaction)(type) || (0, reference_1.abiTypeIsReference)(type)) {
              return {
                type,
                name,
                description: desc
              };
            }
            return {
              type: abi_type_1.ABIType.from(type),
              name,
              description: desc
            };
          });
          this.returns = {
            type: params.returns.type === "void" ? params.returns.type : abi_type_1.ABIType.from(params.returns.type),
            description: params.returns.desc
          };
        }
        getSignature() {
          const args = this.args.map((arg) => arg.type.toString()).join(",");
          const returns = this.returns.type.toString();
          return `${this.name}(${args})${returns}`;
        }
        getSelector() {
          const hash = (0, naclWrappers_1.genericHash)(this.getSignature());
          return new Uint8Array(hash.slice(0, 4));
        }
        txnCount() {
          let count = 1;
          for (const arg of this.args) {
            if (typeof arg.type === "string" && (0, transaction_1.abiTypeIsTransaction)(arg.type)) {
              count += 1;
            }
          }
          return count;
        }
        toJSON() {
          return {
            name: this.name,
            desc: this.description,
            args: this.args.map(({ type, name, description }) => ({
              type: type.toString(),
              name,
              desc: description
            })),
            returns: {
              type: this.returns.type.toString(),
              desc: this.returns.description
            }
          };
        }
        static fromSignature(signature) {
          const { name, args, returns } = parseMethodSignature(signature);
          return new _ABIMethod({
            name,
            args: args.map((arg) => ({ type: arg })),
            returns: { type: returns }
          });
        }
      };
      exports.ABIMethod = ABIMethod;
      function getMethodByName(methods, name) {
        if (methods === null || !Array.isArray(methods) || !methods.every((item) => item instanceof ABIMethod))
          throw new Error("Methods list provided is null or not the correct type");
        const filteredMethods = methods.filter((m) => m.name === name);
        if (filteredMethods.length > 1)
          throw new Error(`found ${filteredMethods.length} methods with the same name ${filteredMethods.map((m) => m.getSignature()).join(",")}`);
        if (filteredMethods.length === 0)
          throw new Error(`found 0 methods with the name ${name}`);
        return filteredMethods[0];
      }
      exports.getMethodByName = getMethodByName;
    }
  });

  // node_modules/algosdk/dist/cjs/abi/contract.js
  var require_contract = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/contract.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ABIContract = void 0;
      var method_1 = require_method();
      var ABIContract = class {
        constructor(params) {
          if (typeof params.name !== "string" || !Array.isArray(params.methods) || params.networks && typeof params.networks !== "object") {
            throw new Error("Invalid ABIContract parameters");
          }
          this.name = params.name;
          this.description = params.desc;
          this.networks = params.networks ? { ...params.networks } : {};
          this.methods = params.methods.map((method) => new method_1.ABIMethod(method));
        }
        toJSON() {
          return {
            name: this.name,
            desc: this.description,
            networks: this.networks,
            methods: this.methods.map((method) => method.toJSON())
          };
        }
        getMethodByName(name) {
          return (0, method_1.getMethodByName)(this.methods, name);
        }
      };
      exports.ABIContract = ABIContract;
    }
  });

  // node_modules/algosdk/dist/cjs/abi/interface.js
  var require_interface = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/interface.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ABIInterface = void 0;
      var method_1 = require_method();
      var ABIInterface = class {
        constructor(params) {
          if (typeof params.name !== "string" || !Array.isArray(params.methods)) {
            throw new Error("Invalid ABIInterface parameters");
          }
          this.name = params.name;
          this.description = params.desc;
          this.methods = params.methods.map((method) => new method_1.ABIMethod(method));
        }
        toJSON() {
          return {
            name: this.name,
            desc: this.description,
            methods: this.methods.map((method) => method.toJSON())
          };
        }
        getMethodByName(name) {
          return (0, method_1.getMethodByName)(this.methods, name);
        }
      };
      exports.ABIInterface = ABIInterface;
    }
  });

  // node_modules/algosdk/dist/cjs/abi/index.js
  var require_abi = __commonJS({
    "node_modules/algosdk/dist/cjs/abi/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar2(require_abi_type(), exports);
      __exportStar2(require_contract(), exports);
      __exportStar2(require_interface(), exports);
      __exportStar2(require_method(), exports);
      __exportStar2(require_transaction2(), exports);
      __exportStar2(require_reference(), exports);
    }
  });

  // node_modules/algosdk/dist/cjs/composer.js
  var require_composer = __commonJS({
    "node_modules/algosdk/dist/cjs/composer.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AtomicTransactionComposer = exports.AtomicTransactionComposerStatus = void 0;
      var buffer_1 = require_buffer2();
      var abi_1 = require_abi();
      var types_1 = require_types();
      var group_1 = require_group();
      var makeTxn_1 = require_makeTxn();
      var signer_1 = require_signer();
      var transaction_1 = require_transaction();
      var base_1 = require_base();
      var wait_1 = require_wait();
      var encoding = __importStar2(require_encoding());
      var RETURN_PREFIX = buffer_1.Buffer.from([21, 31, 124, 117]);
      var MAX_APP_ARGS = 16;
      var AtomicTransactionComposerStatus;
      (function(AtomicTransactionComposerStatus2) {
        AtomicTransactionComposerStatus2[AtomicTransactionComposerStatus2["BUILDING"] = 0] = "BUILDING";
        AtomicTransactionComposerStatus2[AtomicTransactionComposerStatus2["BUILT"] = 1] = "BUILT";
        AtomicTransactionComposerStatus2[AtomicTransactionComposerStatus2["SIGNED"] = 2] = "SIGNED";
        AtomicTransactionComposerStatus2[AtomicTransactionComposerStatus2["SUBMITTED"] = 3] = "SUBMITTED";
        AtomicTransactionComposerStatus2[AtomicTransactionComposerStatus2["COMMITTED"] = 4] = "COMMITTED";
      })(AtomicTransactionComposerStatus = exports.AtomicTransactionComposerStatus || (exports.AtomicTransactionComposerStatus = {}));
      function populateForeignArray(valueToAdd, array, zeroValue) {
        if (zeroValue != null && valueToAdd === zeroValue) {
          return 0;
        }
        const offset = zeroValue == null ? 0 : 1;
        for (let i = 0; i < array.length; i++) {
          if (valueToAdd === array[i]) {
            return i + offset;
          }
        }
        array.push(valueToAdd);
        return array.length - 1 + offset;
      }
      var AtomicTransactionComposer = class _AtomicTransactionComposer {
        constructor() {
          this.status = AtomicTransactionComposerStatus.BUILDING;
          this.transactions = [];
          this.methodCalls = /* @__PURE__ */ new Map();
          this.signedTxns = [];
          this.txIDs = [];
        }
        /**
         * Get the status of this composer's transaction group.
         */
        getStatus() {
          return this.status;
        }
        /**
         * Get the number of transactions currently in this atomic group.
         */
        count() {
          return this.transactions.length;
        }
        /**
         * Create a new composer with the same underlying transactions. The new composer's status will be
         * BUILDING, so additional transactions may be added to it.
         */
        clone() {
          const theClone = new _AtomicTransactionComposer();
          theClone.transactions = this.transactions.map(({ txn, signer }) => ({
            // not quite a deep copy, but good enough for our purposes (modifying txn.group in buildGroup)
            txn: transaction_1.Transaction.from_obj_for_encoding({
              ...txn.get_obj_for_encoding(),
              // erase the group ID
              grp: void 0
            }),
            signer
          }));
          theClone.methodCalls = new Map(this.methodCalls);
          return theClone;
        }
        /**
         * Add a transaction to this atomic group.
         *
         * An error will be thrown if the transaction has a nonzero group ID, the composer's status is
         * not BUILDING, or if adding this transaction causes the current group to exceed MAX_GROUP_SIZE.
         */
        addTransaction(txnAndSigner) {
          if (this.status !== AtomicTransactionComposerStatus.BUILDING) {
            throw new Error("Cannot add transactions when composer status is not BUILDING");
          }
          if (this.transactions.length === _AtomicTransactionComposer.MAX_GROUP_SIZE) {
            throw new Error(`Adding an additional transaction exceeds the maximum atomic group size of ${_AtomicTransactionComposer.MAX_GROUP_SIZE}`);
          }
          if (txnAndSigner.txn.group && txnAndSigner.txn.group.some((v) => v !== 0)) {
            throw new Error("Cannot add a transaction with nonzero group ID");
          }
          this.transactions.push(txnAndSigner);
        }
        /**
         * Add a smart contract method call to this atomic group.
         *
         * An error will be thrown if the composer's status is not BUILDING, if adding this transaction
         * causes the current group to exceed MAX_GROUP_SIZE, or if the provided arguments are invalid
         * for the given method.
         */
        addMethodCall({ appID, method, methodArgs, sender, suggestedParams, onComplete, approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages, appAccounts, appForeignApps, appForeignAssets, boxes, note, lease, rekeyTo, signer }) {
          if (this.status !== AtomicTransactionComposerStatus.BUILDING) {
            throw new Error("Cannot add transactions when composer status is not BUILDING");
          }
          if (this.transactions.length + method.txnCount() > _AtomicTransactionComposer.MAX_GROUP_SIZE) {
            throw new Error(`Adding additional transactions exceeds the maximum atomic group size of ${_AtomicTransactionComposer.MAX_GROUP_SIZE}`);
          }
          if (appID === 0) {
            if (approvalProgram == null || clearProgram == null || numGlobalInts == null || numGlobalByteSlices == null || numLocalInts == null || numLocalByteSlices == null) {
              throw new Error("One of the following required parameters for application creation is missing: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices");
            }
          } else if (onComplete === base_1.OnApplicationComplete.UpdateApplicationOC) {
            if (approvalProgram == null || clearProgram == null) {
              throw new Error("One of the following required parameters for OnApplicationComplete.UpdateApplicationOC is missing: approvalProgram, clearProgram");
            }
            if (numGlobalInts != null || numGlobalByteSlices != null || numLocalInts != null || numLocalByteSlices != null || extraPages != null) {
              throw new Error("One of the following application creation parameters were set on a non-creation call: numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages");
            }
          } else if (approvalProgram != null || clearProgram != null || numGlobalInts != null || numGlobalByteSlices != null || numLocalInts != null || numLocalByteSlices != null || extraPages != null) {
            throw new Error("One of the following application creation parameters were set on a non-creation call: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages");
          }
          if (methodArgs == null) {
            methodArgs = [];
          }
          if (methodArgs.length !== method.args.length) {
            throw new Error(`Incorrect number of method arguments. Expected ${method.args.length}, got ${methodArgs.length}`);
          }
          let basicArgTypes = [];
          let basicArgValues = [];
          const txnArgs = [];
          const refArgTypes = [];
          const refArgValues = [];
          const refArgIndexToBasicArgIndex = /* @__PURE__ */ new Map();
          const boxReferences = !boxes ? [] : boxes;
          for (let i = 0; i < methodArgs.length; i++) {
            let argType = method.args[i].type;
            const argValue = methodArgs[i];
            if ((0, abi_1.abiTypeIsTransaction)(argType)) {
              if (!(0, signer_1.isTransactionWithSigner)(argValue) || !(0, abi_1.abiCheckTransactionType)(argType, argValue.txn)) {
                throw new Error(`Expected ${argType} TransactionWithSigner for argument at index ${i}`);
              }
              if (argValue.txn.group && argValue.txn.group.some((v) => v !== 0)) {
                throw new Error("Cannot add a transaction with nonzero group ID");
              }
              txnArgs.push(argValue);
              continue;
            }
            if ((0, signer_1.isTransactionWithSigner)(argValue)) {
              throw new Error(`Expected non-transaction value for argument at index ${i}`);
            }
            if ((0, abi_1.abiTypeIsReference)(argType)) {
              refArgIndexToBasicArgIndex.set(refArgTypes.length, basicArgTypes.length);
              refArgTypes.push(argType);
              refArgValues.push(argValue);
              argType = new abi_1.ABIUintType(8);
            }
            if (typeof argType === "string") {
              throw new Error(`Unknown ABI type: ${argType}`);
            }
            basicArgTypes.push(argType);
            basicArgValues.push(argValue);
          }
          const resolvedRefIndexes = [];
          const foreignAccounts = appAccounts == null ? [] : appAccounts.slice();
          const foreignApps = appForeignApps == null ? [] : appForeignApps.slice();
          const foreignAssets = appForeignAssets == null ? [] : appForeignAssets.slice();
          for (let i = 0; i < refArgTypes.length; i++) {
            const refType = refArgTypes[i];
            const refValue = refArgValues[i];
            let resolved = 0;
            switch (refType) {
              case abi_1.ABIReferenceType.account: {
                const addressType = new abi_1.ABIAddressType();
                const address = addressType.decode(addressType.encode(refValue));
                resolved = populateForeignArray(address, foreignAccounts, sender);
                break;
              }
              case abi_1.ABIReferenceType.application: {
                const uint64Type = new abi_1.ABIUintType(64);
                const refAppID = uint64Type.decode(uint64Type.encode(refValue));
                if (refAppID > Number.MAX_SAFE_INTEGER) {
                  throw new Error(`Expected safe integer for application value, got ${refAppID}`);
                }
                resolved = populateForeignArray(Number(refAppID), foreignApps, appID);
                break;
              }
              case abi_1.ABIReferenceType.asset: {
                const uint64Type = new abi_1.ABIUintType(64);
                const refAssetID = uint64Type.decode(uint64Type.encode(refValue));
                if (refAssetID > Number.MAX_SAFE_INTEGER) {
                  throw new Error(`Expected safe integer for asset value, got ${refAssetID}`);
                }
                resolved = populateForeignArray(Number(refAssetID), foreignAssets);
                break;
              }
              default:
                throw new Error(`Unknown reference type: ${refType}`);
            }
            resolvedRefIndexes.push(resolved);
          }
          for (let i = 0; i < resolvedRefIndexes.length; i++) {
            const basicArgIndex = refArgIndexToBasicArgIndex.get(i);
            basicArgValues[basicArgIndex] = resolvedRefIndexes[i];
          }
          if (basicArgTypes.length > MAX_APP_ARGS - 1) {
            const lastArgTupleTypes = basicArgTypes.slice(MAX_APP_ARGS - 2);
            const lastArgTupleValues = basicArgValues.slice(MAX_APP_ARGS - 2);
            basicArgTypes = basicArgTypes.slice(0, MAX_APP_ARGS - 2);
            basicArgValues = basicArgValues.slice(0, MAX_APP_ARGS - 2);
            basicArgTypes.push(new abi_1.ABITupleType(lastArgTupleTypes));
            basicArgValues.push(lastArgTupleValues);
          }
          const appArgsEncoded = [method.getSelector()];
          for (let i = 0; i < basicArgTypes.length; i++) {
            appArgsEncoded.push(basicArgTypes[i].encode(basicArgValues[i]));
          }
          const appCall = {
            txn: (0, makeTxn_1.makeApplicationCallTxnFromObject)({
              from: sender,
              appIndex: appID,
              appArgs: appArgsEncoded,
              accounts: foreignAccounts,
              foreignApps,
              foreignAssets,
              boxes: boxReferences,
              onComplete: onComplete == null ? base_1.OnApplicationComplete.NoOpOC : onComplete,
              approvalProgram,
              clearProgram,
              numGlobalInts,
              numGlobalByteSlices,
              numLocalInts,
              numLocalByteSlices,
              extraPages,
              lease,
              note,
              rekeyTo,
              suggestedParams
            }),
            signer
          };
          this.transactions.push(...txnArgs, appCall);
          this.methodCalls.set(this.transactions.length - 1, method);
        }
        /**
         * Finalize the transaction group and returned the finalized transactions.
         *
         * The composer's status will be at least BUILT after executing this method.
         */
        buildGroup() {
          if (this.status === AtomicTransactionComposerStatus.BUILDING) {
            if (this.transactions.length === 0) {
              throw new Error("Cannot build a group with 0 transactions");
            }
            if (this.transactions.length > 1) {
              (0, group_1.assignGroupID)(this.transactions.map((txnWithSigner) => txnWithSigner.txn));
            }
            this.status = AtomicTransactionComposerStatus.BUILT;
          }
          return this.transactions;
        }
        /**
         * Obtain signatures for each transaction in this group. If signatures have already been obtained,
         * this method will return cached versions of the signatures.
         *
         * The composer's status will be at least SIGNED after executing this method.
         *
         * An error will be thrown if signing any of the transactions fails.
         *
         * @returns A promise that resolves to an array of signed transactions.
         */
        async gatherSignatures() {
          if (this.status >= AtomicTransactionComposerStatus.SIGNED) {
            return this.signedTxns;
          }
          const txnsWithSigners = this.buildGroup();
          const txnGroup = txnsWithSigners.map((txnWithSigner) => txnWithSigner.txn);
          const indexesPerSigner = /* @__PURE__ */ new Map();
          for (let i = 0; i < txnsWithSigners.length; i++) {
            const { signer } = txnsWithSigners[i];
            if (!indexesPerSigner.has(signer)) {
              indexesPerSigner.set(signer, []);
            }
            indexesPerSigner.get(signer).push(i);
          }
          const orderedSigners = Array.from(indexesPerSigner);
          const batchedSigs = await Promise.all(orderedSigners.map(([signer, indexes]) => signer(txnGroup, indexes)));
          const signedTxns = txnsWithSigners.map(() => null);
          for (let signerIndex = 0; signerIndex < orderedSigners.length; signerIndex++) {
            const indexes = orderedSigners[signerIndex][1];
            const sigs = batchedSigs[signerIndex];
            for (let i = 0; i < indexes.length; i++) {
              signedTxns[indexes[i]] = sigs[i];
            }
          }
          if (!signedTxns.every((sig) => sig != null)) {
            throw new Error(`Missing signatures. Got ${signedTxns}`);
          }
          const txIDs = signedTxns.map((stxn, index) => {
            try {
              return (0, transaction_1.decodeSignedTransaction)(stxn).txn.txID();
            } catch (err) {
              throw new Error(`Cannot decode signed transaction at index ${index}. ${err}`);
            }
          });
          this.signedTxns = signedTxns;
          this.txIDs = txIDs;
          this.status = AtomicTransactionComposerStatus.SIGNED;
          return signedTxns;
        }
        /**
         * Send the transaction group to the network, but don't wait for it to be committed to a block. An
         * error will be thrown if submission fails.
         *
         * The composer's status must be SUBMITTED or lower before calling this method. If submission is
         * successful, this composer's status will update to SUBMITTED.
         *
         * Note: a group can only be submitted again if it fails.
         *
         * @param client - An Algodv2 client
         *
         * @returns A promise that, upon success, resolves to a list of TxIDs of the submitted transactions.
         */
        async submit(client) {
          if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {
            throw new Error("Transaction group cannot be resubmitted");
          }
          const stxns = await this.gatherSignatures();
          await client.sendRawTransaction(stxns).do();
          this.status = AtomicTransactionComposerStatus.SUBMITTED;
          return this.txIDs;
        }
        /**
         * Simulates the transaction group in the network.
         *
         * The composer will try to sign any transactions in the group, then simulate
         * the results.
         * Simulating the group will not change the composer's status.
         *
         * @param client - An Algodv2 client
         * @param request - SimulateRequest with options in simulation.
         *   If provided, the request's transaction group will be overrwritten by the composer's group,
         *   only simulation related options will be used.
         *
         * @returns A promise that, upon success, resolves to an object containing an
         *   array of results containing one element for each method call transaction
         *   in this group (ABIResult[]) and the SimulateResponse object.
         */
        async simulate(client, request) {
          if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {
            throw new Error("Simulated Transaction group has already been submitted to the network");
          }
          const stxns = await this.gatherSignatures();
          const txnObjects = stxns.map((stxn) => encoding.decode(stxn));
          const currentRequest = request == null ? new types_1.SimulateRequest({ txnGroups: [] }) : request;
          currentRequest.txnGroups = [
            new types_1.SimulateRequestTransactionGroup({
              txns: txnObjects
            })
          ];
          const simulateResponse = await client.simulateTransactions(currentRequest).do();
          const methodResults = [];
          for (const [txnIndex, method] of this.methodCalls) {
            const txID = this.txIDs[txnIndex];
            const pendingInfo = simulateResponse.txnGroups[0].txnResults[txnIndex].txnResult;
            const methodResult = {
              txID,
              rawReturnValue: new Uint8Array(),
              method
            };
            methodResults.push(_AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo.get_obj_for_encoding()));
          }
          return { methodResults, simulateResponse };
        }
        /**
         * Send the transaction group to the network and wait until it's committed to a block. An error
         * will be thrown if submission or execution fails.
         *
         * The composer's status must be SUBMITTED or lower before calling this method, since execution is
         * only allowed once. If submission is successful, this composer's status will update to SUBMITTED.
         * If the execution is also successful, this composer's status will update to COMMITTED.
         *
         * Note: a group can only be submitted again if it fails.
         *
         * @param client - An Algodv2 client
         * @param waitRounds - The maximum number of rounds to wait for transaction confirmation
         *
         * @returns A promise that, upon success, resolves to an object containing the confirmed round for
         *   this transaction, the txIDs of the submitted transactions, and an array of results containing
         *   one element for each method call transaction in this group.
         */
        async execute(client, waitRounds) {
          if (this.status === AtomicTransactionComposerStatus.COMMITTED) {
            throw new Error("Transaction group has already been executed successfully");
          }
          const txIDs = await this.submit(client);
          this.status = AtomicTransactionComposerStatus.SUBMITTED;
          const firstMethodCallIndex = this.transactions.findIndex((_, index) => this.methodCalls.has(index));
          const indexToWaitFor = firstMethodCallIndex === -1 ? 0 : firstMethodCallIndex;
          const confirmedTxnInfo = await (0, wait_1.waitForConfirmation)(client, txIDs[indexToWaitFor], waitRounds);
          this.status = AtomicTransactionComposerStatus.COMMITTED;
          const confirmedRound = confirmedTxnInfo["confirmed-round"];
          const methodResults = [];
          for (const [txnIndex, method] of this.methodCalls) {
            const txID = txIDs[txnIndex];
            let methodResult = {
              txID,
              rawReturnValue: new Uint8Array(),
              method
            };
            try {
              const pendingInfo = txnIndex === firstMethodCallIndex ? confirmedTxnInfo : (
                // eslint-disable-next-line no-await-in-loop
                await client.pendingTransactionInformation(txID).do()
              );
              methodResult = _AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo);
            } catch (err) {
              methodResult.decodeError = err;
            }
            methodResults.push(methodResult);
          }
          return {
            confirmedRound,
            txIDs,
            methodResults
          };
        }
        /**
         * Parses a single ABI Method transaction log into a ABI result object.
         *
         * @param method
         * @param methodResult
         * @param pendingInfo
         * @returns An ABIResult object
         */
        static parseMethodResponse(method, methodResult, pendingInfo) {
          const returnedResult = methodResult;
          try {
            returnedResult.txInfo = pendingInfo;
            if (method.returns.type !== "void") {
              const logs = pendingInfo.logs || [];
              if (logs.length === 0) {
                throw new Error("App call transaction did not log a return value");
              }
              const lastLog = buffer_1.Buffer.from(logs[logs.length - 1], "base64");
              if (lastLog.byteLength < 4 || !lastLog.slice(0, 4).equals(RETURN_PREFIX)) {
                throw new Error("App call transaction did not log a return value");
              }
              returnedResult.rawReturnValue = new Uint8Array(lastLog.slice(4));
              returnedResult.returnValue = method.returns.type.decode(methodResult.rawReturnValue);
            }
          } catch (err) {
            returnedResult.decodeError = err;
          }
          return returnedResult;
        }
      };
      exports.AtomicTransactionComposer = AtomicTransactionComposer;
      AtomicTransactionComposer.MAX_GROUP_SIZE = 16;
    }
  });

  // node_modules/algosdk/dist/cjs/types/multisig.js
  var require_multisig2 = __commonJS({
    "node_modules/algosdk/dist/cjs/types/multisig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/algosdk/dist/cjs/types/address.js
  var require_address2 = __commonJS({
    "node_modules/algosdk/dist/cjs/types/address.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/algosdk/dist/cjs/types/index.js
  var require_types3 = __commonJS({
    "node_modules/algosdk/dist/cjs/types/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar2(require_transactions(), exports);
      __exportStar2(require_multisig2(), exports);
      __exportStar2(require_address2(), exports);
    }
  });

  // node_modules/algosdk/dist/cjs/main.js
  var require_main = __commonJS({
    "node_modules/algosdk/dist/cjs/main.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      var __importDefault2 = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.verifyMultisig = exports.appendSignRawMultisigSignature = exports.createMultisigTransaction = exports.appendSignMultisigTransaction = exports.mergeMultisigTransactions = exports.signMultisigTransaction = exports.verifyTealSign = exports.tealSignFromProgram = exports.tealSign = exports.logicSigFromByte = exports.signLogicSigTransactionObject = exports.signLogicSigTransaction = exports.LogicSigAccount = exports.LogicSig = exports.assignGroupID = exports.computeGroupID = exports.INVALID_MICROALGOS_ERROR_MSG = exports.algosToMicroalgos = exports.microalgosToAlgos = exports.mnemonicFromSeed = exports.seedFromMnemonic = exports.mnemonicToSecretKey = exports.secretKeyToMnemonic = exports.masterDerivationKeyToMnemonic = exports.mnemonicToMasterDerivationKey = exports.indexerModels = exports.modelsv2 = exports.generateAccount = exports.decodeUint64 = exports.encodeUint64 = exports.bigIntToBytes = exports.bytesToBigInt = exports.getApplicationAddress = exports.decodeAddress = exports.encodeAddress = exports.isValidAddress = exports.waitForConfirmation = exports.Indexer = exports.IntDecoding = exports.Kmd = exports.Algodv2 = exports.ERROR_INVALID_MICROALGOS = exports.ERROR_MULTISIG_BAD_SENDER = exports.decodeObj = exports.encodeObj = exports.verifyBytes = exports.signBytes = exports.signBid = exports.signTransaction = exports.MULTISIG_BAD_SENDER_ERROR_MSG = void 0;
      exports.SourceMap = exports.multisigAddress = void 0;
      var buffer_1 = require_buffer2();
      var nacl = __importStar2(require_naclWrappers());
      var address = __importStar2(require_address());
      var encoding = __importStar2(require_encoding());
      var txnBuilder = __importStar2(require_transaction());
      var bid_1 = __importDefault2(require_bid());
      var convert = __importStar2(require_convert());
      var utils = __importStar2(require_utils());
      var SIGN_BYTES_PREFIX = buffer_1.Buffer.from([77, 88]);
      exports.MULTISIG_BAD_SENDER_ERROR_MSG = "The transaction sender address and multisig preimage do not match.";
      function signTransaction(txn, sk) {
        if (typeof txn.from === "undefined") {
          const key = nacl.keyPairFromSecretKey(sk);
          txn.from = address.encodeAddress(key.publicKey);
        }
        const algoTxn = txnBuilder.instantiateTxnIfNeeded(txn);
        return {
          txID: algoTxn.txID().toString(),
          blob: algoTxn.signTxn(sk)
        };
      }
      exports.signTransaction = signTransaction;
      function signBid(bid, sk) {
        const signedBid = new bid_1.default(bid);
        return signedBid.signBid(sk);
      }
      exports.signBid = signBid;
      function signBytes(bytes, sk) {
        const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(SIGN_BYTES_PREFIX, bytes));
        const sig = nacl.sign(toBeSigned, sk);
        return sig;
      }
      exports.signBytes = signBytes;
      function verifyBytes(bytes, signature, addr) {
        const toBeVerified = buffer_1.Buffer.from(utils.concatArrays(SIGN_BYTES_PREFIX, bytes));
        const pk = address.decodeAddress(addr).publicKey;
        return nacl.verify(toBeVerified, signature, pk);
      }
      exports.verifyBytes = verifyBytes;
      function encodeObj(o) {
        return new Uint8Array(encoding.encode(o));
      }
      exports.encodeObj = encodeObj;
      function decodeObj(o) {
        return encoding.decode(o);
      }
      exports.decodeObj = decodeObj;
      exports.ERROR_MULTISIG_BAD_SENDER = new Error(exports.MULTISIG_BAD_SENDER_ERROR_MSG);
      exports.ERROR_INVALID_MICROALGOS = new Error(convert.INVALID_MICROALGOS_ERROR_MSG);
      var algod_1 = require_algod();
      Object.defineProperty(exports, "Algodv2", { enumerable: true, get: function() {
        return __importDefault2(algod_1).default;
      } });
      var kmd_1 = require_kmd();
      Object.defineProperty(exports, "Kmd", { enumerable: true, get: function() {
        return __importDefault2(kmd_1).default;
      } });
      var intDecoding_1 = require_intDecoding();
      Object.defineProperty(exports, "IntDecoding", { enumerable: true, get: function() {
        return __importDefault2(intDecoding_1).default;
      } });
      var indexer_1 = require_indexer();
      Object.defineProperty(exports, "Indexer", { enumerable: true, get: function() {
        return __importDefault2(indexer_1).default;
      } });
      var wait_1 = require_wait();
      Object.defineProperty(exports, "waitForConfirmation", { enumerable: true, get: function() {
        return wait_1.waitForConfirmation;
      } });
      var address_1 = require_address();
      Object.defineProperty(exports, "isValidAddress", { enumerable: true, get: function() {
        return address_1.isValidAddress;
      } });
      Object.defineProperty(exports, "encodeAddress", { enumerable: true, get: function() {
        return address_1.encodeAddress;
      } });
      Object.defineProperty(exports, "decodeAddress", { enumerable: true, get: function() {
        return address_1.decodeAddress;
      } });
      Object.defineProperty(exports, "getApplicationAddress", { enumerable: true, get: function() {
        return address_1.getApplicationAddress;
      } });
      var bigint_1 = require_bigint();
      Object.defineProperty(exports, "bytesToBigInt", { enumerable: true, get: function() {
        return bigint_1.bytesToBigInt;
      } });
      Object.defineProperty(exports, "bigIntToBytes", { enumerable: true, get: function() {
        return bigint_1.bigIntToBytes;
      } });
      var uint64_1 = require_uint64();
      Object.defineProperty(exports, "encodeUint64", { enumerable: true, get: function() {
        return uint64_1.encodeUint64;
      } });
      Object.defineProperty(exports, "decodeUint64", { enumerable: true, get: function() {
        return uint64_1.decodeUint64;
      } });
      var account_1 = require_account();
      Object.defineProperty(exports, "generateAccount", { enumerable: true, get: function() {
        return __importDefault2(account_1).default;
      } });
      exports.modelsv2 = __importStar2(require_types());
      exports.indexerModels = __importStar2(require_types2());
      var mnemonic_1 = require_mnemonic();
      Object.defineProperty(exports, "mnemonicToMasterDerivationKey", { enumerable: true, get: function() {
        return mnemonic_1.mnemonicToMasterDerivationKey;
      } });
      Object.defineProperty(exports, "masterDerivationKeyToMnemonic", { enumerable: true, get: function() {
        return mnemonic_1.masterDerivationKeyToMnemonic;
      } });
      Object.defineProperty(exports, "secretKeyToMnemonic", { enumerable: true, get: function() {
        return mnemonic_1.secretKeyToMnemonic;
      } });
      Object.defineProperty(exports, "mnemonicToSecretKey", { enumerable: true, get: function() {
        return mnemonic_1.mnemonicToSecretKey;
      } });
      Object.defineProperty(exports, "seedFromMnemonic", { enumerable: true, get: function() {
        return mnemonic_1.seedFromMnemonic;
      } });
      Object.defineProperty(exports, "mnemonicFromSeed", { enumerable: true, get: function() {
        return mnemonic_1.mnemonicFromSeed;
      } });
      var convert_1 = require_convert();
      Object.defineProperty(exports, "microalgosToAlgos", { enumerable: true, get: function() {
        return convert_1.microalgosToAlgos;
      } });
      Object.defineProperty(exports, "algosToMicroalgos", { enumerable: true, get: function() {
        return convert_1.algosToMicroalgos;
      } });
      Object.defineProperty(exports, "INVALID_MICROALGOS_ERROR_MSG", { enumerable: true, get: function() {
        return convert_1.INVALID_MICROALGOS_ERROR_MSG;
      } });
      var group_1 = require_group();
      Object.defineProperty(exports, "computeGroupID", { enumerable: true, get: function() {
        return group_1.computeGroupID;
      } });
      Object.defineProperty(exports, "assignGroupID", { enumerable: true, get: function() {
        return group_1.assignGroupID;
      } });
      var logicsig_1 = require_logicsig();
      Object.defineProperty(exports, "LogicSig", { enumerable: true, get: function() {
        return logicsig_1.LogicSig;
      } });
      Object.defineProperty(exports, "LogicSigAccount", { enumerable: true, get: function() {
        return logicsig_1.LogicSigAccount;
      } });
      Object.defineProperty(exports, "signLogicSigTransaction", { enumerable: true, get: function() {
        return logicsig_1.signLogicSigTransaction;
      } });
      Object.defineProperty(exports, "signLogicSigTransactionObject", { enumerable: true, get: function() {
        return logicsig_1.signLogicSigTransactionObject;
      } });
      Object.defineProperty(exports, "logicSigFromByte", { enumerable: true, get: function() {
        return logicsig_1.logicSigFromByte;
      } });
      Object.defineProperty(exports, "tealSign", { enumerable: true, get: function() {
        return logicsig_1.tealSign;
      } });
      Object.defineProperty(exports, "tealSignFromProgram", { enumerable: true, get: function() {
        return logicsig_1.tealSignFromProgram;
      } });
      Object.defineProperty(exports, "verifyTealSign", { enumerable: true, get: function() {
        return logicsig_1.verifyTealSign;
      } });
      var multisig_1 = require_multisig();
      Object.defineProperty(exports, "signMultisigTransaction", { enumerable: true, get: function() {
        return multisig_1.signMultisigTransaction;
      } });
      Object.defineProperty(exports, "mergeMultisigTransactions", { enumerable: true, get: function() {
        return multisig_1.mergeMultisigTransactions;
      } });
      Object.defineProperty(exports, "appendSignMultisigTransaction", { enumerable: true, get: function() {
        return multisig_1.appendSignMultisigTransaction;
      } });
      Object.defineProperty(exports, "createMultisigTransaction", { enumerable: true, get: function() {
        return multisig_1.createMultisigTransaction;
      } });
      Object.defineProperty(exports, "appendSignRawMultisigSignature", { enumerable: true, get: function() {
        return multisig_1.appendSignRawMultisigSignature;
      } });
      Object.defineProperty(exports, "verifyMultisig", { enumerable: true, get: function() {
        return multisig_1.verifyMultisig;
      } });
      Object.defineProperty(exports, "multisigAddress", { enumerable: true, get: function() {
        return multisig_1.multisigAddress;
      } });
      var sourcemap_1 = require_sourcemap();
      Object.defineProperty(exports, "SourceMap", { enumerable: true, get: function() {
        return sourcemap_1.SourceMap;
      } });
      __exportStar2(require_dryrun2(), exports);
      __exportStar2(require_makeTxn(), exports);
      __exportStar2(require_transaction(), exports);
      __exportStar2(require_signer(), exports);
      __exportStar2(require_composer(), exports);
      __exportStar2(require_types3(), exports);
      __exportStar2(require_abi(), exports);
    }
  });

  // node_modules/algosdk/dist/cjs/index.js
  var require_cjs4 = __commonJS({
    "node_modules/algosdk/dist/cjs/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar2 = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var algosdk = __importStar2(require_main());
      __exportStar2(require_main(), exports);
      exports.default = algosdk;
    }
  });

  // node_modules/bowser/es5.js
  var require_es5 = __commonJS({
    "node_modules/bowser/es5.js"(exports, module) {
      !function(e, t) {
        "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.bowser = t() : e.bowser = t();
      }(exports, function() {
        return function(e) {
          var t = {};
          function r(n) {
            if (t[n])
              return t[n].exports;
            var i = t[n] = { i: n, l: false, exports: {} };
            return e[n].call(i.exports, i, i.exports, r), i.l = true, i.exports;
          }
          return r.m = e, r.c = t, r.d = function(e2, t2, n) {
            r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
          }, r.r = function(e2) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
          }, r.t = function(e2, t2) {
            if (1 & t2 && (e2 = r(e2)), 8 & t2)
              return e2;
            if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
              return e2;
            var n = /* @__PURE__ */ Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
              for (var i in e2)
                r.d(n, i, function(t3) {
                  return e2[t3];
                }.bind(null, i));
            return n;
          }, r.n = function(e2) {
            var t2 = e2 && e2.__esModule ? function() {
              return e2.default;
            } : function() {
              return e2;
            };
            return r.d(t2, "a", t2), t2;
          }, r.o = function(e2, t2) {
            return Object.prototype.hasOwnProperty.call(e2, t2);
          }, r.p = "", r(r.s = 90);
        }({ 17: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n = r(18), i = function() {
            function e2() {
            }
            return e2.getFirstMatch = function(e3, t2) {
              var r2 = t2.match(e3);
              return r2 && r2.length > 0 && r2[1] || "";
            }, e2.getSecondMatch = function(e3, t2) {
              var r2 = t2.match(e3);
              return r2 && r2.length > 1 && r2[2] || "";
            }, e2.matchAndReturnConst = function(e3, t2, r2) {
              if (e3.test(t2))
                return r2;
            }, e2.getWindowsVersionName = function(e3) {
              switch (e3) {
                case "NT":
                  return "NT";
                case "XP":
                  return "XP";
                case "NT 5.0":
                  return "2000";
                case "NT 5.1":
                  return "XP";
                case "NT 5.2":
                  return "2003";
                case "NT 6.0":
                  return "Vista";
                case "NT 6.1":
                  return "7";
                case "NT 6.2":
                  return "8";
                case "NT 6.3":
                  return "8.1";
                case "NT 10.0":
                  return "10";
                default:
                  return;
              }
            }, e2.getMacOSVersionName = function(e3) {
              var t2 = e3.split(".").splice(0, 2).map(function(e4) {
                return parseInt(e4, 10) || 0;
              });
              if (t2.push(0), 10 === t2[0])
                switch (t2[1]) {
                  case 5:
                    return "Leopard";
                  case 6:
                    return "Snow Leopard";
                  case 7:
                    return "Lion";
                  case 8:
                    return "Mountain Lion";
                  case 9:
                    return "Mavericks";
                  case 10:
                    return "Yosemite";
                  case 11:
                    return "El Capitan";
                  case 12:
                    return "Sierra";
                  case 13:
                    return "High Sierra";
                  case 14:
                    return "Mojave";
                  case 15:
                    return "Catalina";
                  default:
                    return;
                }
            }, e2.getAndroidVersionName = function(e3) {
              var t2 = e3.split(".").splice(0, 2).map(function(e4) {
                return parseInt(e4, 10) || 0;
              });
              if (t2.push(0), !(1 === t2[0] && t2[1] < 5))
                return 1 === t2[0] && t2[1] < 6 ? "Cupcake" : 1 === t2[0] && t2[1] >= 6 ? "Donut" : 2 === t2[0] && t2[1] < 2 ? "Eclair" : 2 === t2[0] && 2 === t2[1] ? "Froyo" : 2 === t2[0] && t2[1] > 2 ? "Gingerbread" : 3 === t2[0] ? "Honeycomb" : 4 === t2[0] && t2[1] < 1 ? "Ice Cream Sandwich" : 4 === t2[0] && t2[1] < 4 ? "Jelly Bean" : 4 === t2[0] && t2[1] >= 4 ? "KitKat" : 5 === t2[0] ? "Lollipop" : 6 === t2[0] ? "Marshmallow" : 7 === t2[0] ? "Nougat" : 8 === t2[0] ? "Oreo" : 9 === t2[0] ? "Pie" : void 0;
            }, e2.getVersionPrecision = function(e3) {
              return e3.split(".").length;
            }, e2.compareVersions = function(t2, r2, n2) {
              void 0 === n2 && (n2 = false);
              var i2 = e2.getVersionPrecision(t2), s = e2.getVersionPrecision(r2), a = Math.max(i2, s), o = 0, u = e2.map([t2, r2], function(t3) {
                var r3 = a - e2.getVersionPrecision(t3), n3 = t3 + new Array(r3 + 1).join(".0");
                return e2.map(n3.split("."), function(e3) {
                  return new Array(20 - e3.length).join("0") + e3;
                }).reverse();
              });
              for (n2 && (o = a - Math.min(i2, s)), a -= 1; a >= o; ) {
                if (u[0][a] > u[1][a])
                  return 1;
                if (u[0][a] === u[1][a]) {
                  if (a === o)
                    return 0;
                  a -= 1;
                } else if (u[0][a] < u[1][a])
                  return -1;
              }
            }, e2.map = function(e3, t2) {
              var r2, n2 = [];
              if (Array.prototype.map)
                return Array.prototype.map.call(e3, t2);
              for (r2 = 0; r2 < e3.length; r2 += 1)
                n2.push(t2(e3[r2]));
              return n2;
            }, e2.find = function(e3, t2) {
              var r2, n2;
              if (Array.prototype.find)
                return Array.prototype.find.call(e3, t2);
              for (r2 = 0, n2 = e3.length; r2 < n2; r2 += 1) {
                var i2 = e3[r2];
                if (t2(i2, r2))
                  return i2;
              }
            }, e2.assign = function(e3) {
              for (var t2, r2, n2 = e3, i2 = arguments.length, s = new Array(i2 > 1 ? i2 - 1 : 0), a = 1; a < i2; a++)
                s[a - 1] = arguments[a];
              if (Object.assign)
                return Object.assign.apply(Object, [e3].concat(s));
              var o = function() {
                var e4 = s[t2];
                "object" == typeof e4 && null !== e4 && Object.keys(e4).forEach(function(t3) {
                  n2[t3] = e4[t3];
                });
              };
              for (t2 = 0, r2 = s.length; t2 < r2; t2 += 1)
                o();
              return e3;
            }, e2.getBrowserAlias = function(e3) {
              return n.BROWSER_ALIASES_MAP[e3];
            }, e2.getBrowserTypeByAlias = function(e3) {
              return n.BROWSER_MAP[e3] || "";
            }, e2;
          }();
          t.default = i, e.exports = t.default;
        }, 18: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
          t.BROWSER_ALIASES_MAP = { "Amazon Silk": "amazon_silk", "Android Browser": "android", Bada: "bada", BlackBerry: "blackberry", Chrome: "chrome", Chromium: "chromium", Electron: "electron", Epiphany: "epiphany", Firefox: "firefox", Focus: "focus", Generic: "generic", "Google Search": "google_search", Googlebot: "googlebot", "Internet Explorer": "ie", "K-Meleon": "k_meleon", Maxthon: "maxthon", "Microsoft Edge": "edge", "MZ Browser": "mz", "NAVER Whale Browser": "naver", Opera: "opera", "Opera Coast": "opera_coast", PhantomJS: "phantomjs", Puffin: "puffin", QupZilla: "qupzilla", QQ: "qq", QQLite: "qqlite", Safari: "safari", Sailfish: "sailfish", "Samsung Internet for Android": "samsung_internet", SeaMonkey: "seamonkey", Sleipnir: "sleipnir", Swing: "swing", Tizen: "tizen", "UC Browser": "uc", Vivaldi: "vivaldi", "WebOS Browser": "webos", WeChat: "wechat", "Yandex Browser": "yandex", Roku: "roku" };
          t.BROWSER_MAP = { amazon_silk: "Amazon Silk", android: "Android Browser", bada: "Bada", blackberry: "BlackBerry", chrome: "Chrome", chromium: "Chromium", electron: "Electron", epiphany: "Epiphany", firefox: "Firefox", focus: "Focus", generic: "Generic", googlebot: "Googlebot", google_search: "Google Search", ie: "Internet Explorer", k_meleon: "K-Meleon", maxthon: "Maxthon", edge: "Microsoft Edge", mz: "MZ Browser", naver: "NAVER Whale Browser", opera: "Opera", opera_coast: "Opera Coast", phantomjs: "PhantomJS", puffin: "Puffin", qupzilla: "QupZilla", qq: "QQ Browser", qqlite: "QQ Browser Lite", safari: "Safari", sailfish: "Sailfish", samsung_internet: "Samsung Internet for Android", seamonkey: "SeaMonkey", sleipnir: "Sleipnir", swing: "Swing", tizen: "Tizen", uc: "UC Browser", vivaldi: "Vivaldi", webos: "WebOS Browser", wechat: "WeChat", yandex: "Yandex Browser" };
          t.PLATFORMS_MAP = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" };
          t.OS_MAP = { WindowsPhone: "Windows Phone", Windows: "Windows", MacOS: "macOS", iOS: "iOS", Android: "Android", WebOS: "WebOS", BlackBerry: "BlackBerry", Bada: "Bada", Tizen: "Tizen", Linux: "Linux", ChromeOS: "Chrome OS", PlayStation4: "PlayStation 4", Roku: "Roku" };
          t.ENGINE_MAP = { EdgeHTML: "EdgeHTML", Blink: "Blink", Trident: "Trident", Presto: "Presto", Gecko: "Gecko", WebKit: "WebKit" };
        }, 90: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n, i = (n = r(91)) && n.__esModule ? n : { default: n }, s = r(18);
          function a(e2, t2) {
            for (var r2 = 0; r2 < t2.length; r2++) {
              var n2 = t2[r2];
              n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e2, n2.key, n2);
            }
          }
          var o = function() {
            function e2() {
            }
            var t2, r2, n2;
            return e2.getParser = function(e3, t3) {
              if (void 0 === t3 && (t3 = false), "string" != typeof e3)
                throw new Error("UserAgent should be a string");
              return new i.default(e3, t3);
            }, e2.parse = function(e3) {
              return new i.default(e3).getResult();
            }, t2 = e2, n2 = [{ key: "BROWSER_MAP", get: function() {
              return s.BROWSER_MAP;
            } }, { key: "ENGINE_MAP", get: function() {
              return s.ENGINE_MAP;
            } }, { key: "OS_MAP", get: function() {
              return s.OS_MAP;
            } }, { key: "PLATFORMS_MAP", get: function() {
              return s.PLATFORMS_MAP;
            } }], (r2 = null) && a(t2.prototype, r2), n2 && a(t2, n2), e2;
          }();
          t.default = o, e.exports = t.default;
        }, 91: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n = u(r(92)), i = u(r(93)), s = u(r(94)), a = u(r(95)), o = u(r(17));
          function u(e2) {
            return e2 && e2.__esModule ? e2 : { default: e2 };
          }
          var d = function() {
            function e2(e3, t3) {
              if (void 0 === t3 && (t3 = false), null == e3 || "" === e3)
                throw new Error("UserAgent parameter can't be empty");
              this._ua = e3, this.parsedResult = {}, true !== t3 && this.parse();
            }
            var t2 = e2.prototype;
            return t2.getUA = function() {
              return this._ua;
            }, t2.test = function(e3) {
              return e3.test(this._ua);
            }, t2.parseBrowser = function() {
              var e3 = this;
              this.parsedResult.browser = {};
              var t3 = o.default.find(n.default, function(t4) {
                if ("function" == typeof t4.test)
                  return t4.test(e3);
                if (t4.test instanceof Array)
                  return t4.test.some(function(t5) {
                    return e3.test(t5);
                  });
                throw new Error("Browser's test function is not valid");
              });
              return t3 && (this.parsedResult.browser = t3.describe(this.getUA())), this.parsedResult.browser;
            }, t2.getBrowser = function() {
              return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
            }, t2.getBrowserName = function(e3) {
              return e3 ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
            }, t2.getBrowserVersion = function() {
              return this.getBrowser().version;
            }, t2.getOS = function() {
              return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
            }, t2.parseOS = function() {
              var e3 = this;
              this.parsedResult.os = {};
              var t3 = o.default.find(i.default, function(t4) {
                if ("function" == typeof t4.test)
                  return t4.test(e3);
                if (t4.test instanceof Array)
                  return t4.test.some(function(t5) {
                    return e3.test(t5);
                  });
                throw new Error("Browser's test function is not valid");
              });
              return t3 && (this.parsedResult.os = t3.describe(this.getUA())), this.parsedResult.os;
            }, t2.getOSName = function(e3) {
              var t3 = this.getOS().name;
              return e3 ? String(t3).toLowerCase() || "" : t3 || "";
            }, t2.getOSVersion = function() {
              return this.getOS().version;
            }, t2.getPlatform = function() {
              return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
            }, t2.getPlatformType = function(e3) {
              void 0 === e3 && (e3 = false);
              var t3 = this.getPlatform().type;
              return e3 ? String(t3).toLowerCase() || "" : t3 || "";
            }, t2.parsePlatform = function() {
              var e3 = this;
              this.parsedResult.platform = {};
              var t3 = o.default.find(s.default, function(t4) {
                if ("function" == typeof t4.test)
                  return t4.test(e3);
                if (t4.test instanceof Array)
                  return t4.test.some(function(t5) {
                    return e3.test(t5);
                  });
                throw new Error("Browser's test function is not valid");
              });
              return t3 && (this.parsedResult.platform = t3.describe(this.getUA())), this.parsedResult.platform;
            }, t2.getEngine = function() {
              return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
            }, t2.getEngineName = function(e3) {
              return e3 ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
            }, t2.parseEngine = function() {
              var e3 = this;
              this.parsedResult.engine = {};
              var t3 = o.default.find(a.default, function(t4) {
                if ("function" == typeof t4.test)
                  return t4.test(e3);
                if (t4.test instanceof Array)
                  return t4.test.some(function(t5) {
                    return e3.test(t5);
                  });
                throw new Error("Browser's test function is not valid");
              });
              return t3 && (this.parsedResult.engine = t3.describe(this.getUA())), this.parsedResult.engine;
            }, t2.parse = function() {
              return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
            }, t2.getResult = function() {
              return o.default.assign({}, this.parsedResult);
            }, t2.satisfies = function(e3) {
              var t3 = this, r2 = {}, n2 = 0, i2 = {}, s2 = 0;
              if (Object.keys(e3).forEach(function(t4) {
                var a3 = e3[t4];
                "string" == typeof a3 ? (i2[t4] = a3, s2 += 1) : "object" == typeof a3 && (r2[t4] = a3, n2 += 1);
              }), n2 > 0) {
                var a2 = Object.keys(r2), u2 = o.default.find(a2, function(e4) {
                  return t3.isOS(e4);
                });
                if (u2) {
                  var d2 = this.satisfies(r2[u2]);
                  if (void 0 !== d2)
                    return d2;
                }
                var c = o.default.find(a2, function(e4) {
                  return t3.isPlatform(e4);
                });
                if (c) {
                  var f = this.satisfies(r2[c]);
                  if (void 0 !== f)
                    return f;
                }
              }
              if (s2 > 0) {
                var l = Object.keys(i2), h = o.default.find(l, function(e4) {
                  return t3.isBrowser(e4, true);
                });
                if (void 0 !== h)
                  return this.compareVersion(i2[h]);
              }
            }, t2.isBrowser = function(e3, t3) {
              void 0 === t3 && (t3 = false);
              var r2 = this.getBrowserName().toLowerCase(), n2 = e3.toLowerCase(), i2 = o.default.getBrowserTypeByAlias(n2);
              return t3 && i2 && (n2 = i2.toLowerCase()), n2 === r2;
            }, t2.compareVersion = function(e3) {
              var t3 = [0], r2 = e3, n2 = false, i2 = this.getBrowserVersion();
              if ("string" == typeof i2)
                return ">" === e3[0] || "<" === e3[0] ? (r2 = e3.substr(1), "=" === e3[1] ? (n2 = true, r2 = e3.substr(2)) : t3 = [], ">" === e3[0] ? t3.push(1) : t3.push(-1)) : "=" === e3[0] ? r2 = e3.substr(1) : "~" === e3[0] && (n2 = true, r2 = e3.substr(1)), t3.indexOf(o.default.compareVersions(i2, r2, n2)) > -1;
            }, t2.isOS = function(e3) {
              return this.getOSName(true) === String(e3).toLowerCase();
            }, t2.isPlatform = function(e3) {
              return this.getPlatformType(true) === String(e3).toLowerCase();
            }, t2.isEngine = function(e3) {
              return this.getEngineName(true) === String(e3).toLowerCase();
            }, t2.is = function(e3, t3) {
              return void 0 === t3 && (t3 = false), this.isBrowser(e3, t3) || this.isOS(e3) || this.isPlatform(e3);
            }, t2.some = function(e3) {
              var t3 = this;
              return void 0 === e3 && (e3 = []), e3.some(function(e4) {
                return t3.is(e4);
              });
            }, e2;
          }();
          t.default = d, e.exports = t.default;
        }, 92: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n, i = (n = r(17)) && n.__esModule ? n : { default: n };
          var s = /version\/(\d+(\.?_?\d+)+)/i, a = [{ test: [/googlebot/i], describe: function(e2) {
            var t2 = { name: "Googlebot" }, r2 = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/opera/i], describe: function(e2) {
            var t2 = { name: "Opera" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/opr\/|opios/i], describe: function(e2) {
            var t2 = { name: "Opera" }, r2 = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/SamsungBrowser/i], describe: function(e2) {
            var t2 = { name: "Samsung Internet for Android" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/Whale/i], describe: function(e2) {
            var t2 = { name: "NAVER Whale Browser" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/MZBrowser/i], describe: function(e2) {
            var t2 = { name: "MZ Browser" }, r2 = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/focus/i], describe: function(e2) {
            var t2 = { name: "Focus" }, r2 = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/swing/i], describe: function(e2) {
            var t2 = { name: "Swing" }, r2 = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/coast/i], describe: function(e2) {
            var t2 = { name: "Opera Coast" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/opt\/\d+(?:.?_?\d+)+/i], describe: function(e2) {
            var t2 = { name: "Opera Touch" }, r2 = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/yabrowser/i], describe: function(e2) {
            var t2 = { name: "Yandex Browser" }, r2 = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/ucbrowser/i], describe: function(e2) {
            var t2 = { name: "UC Browser" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/Maxthon|mxios/i], describe: function(e2) {
            var t2 = { name: "Maxthon" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/epiphany/i], describe: function(e2) {
            var t2 = { name: "Epiphany" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/puffin/i], describe: function(e2) {
            var t2 = { name: "Puffin" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/sleipnir/i], describe: function(e2) {
            var t2 = { name: "Sleipnir" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/k-meleon/i], describe: function(e2) {
            var t2 = { name: "K-Meleon" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/micromessenger/i], describe: function(e2) {
            var t2 = { name: "WeChat" }, r2 = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/qqbrowser/i], describe: function(e2) {
            var t2 = { name: /qqbrowserlite/i.test(e2) ? "QQ Browser Lite" : "QQ Browser" }, r2 = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/msie|trident/i], describe: function(e2) {
            var t2 = { name: "Internet Explorer" }, r2 = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/\sedg\//i], describe: function(e2) {
            var t2 = { name: "Microsoft Edge" }, r2 = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/edg([ea]|ios)/i], describe: function(e2) {
            var t2 = { name: "Microsoft Edge" }, r2 = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/vivaldi/i], describe: function(e2) {
            var t2 = { name: "Vivaldi" }, r2 = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/seamonkey/i], describe: function(e2) {
            var t2 = { name: "SeaMonkey" }, r2 = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/sailfish/i], describe: function(e2) {
            var t2 = { name: "Sailfish" }, r2 = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/silk/i], describe: function(e2) {
            var t2 = { name: "Amazon Silk" }, r2 = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/phantom/i], describe: function(e2) {
            var t2 = { name: "PhantomJS" }, r2 = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/slimerjs/i], describe: function(e2) {
            var t2 = { name: "SlimerJS" }, r2 = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function(e2) {
            var t2 = { name: "BlackBerry" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/(web|hpw)[o0]s/i], describe: function(e2) {
            var t2 = { name: "WebOS Browser" }, r2 = i.default.getFirstMatch(s, e2) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/bada/i], describe: function(e2) {
            var t2 = { name: "Bada" }, r2 = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/tizen/i], describe: function(e2) {
            var t2 = { name: "Tizen" }, r2 = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/qupzilla/i], describe: function(e2) {
            var t2 = { name: "QupZilla" }, r2 = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/firefox|iceweasel|fxios/i], describe: function(e2) {
            var t2 = { name: "Firefox" }, r2 = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/electron/i], describe: function(e2) {
            var t2 = { name: "Electron" }, r2 = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/MiuiBrowser/i], describe: function(e2) {
            var t2 = { name: "Miui" }, r2 = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/chromium/i], describe: function(e2) {
            var t2 = { name: "Chromium" }, r2 = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e2) || i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/chrome|crios|crmo/i], describe: function(e2) {
            var t2 = { name: "Chrome" }, r2 = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/GSA/i], describe: function(e2) {
            var t2 = { name: "Google Search" }, r2 = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: function(e2) {
            var t2 = !e2.test(/like android/i), r2 = e2.test(/android/i);
            return t2 && r2;
          }, describe: function(e2) {
            var t2 = { name: "Android Browser" }, r2 = i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/playstation 4/i], describe: function(e2) {
            var t2 = { name: "PlayStation 4" }, r2 = i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/safari|applewebkit/i], describe: function(e2) {
            var t2 = { name: "Safari" }, r2 = i.default.getFirstMatch(s, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/.*/i], describe: function(e2) {
            var t2 = -1 !== e2.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
            return { name: i.default.getFirstMatch(t2, e2), version: i.default.getSecondMatch(t2, e2) };
          } }];
          t.default = a, e.exports = t.default;
        }, 93: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n, i = (n = r(17)) && n.__esModule ? n : { default: n }, s = r(18);
          var a = [{ test: [/Roku\/DVP/], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e2);
            return { name: s.OS_MAP.Roku, version: t2 };
          } }, { test: [/windows phone/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e2);
            return { name: s.OS_MAP.WindowsPhone, version: t2 };
          } }, { test: [/windows /i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e2), r2 = i.default.getWindowsVersionName(t2);
            return { name: s.OS_MAP.Windows, version: t2, versionName: r2 };
          } }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: function(e2) {
            var t2 = { name: s.OS_MAP.iOS }, r2 = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/macintosh/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e2).replace(/[_\s]/g, "."), r2 = i.default.getMacOSVersionName(t2), n2 = { name: s.OS_MAP.MacOS, version: t2 };
            return r2 && (n2.versionName = r2), n2;
          } }, { test: [/(ipod|iphone|ipad)/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e2).replace(/[_\s]/g, ".");
            return { name: s.OS_MAP.iOS, version: t2 };
          } }, { test: function(e2) {
            var t2 = !e2.test(/like android/i), r2 = e2.test(/android/i);
            return t2 && r2;
          }, describe: function(e2) {
            var t2 = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e2), r2 = i.default.getAndroidVersionName(t2), n2 = { name: s.OS_MAP.Android, version: t2 };
            return r2 && (n2.versionName = r2), n2;
          } }, { test: [/(web|hpw)[o0]s/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e2), r2 = { name: s.OS_MAP.WebOS };
            return t2 && t2.length && (r2.version = t2), r2;
          } }, { test: [/blackberry|\bbb\d+/i, /rim\stablet/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e2) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e2) || i.default.getFirstMatch(/\bbb(\d+)/i, e2);
            return { name: s.OS_MAP.BlackBerry, version: t2 };
          } }, { test: [/bada/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e2);
            return { name: s.OS_MAP.Bada, version: t2 };
          } }, { test: [/tizen/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e2);
            return { name: s.OS_MAP.Tizen, version: t2 };
          } }, { test: [/linux/i], describe: function() {
            return { name: s.OS_MAP.Linux };
          } }, { test: [/CrOS/], describe: function() {
            return { name: s.OS_MAP.ChromeOS };
          } }, { test: [/PlayStation 4/], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e2);
            return { name: s.OS_MAP.PlayStation4, version: t2 };
          } }];
          t.default = a, e.exports = t.default;
        }, 94: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n, i = (n = r(17)) && n.__esModule ? n : { default: n }, s = r(18);
          var a = [{ test: [/googlebot/i], describe: function() {
            return { type: "bot", vendor: "Google" };
          } }, { test: [/huawei/i], describe: function(e2) {
            var t2 = i.default.getFirstMatch(/(can-l01)/i, e2) && "Nova", r2 = { type: s.PLATFORMS_MAP.mobile, vendor: "Huawei" };
            return t2 && (r2.model = t2), r2;
          } }, { test: [/nexus\s*(?:7|8|9|10).*/i], describe: function() {
            return { type: s.PLATFORMS_MAP.tablet, vendor: "Nexus" };
          } }, { test: [/ipad/i], describe: function() {
            return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
          } }, { test: [/Macintosh(.*?) FxiOS(.*?)\//], describe: function() {
            return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
          } }, { test: [/kftt build/i], describe: function() {
            return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon", model: "Kindle Fire HD 7" };
          } }, { test: [/silk/i], describe: function() {
            return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon" };
          } }, { test: [/tablet(?! pc)/i], describe: function() {
            return { type: s.PLATFORMS_MAP.tablet };
          } }, { test: function(e2) {
            var t2 = e2.test(/ipod|iphone/i), r2 = e2.test(/like (ipod|iphone)/i);
            return t2 && !r2;
          }, describe: function(e2) {
            var t2 = i.default.getFirstMatch(/(ipod|iphone)/i, e2);
            return { type: s.PLATFORMS_MAP.mobile, vendor: "Apple", model: t2 };
          } }, { test: [/nexus\s*[0-6].*/i, /galaxy nexus/i], describe: function() {
            return { type: s.PLATFORMS_MAP.mobile, vendor: "Nexus" };
          } }, { test: [/[^-]mobi/i], describe: function() {
            return { type: s.PLATFORMS_MAP.mobile };
          } }, { test: function(e2) {
            return "blackberry" === e2.getBrowserName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.mobile, vendor: "BlackBerry" };
          } }, { test: function(e2) {
            return "bada" === e2.getBrowserName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.mobile };
          } }, { test: function(e2) {
            return "windows phone" === e2.getBrowserName();
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.mobile, vendor: "Microsoft" };
          } }, { test: function(e2) {
            var t2 = Number(String(e2.getOSVersion()).split(".")[0]);
            return "android" === e2.getOSName(true) && t2 >= 3;
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.tablet };
          } }, { test: function(e2) {
            return "android" === e2.getOSName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.mobile };
          } }, { test: function(e2) {
            return "macos" === e2.getOSName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.desktop, vendor: "Apple" };
          } }, { test: function(e2) {
            return "windows" === e2.getOSName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.desktop };
          } }, { test: function(e2) {
            return "linux" === e2.getOSName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.desktop };
          } }, { test: function(e2) {
            return "playstation 4" === e2.getOSName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.tv };
          } }, { test: function(e2) {
            return "roku" === e2.getOSName(true);
          }, describe: function() {
            return { type: s.PLATFORMS_MAP.tv };
          } }];
          t.default = a, e.exports = t.default;
        }, 95: function(e, t, r) {
          "use strict";
          t.__esModule = true, t.default = void 0;
          var n, i = (n = r(17)) && n.__esModule ? n : { default: n }, s = r(18);
          var a = [{ test: function(e2) {
            return "microsoft edge" === e2.getBrowserName(true);
          }, describe: function(e2) {
            if (/\sedg\//i.test(e2))
              return { name: s.ENGINE_MAP.Blink };
            var t2 = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e2);
            return { name: s.ENGINE_MAP.EdgeHTML, version: t2 };
          } }, { test: [/trident/i], describe: function(e2) {
            var t2 = { name: s.ENGINE_MAP.Trident }, r2 = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: function(e2) {
            return e2.test(/presto/i);
          }, describe: function(e2) {
            var t2 = { name: s.ENGINE_MAP.Presto }, r2 = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: function(e2) {
            var t2 = e2.test(/gecko/i), r2 = e2.test(/like gecko/i);
            return t2 && !r2;
          }, describe: function(e2) {
            var t2 = { name: s.ENGINE_MAP.Gecko }, r2 = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }, { test: [/(apple)?webkit\/537\.36/i], describe: function() {
            return { name: s.ENGINE_MAP.Blink };
          } }, { test: [/(apple)?webkit/i], describe: function(e2) {
            var t2 = { name: s.ENGINE_MAP.WebKit }, r2 = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e2);
            return r2 && (t2.version = r2), t2;
          } }];
          t.default = a, e.exports = t.default;
        } });
      });
    }
  });

  // node_modules/qr-code-styling/lib/qr-code-styling.js
  var require_qr_code_styling = __commonJS({
    "node_modules/qr-code-styling/lib/qr-code-styling.js"(exports, module) {
      !function(t, e) {
        "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.QRCodeStyling = e() : t.QRCodeStyling = e();
      }(self, function() {
        return (() => {
          var t = { 192: (t2, e2) => {
            var r2, n, o = function() {
              var t3 = function(t4, e4) {
                var r4 = t4, n3 = a[e4], o3 = null, i2 = 0, u2 = null, v2 = [], w2 = {}, m = function(t5, e5) {
                  o3 = function(t6) {
                    for (var e6 = new Array(t6), r5 = 0; r5 < t6; r5 += 1) {
                      e6[r5] = new Array(t6);
                      for (var n4 = 0; n4 < t6; n4 += 1)
                        e6[r5][n4] = null;
                    }
                    return e6;
                  }(i2 = 4 * r4 + 17), b(0, 0), b(i2 - 7, 0), b(0, i2 - 7), x(), _(), M(t5, e5), r4 >= 7 && S(t5), null == u2 && (u2 = A(r4, n3, v2)), C(u2, e5);
                }, b = function(t5, e5) {
                  for (var r5 = -1; r5 <= 7; r5 += 1)
                    if (!(t5 + r5 <= -1 || i2 <= t5 + r5))
                      for (var n4 = -1; n4 <= 7; n4 += 1)
                        e5 + n4 <= -1 || i2 <= e5 + n4 || (o3[t5 + r5][e5 + n4] = 0 <= r5 && r5 <= 6 && (0 == n4 || 6 == n4) || 0 <= n4 && n4 <= 6 && (0 == r5 || 6 == r5) || 2 <= r5 && r5 <= 4 && 2 <= n4 && n4 <= 4);
                }, _ = function() {
                  for (var t5 = 8; t5 < i2 - 8; t5 += 1)
                    null == o3[t5][6] && (o3[t5][6] = t5 % 2 == 0);
                  for (var e5 = 8; e5 < i2 - 8; e5 += 1)
                    null == o3[6][e5] && (o3[6][e5] = e5 % 2 == 0);
                }, x = function() {
                  for (var t5 = s.getPatternPosition(r4), e5 = 0; e5 < t5.length; e5 += 1)
                    for (var n4 = 0; n4 < t5.length; n4 += 1) {
                      var i3 = t5[e5], a2 = t5[n4];
                      if (null == o3[i3][a2])
                        for (var u3 = -2; u3 <= 2; u3 += 1)
                          for (var h2 = -2; h2 <= 2; h2 += 1)
                            o3[i3 + u3][a2 + h2] = -2 == u3 || 2 == u3 || -2 == h2 || 2 == h2 || 0 == u3 && 0 == h2;
                    }
                }, S = function(t5) {
                  for (var e5 = s.getBCHTypeNumber(r4), n4 = 0; n4 < 18; n4 += 1) {
                    var a2 = !t5 && 1 == (e5 >> n4 & 1);
                    o3[Math.floor(n4 / 3)][n4 % 3 + i2 - 8 - 3] = a2;
                  }
                  for (n4 = 0; n4 < 18; n4 += 1)
                    a2 = !t5 && 1 == (e5 >> n4 & 1), o3[n4 % 3 + i2 - 8 - 3][Math.floor(n4 / 3)] = a2;
                }, M = function(t5, e5) {
                  for (var r5 = n3 << 3 | e5, a2 = s.getBCHTypeInfo(r5), u3 = 0; u3 < 15; u3 += 1) {
                    var h2 = !t5 && 1 == (a2 >> u3 & 1);
                    u3 < 6 ? o3[u3][8] = h2 : u3 < 8 ? o3[u3 + 1][8] = h2 : o3[i2 - 15 + u3][8] = h2;
                  }
                  for (u3 = 0; u3 < 15; u3 += 1)
                    h2 = !t5 && 1 == (a2 >> u3 & 1), u3 < 8 ? o3[8][i2 - u3 - 1] = h2 : u3 < 9 ? o3[8][15 - u3 - 1 + 1] = h2 : o3[8][15 - u3 - 1] = h2;
                  o3[i2 - 8][8] = !t5;
                }, C = function(t5, e5) {
                  for (var r5 = -1, n4 = i2 - 1, a2 = 7, u3 = 0, h2 = s.getMaskFunction(e5), c2 = i2 - 1; c2 > 0; c2 -= 2)
                    for (6 == c2 && (c2 -= 1); ; ) {
                      for (var l2 = 0; l2 < 2; l2 += 1)
                        if (null == o3[n4][c2 - l2]) {
                          var d2 = false;
                          u3 < t5.length && (d2 = 1 == (t5[u3] >>> a2 & 1)), h2(n4, c2 - l2) && (d2 = !d2), o3[n4][c2 - l2] = d2, -1 == (a2 -= 1) && (u3 += 1, a2 = 7);
                        }
                      if ((n4 += r5) < 0 || i2 <= n4) {
                        n4 -= r5, r5 = -r5;
                        break;
                      }
                    }
                }, A = function(t5, e5, r5) {
                  for (var n4 = c.getRSBlocks(t5, e5), o4 = l(), i3 = 0; i3 < r5.length; i3 += 1) {
                    var a2 = r5[i3];
                    o4.put(a2.getMode(), 4), o4.put(a2.getLength(), s.getLengthInBits(a2.getMode(), t5)), a2.write(o4);
                  }
                  var u3 = 0;
                  for (i3 = 0; i3 < n4.length; i3 += 1)
                    u3 += n4[i3].dataCount;
                  if (o4.getLengthInBits() > 8 * u3)
                    throw "code length overflow. (" + o4.getLengthInBits() + ">" + 8 * u3 + ")";
                  for (o4.getLengthInBits() + 4 <= 8 * u3 && o4.put(0, 4); o4.getLengthInBits() % 8 != 0; )
                    o4.putBit(false);
                  for (; !(o4.getLengthInBits() >= 8 * u3 || (o4.put(236, 8), o4.getLengthInBits() >= 8 * u3)); )
                    o4.put(17, 8);
                  return function(t6, e6) {
                    for (var r6 = 0, n5 = 0, o5 = 0, i4 = new Array(e6.length), a3 = new Array(e6.length), u4 = 0; u4 < e6.length; u4 += 1) {
                      var c2 = e6[u4].dataCount, l2 = e6[u4].totalCount - c2;
                      n5 = Math.max(n5, c2), o5 = Math.max(o5, l2), i4[u4] = new Array(c2);
                      for (var d2 = 0; d2 < i4[u4].length; d2 += 1)
                        i4[u4][d2] = 255 & t6.getBuffer()[d2 + r6];
                      r6 += c2;
                      var f2 = s.getErrorCorrectPolynomial(l2), g2 = h(i4[u4], f2.getLength() - 1).mod(f2);
                      for (a3[u4] = new Array(f2.getLength() - 1), d2 = 0; d2 < a3[u4].length; d2 += 1) {
                        var p2 = d2 + g2.getLength() - a3[u4].length;
                        a3[u4][d2] = p2 >= 0 ? g2.getAt(p2) : 0;
                      }
                    }
                    var v3 = 0;
                    for (d2 = 0; d2 < e6.length; d2 += 1)
                      v3 += e6[d2].totalCount;
                    var w3 = new Array(v3), y2 = 0;
                    for (d2 = 0; d2 < n5; d2 += 1)
                      for (u4 = 0; u4 < e6.length; u4 += 1)
                        d2 < i4[u4].length && (w3[y2] = i4[u4][d2], y2 += 1);
                    for (d2 = 0; d2 < o5; d2 += 1)
                      for (u4 = 0; u4 < e6.length; u4 += 1)
                        d2 < a3[u4].length && (w3[y2] = a3[u4][d2], y2 += 1);
                    return w3;
                  }(o4, n4);
                };
                w2.addData = function(t5, e5) {
                  var r5 = null;
                  switch (e5 = e5 || "Byte") {
                    case "Numeric":
                      r5 = d(t5);
                      break;
                    case "Alphanumeric":
                      r5 = f(t5);
                      break;
                    case "Byte":
                      r5 = g(t5);
                      break;
                    case "Kanji":
                      r5 = p(t5);
                      break;
                    default:
                      throw "mode:" + e5;
                  }
                  v2.push(r5), u2 = null;
                }, w2.isDark = function(t5, e5) {
                  if (t5 < 0 || i2 <= t5 || e5 < 0 || i2 <= e5)
                    throw t5 + "," + e5;
                  return o3[t5][e5];
                }, w2.getModuleCount = function() {
                  return i2;
                }, w2.make = function() {
                  if (r4 < 1) {
                    for (var t5 = 1; t5 < 40; t5++) {
                      for (var e5 = c.getRSBlocks(t5, n3), o4 = l(), i3 = 0; i3 < v2.length; i3++) {
                        var a2 = v2[i3];
                        o4.put(a2.getMode(), 4), o4.put(a2.getLength(), s.getLengthInBits(a2.getMode(), t5)), a2.write(o4);
                      }
                      var u3 = 0;
                      for (i3 = 0; i3 < e5.length; i3++)
                        u3 += e5[i3].dataCount;
                      if (o4.getLengthInBits() <= 8 * u3)
                        break;
                    }
                    r4 = t5;
                  }
                  m(false, function() {
                    for (var t6 = 0, e6 = 0, r5 = 0; r5 < 8; r5 += 1) {
                      m(true, r5);
                      var n4 = s.getLostPoint(w2);
                      (0 == r5 || t6 > n4) && (t6 = n4, e6 = r5);
                    }
                    return e6;
                  }());
                }, w2.createTableTag = function(t5, e5) {
                  t5 = t5 || 2;
                  var r5 = "";
                  r5 += '<table style="', r5 += " border-width: 0px; border-style: none;", r5 += " border-collapse: collapse;", r5 += " padding: 0px; margin: " + (e5 = void 0 === e5 ? 4 * t5 : e5) + "px;", r5 += '">', r5 += "<tbody>";
                  for (var n4 = 0; n4 < w2.getModuleCount(); n4 += 1) {
                    r5 += "<tr>";
                    for (var o4 = 0; o4 < w2.getModuleCount(); o4 += 1)
                      r5 += '<td style="', r5 += " border-width: 0px; border-style: none;", r5 += " border-collapse: collapse;", r5 += " padding: 0px; margin: 0px;", r5 += " width: " + t5 + "px;", r5 += " height: " + t5 + "px;", r5 += " background-color: ", r5 += w2.isDark(n4, o4) ? "#000000" : "#ffffff", r5 += ";", r5 += '"/>';
                    r5 += "</tr>";
                  }
                  return (r5 += "</tbody>") + "</table>";
                }, w2.createSvgTag = function(t5, e5, r5, n4) {
                  var o4 = {};
                  "object" == typeof arguments[0] && (t5 = (o4 = arguments[0]).cellSize, e5 = o4.margin, r5 = o4.alt, n4 = o4.title), t5 = t5 || 2, e5 = void 0 === e5 ? 4 * t5 : e5, (r5 = "string" == typeof r5 ? { text: r5 } : r5 || {}).text = r5.text || null, r5.id = r5.text ? r5.id || "qrcode-description" : null, (n4 = "string" == typeof n4 ? { text: n4 } : n4 || {}).text = n4.text || null, n4.id = n4.text ? n4.id || "qrcode-title" : null;
                  var i3, a2, s2, u3, h2 = w2.getModuleCount() * t5 + 2 * e5, c2 = "";
                  for (u3 = "l" + t5 + ",0 0," + t5 + " -" + t5 + ",0 0,-" + t5 + "z ", c2 += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"', c2 += o4.scalable ? "" : ' width="' + h2 + 'px" height="' + h2 + 'px"', c2 += ' viewBox="0 0 ' + h2 + " " + h2 + '" ', c2 += ' preserveAspectRatio="xMinYMin meet"', c2 += n4.text || r5.text ? ' role="img" aria-labelledby="' + k([n4.id, r5.id].join(" ").trim()) + '"' : "", c2 += ">", c2 += n4.text ? '<title id="' + k(n4.id) + '">' + k(n4.text) + "</title>" : "", c2 += r5.text ? '<description id="' + k(r5.id) + '">' + k(r5.text) + "</description>" : "", c2 += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>', c2 += '<path d="', a2 = 0; a2 < w2.getModuleCount(); a2 += 1)
                    for (s2 = a2 * t5 + e5, i3 = 0; i3 < w2.getModuleCount(); i3 += 1)
                      w2.isDark(a2, i3) && (c2 += "M" + (i3 * t5 + e5) + "," + s2 + u3);
                  return (c2 += '" stroke="transparent" fill="black"/>') + "</svg>";
                }, w2.createDataURL = function(t5, e5) {
                  t5 = t5 || 2, e5 = void 0 === e5 ? 4 * t5 : e5;
                  var r5 = w2.getModuleCount() * t5 + 2 * e5, n4 = e5, o4 = r5 - e5;
                  return y(r5, r5, function(e6, r6) {
                    if (n4 <= e6 && e6 < o4 && n4 <= r6 && r6 < o4) {
                      var i3 = Math.floor((e6 - n4) / t5), a2 = Math.floor((r6 - n4) / t5);
                      return w2.isDark(a2, i3) ? 0 : 1;
                    }
                    return 1;
                  });
                }, w2.createImgTag = function(t5, e5, r5) {
                  t5 = t5 || 2, e5 = void 0 === e5 ? 4 * t5 : e5;
                  var n4 = w2.getModuleCount() * t5 + 2 * e5, o4 = "";
                  return o4 += "<img", o4 += ' src="', o4 += w2.createDataURL(t5, e5), o4 += '"', o4 += ' width="', o4 += n4, o4 += '"', o4 += ' height="', o4 += n4, o4 += '"', r5 && (o4 += ' alt="', o4 += k(r5), o4 += '"'), o4 + "/>";
                };
                var k = function(t5) {
                  for (var e5 = "", r5 = 0; r5 < t5.length; r5 += 1) {
                    var n4 = t5.charAt(r5);
                    switch (n4) {
                      case "<":
                        e5 += "&lt;";
                        break;
                      case ">":
                        e5 += "&gt;";
                        break;
                      case "&":
                        e5 += "&amp;";
                        break;
                      case '"':
                        e5 += "&quot;";
                        break;
                      default:
                        e5 += n4;
                    }
                  }
                  return e5;
                };
                return w2.createASCII = function(t5, e5) {
                  if ((t5 = t5 || 1) < 2)
                    return function(t6) {
                      t6 = void 0 === t6 ? 2 : t6;
                      var e6, r6, n5, o5, i4, a3 = 1 * w2.getModuleCount() + 2 * t6, s3 = t6, u4 = a3 - t6, h3 = { "\u2588\u2588": "\u2588", "\u2588 ": "\u2580", " \u2588": "\u2584", "  ": " " }, c3 = { "\u2588\u2588": "\u2580", "\u2588 ": "\u2580", " \u2588": " ", "  ": " " }, l3 = "";
                      for (e6 = 0; e6 < a3; e6 += 2) {
                        for (n5 = Math.floor((e6 - s3) / 1), o5 = Math.floor((e6 + 1 - s3) / 1), r6 = 0; r6 < a3; r6 += 1)
                          i4 = "\u2588", s3 <= r6 && r6 < u4 && s3 <= e6 && e6 < u4 && w2.isDark(n5, Math.floor((r6 - s3) / 1)) && (i4 = " "), s3 <= r6 && r6 < u4 && s3 <= e6 + 1 && e6 + 1 < u4 && w2.isDark(o5, Math.floor((r6 - s3) / 1)) ? i4 += " " : i4 += "\u2588", l3 += t6 < 1 && e6 + 1 >= u4 ? c3[i4] : h3[i4];
                        l3 += "\n";
                      }
                      return a3 % 2 && t6 > 0 ? l3.substring(0, l3.length - a3 - 1) + Array(a3 + 1).join("\u2580") : l3.substring(0, l3.length - 1);
                    }(e5);
                  t5 -= 1, e5 = void 0 === e5 ? 2 * t5 : e5;
                  var r5, n4, o4, i3, a2 = w2.getModuleCount() * t5 + 2 * e5, s2 = e5, u3 = a2 - e5, h2 = Array(t5 + 1).join("\u2588\u2588"), c2 = Array(t5 + 1).join("  "), l2 = "", d2 = "";
                  for (r5 = 0; r5 < a2; r5 += 1) {
                    for (o4 = Math.floor((r5 - s2) / t5), d2 = "", n4 = 0; n4 < a2; n4 += 1)
                      i3 = 1, s2 <= n4 && n4 < u3 && s2 <= r5 && r5 < u3 && w2.isDark(o4, Math.floor((n4 - s2) / t5)) && (i3 = 0), d2 += i3 ? h2 : c2;
                    for (o4 = 0; o4 < t5; o4 += 1)
                      l2 += d2 + "\n";
                  }
                  return l2.substring(0, l2.length - 1);
                }, w2.renderTo2dContext = function(t5, e5) {
                  e5 = e5 || 2;
                  for (var r5 = w2.getModuleCount(), n4 = 0; n4 < r5; n4++)
                    for (var o4 = 0; o4 < r5; o4++)
                      t5.fillStyle = w2.isDark(n4, o4) ? "black" : "white", t5.fillRect(n4 * e5, o4 * e5, e5, e5);
                }, w2;
              };
              t3.stringToBytes = (t3.stringToBytesFuncs = { default: function(t4) {
                for (var e4 = [], r4 = 0; r4 < t4.length; r4 += 1) {
                  var n3 = t4.charCodeAt(r4);
                  e4.push(255 & n3);
                }
                return e4;
              } }).default, t3.createStringToBytes = function(t4, e4) {
                var r4 = function() {
                  for (var r5 = w(t4), n4 = function() {
                    var t5 = r5.read();
                    if (-1 == t5)
                      throw "eof";
                    return t5;
                  }, o3 = 0, i2 = {}; ; ) {
                    var a2 = r5.read();
                    if (-1 == a2)
                      break;
                    var s2 = n4(), u2 = n4() << 8 | n4();
                    i2[String.fromCharCode(a2 << 8 | s2)] = u2, o3 += 1;
                  }
                  if (o3 != e4)
                    throw o3 + " != " + e4;
                  return i2;
                }(), n3 = "?".charCodeAt(0);
                return function(t5) {
                  for (var e5 = [], o3 = 0; o3 < t5.length; o3 += 1) {
                    var i2 = t5.charCodeAt(o3);
                    if (i2 < 128)
                      e5.push(i2);
                    else {
                      var a2 = r4[t5.charAt(o3)];
                      "number" == typeof a2 ? (255 & a2) == a2 ? e5.push(a2) : (e5.push(a2 >>> 8), e5.push(255 & a2)) : e5.push(n3);
                    }
                  }
                  return e5;
                };
              };
              var e3, r3, n2, o2, i, a = { L: 1, M: 0, Q: 3, H: 2 }, s = (e3 = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]], r3 = 1335, n2 = 7973, i = function(t4) {
                for (var e4 = 0; 0 != t4; )
                  e4 += 1, t4 >>>= 1;
                return e4;
              }, (o2 = {}).getBCHTypeInfo = function(t4) {
                for (var e4 = t4 << 10; i(e4) - i(r3) >= 0; )
                  e4 ^= r3 << i(e4) - i(r3);
                return 21522 ^ (t4 << 10 | e4);
              }, o2.getBCHTypeNumber = function(t4) {
                for (var e4 = t4 << 12; i(e4) - i(n2) >= 0; )
                  e4 ^= n2 << i(e4) - i(n2);
                return t4 << 12 | e4;
              }, o2.getPatternPosition = function(t4) {
                return e3[t4 - 1];
              }, o2.getMaskFunction = function(t4) {
                switch (t4) {
                  case 0:
                    return function(t5, e4) {
                      return (t5 + e4) % 2 == 0;
                    };
                  case 1:
                    return function(t5, e4) {
                      return t5 % 2 == 0;
                    };
                  case 2:
                    return function(t5, e4) {
                      return e4 % 3 == 0;
                    };
                  case 3:
                    return function(t5, e4) {
                      return (t5 + e4) % 3 == 0;
                    };
                  case 4:
                    return function(t5, e4) {
                      return (Math.floor(t5 / 2) + Math.floor(e4 / 3)) % 2 == 0;
                    };
                  case 5:
                    return function(t5, e4) {
                      return t5 * e4 % 2 + t5 * e4 % 3 == 0;
                    };
                  case 6:
                    return function(t5, e4) {
                      return (t5 * e4 % 2 + t5 * e4 % 3) % 2 == 0;
                    };
                  case 7:
                    return function(t5, e4) {
                      return (t5 * e4 % 3 + (t5 + e4) % 2) % 2 == 0;
                    };
                  default:
                    throw "bad maskPattern:" + t4;
                }
              }, o2.getErrorCorrectPolynomial = function(t4) {
                for (var e4 = h([1], 0), r4 = 0; r4 < t4; r4 += 1)
                  e4 = e4.multiply(h([1, u.gexp(r4)], 0));
                return e4;
              }, o2.getLengthInBits = function(t4, e4) {
                if (1 <= e4 && e4 < 10)
                  switch (t4) {
                    case 1:
                      return 10;
                    case 2:
                      return 9;
                    case 4:
                    case 8:
                      return 8;
                    default:
                      throw "mode:" + t4;
                  }
                else if (e4 < 27)
                  switch (t4) {
                    case 1:
                      return 12;
                    case 2:
                      return 11;
                    case 4:
                      return 16;
                    case 8:
                      return 10;
                    default:
                      throw "mode:" + t4;
                  }
                else {
                  if (!(e4 < 41))
                    throw "type:" + e4;
                  switch (t4) {
                    case 1:
                      return 14;
                    case 2:
                      return 13;
                    case 4:
                      return 16;
                    case 8:
                      return 12;
                    default:
                      throw "mode:" + t4;
                  }
                }
              }, o2.getLostPoint = function(t4) {
                for (var e4 = t4.getModuleCount(), r4 = 0, n3 = 0; n3 < e4; n3 += 1)
                  for (var o3 = 0; o3 < e4; o3 += 1) {
                    for (var i2 = 0, a2 = t4.isDark(n3, o3), s2 = -1; s2 <= 1; s2 += 1)
                      if (!(n3 + s2 < 0 || e4 <= n3 + s2))
                        for (var u2 = -1; u2 <= 1; u2 += 1)
                          o3 + u2 < 0 || e4 <= o3 + u2 || 0 == s2 && 0 == u2 || a2 == t4.isDark(n3 + s2, o3 + u2) && (i2 += 1);
                    i2 > 5 && (r4 += 3 + i2 - 5);
                  }
                for (n3 = 0; n3 < e4 - 1; n3 += 1)
                  for (o3 = 0; o3 < e4 - 1; o3 += 1) {
                    var h2 = 0;
                    t4.isDark(n3, o3) && (h2 += 1), t4.isDark(n3 + 1, o3) && (h2 += 1), t4.isDark(n3, o3 + 1) && (h2 += 1), t4.isDark(n3 + 1, o3 + 1) && (h2 += 1), 0 != h2 && 4 != h2 || (r4 += 3);
                  }
                for (n3 = 0; n3 < e4; n3 += 1)
                  for (o3 = 0; o3 < e4 - 6; o3 += 1)
                    t4.isDark(n3, o3) && !t4.isDark(n3, o3 + 1) && t4.isDark(n3, o3 + 2) && t4.isDark(n3, o3 + 3) && t4.isDark(n3, o3 + 4) && !t4.isDark(n3, o3 + 5) && t4.isDark(n3, o3 + 6) && (r4 += 40);
                for (o3 = 0; o3 < e4; o3 += 1)
                  for (n3 = 0; n3 < e4 - 6; n3 += 1)
                    t4.isDark(n3, o3) && !t4.isDark(n3 + 1, o3) && t4.isDark(n3 + 2, o3) && t4.isDark(n3 + 3, o3) && t4.isDark(n3 + 4, o3) && !t4.isDark(n3 + 5, o3) && t4.isDark(n3 + 6, o3) && (r4 += 40);
                var c2 = 0;
                for (o3 = 0; o3 < e4; o3 += 1)
                  for (n3 = 0; n3 < e4; n3 += 1)
                    t4.isDark(n3, o3) && (c2 += 1);
                return r4 + Math.abs(100 * c2 / e4 / e4 - 50) / 5 * 10;
              }, o2), u = function() {
                for (var t4 = new Array(256), e4 = new Array(256), r4 = 0; r4 < 8; r4 += 1)
                  t4[r4] = 1 << r4;
                for (r4 = 8; r4 < 256; r4 += 1)
                  t4[r4] = t4[r4 - 4] ^ t4[r4 - 5] ^ t4[r4 - 6] ^ t4[r4 - 8];
                for (r4 = 0; r4 < 255; r4 += 1)
                  e4[t4[r4]] = r4;
                return { glog: function(t5) {
                  if (t5 < 1)
                    throw "glog(" + t5 + ")";
                  return e4[t5];
                }, gexp: function(e5) {
                  for (; e5 < 0; )
                    e5 += 255;
                  for (; e5 >= 256; )
                    e5 -= 255;
                  return t4[e5];
                } };
              }();
              function h(t4, e4) {
                if (void 0 === t4.length)
                  throw t4.length + "/" + e4;
                var r4 = function() {
                  for (var r5 = 0; r5 < t4.length && 0 == t4[r5]; )
                    r5 += 1;
                  for (var n4 = new Array(t4.length - r5 + e4), o3 = 0; o3 < t4.length - r5; o3 += 1)
                    n4[o3] = t4[o3 + r5];
                  return n4;
                }(), n3 = { getAt: function(t5) {
                  return r4[t5];
                }, getLength: function() {
                  return r4.length;
                }, multiply: function(t5) {
                  for (var e5 = new Array(n3.getLength() + t5.getLength() - 1), r5 = 0; r5 < n3.getLength(); r5 += 1)
                    for (var o3 = 0; o3 < t5.getLength(); o3 += 1)
                      e5[r5 + o3] ^= u.gexp(u.glog(n3.getAt(r5)) + u.glog(t5.getAt(o3)));
                  return h(e5, 0);
                }, mod: function(t5) {
                  if (n3.getLength() - t5.getLength() < 0)
                    return n3;
                  for (var e5 = u.glog(n3.getAt(0)) - u.glog(t5.getAt(0)), r5 = new Array(n3.getLength()), o3 = 0; o3 < n3.getLength(); o3 += 1)
                    r5[o3] = n3.getAt(o3);
                  for (o3 = 0; o3 < t5.getLength(); o3 += 1)
                    r5[o3] ^= u.gexp(u.glog(t5.getAt(o3)) + e5);
                  return h(r5, 0).mod(t5);
                } };
                return n3;
              }
              var c = function() {
                var t4 = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], e4 = function(t5, e5) {
                  var r5 = {};
                  return r5.totalCount = t5, r5.dataCount = e5, r5;
                }, r4 = { getRSBlocks: function(r5, n3) {
                  var o3 = function(e5, r6) {
                    switch (r6) {
                      case a.L:
                        return t4[4 * (e5 - 1) + 0];
                      case a.M:
                        return t4[4 * (e5 - 1) + 1];
                      case a.Q:
                        return t4[4 * (e5 - 1) + 2];
                      case a.H:
                        return t4[4 * (e5 - 1) + 3];
                      default:
                        return;
                    }
                  }(r5, n3);
                  if (void 0 === o3)
                    throw "bad rs block @ typeNumber:" + r5 + "/errorCorrectionLevel:" + n3;
                  for (var i2 = o3.length / 3, s2 = [], u2 = 0; u2 < i2; u2 += 1)
                    for (var h2 = o3[3 * u2 + 0], c2 = o3[3 * u2 + 1], l2 = o3[3 * u2 + 2], d2 = 0; d2 < h2; d2 += 1)
                      s2.push(e4(c2, l2));
                  return s2;
                } };
                return r4;
              }(), l = function() {
                var t4 = [], e4 = 0, r4 = { getBuffer: function() {
                  return t4;
                }, getAt: function(e5) {
                  var r5 = Math.floor(e5 / 8);
                  return 1 == (t4[r5] >>> 7 - e5 % 8 & 1);
                }, put: function(t5, e5) {
                  for (var n3 = 0; n3 < e5; n3 += 1)
                    r4.putBit(1 == (t5 >>> e5 - n3 - 1 & 1));
                }, getLengthInBits: function() {
                  return e4;
                }, putBit: function(r5) {
                  var n3 = Math.floor(e4 / 8);
                  t4.length <= n3 && t4.push(0), r5 && (t4[n3] |= 128 >>> e4 % 8), e4 += 1;
                } };
                return r4;
              }, d = function(t4) {
                var e4 = t4, r4 = { getMode: function() {
                  return 1;
                }, getLength: function(t5) {
                  return e4.length;
                }, write: function(t5) {
                  for (var r5 = e4, o4 = 0; o4 + 2 < r5.length; )
                    t5.put(n3(r5.substring(o4, o4 + 3)), 10), o4 += 3;
                  o4 < r5.length && (r5.length - o4 == 1 ? t5.put(n3(r5.substring(o4, o4 + 1)), 4) : r5.length - o4 == 2 && t5.put(n3(r5.substring(o4, o4 + 2)), 7));
                } }, n3 = function(t5) {
                  for (var e5 = 0, r5 = 0; r5 < t5.length; r5 += 1)
                    e5 = 10 * e5 + o3(t5.charAt(r5));
                  return e5;
                }, o3 = function(t5) {
                  if ("0" <= t5 && t5 <= "9")
                    return t5.charCodeAt(0) - "0".charCodeAt(0);
                  throw "illegal char :" + t5;
                };
                return r4;
              }, f = function(t4) {
                var e4 = t4, r4 = { getMode: function() {
                  return 2;
                }, getLength: function(t5) {
                  return e4.length;
                }, write: function(t5) {
                  for (var r5 = e4, o3 = 0; o3 + 1 < r5.length; )
                    t5.put(45 * n3(r5.charAt(o3)) + n3(r5.charAt(o3 + 1)), 11), o3 += 2;
                  o3 < r5.length && t5.put(n3(r5.charAt(o3)), 6);
                } }, n3 = function(t5) {
                  if ("0" <= t5 && t5 <= "9")
                    return t5.charCodeAt(0) - "0".charCodeAt(0);
                  if ("A" <= t5 && t5 <= "Z")
                    return t5.charCodeAt(0) - "A".charCodeAt(0) + 10;
                  switch (t5) {
                    case " ":
                      return 36;
                    case "$":
                      return 37;
                    case "%":
                      return 38;
                    case "*":
                      return 39;
                    case "+":
                      return 40;
                    case "-":
                      return 41;
                    case ".":
                      return 42;
                    case "/":
                      return 43;
                    case ":":
                      return 44;
                    default:
                      throw "illegal char :" + t5;
                  }
                };
                return r4;
              }, g = function(e4) {
                var r4 = t3.stringToBytes(e4);
                return { getMode: function() {
                  return 4;
                }, getLength: function(t4) {
                  return r4.length;
                }, write: function(t4) {
                  for (var e5 = 0; e5 < r4.length; e5 += 1)
                    t4.put(r4[e5], 8);
                } };
              }, p = function(e4) {
                var r4 = t3.stringToBytesFuncs.SJIS;
                if (!r4)
                  throw "sjis not supported.";
                !function(t4, e5) {
                  var n4 = r4("\u53CB");
                  if (2 != n4.length || 38726 != (n4[0] << 8 | n4[1]))
                    throw "sjis not supported.";
                }();
                var n3 = r4(e4);
                return { getMode: function() {
                  return 8;
                }, getLength: function(t4) {
                  return ~~(n3.length / 2);
                }, write: function(t4) {
                  for (var e5 = n3, r5 = 0; r5 + 1 < e5.length; ) {
                    var o3 = (255 & e5[r5]) << 8 | 255 & e5[r5 + 1];
                    if (33088 <= o3 && o3 <= 40956)
                      o3 -= 33088;
                    else {
                      if (!(57408 <= o3 && o3 <= 60351))
                        throw "illegal char at " + (r5 + 1) + "/" + o3;
                      o3 -= 49472;
                    }
                    o3 = 192 * (o3 >>> 8 & 255) + (255 & o3), t4.put(o3, 13), r5 += 2;
                  }
                  if (r5 < e5.length)
                    throw "illegal char at " + (r5 + 1);
                } };
              }, v = function() {
                var t4 = [], e4 = { writeByte: function(e5) {
                  t4.push(255 & e5);
                }, writeShort: function(t5) {
                  e4.writeByte(t5), e4.writeByte(t5 >>> 8);
                }, writeBytes: function(t5, r4, n3) {
                  r4 = r4 || 0, n3 = n3 || t5.length;
                  for (var o3 = 0; o3 < n3; o3 += 1)
                    e4.writeByte(t5[o3 + r4]);
                }, writeString: function(t5) {
                  for (var r4 = 0; r4 < t5.length; r4 += 1)
                    e4.writeByte(t5.charCodeAt(r4));
                }, toByteArray: function() {
                  return t4;
                }, toString: function() {
                  var e5 = "";
                  e5 += "[";
                  for (var r4 = 0; r4 < t4.length; r4 += 1)
                    r4 > 0 && (e5 += ","), e5 += t4[r4];
                  return e5 + "]";
                } };
                return e4;
              }, w = function(t4) {
                var e4 = t4, r4 = 0, n3 = 0, o3 = 0, i2 = { read: function() {
                  for (; o3 < 8; ) {
                    if (r4 >= e4.length) {
                      if (0 == o3)
                        return -1;
                      throw "unexpected end of file./" + o3;
                    }
                    var t5 = e4.charAt(r4);
                    if (r4 += 1, "=" == t5)
                      return o3 = 0, -1;
                    t5.match(/^\s$/) || (n3 = n3 << 6 | a2(t5.charCodeAt(0)), o3 += 6);
                  }
                  var i3 = n3 >>> o3 - 8 & 255;
                  return o3 -= 8, i3;
                } }, a2 = function(t5) {
                  if (65 <= t5 && t5 <= 90)
                    return t5 - 65;
                  if (97 <= t5 && t5 <= 122)
                    return t5 - 97 + 26;
                  if (48 <= t5 && t5 <= 57)
                    return t5 - 48 + 52;
                  if (43 == t5)
                    return 62;
                  if (47 == t5)
                    return 63;
                  throw "c:" + t5;
                };
                return i2;
              }, y = function(t4, e4, r4) {
                for (var n3 = function(t5, e5) {
                  var r5 = t5, n4 = e5, o4 = new Array(t5 * e5), i3 = { setPixel: function(t6, e6, n5) {
                    o4[e6 * r5 + t6] = n5;
                  }, write: function(t6) {
                    t6.writeString("GIF87a"), t6.writeShort(r5), t6.writeShort(n4), t6.writeByte(128), t6.writeByte(0), t6.writeByte(0), t6.writeByte(0), t6.writeByte(0), t6.writeByte(0), t6.writeByte(255), t6.writeByte(255), t6.writeByte(255), t6.writeString(","), t6.writeShort(0), t6.writeShort(0), t6.writeShort(r5), t6.writeShort(n4), t6.writeByte(0);
                    var e6 = a3(2);
                    t6.writeByte(2);
                    for (var o5 = 0; e6.length - o5 > 255; )
                      t6.writeByte(255), t6.writeBytes(e6, o5, 255), o5 += 255;
                    t6.writeByte(e6.length - o5), t6.writeBytes(e6, o5, e6.length - o5), t6.writeByte(0), t6.writeString(";");
                  } }, a3 = function(t6) {
                    for (var e6 = 1 << t6, r6 = 1 + (1 << t6), n5 = t6 + 1, i4 = s3(), a4 = 0; a4 < e6; a4 += 1)
                      i4.add(String.fromCharCode(a4));
                    i4.add(String.fromCharCode(e6)), i4.add(String.fromCharCode(r6));
                    var u3, h3, c2, l2 = v(), d2 = (u3 = l2, h3 = 0, c2 = 0, { write: function(t7, e7) {
                      if (t7 >>> e7 != 0)
                        throw "length over";
                      for (; h3 + e7 >= 8; )
                        u3.writeByte(255 & (t7 << h3 | c2)), e7 -= 8 - h3, t7 >>>= 8 - h3, c2 = 0, h3 = 0;
                      c2 |= t7 << h3, h3 += e7;
                    }, flush: function() {
                      h3 > 0 && u3.writeByte(c2);
                    } });
                    d2.write(e6, n5);
                    var f2 = 0, g2 = String.fromCharCode(o4[f2]);
                    for (f2 += 1; f2 < o4.length; ) {
                      var p2 = String.fromCharCode(o4[f2]);
                      f2 += 1, i4.contains(g2 + p2) ? g2 += p2 : (d2.write(i4.indexOf(g2), n5), i4.size() < 4095 && (i4.size() == 1 << n5 && (n5 += 1), i4.add(g2 + p2)), g2 = p2);
                    }
                    return d2.write(i4.indexOf(g2), n5), d2.write(r6, n5), d2.flush(), l2.toByteArray();
                  }, s3 = function() {
                    var t6 = {}, e6 = 0, r6 = { add: function(n5) {
                      if (r6.contains(n5))
                        throw "dup key:" + n5;
                      t6[n5] = e6, e6 += 1;
                    }, size: function() {
                      return e6;
                    }, indexOf: function(e7) {
                      return t6[e7];
                    }, contains: function(e7) {
                      return void 0 !== t6[e7];
                    } };
                    return r6;
                  };
                  return i3;
                }(t4, e4), o3 = 0; o3 < e4; o3 += 1)
                  for (var i2 = 0; i2 < t4; i2 += 1)
                    n3.setPixel(i2, o3, r4(i2, o3));
                var a2 = v();
                n3.write(a2);
                for (var s2 = function() {
                  var t5 = 0, e5 = 0, r5 = 0, n4 = "", o4 = {}, i3 = function(t6) {
                    n4 += String.fromCharCode(a3(63 & t6));
                  }, a3 = function(t6) {
                    if (t6 < 0)
                      ;
                    else {
                      if (t6 < 26)
                        return 65 + t6;
                      if (t6 < 52)
                        return t6 - 26 + 97;
                      if (t6 < 62)
                        return t6 - 52 + 48;
                      if (62 == t6)
                        return 43;
                      if (63 == t6)
                        return 47;
                    }
                    throw "n:" + t6;
                  };
                  return o4.writeByte = function(n5) {
                    for (t5 = t5 << 8 | 255 & n5, e5 += 8, r5 += 1; e5 >= 6; )
                      i3(t5 >>> e5 - 6), e5 -= 6;
                  }, o4.flush = function() {
                    if (e5 > 0 && (i3(t5 << 6 - e5), t5 = 0, e5 = 0), r5 % 3 != 0)
                      for (var o5 = 3 - r5 % 3, a4 = 0; a4 < o5; a4 += 1)
                        n4 += "=";
                  }, o4.toString = function() {
                    return n4;
                  }, o4;
                }(), u2 = a2.toByteArray(), h2 = 0; h2 < u2.length; h2 += 1)
                  s2.writeByte(u2[h2]);
                return s2.flush(), "data:image/gif;base64," + s2;
              };
              return t3;
            }();
            o.stringToBytesFuncs["UTF-8"] = function(t3) {
              return function(t4) {
                for (var e3 = [], r3 = 0; r3 < t4.length; r3++) {
                  var n2 = t4.charCodeAt(r3);
                  n2 < 128 ? e3.push(n2) : n2 < 2048 ? e3.push(192 | n2 >> 6, 128 | 63 & n2) : n2 < 55296 || n2 >= 57344 ? e3.push(224 | n2 >> 12, 128 | n2 >> 6 & 63, 128 | 63 & n2) : (r3++, n2 = 65536 + ((1023 & n2) << 10 | 1023 & t4.charCodeAt(r3)), e3.push(240 | n2 >> 18, 128 | n2 >> 12 & 63, 128 | n2 >> 6 & 63, 128 | 63 & n2));
                }
                return e3;
              }(t3);
            }, void 0 === (n = "function" == typeof (r2 = function() {
              return o;
            }) ? r2.apply(e2, []) : r2) || (t2.exports = n);
          }, 676: (t2, e2, r2) => {
            "use strict";
            r2.d(e2, { default: () => q });
            var n = function() {
              return (n = Object.assign || function(t3) {
                for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var o2 in e3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
                return t3;
              }).apply(this, arguments);
            }, o = function() {
              for (var t3 = 0, e3 = 0, r3 = arguments.length; e3 < r3; e3++)
                t3 += arguments[e3].length;
              var n2 = Array(t3), o2 = 0;
              for (e3 = 0; e3 < r3; e3++)
                for (var i2 = arguments[e3], a2 = 0, s2 = i2.length; a2 < s2; a2++, o2++)
                  n2[o2] = i2[a2];
              return n2;
            }, i = function(t3) {
              return !!t3 && "object" == typeof t3 && !Array.isArray(t3);
            };
            function a(t3) {
              for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
                e3[r3 - 1] = arguments[r3];
              if (!e3.length)
                return t3;
              var s2 = e3.shift();
              return void 0 !== s2 && i(t3) && i(s2) ? (t3 = n({}, t3), Object.keys(s2).forEach(function(e4) {
                var r4 = t3[e4], n2 = s2[e4];
                Array.isArray(r4) && Array.isArray(n2) ? t3[e4] = n2 : i(r4) && i(n2) ? t3[e4] = a(Object.assign({}, r4), n2) : t3[e4] = n2;
              }), a.apply(void 0, o([t3], e3))) : t3;
            }
            function s(t3, e3) {
              var r3 = document.createElement("a");
              r3.download = e3, r3.href = t3, document.body.appendChild(r3), r3.click(), document.body.removeChild(r3);
            }
            function u(t3) {
              return e3 = this, r3 = void 0, o2 = function() {
                return function(t4, e4) {
                  var r4, n3, o3, i2, a2 = { label: 0, sent: function() {
                    if (1 & o3[0])
                      throw o3[1];
                    return o3[1];
                  }, trys: [], ops: [] };
                  return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
                    return this;
                  }), i2;
                  function s2(i3) {
                    return function(s3) {
                      return function(i4) {
                        if (r4)
                          throw new TypeError("Generator is already executing.");
                        for (; a2; )
                          try {
                            if (r4 = 1, n3 && (o3 = 2 & i4[0] ? n3.return : i4[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, i4[1])).done)
                              return o3;
                            switch (n3 = 0, o3 && (i4 = [2 & i4[0], o3.value]), i4[0]) {
                              case 0:
                              case 1:
                                o3 = i4;
                                break;
                              case 4:
                                return a2.label++, { value: i4[1], done: false };
                              case 5:
                                a2.label++, n3 = i4[1], i4 = [0];
                                continue;
                              case 7:
                                i4 = a2.ops.pop(), a2.trys.pop();
                                continue;
                              default:
                                if (!((o3 = (o3 = a2.trys).length > 0 && o3[o3.length - 1]) || 6 !== i4[0] && 2 !== i4[0])) {
                                  a2 = 0;
                                  continue;
                                }
                                if (3 === i4[0] && (!o3 || i4[1] > o3[0] && i4[1] < o3[3])) {
                                  a2.label = i4[1];
                                  break;
                                }
                                if (6 === i4[0] && a2.label < o3[1]) {
                                  a2.label = o3[1], o3 = i4;
                                  break;
                                }
                                if (o3 && a2.label < o3[2]) {
                                  a2.label = o3[2], a2.ops.push(i4);
                                  break;
                                }
                                o3[2] && a2.ops.pop(), a2.trys.pop();
                                continue;
                            }
                            i4 = e4.call(t4, a2);
                          } catch (t5) {
                            i4 = [6, t5], n3 = 0;
                          } finally {
                            r4 = o3 = 0;
                          }
                        if (5 & i4[0])
                          throw i4[1];
                        return { value: i4[0] ? i4[1] : void 0, done: true };
                      }([i3, s3]);
                    };
                  }
                }(this, function(e4) {
                  return [2, new Promise(function(e5) {
                    var r4 = new XMLHttpRequest();
                    r4.onload = function() {
                      var t4 = new FileReader();
                      t4.onloadend = function() {
                        e5(t4.result);
                      }, t4.readAsDataURL(r4.response);
                    }, r4.open("GET", t3), r4.responseType = "blob", r4.send();
                  })];
                });
              }, new ((n2 = void 0) || (n2 = Promise))(function(t4, i2) {
                function a2(t5) {
                  try {
                    u2(o2.next(t5));
                  } catch (t6) {
                    i2(t6);
                  }
                }
                function s2(t5) {
                  try {
                    u2(o2.throw(t5));
                  } catch (t6) {
                    i2(t6);
                  }
                }
                function u2(e4) {
                  var r4;
                  e4.done ? t4(e4.value) : (r4 = e4.value, r4 instanceof n2 ? r4 : new n2(function(t5) {
                    t5(r4);
                  })).then(a2, s2);
                }
                u2((o2 = o2.apply(e3, r3 || [])).next());
              });
              var e3, r3, n2, o2;
            }
            const h = { L: 0.07, M: 0.15, Q: 0.25, H: 0.3 };
            var c = function() {
              return (c = Object.assign || function(t3) {
                for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var o2 in e3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
                return t3;
              }).apply(this, arguments);
            };
            const l = function() {
              function t3(t4) {
                var e3 = t4.svg, r3 = t4.type;
                this._svg = e3, this._type = r3;
              }
              return t3.prototype.draw = function(t4, e3, r3, n2) {
                var o2;
                switch (this._type) {
                  case "dots":
                    o2 = this._drawDot;
                    break;
                  case "classy":
                    o2 = this._drawClassy;
                    break;
                  case "classy-rounded":
                    o2 = this._drawClassyRounded;
                    break;
                  case "rounded":
                    o2 = this._drawRounded;
                    break;
                  case "extra-rounded":
                    o2 = this._drawExtraRounded;
                    break;
                  case "square":
                  default:
                    o2 = this._drawSquare;
                }
                o2.call(this, { x: t4, y: e3, size: r3, getNeighbor: n2 });
              }, t3.prototype._rotateFigure = function(t4) {
                var e3, r3 = t4.x, n2 = t4.y, o2 = t4.size, i2 = t4.rotation, a2 = void 0 === i2 ? 0 : i2, s2 = r3 + o2 / 2, u2 = n2 + o2 / 2;
                (0, t4.draw)(), null === (e3 = this._element) || void 0 === e3 || e3.setAttribute("transform", "rotate(" + 180 * a2 / Math.PI + "," + s2 + "," + u2 + ")");
              }, t3.prototype._basicDot = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(c(c({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "circle"), e3._element.setAttribute("cx", String(n2 + r3 / 2)), e3._element.setAttribute("cy", String(o2 + r3 / 2)), e3._element.setAttribute("r", String(r3 / 2));
                } }));
              }, t3.prototype._basicSquare = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(c(c({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "rect"), e3._element.setAttribute("x", String(n2)), e3._element.setAttribute("y", String(o2)), e3._element.setAttribute("width", String(r3)), e3._element.setAttribute("height", String(r3));
                } }));
              }, t3.prototype._basicSideRounded = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(c(c({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("d", "M " + n2 + " " + o2 + "v " + r3 + "h " + r3 / 2 + "a " + r3 / 2 + " " + r3 / 2 + ", 0, 0, 0, 0 " + -r3);
                } }));
              }, t3.prototype._basicCornerRounded = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(c(c({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("d", "M " + n2 + " " + o2 + "v " + r3 + "h " + r3 + "v " + -r3 / 2 + "a " + r3 / 2 + " " + r3 / 2 + ", 0, 0, 0, " + -r3 / 2 + " " + -r3 / 2);
                } }));
              }, t3.prototype._basicCornerExtraRounded = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(c(c({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("d", "M " + n2 + " " + o2 + "v " + r3 + "h " + r3 + "a " + r3 + " " + r3 + ", 0, 0, 0, " + -r3 + " " + -r3);
                } }));
              }, t3.prototype._basicCornersRounded = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(c(c({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("d", "M " + n2 + " " + o2 + "v " + r3 / 2 + "a " + r3 / 2 + " " + r3 / 2 + ", 0, 0, 0, " + r3 / 2 + " " + r3 / 2 + "h " + r3 / 2 + "v " + -r3 / 2 + "a " + r3 / 2 + " " + r3 / 2 + ", 0, 0, 0, " + -r3 / 2 + " " + -r3 / 2);
                } }));
              }, t3.prototype._drawDot = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size;
                this._basicDot({ x: e3, y: r3, size: n2, rotation: 0 });
              }, t3.prototype._drawSquare = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size;
                this._basicSquare({ x: e3, y: r3, size: n2, rotation: 0 });
              }, t3.prototype._drawRounded = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.getNeighbor, i2 = o2 ? +o2(-1, 0) : 0, a2 = o2 ? +o2(1, 0) : 0, s2 = o2 ? +o2(0, -1) : 0, u2 = o2 ? +o2(0, 1) : 0, h2 = i2 + a2 + s2 + u2;
                if (0 !== h2)
                  if (h2 > 2 || i2 && a2 || s2 && u2)
                    this._basicSquare({ x: e3, y: r3, size: n2, rotation: 0 });
                  else {
                    if (2 === h2) {
                      var c2 = 0;
                      return i2 && s2 ? c2 = Math.PI / 2 : s2 && a2 ? c2 = Math.PI : a2 && u2 && (c2 = -Math.PI / 2), void this._basicCornerRounded({ x: e3, y: r3, size: n2, rotation: c2 });
                    }
                    if (1 === h2)
                      return c2 = 0, s2 ? c2 = Math.PI / 2 : a2 ? c2 = Math.PI : u2 && (c2 = -Math.PI / 2), void this._basicSideRounded({ x: e3, y: r3, size: n2, rotation: c2 });
                  }
                else
                  this._basicDot({ x: e3, y: r3, size: n2, rotation: 0 });
              }, t3.prototype._drawExtraRounded = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.getNeighbor, i2 = o2 ? +o2(-1, 0) : 0, a2 = o2 ? +o2(1, 0) : 0, s2 = o2 ? +o2(0, -1) : 0, u2 = o2 ? +o2(0, 1) : 0, h2 = i2 + a2 + s2 + u2;
                if (0 !== h2)
                  if (h2 > 2 || i2 && a2 || s2 && u2)
                    this._basicSquare({ x: e3, y: r3, size: n2, rotation: 0 });
                  else {
                    if (2 === h2) {
                      var c2 = 0;
                      return i2 && s2 ? c2 = Math.PI / 2 : s2 && a2 ? c2 = Math.PI : a2 && u2 && (c2 = -Math.PI / 2), void this._basicCornerExtraRounded({ x: e3, y: r3, size: n2, rotation: c2 });
                    }
                    if (1 === h2)
                      return c2 = 0, s2 ? c2 = Math.PI / 2 : a2 ? c2 = Math.PI : u2 && (c2 = -Math.PI / 2), void this._basicSideRounded({ x: e3, y: r3, size: n2, rotation: c2 });
                  }
                else
                  this._basicDot({ x: e3, y: r3, size: n2, rotation: 0 });
              }, t3.prototype._drawClassy = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.getNeighbor, i2 = o2 ? +o2(-1, 0) : 0, a2 = o2 ? +o2(1, 0) : 0, s2 = o2 ? +o2(0, -1) : 0, u2 = o2 ? +o2(0, 1) : 0;
                0 !== i2 + a2 + s2 + u2 ? i2 || s2 ? a2 || u2 ? this._basicSquare({ x: e3, y: r3, size: n2, rotation: 0 }) : this._basicCornerRounded({ x: e3, y: r3, size: n2, rotation: Math.PI / 2 }) : this._basicCornerRounded({ x: e3, y: r3, size: n2, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: e3, y: r3, size: n2, rotation: Math.PI / 2 });
              }, t3.prototype._drawClassyRounded = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.getNeighbor, i2 = o2 ? +o2(-1, 0) : 0, a2 = o2 ? +o2(1, 0) : 0, s2 = o2 ? +o2(0, -1) : 0, u2 = o2 ? +o2(0, 1) : 0;
                0 !== i2 + a2 + s2 + u2 ? i2 || s2 ? a2 || u2 ? this._basicSquare({ x: e3, y: r3, size: n2, rotation: 0 }) : this._basicCornerExtraRounded({ x: e3, y: r3, size: n2, rotation: Math.PI / 2 }) : this._basicCornerExtraRounded({ x: e3, y: r3, size: n2, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: e3, y: r3, size: n2, rotation: Math.PI / 2 });
              }, t3;
            }();
            var d = function() {
              return (d = Object.assign || function(t3) {
                for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var o2 in e3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
                return t3;
              }).apply(this, arguments);
            };
            const f = function() {
              function t3(t4) {
                var e3 = t4.svg, r3 = t4.type;
                this._svg = e3, this._type = r3;
              }
              return t3.prototype.draw = function(t4, e3, r3, n2) {
                var o2;
                switch (this._type) {
                  case "square":
                    o2 = this._drawSquare;
                    break;
                  case "extra-rounded":
                    o2 = this._drawExtraRounded;
                    break;
                  case "dot":
                  default:
                    o2 = this._drawDot;
                }
                o2.call(this, { x: t4, y: e3, size: r3, rotation: n2 });
              }, t3.prototype._rotateFigure = function(t4) {
                var e3, r3 = t4.x, n2 = t4.y, o2 = t4.size, i2 = t4.rotation, a2 = void 0 === i2 ? 0 : i2, s2 = r3 + o2 / 2, u2 = n2 + o2 / 2;
                (0, t4.draw)(), null === (e3 = this._element) || void 0 === e3 || e3.setAttribute("transform", "rotate(" + 180 * a2 / Math.PI + "," + s2 + "," + u2 + ")");
              }, t3.prototype._basicDot = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y, i2 = r3 / 7;
                this._rotateFigure(d(d({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("clip-rule", "evenodd"), e3._element.setAttribute("d", "M " + (n2 + r3 / 2) + " " + o2 + "a " + r3 / 2 + " " + r3 / 2 + " 0 1 0 0.1 0zm 0 " + i2 + "a " + (r3 / 2 - i2) + " " + (r3 / 2 - i2) + " 0 1 1 -0.1 0Z");
                } }));
              }, t3.prototype._basicSquare = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y, i2 = r3 / 7;
                this._rotateFigure(d(d({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("clip-rule", "evenodd"), e3._element.setAttribute("d", "M " + n2 + " " + o2 + "v " + r3 + "h " + r3 + "v " + -r3 + "zM " + (n2 + i2) + " " + (o2 + i2) + "h " + (r3 - 2 * i2) + "v " + (r3 - 2 * i2) + "h " + (2 * i2 - r3) + "z");
                } }));
              }, t3.prototype._basicExtraRounded = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y, i2 = r3 / 7;
                this._rotateFigure(d(d({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "path"), e3._element.setAttribute("clip-rule", "evenodd"), e3._element.setAttribute("d", "M " + n2 + " " + (o2 + 2.5 * i2) + "v " + 2 * i2 + "a " + 2.5 * i2 + " " + 2.5 * i2 + ", 0, 0, 0, " + 2.5 * i2 + " " + 2.5 * i2 + "h " + 2 * i2 + "a " + 2.5 * i2 + " " + 2.5 * i2 + ", 0, 0, 0, " + 2.5 * i2 + " " + 2.5 * -i2 + "v " + -2 * i2 + "a " + 2.5 * i2 + " " + 2.5 * i2 + ", 0, 0, 0, " + 2.5 * -i2 + " " + 2.5 * -i2 + "h " + -2 * i2 + "a " + 2.5 * i2 + " " + 2.5 * i2 + ", 0, 0, 0, " + 2.5 * -i2 + " " + 2.5 * i2 + "M " + (n2 + 2.5 * i2) + " " + (o2 + i2) + "h " + 2 * i2 + "a " + 1.5 * i2 + " " + 1.5 * i2 + ", 0, 0, 1, " + 1.5 * i2 + " " + 1.5 * i2 + "v " + 2 * i2 + "a " + 1.5 * i2 + " " + 1.5 * i2 + ", 0, 0, 1, " + 1.5 * -i2 + " " + 1.5 * i2 + "h " + -2 * i2 + "a " + 1.5 * i2 + " " + 1.5 * i2 + ", 0, 0, 1, " + 1.5 * -i2 + " " + 1.5 * -i2 + "v " + -2 * i2 + "a " + 1.5 * i2 + " " + 1.5 * i2 + ", 0, 0, 1, " + 1.5 * i2 + " " + 1.5 * -i2);
                } }));
              }, t3.prototype._drawDot = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.rotation;
                this._basicDot({ x: e3, y: r3, size: n2, rotation: o2 });
              }, t3.prototype._drawSquare = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.rotation;
                this._basicSquare({ x: e3, y: r3, size: n2, rotation: o2 });
              }, t3.prototype._drawExtraRounded = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.rotation;
                this._basicExtraRounded({ x: e3, y: r3, size: n2, rotation: o2 });
              }, t3;
            }();
            var g = function() {
              return (g = Object.assign || function(t3) {
                for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var o2 in e3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
                return t3;
              }).apply(this, arguments);
            };
            const p = function() {
              function t3(t4) {
                var e3 = t4.svg, r3 = t4.type;
                this._svg = e3, this._type = r3;
              }
              return t3.prototype.draw = function(t4, e3, r3, n2) {
                var o2;
                switch (this._type) {
                  case "square":
                    o2 = this._drawSquare;
                    break;
                  case "dot":
                  default:
                    o2 = this._drawDot;
                }
                o2.call(this, { x: t4, y: e3, size: r3, rotation: n2 });
              }, t3.prototype._rotateFigure = function(t4) {
                var e3, r3 = t4.x, n2 = t4.y, o2 = t4.size, i2 = t4.rotation, a2 = void 0 === i2 ? 0 : i2, s2 = r3 + o2 / 2, u2 = n2 + o2 / 2;
                (0, t4.draw)(), null === (e3 = this._element) || void 0 === e3 || e3.setAttribute("transform", "rotate(" + 180 * a2 / Math.PI + "," + s2 + "," + u2 + ")");
              }, t3.prototype._basicDot = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(g(g({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "circle"), e3._element.setAttribute("cx", String(n2 + r3 / 2)), e3._element.setAttribute("cy", String(o2 + r3 / 2)), e3._element.setAttribute("r", String(r3 / 2));
                } }));
              }, t3.prototype._basicSquare = function(t4) {
                var e3 = this, r3 = t4.size, n2 = t4.x, o2 = t4.y;
                this._rotateFigure(g(g({}, t4), { draw: function() {
                  e3._element = document.createElementNS("http://www.w3.org/2000/svg", "rect"), e3._element.setAttribute("x", String(n2)), e3._element.setAttribute("y", String(o2)), e3._element.setAttribute("width", String(r3)), e3._element.setAttribute("height", String(r3));
                } }));
              }, t3.prototype._drawDot = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.rotation;
                this._basicDot({ x: e3, y: r3, size: n2, rotation: o2 });
              }, t3.prototype._drawSquare = function(t4) {
                var e3 = t4.x, r3 = t4.y, n2 = t4.size, o2 = t4.rotation;
                this._basicSquare({ x: e3, y: r3, size: n2, rotation: o2 });
              }, t3;
            }(), v = "circle";
            var w = function(t3, e3, r3, n2) {
              return new (r3 || (r3 = Promise))(function(o2, i2) {
                function a2(t4) {
                  try {
                    u2(n2.next(t4));
                  } catch (t5) {
                    i2(t5);
                  }
                }
                function s2(t4) {
                  try {
                    u2(n2.throw(t4));
                  } catch (t5) {
                    i2(t5);
                  }
                }
                function u2(t4) {
                  var e4;
                  t4.done ? o2(t4.value) : (e4 = t4.value, e4 instanceof r3 ? e4 : new r3(function(t5) {
                    t5(e4);
                  })).then(a2, s2);
                }
                u2((n2 = n2.apply(t3, e3 || [])).next());
              });
            }, y = function(t3, e3) {
              var r3, n2, o2, i2, a2 = { label: 0, sent: function() {
                if (1 & o2[0])
                  throw o2[1];
                return o2[1];
              }, trys: [], ops: [] };
              return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
                return this;
              }), i2;
              function s2(i3) {
                return function(s3) {
                  return function(i4) {
                    if (r3)
                      throw new TypeError("Generator is already executing.");
                    for (; a2; )
                      try {
                        if (r3 = 1, n2 && (o2 = 2 & i4[0] ? n2.return : i4[0] ? n2.throw || ((o2 = n2.return) && o2.call(n2), 0) : n2.next) && !(o2 = o2.call(n2, i4[1])).done)
                          return o2;
                        switch (n2 = 0, o2 && (i4 = [2 & i4[0], o2.value]), i4[0]) {
                          case 0:
                          case 1:
                            o2 = i4;
                            break;
                          case 4:
                            return a2.label++, { value: i4[1], done: false };
                          case 5:
                            a2.label++, n2 = i4[1], i4 = [0];
                            continue;
                          case 7:
                            i4 = a2.ops.pop(), a2.trys.pop();
                            continue;
                          default:
                            if (!((o2 = (o2 = a2.trys).length > 0 && o2[o2.length - 1]) || 6 !== i4[0] && 2 !== i4[0])) {
                              a2 = 0;
                              continue;
                            }
                            if (3 === i4[0] && (!o2 || i4[1] > o2[0] && i4[1] < o2[3])) {
                              a2.label = i4[1];
                              break;
                            }
                            if (6 === i4[0] && a2.label < o2[1]) {
                              a2.label = o2[1], o2 = i4;
                              break;
                            }
                            if (o2 && a2.label < o2[2]) {
                              a2.label = o2[2], a2.ops.push(i4);
                              break;
                            }
                            o2[2] && a2.ops.pop(), a2.trys.pop();
                            continue;
                        }
                        i4 = e3.call(t3, a2);
                      } catch (t4) {
                        i4 = [6, t4], n2 = 0;
                      } finally {
                        r3 = o2 = 0;
                      }
                    if (5 & i4[0])
                      throw i4[1];
                    return { value: i4[0] ? i4[1] : void 0, done: true };
                  }([i3, s3]);
                };
              }
            }, m = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]], b = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
            const _ = function() {
              function t3(t4) {
                this._element = document.createElementNS("http://www.w3.org/2000/svg", "svg"), this._element.setAttribute("width", String(t4.width)), this._element.setAttribute("height", String(t4.height)), this._defs = document.createElementNS("http://www.w3.org/2000/svg", "defs"), this._element.appendChild(this._defs), this._options = t4;
              }
              return Object.defineProperty(t3.prototype, "width", { get: function() {
                return this._options.width;
              }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "height", { get: function() {
                return this._options.height;
              }, enumerable: false, configurable: true }), t3.prototype.getElement = function() {
                return this._element;
              }, t3.prototype.drawQR = function(t4) {
                return w(this, void 0, void 0, function() {
                  var e3, r3, n2, o2, i2, a2, s2, u2, c2, l2, d2 = this;
                  return y(this, function(f2) {
                    switch (f2.label) {
                      case 0:
                        return e3 = t4.getModuleCount(), r3 = Math.min(this._options.width, this._options.height) - 2 * this._options.margin, n2 = this._options.shape === v ? r3 / Math.sqrt(2) : r3, o2 = Math.floor(n2 / e3), i2 = { hideXDots: 0, hideYDots: 0, width: 0, height: 0 }, this._qr = t4, this._options.image ? [4, this.loadImage()] : [3, 2];
                      case 1:
                        if (f2.sent(), !this._image)
                          return [2];
                        a2 = this._options, s2 = a2.imageOptions, u2 = a2.qrOptions, c2 = s2.imageSize * h[u2.errorCorrectionLevel], l2 = Math.floor(c2 * e3 * e3), i2 = function(t5) {
                          var e4 = t5.originalHeight, r4 = t5.originalWidth, n3 = t5.maxHiddenDots, o3 = t5.maxHiddenAxisDots, i3 = t5.dotSize, a3 = { x: 0, y: 0 }, s3 = { x: 0, y: 0 };
                          if (e4 <= 0 || r4 <= 0 || n3 <= 0 || i3 <= 0)
                            return { height: 0, width: 0, hideYDots: 0, hideXDots: 0 };
                          var u3 = e4 / r4;
                          return a3.x = Math.floor(Math.sqrt(n3 / u3)), a3.x <= 0 && (a3.x = 1), o3 && o3 < a3.x && (a3.x = o3), a3.x % 2 == 0 && a3.x--, s3.x = a3.x * i3, a3.y = 1 + 2 * Math.ceil((a3.x * u3 - 1) / 2), s3.y = Math.round(s3.x * u3), (a3.y * a3.x > n3 || o3 && o3 < a3.y) && (o3 && o3 < a3.y ? (a3.y = o3, a3.y % 2 == 0 && a3.x--) : a3.y -= 2, s3.y = a3.y * i3, a3.x = 1 + 2 * Math.ceil((a3.y / u3 - 1) / 2), s3.x = Math.round(s3.y / u3)), { height: s3.y, width: s3.x, hideYDots: a3.y, hideXDots: a3.x };
                        }({ originalWidth: this._image.width, originalHeight: this._image.height, maxHiddenDots: l2, maxHiddenAxisDots: e3 - 14, dotSize: o2 }), f2.label = 2;
                      case 2:
                        return this.drawBackground(), this.drawDots(function(t5, r4) {
                          var n3, o3, a3, s3, u3, h2;
                          return !(d2._options.imageOptions.hideBackgroundDots && t5 >= (e3 - i2.hideXDots) / 2 && t5 < (e3 + i2.hideXDots) / 2 && r4 >= (e3 - i2.hideYDots) / 2 && r4 < (e3 + i2.hideYDots) / 2 || (null === (n3 = m[t5]) || void 0 === n3 ? void 0 : n3[r4]) || (null === (o3 = m[t5 - e3 + 7]) || void 0 === o3 ? void 0 : o3[r4]) || (null === (a3 = m[t5]) || void 0 === a3 ? void 0 : a3[r4 - e3 + 7]) || (null === (s3 = b[t5]) || void 0 === s3 ? void 0 : s3[r4]) || (null === (u3 = b[t5 - e3 + 7]) || void 0 === u3 ? void 0 : u3[r4]) || (null === (h2 = b[t5]) || void 0 === h2 ? void 0 : h2[r4 - e3 + 7]));
                        }), this.drawCorners(), this._options.image ? [4, this.drawImage({ width: i2.width, height: i2.height, count: e3, dotSize: o2 })] : [3, 4];
                      case 3:
                        f2.sent(), f2.label = 4;
                      case 4:
                        return [2];
                    }
                  });
                });
              }, t3.prototype.drawBackground = function() {
                var t4, e3, r3, n2 = this._element, o2 = this._options;
                if (n2) {
                  var i2 = null === (t4 = o2.backgroundOptions) || void 0 === t4 ? void 0 : t4.gradient, a2 = null === (e3 = o2.backgroundOptions) || void 0 === e3 ? void 0 : e3.color;
                  if ((i2 || a2) && this._createColor({ options: i2, color: a2, additionalRotation: 0, x: 0, y: 0, height: o2.height, width: o2.width, name: "background-color" }), null === (r3 = o2.backgroundOptions) || void 0 === r3 ? void 0 : r3.round) {
                    var s2 = Math.min(o2.width, o2.height), u2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                    this._backgroundClipPath = document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._backgroundClipPath.setAttribute("id", "clip-path-background-color"), this._defs.appendChild(this._backgroundClipPath), u2.setAttribute("x", String((o2.width - s2) / 2)), u2.setAttribute("y", String((o2.height - s2) / 2)), u2.setAttribute("width", String(s2)), u2.setAttribute("height", String(s2)), u2.setAttribute("rx", String(s2 / 2 * o2.backgroundOptions.round)), this._backgroundClipPath.appendChild(u2);
                  }
                }
              }, t3.prototype.drawDots = function(t4) {
                var e3, r3, n2 = this;
                if (!this._qr)
                  throw "QR code is not defined";
                var o2 = this._options, i2 = this._qr.getModuleCount();
                if (i2 > o2.width || i2 > o2.height)
                  throw "The canvas is too small.";
                var a2 = Math.min(o2.width, o2.height) - 2 * o2.margin, s2 = o2.shape === v ? a2 / Math.sqrt(2) : a2, u2 = Math.floor(s2 / i2), h2 = Math.floor((o2.width - i2 * u2) / 2), c2 = Math.floor((o2.height - i2 * u2) / 2), d2 = new l({ svg: this._element, type: o2.dotsOptions.type });
                this._dotsClipPath = document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._dotsClipPath.setAttribute("id", "clip-path-dot-color"), this._defs.appendChild(this._dotsClipPath), this._createColor({ options: null === (e3 = o2.dotsOptions) || void 0 === e3 ? void 0 : e3.gradient, color: o2.dotsOptions.color, additionalRotation: 0, x: 0, y: 0, height: o2.height, width: o2.width, name: "dot-color" });
                for (var f2 = function(e4) {
                  for (var o3 = function(o4) {
                    return t4 && !t4(e4, o4) ? "continue" : (null === (r3 = g2._qr) || void 0 === r3 ? void 0 : r3.isDark(e4, o4)) ? (d2.draw(h2 + e4 * u2, c2 + o4 * u2, u2, function(r4, a4) {
                      return !(e4 + r4 < 0 || o4 + a4 < 0 || e4 + r4 >= i2 || o4 + a4 >= i2) && !(t4 && !t4(e4 + r4, o4 + a4)) && !!n2._qr && n2._qr.isDark(e4 + r4, o4 + a4);
                    }), void (d2._element && g2._dotsClipPath && g2._dotsClipPath.appendChild(d2._element))) : "continue";
                  }, a3 = 0; a3 < i2; a3++)
                    o3(a3);
                }, g2 = this, p2 = 0; p2 < i2; p2++)
                  f2(p2);
                if (o2.shape === v) {
                  var w2 = Math.floor((a2 / u2 - i2) / 2), y2 = i2 + 2 * w2, m2 = h2 - w2 * u2, b2 = c2 - w2 * u2, _2 = [], x2 = Math.floor(y2 / 2);
                  for (p2 = 0; p2 < y2; p2++) {
                    _2[p2] = [];
                    for (var S2 = 0; S2 < y2; S2++)
                      p2 >= w2 - 1 && p2 <= y2 - w2 && S2 >= w2 - 1 && S2 <= y2 - w2 || Math.sqrt((p2 - x2) * (p2 - x2) + (S2 - x2) * (S2 - x2)) > x2 ? _2[p2][S2] = 0 : _2[p2][S2] = this._qr.isDark(S2 - 2 * w2 < 0 ? S2 : S2 >= i2 ? S2 - 2 * w2 : S2 - w2, p2 - 2 * w2 < 0 ? p2 : p2 >= i2 ? p2 - 2 * w2 : p2 - w2) ? 1 : 0;
                  }
                  var M2 = function(t5) {
                    for (var e4 = function(e5) {
                      if (!_2[t5][e5])
                        return "continue";
                      d2.draw(m2 + t5 * u2, b2 + e5 * u2, u2, function(r5, n3) {
                        var o3;
                        return !!(null === (o3 = _2[t5 + r5]) || void 0 === o3 ? void 0 : o3[e5 + n3]);
                      }), d2._element && C2._dotsClipPath && C2._dotsClipPath.appendChild(d2._element);
                    }, r4 = 0; r4 < y2; r4++)
                      e4(r4);
                  }, C2 = this;
                  for (p2 = 0; p2 < y2; p2++)
                    M2(p2);
                }
              }, t3.prototype.drawCorners = function() {
                var t4 = this;
                if (!this._qr)
                  throw "QR code is not defined";
                var e3 = this._element, r3 = this._options;
                if (!e3)
                  throw "Element code is not defined";
                var n2 = this._qr.getModuleCount(), o2 = Math.min(r3.width, r3.height) - 2 * r3.margin, i2 = r3.shape === v ? o2 / Math.sqrt(2) : o2, a2 = Math.floor(i2 / n2), s2 = 7 * a2, u2 = 3 * a2, h2 = Math.floor((r3.width - n2 * a2) / 2), c2 = Math.floor((r3.height - n2 * a2) / 2);
                [[0, 0, 0], [1, 0, Math.PI / 2], [0, 1, -Math.PI / 2]].forEach(function(e4) {
                  var o3, i3, d2, g2, v2, w2, y2, _2, x2, S2, M2, C2, A2 = e4[0], k2 = e4[1], O2 = e4[2], D2 = h2 + A2 * a2 * (n2 - 7), P2 = c2 + k2 * a2 * (n2 - 7), z2 = t4._dotsClipPath, B2 = t4._dotsClipPath;
                  if (((null === (o3 = r3.cornersSquareOptions) || void 0 === o3 ? void 0 : o3.gradient) || (null === (i3 = r3.cornersSquareOptions) || void 0 === i3 ? void 0 : i3.color)) && ((z2 = document.createElementNS("http://www.w3.org/2000/svg", "clipPath")).setAttribute("id", "clip-path-corners-square-color-" + A2 + "-" + k2), t4._defs.appendChild(z2), t4._cornersSquareClipPath = t4._cornersDotClipPath = B2 = z2, t4._createColor({ options: null === (d2 = r3.cornersSquareOptions) || void 0 === d2 ? void 0 : d2.gradient, color: null === (g2 = r3.cornersSquareOptions) || void 0 === g2 ? void 0 : g2.color, additionalRotation: O2, x: D2, y: P2, height: s2, width: s2, name: "corners-square-color-" + A2 + "-" + k2 })), null === (v2 = r3.cornersSquareOptions) || void 0 === v2 ? void 0 : v2.type) {
                    var q2 = new f({ svg: t4._element, type: r3.cornersSquareOptions.type });
                    q2.draw(D2, P2, s2, O2), q2._element && z2 && z2.appendChild(q2._element);
                  } else
                    for (var I = new l({ svg: t4._element, type: r3.dotsOptions.type }), E = function(t5) {
                      for (var e5 = function(e6) {
                        if (!(null === (w2 = m[t5]) || void 0 === w2 ? void 0 : w2[e6]))
                          return "continue";
                        I.draw(D2 + t5 * a2, P2 + e6 * a2, a2, function(r5, n3) {
                          var o4;
                          return !!(null === (o4 = m[t5 + r5]) || void 0 === o4 ? void 0 : o4[e6 + n3]);
                        }), I._element && z2 && z2.appendChild(I._element);
                      }, r4 = 0; r4 < m[t5].length; r4++)
                        e5(r4);
                    }, L = 0; L < m.length; L++)
                      E(L);
                  if (((null === (y2 = r3.cornersDotOptions) || void 0 === y2 ? void 0 : y2.gradient) || (null === (_2 = r3.cornersDotOptions) || void 0 === _2 ? void 0 : _2.color)) && ((B2 = document.createElementNS("http://www.w3.org/2000/svg", "clipPath")).setAttribute("id", "clip-path-corners-dot-color-" + A2 + "-" + k2), t4._defs.appendChild(B2), t4._cornersDotClipPath = B2, t4._createColor({ options: null === (x2 = r3.cornersDotOptions) || void 0 === x2 ? void 0 : x2.gradient, color: null === (S2 = r3.cornersDotOptions) || void 0 === S2 ? void 0 : S2.color, additionalRotation: O2, x: D2 + 2 * a2, y: P2 + 2 * a2, height: u2, width: u2, name: "corners-dot-color-" + A2 + "-" + k2 })), null === (M2 = r3.cornersDotOptions) || void 0 === M2 ? void 0 : M2.type) {
                    var R = new p({ svg: t4._element, type: r3.cornersDotOptions.type });
                    R.draw(D2 + 2 * a2, P2 + 2 * a2, u2, O2), R._element && B2 && B2.appendChild(R._element);
                  } else {
                    I = new l({ svg: t4._element, type: r3.dotsOptions.type });
                    var N = function(t5) {
                      for (var e5 = function(e6) {
                        if (!(null === (C2 = b[t5]) || void 0 === C2 ? void 0 : C2[e6]))
                          return "continue";
                        I.draw(D2 + t5 * a2, P2 + e6 * a2, a2, function(r5, n3) {
                          var o4;
                          return !!(null === (o4 = b[t5 + r5]) || void 0 === o4 ? void 0 : o4[e6 + n3]);
                        }), I._element && B2 && B2.appendChild(I._element);
                      }, r4 = 0; r4 < b[t5].length; r4++)
                        e5(r4);
                    };
                    for (L = 0; L < b.length; L++)
                      N(L);
                  }
                });
              }, t3.prototype.loadImage = function() {
                var t4 = this;
                return new Promise(function(e3, r3) {
                  var n2 = t4._options, o2 = new Image();
                  if (!n2.image)
                    return r3("Image is not defined");
                  "string" == typeof n2.imageOptions.crossOrigin && (o2.crossOrigin = n2.imageOptions.crossOrigin), t4._image = o2, o2.onload = function() {
                    e3();
                  }, o2.src = n2.image;
                });
              }, t3.prototype.drawImage = function(t4) {
                var e3 = t4.width, r3 = t4.height, n2 = t4.count, o2 = t4.dotSize;
                return w(this, void 0, void 0, function() {
                  var t5, i2, a2, s2, h2, c2, l2, d2, f2;
                  return y(this, function(g2) {
                    switch (g2.label) {
                      case 0:
                        return t5 = this._options, i2 = Math.floor((t5.width - n2 * o2) / 2), a2 = Math.floor((t5.height - n2 * o2) / 2), s2 = i2 + t5.imageOptions.margin + (n2 * o2 - e3) / 2, h2 = a2 + t5.imageOptions.margin + (n2 * o2 - r3) / 2, c2 = e3 - 2 * t5.imageOptions.margin, l2 = r3 - 2 * t5.imageOptions.margin, (d2 = document.createElementNS("http://www.w3.org/2000/svg", "image")).setAttribute("x", String(s2)), d2.setAttribute("y", String(h2)), d2.setAttribute("width", c2 + "px"), d2.setAttribute("height", l2 + "px"), [4, u(t5.image || "")];
                      case 1:
                        return f2 = g2.sent(), d2.setAttribute("href", f2 || ""), this._element.appendChild(d2), [2];
                    }
                  });
                });
              }, t3.prototype._createColor = function(t4) {
                var e3 = t4.options, r3 = t4.color, n2 = t4.additionalRotation, o2 = t4.x, i2 = t4.y, a2 = t4.height, s2 = t4.width, u2 = t4.name, h2 = s2 > a2 ? s2 : a2, c2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                if (c2.setAttribute("x", String(o2)), c2.setAttribute("y", String(i2)), c2.setAttribute("height", String(a2)), c2.setAttribute("width", String(s2)), c2.setAttribute("clip-path", "url('#clip-path-" + u2 + "')"), e3) {
                  var l2;
                  if ("radial" === e3.type)
                    (l2 = document.createElementNS("http://www.w3.org/2000/svg", "radialGradient")).setAttribute("id", u2), l2.setAttribute("gradientUnits", "userSpaceOnUse"), l2.setAttribute("fx", String(o2 + s2 / 2)), l2.setAttribute("fy", String(i2 + a2 / 2)), l2.setAttribute("cx", String(o2 + s2 / 2)), l2.setAttribute("cy", String(i2 + a2 / 2)), l2.setAttribute("r", String(h2 / 2));
                  else {
                    var d2 = ((e3.rotation || 0) + n2) % (2 * Math.PI), f2 = (d2 + 2 * Math.PI) % (2 * Math.PI), g2 = o2 + s2 / 2, p2 = i2 + a2 / 2, v2 = o2 + s2 / 2, w2 = i2 + a2 / 2;
                    f2 >= 0 && f2 <= 0.25 * Math.PI || f2 > 1.75 * Math.PI && f2 <= 2 * Math.PI ? (g2 -= s2 / 2, p2 -= a2 / 2 * Math.tan(d2), v2 += s2 / 2, w2 += a2 / 2 * Math.tan(d2)) : f2 > 0.25 * Math.PI && f2 <= 0.75 * Math.PI ? (p2 -= a2 / 2, g2 -= s2 / 2 / Math.tan(d2), w2 += a2 / 2, v2 += s2 / 2 / Math.tan(d2)) : f2 > 0.75 * Math.PI && f2 <= 1.25 * Math.PI ? (g2 += s2 / 2, p2 += a2 / 2 * Math.tan(d2), v2 -= s2 / 2, w2 -= a2 / 2 * Math.tan(d2)) : f2 > 1.25 * Math.PI && f2 <= 1.75 * Math.PI && (p2 += a2 / 2, g2 += s2 / 2 / Math.tan(d2), w2 -= a2 / 2, v2 -= s2 / 2 / Math.tan(d2)), (l2 = document.createElementNS("http://www.w3.org/2000/svg", "linearGradient")).setAttribute("id", u2), l2.setAttribute("gradientUnits", "userSpaceOnUse"), l2.setAttribute("x1", String(Math.round(g2))), l2.setAttribute("y1", String(Math.round(p2))), l2.setAttribute("x2", String(Math.round(v2))), l2.setAttribute("y2", String(Math.round(w2)));
                  }
                  e3.colorStops.forEach(function(t5) {
                    var e4 = t5.offset, r4 = t5.color, n3 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
                    n3.setAttribute("offset", 100 * e4 + "%"), n3.setAttribute("stop-color", r4), l2.appendChild(n3);
                  }), c2.setAttribute("fill", "url('#" + u2 + "')"), this._defs.appendChild(l2);
                } else
                  r3 && c2.setAttribute("fill", r3);
                this._element.appendChild(c2);
              }, t3;
            }(), x = "canvas";
            for (var S = {}, M = 0; M <= 40; M++)
              S[M] = M;
            const C = { type: x, shape: "square", width: 300, height: 300, data: "", margin: 0, qrOptions: { typeNumber: S[0], mode: void 0, errorCorrectionLevel: "Q" }, imageOptions: { hideBackgroundDots: true, imageSize: 0.4, crossOrigin: void 0, margin: 0 }, dotsOptions: { type: "square", color: "#000" }, backgroundOptions: { round: 0, color: "#fff" } };
            var A = function() {
              return (A = Object.assign || function(t3) {
                for (var e3, r3 = 1, n2 = arguments.length; r3 < n2; r3++)
                  for (var o2 in e3 = arguments[r3])
                    Object.prototype.hasOwnProperty.call(e3, o2) && (t3[o2] = e3[o2]);
                return t3;
              }).apply(this, arguments);
            };
            function k(t3) {
              var e3 = A({}, t3);
              if (!e3.colorStops || !e3.colorStops.length)
                throw "Field 'colorStops' is required in gradient";
              return e3.rotation ? e3.rotation = Number(e3.rotation) : e3.rotation = 0, e3.colorStops = e3.colorStops.map(function(t4) {
                return A(A({}, t4), { offset: Number(t4.offset) });
              }), e3;
            }
            function O(t3) {
              var e3 = A({}, t3);
              return e3.width = Number(e3.width), e3.height = Number(e3.height), e3.margin = Number(e3.margin), e3.imageOptions = A(A({}, e3.imageOptions), { hideBackgroundDots: Boolean(e3.imageOptions.hideBackgroundDots), imageSize: Number(e3.imageOptions.imageSize), margin: Number(e3.imageOptions.margin) }), e3.margin > Math.min(e3.width, e3.height) && (e3.margin = Math.min(e3.width, e3.height)), e3.dotsOptions = A({}, e3.dotsOptions), e3.dotsOptions.gradient && (e3.dotsOptions.gradient = k(e3.dotsOptions.gradient)), e3.cornersSquareOptions && (e3.cornersSquareOptions = A({}, e3.cornersSquareOptions), e3.cornersSquareOptions.gradient && (e3.cornersSquareOptions.gradient = k(e3.cornersSquareOptions.gradient))), e3.cornersDotOptions && (e3.cornersDotOptions = A({}, e3.cornersDotOptions), e3.cornersDotOptions.gradient && (e3.cornersDotOptions.gradient = k(e3.cornersDotOptions.gradient))), e3.backgroundOptions && (e3.backgroundOptions = A({}, e3.backgroundOptions), e3.backgroundOptions.gradient && (e3.backgroundOptions.gradient = k(e3.backgroundOptions.gradient))), e3;
            }
            var D = r2(192), P = r2.n(D), z = function(t3, e3, r3, n2) {
              return new (r3 || (r3 = Promise))(function(o2, i2) {
                function a2(t4) {
                  try {
                    u2(n2.next(t4));
                  } catch (t5) {
                    i2(t5);
                  }
                }
                function s2(t4) {
                  try {
                    u2(n2.throw(t4));
                  } catch (t5) {
                    i2(t5);
                  }
                }
                function u2(t4) {
                  var e4;
                  t4.done ? o2(t4.value) : (e4 = t4.value, e4 instanceof r3 ? e4 : new r3(function(t5) {
                    t5(e4);
                  })).then(a2, s2);
                }
                u2((n2 = n2.apply(t3, e3 || [])).next());
              });
            }, B = function(t3, e3) {
              var r3, n2, o2, i2, a2 = { label: 0, sent: function() {
                if (1 & o2[0])
                  throw o2[1];
                return o2[1];
              }, trys: [], ops: [] };
              return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
                return this;
              }), i2;
              function s2(i3) {
                return function(s3) {
                  return function(i4) {
                    if (r3)
                      throw new TypeError("Generator is already executing.");
                    for (; a2; )
                      try {
                        if (r3 = 1, n2 && (o2 = 2 & i4[0] ? n2.return : i4[0] ? n2.throw || ((o2 = n2.return) && o2.call(n2), 0) : n2.next) && !(o2 = o2.call(n2, i4[1])).done)
                          return o2;
                        switch (n2 = 0, o2 && (i4 = [2 & i4[0], o2.value]), i4[0]) {
                          case 0:
                          case 1:
                            o2 = i4;
                            break;
                          case 4:
                            return a2.label++, { value: i4[1], done: false };
                          case 5:
                            a2.label++, n2 = i4[1], i4 = [0];
                            continue;
                          case 7:
                            i4 = a2.ops.pop(), a2.trys.pop();
                            continue;
                          default:
                            if (!((o2 = (o2 = a2.trys).length > 0 && o2[o2.length - 1]) || 6 !== i4[0] && 2 !== i4[0])) {
                              a2 = 0;
                              continue;
                            }
                            if (3 === i4[0] && (!o2 || i4[1] > o2[0] && i4[1] < o2[3])) {
                              a2.label = i4[1];
                              break;
                            }
                            if (6 === i4[0] && a2.label < o2[1]) {
                              a2.label = o2[1], o2 = i4;
                              break;
                            }
                            if (o2 && a2.label < o2[2]) {
                              a2.label = o2[2], a2.ops.push(i4);
                              break;
                            }
                            o2[2] && a2.ops.pop(), a2.trys.pop();
                            continue;
                        }
                        i4 = e3.call(t3, a2);
                      } catch (t4) {
                        i4 = [6, t4], n2 = 0;
                      } finally {
                        r3 = o2 = 0;
                      }
                    if (5 & i4[0])
                      throw i4[1];
                    return { value: i4[0] ? i4[1] : void 0, done: true };
                  }([i3, s3]);
                };
              }
            };
            const q = function() {
              function t3(t4) {
                this._options = t4 ? O(a(C, t4)) : C, this.update();
              }
              return t3._clearContainer = function(t4) {
                t4 && (t4.innerHTML = "");
              }, t3.prototype._setupSvg = function() {
                var t4 = this;
                if (this._qr) {
                  var e3 = new _(this._options);
                  this._svg = e3.getElement(), this._svgDrawingPromise = e3.drawQR(this._qr).then(function() {
                    var r3;
                    t4._svg && (null === (r3 = t4._extension) || void 0 === r3 || r3.call(t4, e3.getElement(), t4._options));
                  });
                }
              }, t3.prototype._setupCanvas = function() {
                var t4, e3 = this;
                this._qr && (this._canvas = document.createElement("canvas"), this._canvas.width = this._options.width, this._canvas.height = this._options.height, this._setupSvg(), this._canvasDrawingPromise = null === (t4 = this._svgDrawingPromise) || void 0 === t4 ? void 0 : t4.then(function() {
                  if (e3._svg) {
                    var t5 = e3._svg, r3 = new XMLSerializer().serializeToString(t5), n2 = "data:image/svg+xml;base64," + btoa(r3), o2 = new Image();
                    return new Promise(function(t6) {
                      o2.onload = function() {
                        var r4, n3;
                        null === (n3 = null === (r4 = e3._canvas) || void 0 === r4 ? void 0 : r4.getContext("2d")) || void 0 === n3 || n3.drawImage(o2, 0, 0), t6();
                      }, o2.src = n2;
                    });
                  }
                }));
              }, t3.prototype._getElement = function(t4) {
                return void 0 === t4 && (t4 = "png"), z(this, void 0, void 0, function() {
                  return B(this, function(e3) {
                    switch (e3.label) {
                      case 0:
                        if (!this._qr)
                          throw "QR code is empty";
                        return "svg" !== t4.toLowerCase() ? [3, 2] : (this._svg && this._svgDrawingPromise || this._setupSvg(), [4, this._svgDrawingPromise]);
                      case 1:
                        return e3.sent(), [2, this._svg];
                      case 2:
                        return this._canvas && this._canvasDrawingPromise || this._setupCanvas(), [4, this._canvasDrawingPromise];
                      case 3:
                        return e3.sent(), [2, this._canvas];
                    }
                  });
                });
              }, t3.prototype.update = function(e3) {
                t3._clearContainer(this._container), this._options = e3 ? O(a(this._options, e3)) : this._options, this._options.data && (this._qr = P()(this._options.qrOptions.typeNumber, this._options.qrOptions.errorCorrectionLevel), this._qr.addData(this._options.data, this._options.qrOptions.mode || function(t4) {
                  switch (true) {
                    case /^[0-9]*$/.test(t4):
                      return "Numeric";
                    case /^[0-9A-Z $%*+\-./:]*$/.test(t4):
                      return "Alphanumeric";
                    default:
                      return "Byte";
                  }
                }(this._options.data)), this._qr.make(), this._options.type === x ? this._setupCanvas() : this._setupSvg(), this.append(this._container));
              }, t3.prototype.append = function(t4) {
                if (t4) {
                  if ("function" != typeof t4.appendChild)
                    throw "Container should be a single DOM node";
                  this._options.type === x ? this._canvas && t4.appendChild(this._canvas) : this._svg && t4.appendChild(this._svg), this._container = t4;
                }
              }, t3.prototype.applyExtension = function(t4) {
                if (!t4)
                  throw "Extension function should be defined.";
                this._extension = t4, this.update();
              }, t3.prototype.deleteExtension = function() {
                this._extension = void 0, this.update();
              }, t3.prototype.getRawData = function(t4) {
                return void 0 === t4 && (t4 = "png"), z(this, void 0, void 0, function() {
                  var e3, r3, n2;
                  return B(this, function(o2) {
                    switch (o2.label) {
                      case 0:
                        if (!this._qr)
                          throw "QR code is empty";
                        return [4, this._getElement(t4)];
                      case 1:
                        return (e3 = o2.sent()) ? "svg" === t4.toLowerCase() ? (r3 = new XMLSerializer(), n2 = r3.serializeToString(e3), [2, new Blob(['<?xml version="1.0" standalone="no"?>\r\n' + n2], { type: "image/svg+xml" })]) : [2, new Promise(function(r4) {
                          return e3.toBlob(r4, "image/" + t4, 1);
                        })] : [2, null];
                    }
                  });
                });
              }, t3.prototype.download = function(t4) {
                return z(this, void 0, void 0, function() {
                  var e3, r3, n2, o2, i2;
                  return B(this, function(a2) {
                    switch (a2.label) {
                      case 0:
                        if (!this._qr)
                          throw "QR code is empty";
                        return e3 = "png", r3 = "qr", "string" == typeof t4 ? (e3 = t4, console.warn("Extension is deprecated as argument for 'download' method, please pass object { name: '...', extension: '...' } as argument")) : "object" == typeof t4 && null !== t4 && (t4.name && (r3 = t4.name), t4.extension && (e3 = t4.extension)), [4, this._getElement(e3)];
                      case 1:
                        return (n2 = a2.sent()) ? ("svg" === e3.toLowerCase() ? (o2 = new XMLSerializer(), i2 = '<?xml version="1.0" standalone="no"?>\r\n' + (i2 = o2.serializeToString(n2)), s("data:image/svg+xml;charset=utf-8," + encodeURIComponent(i2), r3 + ".svg")) : s(n2.toDataURL("image/" + e3), r3 + "." + e3), [2]) : [2];
                    }
                  });
                });
              }, t3;
            }();
          } }, e = {};
          function r(n) {
            if (e[n])
              return e[n].exports;
            var o = e[n] = { exports: {} };
            return t[n](o, o.exports, r), o.exports;
          }
          return r.n = (t2) => {
            var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
            return r.d(e2, { a: e2 }), e2;
          }, r.d = (t2, e2) => {
            for (var n in e2)
              r.o(e2, n) && !r.o(t2, n) && Object.defineProperty(t2, n, { enumerable: true, get: e2[n] });
          }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r(676);
        })().default;
      });
    }
  });

  // node_modules/@evanhahn/lottie-web-light/index.js
  var require_lottie_web_light = __commonJS({
    "node_modules/@evanhahn/lottie-web-light/index.js"(exports, module) {
      typeof navigator !== "undefined" && function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define(function() {
            return factory(root);
          });
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory(root);
        } else {
          root.lottie = factory(root);
          root.bodymovin = root.lottie;
        }
      }(window || {}, function(window2) {
        "use strict";
        var svgNS = "http://www.w3.org/2000/svg";
        var locationHref = "";
        var initialDefaultFrame = -999999;
        var _useWebWorker = false;
        var subframeEnabled = true;
        var idPrefix = "";
        var expressionsPlugin;
        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        var cachedColors = {};
        var bmRnd;
        var bmPow = Math.pow;
        var bmSqrt = Math.sqrt;
        var bmFloor = Math.floor;
        var bmMax = Math.max;
        var bmMin = Math.min;
        var BMMath = {};
        (function() {
          var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
          var i;
          var len = propertyNames.length;
          for (i = 0; i < len; i += 1) {
            BMMath[propertyNames[i]] = Math[propertyNames[i]];
          }
        })();
        function ProjectInterface() {
          return {};
        }
        BMMath.random = Math.random;
        BMMath.abs = function(val) {
          var tOfVal = typeof val;
          if (tOfVal === "object" && val.length) {
            var absArr = createSizedArray(val.length);
            var i;
            var len = val.length;
            for (i = 0; i < len; i += 1) {
              absArr[i] = Math.abs(val[i]);
            }
            return absArr;
          }
          return Math.abs(val);
        };
        var defaultCurveSegments = 150;
        var degToRads = Math.PI / 180;
        var roundCorner = 0.5519;
        function roundValues(flag) {
          if (flag) {
            bmRnd = Math.round;
          } else {
            bmRnd = function(val) {
              return val;
            };
          }
        }
        roundValues(false);
        function styleDiv(element) {
          element.style.position = "absolute";
          element.style.top = 0;
          element.style.left = 0;
          element.style.display = "block";
          element.style.transformOrigin = "0 0";
          element.style.webkitTransformOrigin = "0 0";
          element.style.backfaceVisibility = "visible";
          element.style.webkitBackfaceVisibility = "visible";
          element.style.transformStyle = "preserve-3d";
          element.style.webkitTransformStyle = "preserve-3d";
          element.style.mozTransformStyle = "preserve-3d";
        }
        function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
          this.type = type;
          this.currentTime = currentTime;
          this.totalTime = totalTime;
          this.direction = frameMultiplier < 0 ? -1 : 1;
        }
        function BMCompleteEvent(type, frameMultiplier) {
          this.type = type;
          this.direction = frameMultiplier < 0 ? -1 : 1;
        }
        function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
          this.type = type;
          this.currentLoop = currentLoop;
          this.totalLoops = totalLoops;
          this.direction = frameMultiplier < 0 ? -1 : 1;
        }
        function BMSegmentStartEvent(type, firstFrame, totalFrames) {
          this.type = type;
          this.firstFrame = firstFrame;
          this.totalFrames = totalFrames;
        }
        function BMDestroyEvent(type, target) {
          this.type = type;
          this.target = target;
        }
        function BMRenderFrameErrorEvent(nativeError, currentTime) {
          this.type = "renderFrameError";
          this.nativeError = nativeError;
          this.currentTime = currentTime;
        }
        function BMConfigErrorEvent(nativeError) {
          this.type = "configError";
          this.nativeError = nativeError;
        }
        function BMAnimationConfigErrorEvent(type, nativeError) {
          this.type = type;
          this.nativeError = nativeError;
        }
        var createElementID = function() {
          var _count = 0;
          return function createID() {
            _count += 1;
            return idPrefix + "__lottie_element_" + _count;
          };
        }();
        function HSVtoRGB(h, s, v) {
          var r;
          var g;
          var b;
          var i;
          var f;
          var p;
          var q;
          var t;
          i = Math.floor(h * 6);
          f = h * 6 - i;
          p = v * (1 - s);
          q = v * (1 - f * s);
          t = v * (1 - (1 - f) * s);
          switch (i % 6) {
            case 0:
              r = v;
              g = t;
              b = p;
              break;
            case 1:
              r = q;
              g = v;
              b = p;
              break;
            case 2:
              r = p;
              g = v;
              b = t;
              break;
            case 3:
              r = p;
              g = q;
              b = v;
              break;
            case 4:
              r = t;
              g = p;
              b = v;
              break;
            case 5:
              r = v;
              g = p;
              b = q;
              break;
            default:
              break;
          }
          return [
            r,
            g,
            b
          ];
        }
        function RGBtoHSV(r, g, b) {
          var max = Math.max(r, g, b);
          var min = Math.min(r, g, b);
          var d = max - min;
          var h;
          var s = max === 0 ? 0 : d / max;
          var v = max / 255;
          switch (max) {
            case min:
              h = 0;
              break;
            case r:
              h = g - b + d * (g < b ? 6 : 0);
              h /= 6 * d;
              break;
            case g:
              h = b - r + d * 2;
              h /= 6 * d;
              break;
            case b:
              h = r - g + d * 4;
              h /= 6 * d;
              break;
            default:
              break;
          }
          return [
            h,
            s,
            v
          ];
        }
        function addSaturationToRGB(color, offset) {
          var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
          hsv[1] += offset;
          if (hsv[1] > 1) {
            hsv[1] = 1;
          } else if (hsv[1] <= 0) {
            hsv[1] = 0;
          }
          return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
        }
        function addBrightnessToRGB(color, offset) {
          var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
          hsv[2] += offset;
          if (hsv[2] > 1) {
            hsv[2] = 1;
          } else if (hsv[2] < 0) {
            hsv[2] = 0;
          }
          return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
        }
        function addHueToRGB(color, offset) {
          var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
          hsv[0] += offset / 360;
          if (hsv[0] > 1) {
            hsv[0] -= 1;
          } else if (hsv[0] < 0) {
            hsv[0] += 1;
          }
          return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
        }
        var rgbToHex = function() {
          var colorMap = [];
          var i;
          var hex;
          for (i = 0; i < 256; i += 1) {
            hex = i.toString(16);
            colorMap[i] = hex.length === 1 ? "0" + hex : hex;
          }
          return function(r, g, b) {
            if (r < 0) {
              r = 0;
            }
            if (g < 0) {
              g = 0;
            }
            if (b < 0) {
              b = 0;
            }
            return "#" + colorMap[r] + colorMap[g] + colorMap[b];
          };
        }();
        function BaseEvent() {
        }
        BaseEvent.prototype = {
          triggerEvent: function(eventName, args) {
            if (this._cbs[eventName]) {
              var callbacks = this._cbs[eventName];
              for (var i = 0; i < callbacks.length; i += 1) {
                callbacks[i](args);
              }
            }
          },
          addEventListener: function(eventName, callback) {
            if (!this._cbs[eventName]) {
              this._cbs[eventName] = [];
            }
            this._cbs[eventName].push(callback);
            return function() {
              this.removeEventListener(eventName, callback);
            }.bind(this);
          },
          removeEventListener: function(eventName, callback) {
            if (!callback) {
              this._cbs[eventName] = null;
            } else if (this._cbs[eventName]) {
              var i = 0;
              var len = this._cbs[eventName].length;
              while (i < len) {
                if (this._cbs[eventName][i] === callback) {
                  this._cbs[eventName].splice(i, 1);
                  i -= 1;
                  len -= 1;
                }
                i += 1;
              }
              if (!this._cbs[eventName].length) {
                this._cbs[eventName] = null;
              }
            }
          }
        };
        var createTypedArray = function() {
          function createRegularArray(type, len) {
            var i = 0;
            var arr = [];
            var value;
            switch (type) {
              case "int16":
              case "uint8c":
                value = 1;
                break;
              default:
                value = 1.1;
                break;
            }
            for (i = 0; i < len; i += 1) {
              arr.push(value);
            }
            return arr;
          }
          function createTypedArrayFactory(type, len) {
            if (type === "float32") {
              return new Float32Array(len);
            }
            if (type === "int16") {
              return new Int16Array(len);
            }
            if (type === "uint8c") {
              return new Uint8ClampedArray(len);
            }
            return createRegularArray(type, len);
          }
          if (typeof Uint8ClampedArray === "function" && typeof Float32Array === "function") {
            return createTypedArrayFactory;
          }
          return createRegularArray;
        }();
        function createSizedArray(len) {
          return Array.apply(null, { length: len });
        }
        function createNS(type) {
          return document.createElementNS(svgNS, type);
        }
        function createTag(type) {
          return document.createElement(type);
        }
        function DynamicPropertyContainer() {
        }
        DynamicPropertyContainer.prototype = {
          addDynamicProperty: function(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
              this.dynamicProperties.push(prop);
              this.container.addDynamicProperty(this);
              this._isAnimated = true;
            }
          },
          iterateDynamicProperties: function() {
            this._mdf = false;
            var i;
            var len = this.dynamicProperties.length;
            for (i = 0; i < len; i += 1) {
              this.dynamicProperties[i].getValue();
              if (this.dynamicProperties[i]._mdf) {
                this._mdf = true;
              }
            }
          },
          initDynamicPropertyContainer: function(container) {
            this.container = container;
            this.dynamicProperties = [];
            this._mdf = false;
            this._isAnimated = false;
          }
        };
        var getBlendMode = function() {
          var blendModeEnums = {
            0: "source-over",
            1: "multiply",
            2: "screen",
            3: "overlay",
            4: "darken",
            5: "lighten",
            6: "color-dodge",
            7: "color-burn",
            8: "hard-light",
            9: "soft-light",
            10: "difference",
            11: "exclusion",
            12: "hue",
            13: "saturation",
            14: "color",
            15: "luminosity"
          };
          return function(mode) {
            return blendModeEnums[mode] || "";
          };
        }();
        var lineCapEnum = {
          1: "butt",
          2: "round",
          3: "square"
        };
        var lineJoinEnum = {
          1: "miter",
          2: "round",
          3: "bevel"
        };
        var Matrix = function() {
          var _cos = Math.cos;
          var _sin = Math.sin;
          var _tan = Math.tan;
          var _rnd = Math.round;
          function reset() {
            this.props[0] = 1;
            this.props[1] = 0;
            this.props[2] = 0;
            this.props[3] = 0;
            this.props[4] = 0;
            this.props[5] = 1;
            this.props[6] = 0;
            this.props[7] = 0;
            this.props[8] = 0;
            this.props[9] = 0;
            this.props[10] = 1;
            this.props[11] = 0;
            this.props[12] = 0;
            this.props[13] = 0;
            this.props[14] = 0;
            this.props[15] = 1;
            return this;
          }
          function rotate(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          }
          function rotateX(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
          }
          function rotateY(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
          }
          function rotateZ(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          }
          function shear(sx, sy) {
            return this._t(1, sy, sx, 1, 0, 0);
          }
          function skew(ax, ay) {
            return this.shear(_tan(ax), _tan(ay));
          }
          function skewFromAxis(ax, angle) {
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          }
          function scale(sx, sy, sz) {
            if (!sz && sz !== 0) {
              sz = 1;
            }
            if (sx === 1 && sy === 1 && sz === 1) {
              return this;
            }
            return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
          }
          function setTransform(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
            this.props[0] = a;
            this.props[1] = b;
            this.props[2] = c;
            this.props[3] = d;
            this.props[4] = e;
            this.props[5] = f;
            this.props[6] = g;
            this.props[7] = h;
            this.props[8] = i;
            this.props[9] = j;
            this.props[10] = k;
            this.props[11] = l;
            this.props[12] = m;
            this.props[13] = n;
            this.props[14] = o;
            this.props[15] = p;
            return this;
          }
          function translate(tx, ty, tz) {
            tz = tz || 0;
            if (tx !== 0 || ty !== 0 || tz !== 0) {
              return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
            }
            return this;
          }
          function transform(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2) {
            var _p = this.props;
            if (a2 === 1 && b2 === 0 && c2 === 0 && d2 === 0 && e2 === 0 && f2 === 1 && g2 === 0 && h2 === 0 && i2 === 0 && j2 === 0 && k2 === 1 && l2 === 0) {
              _p[12] = _p[12] * a2 + _p[15] * m2;
              _p[13] = _p[13] * f2 + _p[15] * n2;
              _p[14] = _p[14] * k2 + _p[15] * o2;
              _p[15] *= p2;
              this._identityCalculated = false;
              return this;
            }
            var a1 = _p[0];
            var b1 = _p[1];
            var c1 = _p[2];
            var d1 = _p[3];
            var e1 = _p[4];
            var f1 = _p[5];
            var g1 = _p[6];
            var h1 = _p[7];
            var i1 = _p[8];
            var j1 = _p[9];
            var k1 = _p[10];
            var l1 = _p[11];
            var m1 = _p[12];
            var n1 = _p[13];
            var o1 = _p[14];
            var p1 = _p[15];
            _p[0] = a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2;
            _p[1] = a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2;
            _p[2] = a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2;
            _p[3] = a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2;
            _p[4] = e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2;
            _p[5] = e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2;
            _p[6] = e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2;
            _p[7] = e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2;
            _p[8] = i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2;
            _p[9] = i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2;
            _p[10] = i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2;
            _p[11] = i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2;
            _p[12] = m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2;
            _p[13] = m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2;
            _p[14] = m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2;
            _p[15] = m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2;
            this._identityCalculated = false;
            return this;
          }
          function isIdentity() {
            if (!this._identityCalculated) {
              this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
              this._identityCalculated = true;
            }
            return this._identity;
          }
          function equals(matr) {
            var i = 0;
            while (i < 16) {
              if (matr.props[i] !== this.props[i]) {
                return false;
              }
              i += 1;
            }
            return true;
          }
          function clone(matr) {
            var i;
            for (i = 0; i < 16; i += 1) {
              matr.props[i] = this.props[i];
            }
            return matr;
          }
          function cloneFromProps(props) {
            var i;
            for (i = 0; i < 16; i += 1) {
              this.props[i] = props[i];
            }
          }
          function applyToPoint(x, y, z) {
            return {
              x: x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
              y: x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
              z: x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
            };
          }
          function applyToX(x, y, z) {
            return x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12];
          }
          function applyToY(x, y, z) {
            return x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13];
          }
          function applyToZ(x, y, z) {
            return x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14];
          }
          function getInverseMatrix() {
            var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
            var a = this.props[5] / determinant;
            var b = -this.props[1] / determinant;
            var c = -this.props[4] / determinant;
            var d = this.props[0] / determinant;
            var e = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
            var f = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
            var inverseMatrix = new Matrix();
            inverseMatrix.props[0] = a;
            inverseMatrix.props[1] = b;
            inverseMatrix.props[4] = c;
            inverseMatrix.props[5] = d;
            inverseMatrix.props[12] = e;
            inverseMatrix.props[13] = f;
            return inverseMatrix;
          }
          function inversePoint(pt) {
            var inverseMatrix = this.getInverseMatrix();
            return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
          }
          function inversePoints(pts) {
            var i;
            var len = pts.length;
            var retPts = [];
            for (i = 0; i < len; i += 1) {
              retPts[i] = inversePoint(pts[i]);
            }
            return retPts;
          }
          function applyToTriplePoints(pt1, pt2, pt3) {
            var arr = createTypedArray("float32", 6);
            if (this.isIdentity()) {
              arr[0] = pt1[0];
              arr[1] = pt1[1];
              arr[2] = pt2[0];
              arr[3] = pt2[1];
              arr[4] = pt3[0];
              arr[5] = pt3[1];
            } else {
              var p0 = this.props[0];
              var p1 = this.props[1];
              var p4 = this.props[4];
              var p5 = this.props[5];
              var p12 = this.props[12];
              var p13 = this.props[13];
              arr[0] = pt1[0] * p0 + pt1[1] * p4 + p12;
              arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
              arr[2] = pt2[0] * p0 + pt2[1] * p4 + p12;
              arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
              arr[4] = pt3[0] * p0 + pt3[1] * p4 + p12;
              arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
            }
            return arr;
          }
          function applyToPointArray(x, y, z) {
            var arr;
            if (this.isIdentity()) {
              arr = [x, y, z];
            } else {
              arr = [
                x * this.props[0] + y * this.props[4] + z * this.props[8] + this.props[12],
                x * this.props[1] + y * this.props[5] + z * this.props[9] + this.props[13],
                x * this.props[2] + y * this.props[6] + z * this.props[10] + this.props[14]
              ];
            }
            return arr;
          }
          function applyToPointStringified(x, y) {
            if (this.isIdentity()) {
              return x + "," + y;
            }
            var _p = this.props;
            return Math.round((x * _p[0] + y * _p[4] + _p[12]) * 100) / 100 + "," + Math.round((x * _p[1] + y * _p[5] + _p[13]) * 100) / 100;
          }
          function toCSS() {
            var i = 0;
            var props = this.props;
            var cssValue = "matrix3d(";
            var v = 1e4;
            while (i < 16) {
              cssValue += _rnd(props[i] * v) / v;
              cssValue += i === 15 ? ")" : ",";
              i += 1;
            }
            return cssValue;
          }
          function roundMatrixProperty(val) {
            var v = 1e4;
            if (val < 1e-6 && val > 0 || val > -1e-6 && val < 0) {
              return _rnd(val * v) / v;
            }
            return val;
          }
          function to2dCSS() {
            var props = this.props;
            var _a = roundMatrixProperty(props[0]);
            var _b = roundMatrixProperty(props[1]);
            var _c = roundMatrixProperty(props[4]);
            var _d = roundMatrixProperty(props[5]);
            var _e = roundMatrixProperty(props[12]);
            var _f = roundMatrixProperty(props[13]);
            return "matrix(" + _a + "," + _b + "," + _c + "," + _d + "," + _e + "," + _f + ")";
          }
          return function() {
            this.reset = reset;
            this.rotate = rotate;
            this.rotateX = rotateX;
            this.rotateY = rotateY;
            this.rotateZ = rotateZ;
            this.skew = skew;
            this.skewFromAxis = skewFromAxis;
            this.shear = shear;
            this.scale = scale;
            this.setTransform = setTransform;
            this.translate = translate;
            this.transform = transform;
            this.applyToPoint = applyToPoint;
            this.applyToX = applyToX;
            this.applyToY = applyToY;
            this.applyToZ = applyToZ;
            this.applyToPointArray = applyToPointArray;
            this.applyToTriplePoints = applyToTriplePoints;
            this.applyToPointStringified = applyToPointStringified;
            this.toCSS = toCSS;
            this.to2dCSS = to2dCSS;
            this.clone = clone;
            this.cloneFromProps = cloneFromProps;
            this.equals = equals;
            this.inversePoints = inversePoints;
            this.inversePoint = inversePoint;
            this.getInverseMatrix = getInverseMatrix;
            this._t = this.transform;
            this.isIdentity = isIdentity;
            this._identity = true;
            this._identityCalculated = false;
            this.props = createTypedArray("float32", 16);
            this.reset();
          };
        }();
        (function(pool, math) {
          var global2 = this, width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
          function seedrandom(seed, options, callback) {
            var key = [];
            options = options === true ? { entropy: true } : options || {};
            var shortseed = mixkey(flatten(
              options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed,
              3
            ), key);
            var arc4 = new ARC4(key);
            var prng = function() {
              var n = arc4.g(chunks), d = startdenom, x = 0;
              while (n < significance) {
                n = (n + x) * width;
                d *= width;
                x = arc4.g(1);
              }
              while (n >= overflow) {
                n /= 2;
                d /= 2;
                x >>>= 1;
              }
              return (n + x) / d;
            };
            prng.int32 = function() {
              return arc4.g(4) | 0;
            };
            prng.quick = function() {
              return arc4.g(4) / 4294967296;
            };
            prng.double = prng;
            mixkey(tostring(arc4.S), pool);
            return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
              if (state) {
                if (state.S) {
                  copy(state, arc4);
                }
                prng2.state = function() {
                  return copy(arc4, {});
                };
              }
              if (is_math_call) {
                math[rngname] = prng2;
                return seed2;
              } else
                return prng2;
            })(
              prng,
              shortseed,
              "global" in options ? options.global : this == math,
              options.state
            );
          }
          math["seed" + rngname] = seedrandom;
          function ARC4(key) {
            var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
            if (!keylen) {
              key = [keylen++];
            }
            while (i < width) {
              s[i] = i++;
            }
            for (i = 0; i < width; i++) {
              s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
              s[j] = t;
            }
            me.g = function(count) {
              var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;
              while (count--) {
                t2 = s2[i2 = mask & i2 + 1];
                r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];
              }
              me.i = i2;
              me.j = j2;
              return r;
            };
          }
          function copy(f, t) {
            t.i = f.i;
            t.j = f.j;
            t.S = f.S.slice();
            return t;
          }
          function flatten(obj, depth) {
            var result = [], typ = typeof obj, prop;
            if (depth && typ == "object") {
              for (prop in obj) {
                try {
                  result.push(flatten(obj[prop], depth - 1));
                } catch (e) {
                }
              }
            }
            return result.length ? result : typ == "string" ? obj : obj + "\0";
          }
          function mixkey(seed, key) {
            var stringseed = seed + "", smear, j = 0;
            while (j < stringseed.length) {
              key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
            }
            return tostring(key);
          }
          function autoseed() {
            try {
              if (nodecrypto) {
                return tostring(nodecrypto.randomBytes(width));
              }
              var out = new Uint8Array(width);
              (global2.crypto || global2.msCrypto).getRandomValues(out);
              return tostring(out);
            } catch (e) {
              var browser = global2.navigator, plugins = browser && browser.plugins;
              return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
            }
          }
          function tostring(a) {
            return String.fromCharCode.apply(0, a);
          }
          mixkey(math.random(), pool);
        })(
          [],
          // pool: entropy pool starts empty
          BMMath
          // math: package containing random, pow, and seedrandom
        );
        var BezierFactory = function() {
          var ob = {};
          ob.getBezierEasing = getBezierEasing;
          var beziers = {};
          function getBezierEasing(a, b, c, d, nm) {
            var str = nm || ("bez_" + a + "_" + b + "_" + c + "_" + d).replace(/\./g, "p");
            if (beziers[str]) {
              return beziers[str];
            }
            var bezEasing = new BezierEasing([a, b, c, d]);
            beziers[str] = bezEasing;
            return bezEasing;
          }
          var NEWTON_ITERATIONS = 4;
          var NEWTON_MIN_SLOPE = 1e-3;
          var SUBDIVISION_PRECISION = 1e-7;
          var SUBDIVISION_MAX_ITERATIONS = 10;
          var kSplineTableSize = 11;
          var kSampleStepSize = 1 / (kSplineTableSize - 1);
          var float32ArraySupported = typeof Float32Array === "function";
          function A(aA1, aA2) {
            return 1 - 3 * aA2 + 3 * aA1;
          }
          function B(aA1, aA2) {
            return 3 * aA2 - 6 * aA1;
          }
          function C(aA1) {
            return 3 * aA1;
          }
          function calcBezier(aT, aA1, aA2) {
            return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
          }
          function getSlope(aT, aA1, aA2) {
            return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
          }
          function binarySubdivide(aX, aA, aB, mX1, mX2) {
            var currentX, currentT, i = 0;
            do {
              currentT = aA + (aB - aA) / 2;
              currentX = calcBezier(currentT, mX1, mX2) - aX;
              if (currentX > 0) {
                aB = currentT;
              } else {
                aA = currentT;
              }
            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
            return currentT;
          }
          function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
            for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
              var currentSlope = getSlope(aGuessT, mX1, mX2);
              if (currentSlope === 0)
                return aGuessT;
              var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
              aGuessT -= currentX / currentSlope;
            }
            return aGuessT;
          }
          function BezierEasing(points) {
            this._p = points;
            this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
            this._precomputed = false;
            this.get = this.get.bind(this);
          }
          BezierEasing.prototype = {
            get: function(x) {
              var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
              if (!this._precomputed)
                this._precompute();
              if (mX1 === mY1 && mX2 === mY2)
                return x;
              if (x === 0)
                return 0;
              if (x === 1)
                return 1;
              return calcBezier(this._getTForX(x), mY1, mY2);
            },
            // Private part
            _precompute: function() {
              var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
              this._precomputed = true;
              if (mX1 !== mY1 || mX2 !== mY2) {
                this._calcSampleValues();
              }
            },
            _calcSampleValues: function() {
              var mX1 = this._p[0], mX2 = this._p[2];
              for (var i = 0; i < kSplineTableSize; ++i) {
                this._mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
              }
            },
            /**
                 * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
                 */
            _getTForX: function(aX) {
              var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;
              var intervalStart = 0;
              var currentSample = 1;
              var lastSample = kSplineTableSize - 1;
              for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                intervalStart += kSampleStepSize;
              }
              --currentSample;
              var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
              var guessForT = intervalStart + dist * kSampleStepSize;
              var initialSlope = getSlope(guessForT, mX1, mX2);
              if (initialSlope >= NEWTON_MIN_SLOPE) {
                return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
              }
              if (initialSlope === 0) {
                return guessForT;
              }
              return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
            }
          };
          return ob;
        }();
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
            window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame) {
            window2.requestAnimationFrame = function(callback) {
              var currTime = (/* @__PURE__ */ new Date()).getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = setTimeout(
                function() {
                  callback(currTime + timeToCall);
                },
                timeToCall
              );
              lastTime = currTime + timeToCall;
              return id;
            };
          }
          if (!window2.cancelAnimationFrame) {
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
          }
        })();
        function extendPrototype(sources, destination) {
          var i;
          var len = sources.length;
          var sourcePrototype;
          for (i = 0; i < len; i += 1) {
            sourcePrototype = sources[i].prototype;
            for (var attr in sourcePrototype) {
              if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr))
                destination.prototype[attr] = sourcePrototype[attr];
            }
          }
        }
        function getDescriptor(object, prop) {
          return Object.getOwnPropertyDescriptor(object, prop);
        }
        function createProxyFunction(prototype) {
          function ProxyFunction() {
          }
          ProxyFunction.prototype = prototype;
          return ProxyFunction;
        }
        function bezFunction() {
          var math = Math;
          function pointOnLine2D(x1, y1, x2, y2, x3, y3) {
            var det1 = x1 * y2 + y1 * x3 + x2 * y3 - x3 * y2 - y3 * x1 - x2 * y1;
            return det1 > -1e-3 && det1 < 1e-3;
          }
          function pointOnLine3D(x1, y1, z1, x2, y2, z2, x3, y3, z3) {
            if (z1 === 0 && z2 === 0 && z3 === 0) {
              return pointOnLine2D(x1, y1, x2, y2, x3, y3);
            }
            var dist1 = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2) + math.pow(z2 - z1, 2));
            var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y3 - y1, 2) + math.pow(z3 - z1, 2));
            var dist3 = math.sqrt(math.pow(x3 - x2, 2) + math.pow(y3 - y2, 2) + math.pow(z3 - z2, 2));
            var diffDist;
            if (dist1 > dist2) {
              if (dist1 > dist3) {
                diffDist = dist1 - dist2 - dist3;
              } else {
                diffDist = dist3 - dist2 - dist1;
              }
            } else if (dist3 > dist2) {
              diffDist = dist3 - dist2 - dist1;
            } else {
              diffDist = dist2 - dist1 - dist3;
            }
            return diffDist > -1e-4 && diffDist < 1e-4;
          }
          var getBezierLength = function() {
            return function(pt1, pt2, pt3, pt4) {
              var curveSegments = defaultCurveSegments;
              var k;
              var i;
              var len;
              var ptCoord;
              var perc;
              var addedLength = 0;
              var ptDistance;
              var point = [];
              var lastPoint = [];
              var lengthData = bezierLengthPool.newElement();
              len = pt3.length;
              for (k = 0; k < curveSegments; k += 1) {
                perc = k / (curveSegments - 1);
                ptDistance = 0;
                for (i = 0; i < len; i += 1) {
                  ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * pt3[i] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i] + bmPow(perc, 3) * pt2[i];
                  point[i] = ptCoord;
                  if (lastPoint[i] !== null) {
                    ptDistance += bmPow(point[i] - lastPoint[i], 2);
                  }
                  lastPoint[i] = point[i];
                }
                if (ptDistance) {
                  ptDistance = bmSqrt(ptDistance);
                  addedLength += ptDistance;
                }
                lengthData.percents[k] = perc;
                lengthData.lengths[k] = addedLength;
              }
              lengthData.addedLength = addedLength;
              return lengthData;
            };
          }();
          function getSegmentsLength(shapeData) {
            var segmentsLength = segmentsLengthPool.newElement();
            var closed = shapeData.c;
            var pathV = shapeData.v;
            var pathO = shapeData.o;
            var pathI = shapeData.i;
            var i;
            var len = shapeData._length;
            var lengths = segmentsLength.lengths;
            var totalLength = 0;
            for (i = 0; i < len - 1; i += 1) {
              lengths[i] = getBezierLength(pathV[i], pathV[i + 1], pathO[i], pathI[i + 1]);
              totalLength += lengths[i].addedLength;
            }
            if (closed && len) {
              lengths[i] = getBezierLength(pathV[i], pathV[0], pathO[i], pathI[0]);
              totalLength += lengths[i].addedLength;
            }
            segmentsLength.totalLength = totalLength;
            return segmentsLength;
          }
          function BezierData(length) {
            this.segmentLength = 0;
            this.points = new Array(length);
          }
          function PointData(partial, point) {
            this.partialLength = partial;
            this.point = point;
          }
          var buildBezierData = function() {
            var storedData = {};
            return function(pt1, pt2, pt3, pt4) {
              var bezierName = (pt1[0] + "_" + pt1[1] + "_" + pt2[0] + "_" + pt2[1] + "_" + pt3[0] + "_" + pt3[1] + "_" + pt4[0] + "_" + pt4[1]).replace(/\./g, "p");
              if (!storedData[bezierName]) {
                var curveSegments = defaultCurveSegments;
                var k;
                var i;
                var len;
                var ptCoord;
                var perc;
                var addedLength = 0;
                var ptDistance;
                var point;
                var lastPoint = null;
                if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                  curveSegments = 2;
                }
                var bezierData = new BezierData(curveSegments);
                len = pt3.length;
                for (k = 0; k < curveSegments; k += 1) {
                  point = createSizedArray(len);
                  perc = k / (curveSegments - 1);
                  ptDistance = 0;
                  for (i = 0; i < len; i += 1) {
                    ptCoord = bmPow(1 - perc, 3) * pt1[i] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i] + pt3[i]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i] + pt4[i]) + bmPow(perc, 3) * pt2[i];
                    point[i] = ptCoord;
                    if (lastPoint !== null) {
                      ptDistance += bmPow(point[i] - lastPoint[i], 2);
                    }
                  }
                  ptDistance = bmSqrt(ptDistance);
                  addedLength += ptDistance;
                  bezierData.points[k] = new PointData(ptDistance, point);
                  lastPoint = point;
                }
                bezierData.segmentLength = addedLength;
                storedData[bezierName] = bezierData;
              }
              return storedData[bezierName];
            };
          }();
          function getDistancePerc(perc, bezierData) {
            var percents = bezierData.percents;
            var lengths = bezierData.lengths;
            var len = percents.length;
            var initPos = bmFloor((len - 1) * perc);
            var lengthPos = perc * bezierData.addedLength;
            var lPerc = 0;
            if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
              return percents[initPos];
            }
            var dir = lengths[initPos] > lengthPos ? -1 : 1;
            var flag = true;
            while (flag) {
              if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
                lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
                flag = false;
              } else {
                initPos += dir;
              }
              if (initPos < 0 || initPos >= len - 1) {
                if (initPos === len - 1) {
                  return percents[initPos];
                }
                flag = false;
              }
            }
            return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
          }
          function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
            var t1 = getDistancePerc(percent, bezierData);
            var u1 = 1 - t1;
            var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1e3) / 1e3;
            var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1e3) / 1e3;
            return [ptX, ptY];
          }
          var bezierSegmentPoints = createTypedArray("float32", 8);
          function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
            if (startPerc < 0) {
              startPerc = 0;
            } else if (startPerc > 1) {
              startPerc = 1;
            }
            var t0 = getDistancePerc(startPerc, bezierData);
            endPerc = endPerc > 1 ? 1 : endPerc;
            var t1 = getDistancePerc(endPerc, bezierData);
            var i;
            var len = pt1.length;
            var u0 = 1 - t0;
            var u1 = 1 - t1;
            var u0u0u0 = u0 * u0 * u0;
            var t0u0u0_3 = t0 * u0 * u0 * 3;
            var t0t0u0_3 = t0 * t0 * u0 * 3;
            var t0t0t0 = t0 * t0 * t0;
            var u0u0u1 = u0 * u0 * u1;
            var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
            var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
            var t0t0t1 = t0 * t0 * t1;
            var u0u1u1 = u0 * u1 * u1;
            var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
            var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
            var t0t1t1 = t0 * t1 * t1;
            var u1u1u1 = u1 * u1 * u1;
            var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
            var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
            var t1t1t1 = t1 * t1 * t1;
            for (i = 0; i < len; i += 1) {
              bezierSegmentPoints[i * 4] = math.round((u0u0u0 * pt1[i] + t0u0u0_3 * pt3[i] + t0t0u0_3 * pt4[i] + t0t0t0 * pt2[i]) * 1e3) / 1e3;
              bezierSegmentPoints[i * 4 + 1] = math.round((u0u0u1 * pt1[i] + t0u0u1_3 * pt3[i] + t0t0u1_3 * pt4[i] + t0t0t1 * pt2[i]) * 1e3) / 1e3;
              bezierSegmentPoints[i * 4 + 2] = math.round((u0u1u1 * pt1[i] + t0u1u1_3 * pt3[i] + t0t1u1_3 * pt4[i] + t0t1t1 * pt2[i]) * 1e3) / 1e3;
              bezierSegmentPoints[i * 4 + 3] = math.round((u1u1u1 * pt1[i] + t1u1u1_3 * pt3[i] + t1t1u1_3 * pt4[i] + t1t1t1 * pt2[i]) * 1e3) / 1e3;
            }
            return bezierSegmentPoints;
          }
          return {
            getSegmentsLength,
            getNewSegment,
            getPointInSegment,
            buildBezierData,
            pointOnLine2D,
            pointOnLine3D
          };
        }
        var bez = bezFunction();
        var dataManager = function() {
          var _counterId = 1;
          var processes = [];
          var workerFn;
          var workerInstance;
          var workerProxy = {
            onmessage: function() {
            },
            postMessage: function(path) {
              workerFn({
                data: path
              });
            }
          };
          var _workerSelf = {
            postMessage: function(data) {
              workerProxy.onmessage({
                data
              });
            }
          };
          function createWorker(fn) {
            if (window2.Worker && window2.Blob && _useWebWorker) {
              var blob = new Blob(["var _workerSelf = self; self.onmessage = ", fn.toString()], { type: "text/javascript" });
              var url = URL.createObjectURL(blob);
              return new Worker(url);
            }
            workerFn = fn;
            return workerProxy;
          }
          function setupWorker() {
            if (!workerInstance) {
              workerInstance = createWorker(function workerStart(e) {
                function dataFunctionManager() {
                  function completeLayers(layers, comps) {
                    var layerData;
                    var i;
                    var len = layers.length;
                    var j;
                    var jLen;
                    var k;
                    var kLen;
                    for (i = 0; i < len; i += 1) {
                      layerData = layers[i];
                      if ("ks" in layerData && !layerData.completed) {
                        layerData.completed = true;
                        if (layerData.tt) {
                          layers[i - 1].td = layerData.tt;
                        }
                        if (layerData.hasMask) {
                          var maskProps = layerData.masksProperties;
                          jLen = maskProps.length;
                          for (j = 0; j < jLen; j += 1) {
                            if (maskProps[j].pt.k.i) {
                              convertPathsToAbsoluteValues(maskProps[j].pt.k);
                            } else {
                              kLen = maskProps[j].pt.k.length;
                              for (k = 0; k < kLen; k += 1) {
                                if (maskProps[j].pt.k[k].s) {
                                  convertPathsToAbsoluteValues(maskProps[j].pt.k[k].s[0]);
                                }
                                if (maskProps[j].pt.k[k].e) {
                                  convertPathsToAbsoluteValues(maskProps[j].pt.k[k].e[0]);
                                }
                              }
                            }
                          }
                        }
                        if (layerData.ty === 0) {
                          layerData.layers = findCompLayers(layerData.refId, comps);
                          completeLayers(layerData.layers, comps);
                        } else if (layerData.ty === 4) {
                          completeShapes(layerData.shapes);
                        } else if (layerData.ty === 5) {
                          completeText(layerData);
                        }
                      }
                    }
                  }
                  function findCompLayers(id, comps) {
                    var i = 0;
                    var len = comps.length;
                    while (i < len) {
                      if (comps[i].id === id) {
                        if (!comps[i].layers.__used) {
                          comps[i].layers.__used = true;
                          return comps[i].layers;
                        }
                        return JSON.parse(JSON.stringify(comps[i].layers));
                      }
                      i += 1;
                    }
                    return null;
                  }
                  function completeShapes(arr) {
                    var i;
                    var len = arr.length;
                    var j;
                    var jLen;
                    for (i = len - 1; i >= 0; i -= 1) {
                      if (arr[i].ty === "sh") {
                        if (arr[i].ks.k.i) {
                          convertPathsToAbsoluteValues(arr[i].ks.k);
                        } else {
                          jLen = arr[i].ks.k.length;
                          for (j = 0; j < jLen; j += 1) {
                            if (arr[i].ks.k[j].s) {
                              convertPathsToAbsoluteValues(arr[i].ks.k[j].s[0]);
                            }
                            if (arr[i].ks.k[j].e) {
                              convertPathsToAbsoluteValues(arr[i].ks.k[j].e[0]);
                            }
                          }
                        }
                      } else if (arr[i].ty === "gr") {
                        completeShapes(arr[i].it);
                      }
                    }
                  }
                  function convertPathsToAbsoluteValues(path) {
                    var i;
                    var len = path.i.length;
                    for (i = 0; i < len; i += 1) {
                      path.i[i][0] += path.v[i][0];
                      path.i[i][1] += path.v[i][1];
                      path.o[i][0] += path.v[i][0];
                      path.o[i][1] += path.v[i][1];
                    }
                  }
                  function checkVersion(minimum, animVersionString) {
                    var animVersion = animVersionString ? animVersionString.split(".") : [100, 100, 100];
                    if (minimum[0] > animVersion[0]) {
                      return true;
                    }
                    if (animVersion[0] > minimum[0]) {
                      return false;
                    }
                    if (minimum[1] > animVersion[1]) {
                      return true;
                    }
                    if (animVersion[1] > minimum[1]) {
                      return false;
                    }
                    if (minimum[2] > animVersion[2]) {
                      return true;
                    }
                    if (animVersion[2] > minimum[2]) {
                      return false;
                    }
                    return null;
                  }
                  var checkText = function() {
                    var minimumVersion = [4, 4, 14];
                    function updateTextLayer(textLayer) {
                      var documentData = textLayer.t.d;
                      textLayer.t.d = {
                        k: [
                          {
                            s: documentData,
                            t: 0
                          }
                        ]
                      };
                    }
                    function iterateLayers(layers) {
                      var i;
                      var len = layers.length;
                      for (i = 0; i < len; i += 1) {
                        if (layers[i].ty === 5) {
                          updateTextLayer(layers[i]);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i;
                          var len = animationData2.assets.length;
                          for (i = 0; i < len; i += 1) {
                            if (animationData2.assets[i].layers) {
                              iterateLayers(animationData2.assets[i].layers);
                            }
                          }
                        }
                      }
                    };
                  }();
                  var checkChars = function() {
                    var minimumVersion = [4, 7, 99];
                    return function(animationData2) {
                      if (animationData2.chars && !checkVersion(minimumVersion, animationData2.v)) {
                        var i;
                        var len = animationData2.chars.length;
                        var j;
                        var jLen;
                        var pathData;
                        var paths;
                        for (i = 0; i < len; i += 1) {
                          if (animationData2.chars[i].data && animationData2.chars[i].data.shapes) {
                            paths = animationData2.chars[i].data.shapes[0].it;
                            jLen = paths.length;
                            for (j = 0; j < jLen; j += 1) {
                              pathData = paths[j].ks.k;
                              if (!pathData.__converted) {
                                convertPathsToAbsoluteValues(paths[j].ks.k);
                                pathData.__converted = true;
                              }
                            }
                          }
                        }
                      }
                    };
                  }();
                  var checkPathProperties = function() {
                    var minimumVersion = [5, 7, 15];
                    function updateTextLayer(textLayer) {
                      var pathData = textLayer.t.p;
                      if (typeof pathData.a === "number") {
                        pathData.a = {
                          a: 0,
                          k: pathData.a
                        };
                      }
                      if (typeof pathData.p === "number") {
                        pathData.p = {
                          a: 0,
                          k: pathData.p
                        };
                      }
                      if (typeof pathData.r === "number") {
                        pathData.r = {
                          a: 0,
                          k: pathData.r
                        };
                      }
                    }
                    function iterateLayers(layers) {
                      var i;
                      var len = layers.length;
                      for (i = 0; i < len; i += 1) {
                        if (layers[i].ty === 5) {
                          updateTextLayer(layers[i]);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i;
                          var len = animationData2.assets.length;
                          for (i = 0; i < len; i += 1) {
                            if (animationData2.assets[i].layers) {
                              iterateLayers(animationData2.assets[i].layers);
                            }
                          }
                        }
                      }
                    };
                  }();
                  var checkColors = function() {
                    var minimumVersion = [4, 1, 9];
                    function iterateShapes(shapes) {
                      var i;
                      var len = shapes.length;
                      var j;
                      var jLen;
                      for (i = 0; i < len; i += 1) {
                        if (shapes[i].ty === "gr") {
                          iterateShapes(shapes[i].it);
                        } else if (shapes[i].ty === "fl" || shapes[i].ty === "st") {
                          if (shapes[i].c.k && shapes[i].c.k[0].i) {
                            jLen = shapes[i].c.k.length;
                            for (j = 0; j < jLen; j += 1) {
                              if (shapes[i].c.k[j].s) {
                                shapes[i].c.k[j].s[0] /= 255;
                                shapes[i].c.k[j].s[1] /= 255;
                                shapes[i].c.k[j].s[2] /= 255;
                                shapes[i].c.k[j].s[3] /= 255;
                              }
                              if (shapes[i].c.k[j].e) {
                                shapes[i].c.k[j].e[0] /= 255;
                                shapes[i].c.k[j].e[1] /= 255;
                                shapes[i].c.k[j].e[2] /= 255;
                                shapes[i].c.k[j].e[3] /= 255;
                              }
                            }
                          } else {
                            shapes[i].c.k[0] /= 255;
                            shapes[i].c.k[1] /= 255;
                            shapes[i].c.k[2] /= 255;
                            shapes[i].c.k[3] /= 255;
                          }
                        }
                      }
                    }
                    function iterateLayers(layers) {
                      var i;
                      var len = layers.length;
                      for (i = 0; i < len; i += 1) {
                        if (layers[i].ty === 4) {
                          iterateShapes(layers[i].shapes);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i;
                          var len = animationData2.assets.length;
                          for (i = 0; i < len; i += 1) {
                            if (animationData2.assets[i].layers) {
                              iterateLayers(animationData2.assets[i].layers);
                            }
                          }
                        }
                      }
                    };
                  }();
                  var checkShapes = function() {
                    var minimumVersion = [4, 4, 18];
                    function completeClosingShapes(arr) {
                      var i;
                      var len = arr.length;
                      var j;
                      var jLen;
                      for (i = len - 1; i >= 0; i -= 1) {
                        if (arr[i].ty === "sh") {
                          if (arr[i].ks.k.i) {
                            arr[i].ks.k.c = arr[i].closed;
                          } else {
                            jLen = arr[i].ks.k.length;
                            for (j = 0; j < jLen; j += 1) {
                              if (arr[i].ks.k[j].s) {
                                arr[i].ks.k[j].s[0].c = arr[i].closed;
                              }
                              if (arr[i].ks.k[j].e) {
                                arr[i].ks.k[j].e[0].c = arr[i].closed;
                              }
                            }
                          }
                        } else if (arr[i].ty === "gr") {
                          completeClosingShapes(arr[i].it);
                        }
                      }
                    }
                    function iterateLayers(layers) {
                      var layerData;
                      var i;
                      var len = layers.length;
                      var j;
                      var jLen;
                      var k;
                      var kLen;
                      for (i = 0; i < len; i += 1) {
                        layerData = layers[i];
                        if (layerData.hasMask) {
                          var maskProps = layerData.masksProperties;
                          jLen = maskProps.length;
                          for (j = 0; j < jLen; j += 1) {
                            if (maskProps[j].pt.k.i) {
                              maskProps[j].pt.k.c = maskProps[j].cl;
                            } else {
                              kLen = maskProps[j].pt.k.length;
                              for (k = 0; k < kLen; k += 1) {
                                if (maskProps[j].pt.k[k].s) {
                                  maskProps[j].pt.k[k].s[0].c = maskProps[j].cl;
                                }
                                if (maskProps[j].pt.k[k].e) {
                                  maskProps[j].pt.k[k].e[0].c = maskProps[j].cl;
                                }
                              }
                            }
                          }
                        }
                        if (layerData.ty === 4) {
                          completeClosingShapes(layerData.shapes);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i;
                          var len = animationData2.assets.length;
                          for (i = 0; i < len; i += 1) {
                            if (animationData2.assets[i].layers) {
                              iterateLayers(animationData2.assets[i].layers);
                            }
                          }
                        }
                      }
                    };
                  }();
                  function completeData(animationData2) {
                    if (animationData2.__complete) {
                      return;
                    }
                    checkColors(animationData2);
                    checkText(animationData2);
                    checkChars(animationData2);
                    checkPathProperties(animationData2);
                    checkShapes(animationData2);
                    completeLayers(animationData2.layers, animationData2.assets);
                    animationData2.__complete = true;
                  }
                  function completeText(data) {
                    if (data.t.a.length === 0 && !("m" in data.t.p)) {
                      data.singleShape = true;
                    }
                  }
                  var moduleOb = {};
                  moduleOb.completeData = completeData;
                  moduleOb.checkColors = checkColors;
                  moduleOb.checkChars = checkChars;
                  moduleOb.checkPathProperties = checkPathProperties;
                  moduleOb.checkShapes = checkShapes;
                  moduleOb.completeLayers = completeLayers;
                  return moduleOb;
                }
                if (!_workerSelf.dataManager) {
                  _workerSelf.dataManager = dataFunctionManager();
                }
                if (!_workerSelf.assetLoader) {
                  _workerSelf.assetLoader = function() {
                    function formatResponse(xhr) {
                      var contentTypeHeader = xhr.getResponseHeader("content-type");
                      if (contentTypeHeader && xhr.responseType === "json" && contentTypeHeader.indexOf("json") !== -1) {
                        return xhr.response;
                      }
                      if (xhr.response && typeof xhr.response === "object") {
                        return xhr.response;
                      }
                      if (xhr.response && typeof xhr.response === "string") {
                        return JSON.parse(xhr.response);
                      }
                      if (xhr.responseText) {
                        return JSON.parse(xhr.responseText);
                      }
                      return null;
                    }
                    function loadAsset(path, fullPath, callback, errorCallback) {
                      var response;
                      var xhr = new XMLHttpRequest();
                      try {
                        xhr.responseType = "json";
                      } catch (err) {
                      }
                      xhr.onreadystatechange = function() {
                        if (xhr.readyState === 4) {
                          if (xhr.status === 200) {
                            response = formatResponse(xhr);
                            callback(response);
                          } else {
                            try {
                              response = formatResponse(xhr);
                              callback(response);
                            } catch (err) {
                              if (errorCallback) {
                                errorCallback(err);
                              }
                            }
                          }
                        }
                      };
                      try {
                        xhr.open("GET", path, true);
                      } catch (error) {
                        xhr.open("GET", fullPath + "/" + path, true);
                      }
                      xhr.send();
                    }
                    return {
                      load: loadAsset
                    };
                  }();
                }
                if (e.data.type === "loadAnimation") {
                  _workerSelf.assetLoader.load(
                    e.data.path,
                    e.data.fullPath,
                    function(data) {
                      _workerSelf.dataManager.completeData(data);
                      _workerSelf.postMessage({
                        id: e.data.id,
                        payload: data,
                        status: "success"
                      });
                    },
                    function() {
                      _workerSelf.postMessage({
                        id: e.data.id,
                        status: "error"
                      });
                    }
                  );
                } else if (e.data.type === "complete") {
                  var animation = e.data.animation;
                  _workerSelf.dataManager.completeData(animation);
                  _workerSelf.postMessage({
                    id: e.data.id,
                    payload: animation,
                    status: "success"
                  });
                } else if (e.data.type === "loadData") {
                  _workerSelf.assetLoader.load(
                    e.data.path,
                    e.data.fullPath,
                    function(data) {
                      _workerSelf.postMessage({
                        id: e.data.id,
                        payload: data,
                        status: "success"
                      });
                    },
                    function() {
                      _workerSelf.postMessage({
                        id: e.data.id,
                        status: "error"
                      });
                    }
                  );
                }
              });
              workerInstance.onmessage = function(event) {
                var data = event.data;
                var id = data.id;
                var process2 = processes[id];
                processes[id] = null;
                if (data.status === "success") {
                  process2.onComplete(data.payload);
                } else if (process2.onError) {
                  process2.onError();
                }
              };
            }
          }
          function createProcess(onComplete, onError) {
            _counterId += 1;
            var id = "processId_" + _counterId;
            processes[id] = {
              onComplete,
              onError
            };
            return id;
          }
          function loadAnimation2(path, onComplete, onError) {
            setupWorker();
            var processId = createProcess(onComplete, onError);
            workerInstance.postMessage({
              type: "loadAnimation",
              path,
              fullPath: window2.location.origin + window2.location.pathname,
              id: processId
            });
          }
          function loadData(path, onComplete, onError) {
            setupWorker();
            var processId = createProcess(onComplete, onError);
            workerInstance.postMessage({
              type: "loadData",
              path,
              fullPath: window2.location.origin + window2.location.pathname,
              id: processId
            });
          }
          function completeAnimation(anim, onComplete, onError) {
            setupWorker();
            var processId = createProcess(onComplete, onError);
            workerInstance.postMessage({
              type: "complete",
              animation: anim,
              id: processId
            });
          }
          return {
            loadAnimation: loadAnimation2,
            loadData,
            completeAnimation
          };
        }();
        function getFontProperties(fontData) {
          var styles = fontData.fStyle ? fontData.fStyle.split(" ") : [];
          var fWeight = "normal";
          var fStyle = "normal";
          var len = styles.length;
          var styleName;
          for (var i = 0; i < len; i += 1) {
            styleName = styles[i].toLowerCase();
            switch (styleName) {
              case "italic":
                fStyle = "italic";
                break;
              case "bold":
                fWeight = "700";
                break;
              case "black":
                fWeight = "900";
                break;
              case "medium":
                fWeight = "500";
                break;
              case "regular":
              case "normal":
                fWeight = "400";
                break;
              case "light":
              case "thin":
                fWeight = "200";
                break;
              default:
                break;
            }
          }
          return {
            style: fStyle,
            weight: fontData.fWeight || fWeight
          };
        }
        var FontManager = function() {
          var maxWaitingTime = 5e3;
          var emptyChar = {
            w: 0,
            size: 0,
            shapes: []
          };
          var combinedCharacters = [];
          combinedCharacters = combinedCharacters.concat([
            2304,
            2305,
            2306,
            2307,
            2362,
            2363,
            2364,
            2364,
            2366,
            2367,
            2368,
            2369,
            2370,
            2371,
            2372,
            2373,
            2374,
            2375,
            2376,
            2377,
            2378,
            2379,
            2380,
            2381,
            2382,
            2383,
            2387,
            2388,
            2389,
            2390,
            2391,
            2402,
            2403
          ]);
          var surrogateModifiers = [
            "d83cdffb",
            "d83cdffc",
            "d83cdffd",
            "d83cdffe",
            "d83cdfff"
          ];
          var zeroWidthJoiner = [65039, 8205];
          function trimFontOptions(font) {
            var familyArray = font.split(",");
            var i;
            var len = familyArray.length;
            var enabledFamilies = [];
            for (i = 0; i < len; i += 1) {
              if (familyArray[i] !== "sans-serif" && familyArray[i] !== "monospace") {
                enabledFamilies.push(familyArray[i]);
              }
            }
            return enabledFamilies.join(",");
          }
          function setUpNode(font, family) {
            var parentNode = createTag("span");
            parentNode.setAttribute("aria-hidden", true);
            parentNode.style.fontFamily = family;
            var node = createTag("span");
            node.innerText = "giItT1WQy@!-/#";
            parentNode.style.position = "absolute";
            parentNode.style.left = "-10000px";
            parentNode.style.top = "-10000px";
            parentNode.style.fontSize = "300px";
            parentNode.style.fontVariant = "normal";
            parentNode.style.fontStyle = "normal";
            parentNode.style.fontWeight = "normal";
            parentNode.style.letterSpacing = "0";
            parentNode.appendChild(node);
            document.body.appendChild(parentNode);
            var width = node.offsetWidth;
            node.style.fontFamily = trimFontOptions(font) + ", " + family;
            return { node, w: width, parent: parentNode };
          }
          function checkLoadedFonts() {
            var i;
            var len = this.fonts.length;
            var node;
            var w;
            var loadedCount = len;
            for (i = 0; i < len; i += 1) {
              if (this.fonts[i].loaded) {
                loadedCount -= 1;
              } else if (this.fonts[i].fOrigin === "n" || this.fonts[i].origin === 0) {
                this.fonts[i].loaded = true;
              } else {
                node = this.fonts[i].monoCase.node;
                w = this.fonts[i].monoCase.w;
                if (node.offsetWidth !== w) {
                  loadedCount -= 1;
                  this.fonts[i].loaded = true;
                } else {
                  node = this.fonts[i].sansCase.node;
                  w = this.fonts[i].sansCase.w;
                  if (node.offsetWidth !== w) {
                    loadedCount -= 1;
                    this.fonts[i].loaded = true;
                  }
                }
                if (this.fonts[i].loaded) {
                  this.fonts[i].sansCase.parent.parentNode.removeChild(this.fonts[i].sansCase.parent);
                  this.fonts[i].monoCase.parent.parentNode.removeChild(this.fonts[i].monoCase.parent);
                }
              }
            }
            if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
              setTimeout(this.checkLoadedFontsBinded, 20);
            } else {
              setTimeout(this.setIsLoadedBinded, 10);
            }
          }
          function createHelper(def, fontData) {
            var tHelper = createNS("text");
            tHelper.style.fontSize = "100px";
            var fontProps = getFontProperties(fontData);
            tHelper.setAttribute("font-family", fontData.fFamily);
            tHelper.setAttribute("font-style", fontProps.style);
            tHelper.setAttribute("font-weight", fontProps.weight);
            tHelper.textContent = "1";
            if (fontData.fClass) {
              tHelper.style.fontFamily = "inherit";
              tHelper.setAttribute("class", fontData.fClass);
            } else {
              tHelper.style.fontFamily = fontData.fFamily;
            }
            def.appendChild(tHelper);
            var tCanvasHelper = createTag("canvas").getContext("2d");
            tCanvasHelper.font = fontData.fWeight + " " + fontData.fStyle + " 100px " + fontData.fFamily;
            return tHelper;
          }
          function addFonts(fontData, defs) {
            if (!fontData) {
              this.isLoaded = true;
              return;
            }
            if (this.chars) {
              this.isLoaded = true;
              this.fonts = fontData.list;
              return;
            }
            var fontArr = fontData.list;
            var i;
            var len = fontArr.length;
            var _pendingFonts = len;
            for (i = 0; i < len; i += 1) {
              var shouldLoadFont = true;
              var loadedSelector;
              var j;
              fontArr[i].loaded = false;
              fontArr[i].monoCase = setUpNode(fontArr[i].fFamily, "monospace");
              fontArr[i].sansCase = setUpNode(fontArr[i].fFamily, "sans-serif");
              if (!fontArr[i].fPath) {
                fontArr[i].loaded = true;
                _pendingFonts -= 1;
              } else if (fontArr[i].fOrigin === "p" || fontArr[i].origin === 3) {
                loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i].fFamily + '"]');
                if (loadedSelector.length > 0) {
                  shouldLoadFont = false;
                }
                if (shouldLoadFont) {
                  var s = createTag("style");
                  s.setAttribute("f-forigin", fontArr[i].fOrigin);
                  s.setAttribute("f-origin", fontArr[i].origin);
                  s.setAttribute("f-family", fontArr[i].fFamily);
                  s.type = "text/css";
                  s.innerText = "@font-face {font-family: " + fontArr[i].fFamily + "; font-style: normal; src: url('" + fontArr[i].fPath + "');}";
                  defs.appendChild(s);
                }
              } else if (fontArr[i].fOrigin === "g" || fontArr[i].origin === 1) {
                loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
                for (j = 0; j < loadedSelector.length; j += 1) {
                  if (loadedSelector[j].href.indexOf(fontArr[i].fPath) !== -1) {
                    shouldLoadFont = false;
                  }
                }
                if (shouldLoadFont) {
                  var l = createTag("link");
                  l.setAttribute("f-forigin", fontArr[i].fOrigin);
                  l.setAttribute("f-origin", fontArr[i].origin);
                  l.type = "text/css";
                  l.rel = "stylesheet";
                  l.href = fontArr[i].fPath;
                  document.body.appendChild(l);
                }
              } else if (fontArr[i].fOrigin === "t" || fontArr[i].origin === 2) {
                loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
                for (j = 0; j < loadedSelector.length; j += 1) {
                  if (fontArr[i].fPath === loadedSelector[j].src) {
                    shouldLoadFont = false;
                  }
                }
                if (shouldLoadFont) {
                  var sc = createTag("link");
                  sc.setAttribute("f-forigin", fontArr[i].fOrigin);
                  sc.setAttribute("f-origin", fontArr[i].origin);
                  sc.setAttribute("rel", "stylesheet");
                  sc.setAttribute("href", fontArr[i].fPath);
                  defs.appendChild(sc);
                }
              }
              fontArr[i].helper = createHelper(defs, fontArr[i]);
              fontArr[i].cache = {};
              this.fonts.push(fontArr[i]);
            }
            if (_pendingFonts === 0) {
              this.isLoaded = true;
            } else {
              setTimeout(this.checkLoadedFonts.bind(this), 100);
            }
          }
          function addChars(chars) {
            if (!chars) {
              return;
            }
            if (!this.chars) {
              this.chars = [];
            }
            var i;
            var len = chars.length;
            var j;
            var jLen = this.chars.length;
            var found;
            for (i = 0; i < len; i += 1) {
              j = 0;
              found = false;
              while (j < jLen) {
                if (this.chars[j].style === chars[i].style && this.chars[j].fFamily === chars[i].fFamily && this.chars[j].ch === chars[i].ch) {
                  found = true;
                }
                j += 1;
              }
              if (!found) {
                this.chars.push(chars[i]);
                jLen += 1;
              }
            }
          }
          function getCharData(char, style, font) {
            var i = 0;
            var len = this.chars.length;
            while (i < len) {
              if (this.chars[i].ch === char && this.chars[i].style === style && this.chars[i].fFamily === font) {
                return this.chars[i];
              }
              i += 1;
            }
            if ((typeof char === "string" && char.charCodeAt(0) !== 13 || !char) && console && console.warn && !this._warned) {
              this._warned = true;
              console.warn("Missing character from exported characters list: ", char, style, font);
            }
            return emptyChar;
          }
          function measureText(char, fontName, size) {
            var fontData = this.getFontByName(fontName);
            var index2 = char.charCodeAt(0);
            if (!fontData.cache[index2 + 1]) {
              var tHelper = fontData.helper;
              if (char === " ") {
                tHelper.textContent = "|" + char + "|";
                var doubleSize = tHelper.getComputedTextLength();
                tHelper.textContent = "||";
                var singleSize = tHelper.getComputedTextLength();
                fontData.cache[index2 + 1] = (doubleSize - singleSize) / 100;
              } else {
                tHelper.textContent = char;
                fontData.cache[index2 + 1] = tHelper.getComputedTextLength() / 100;
              }
            }
            return fontData.cache[index2 + 1] * size;
          }
          function getFontByName(name) {
            var i = 0;
            var len = this.fonts.length;
            while (i < len) {
              if (this.fonts[i].fName === name) {
                return this.fonts[i];
              }
              i += 1;
            }
            return this.fonts[0];
          }
          function isModifier(firstCharCode, secondCharCode) {
            var sum = firstCharCode.toString(16) + secondCharCode.toString(16);
            return surrogateModifiers.indexOf(sum) !== -1;
          }
          function isZeroWidthJoiner(firstCharCode, secondCharCode) {
            if (!secondCharCode) {
              return firstCharCode === zeroWidthJoiner[1];
            }
            return firstCharCode === zeroWidthJoiner[0] && secondCharCode === zeroWidthJoiner[1];
          }
          function isCombinedCharacter(char) {
            return combinedCharacters.indexOf(char) !== -1;
          }
          function setIsLoaded() {
            this.isLoaded = true;
          }
          var Font = function() {
            this.fonts = [];
            this.chars = null;
            this.typekitLoaded = 0;
            this.isLoaded = false;
            this._warned = false;
            this.initTime = Date.now();
            this.setIsLoadedBinded = this.setIsLoaded.bind(this);
            this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
          };
          Font.isModifier = isModifier;
          Font.isZeroWidthJoiner = isZeroWidthJoiner;
          Font.isCombinedCharacter = isCombinedCharacter;
          var fontPrototype = {
            addChars,
            addFonts,
            getCharData,
            getFontByName,
            measureText,
            checkLoadedFonts,
            setIsLoaded
          };
          Font.prototype = fontPrototype;
          return Font;
        }();
        var PropertyFactory = function() {
          var initFrame = initialDefaultFrame;
          var mathAbs = Math.abs;
          function interpolateValue(frameNum, caching) {
            var offsetTime = this.offsetTime;
            var newValue;
            if (this.propType === "multidimensional") {
              newValue = createTypedArray("float32", this.pv.length);
            }
            var iterationIndex = caching.lastIndex;
            var i = iterationIndex;
            var len = this.keyframes.length - 1;
            var flag = true;
            var keyData;
            var nextKeyData;
            var keyframeMetadata;
            while (flag) {
              keyData = this.keyframes[i];
              nextKeyData = this.keyframes[i + 1];
              if (i === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
                if (keyData.h) {
                  keyData = nextKeyData;
                }
                iterationIndex = 0;
                break;
              }
              if (nextKeyData.t - offsetTime > frameNum) {
                iterationIndex = i;
                break;
              }
              if (i < len - 1) {
                i += 1;
              } else {
                iterationIndex = 0;
                flag = false;
              }
            }
            keyframeMetadata = this.keyframesMetadata[i] || {};
            var k;
            var kLen;
            var perc;
            var jLen;
            var j;
            var fnc;
            var nextKeyTime = nextKeyData.t - offsetTime;
            var keyTime = keyData.t - offsetTime;
            var endValue;
            if (keyData.to) {
              if (!keyframeMetadata.bezierData) {
                keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
              }
              var bezierData = keyframeMetadata.bezierData;
              if (frameNum >= nextKeyTime || frameNum < keyTime) {
                var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
                kLen = bezierData.points[ind].point.length;
                for (k = 0; k < kLen; k += 1) {
                  newValue[k] = bezierData.points[ind].point[k];
                }
              } else {
                if (keyframeMetadata.__fnct) {
                  fnc = keyframeMetadata.__fnct;
                } else {
                  fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                  keyframeMetadata.__fnct = fnc;
                }
                perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                var distanceInLine = bezierData.segmentLength * perc;
                var segmentPerc;
                var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastAddedLength : 0;
                j = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i ? caching._lastPoint : 0;
                flag = true;
                jLen = bezierData.points.length;
                while (flag) {
                  addedLength += bezierData.points[j].partialLength;
                  if (distanceInLine === 0 || perc === 0 || j === bezierData.points.length - 1) {
                    kLen = bezierData.points[j].point.length;
                    for (k = 0; k < kLen; k += 1) {
                      newValue[k] = bezierData.points[j].point[k];
                    }
                    break;
                  } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j + 1].partialLength) {
                    segmentPerc = (distanceInLine - addedLength) / bezierData.points[j + 1].partialLength;
                    kLen = bezierData.points[j].point.length;
                    for (k = 0; k < kLen; k += 1) {
                      newValue[k] = bezierData.points[j].point[k] + (bezierData.points[j + 1].point[k] - bezierData.points[j].point[k]) * segmentPerc;
                    }
                    break;
                  }
                  if (j < jLen - 1) {
                    j += 1;
                  } else {
                    flag = false;
                  }
                }
                caching._lastPoint = j;
                caching._lastAddedLength = addedLength - bezierData.points[j].partialLength;
                caching._lastKeyframeIndex = i;
              }
            } else {
              var outX;
              var outY;
              var inX;
              var inY;
              var keyValue;
              len = keyData.s.length;
              endValue = nextKeyData.s || keyData.e;
              if (this.sh && keyData.h !== 1) {
                if (frameNum >= nextKeyTime) {
                  newValue[0] = endValue[0];
                  newValue[1] = endValue[1];
                  newValue[2] = endValue[2];
                } else if (frameNum <= keyTime) {
                  newValue[0] = keyData.s[0];
                  newValue[1] = keyData.s[1];
                  newValue[2] = keyData.s[2];
                } else {
                  var quatStart = createQuaternion(keyData.s);
                  var quatEnd = createQuaternion(endValue);
                  var time = (frameNum - keyTime) / (nextKeyTime - keyTime);
                  quaternionToEuler(newValue, slerp(quatStart, quatEnd, time));
                }
              } else {
                for (i = 0; i < len; i += 1) {
                  if (keyData.h !== 1) {
                    if (frameNum >= nextKeyTime) {
                      perc = 1;
                    } else if (frameNum < keyTime) {
                      perc = 0;
                    } else {
                      if (keyData.o.x.constructor === Array) {
                        if (!keyframeMetadata.__fnct) {
                          keyframeMetadata.__fnct = [];
                        }
                        if (!keyframeMetadata.__fnct[i]) {
                          outX = keyData.o.x[i] === void 0 ? keyData.o.x[0] : keyData.o.x[i];
                          outY = keyData.o.y[i] === void 0 ? keyData.o.y[0] : keyData.o.y[i];
                          inX = keyData.i.x[i] === void 0 ? keyData.i.x[0] : keyData.i.x[i];
                          inY = keyData.i.y[i] === void 0 ? keyData.i.y[0] : keyData.i.y[i];
                          fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                          keyframeMetadata.__fnct[i] = fnc;
                        } else {
                          fnc = keyframeMetadata.__fnct[i];
                        }
                      } else if (!keyframeMetadata.__fnct) {
                        outX = keyData.o.x;
                        outY = keyData.o.y;
                        inX = keyData.i.x;
                        inY = keyData.i.y;
                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                        keyData.keyframeMetadata = fnc;
                      } else {
                        fnc = keyframeMetadata.__fnct;
                      }
                      perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                    }
                  }
                  endValue = nextKeyData.s || keyData.e;
                  keyValue = keyData.h === 1 ? keyData.s[i] : keyData.s[i] + (endValue[i] - keyData.s[i]) * perc;
                  if (this.propType === "multidimensional") {
                    newValue[i] = keyValue;
                  } else {
                    newValue = keyValue;
                  }
                }
              }
            }
            caching.lastIndex = iterationIndex;
            return newValue;
          }
          function slerp(a, b, t) {
            var out = [];
            var ax = a[0];
            var ay = a[1];
            var az = a[2];
            var aw = a[3];
            var bx = b[0];
            var by = b[1];
            var bz = b[2];
            var bw = b[3];
            var omega;
            var cosom;
            var sinom;
            var scale0;
            var scale1;
            cosom = ax * bx + ay * by + az * bz + aw * bw;
            if (cosom < 0) {
              cosom = -cosom;
              bx = -bx;
              by = -by;
              bz = -bz;
              bw = -bw;
            }
            if (1 - cosom > 1e-6) {
              omega = Math.acos(cosom);
              sinom = Math.sin(omega);
              scale0 = Math.sin((1 - t) * omega) / sinom;
              scale1 = Math.sin(t * omega) / sinom;
            } else {
              scale0 = 1 - t;
              scale1 = t;
            }
            out[0] = scale0 * ax + scale1 * bx;
            out[1] = scale0 * ay + scale1 * by;
            out[2] = scale0 * az + scale1 * bz;
            out[3] = scale0 * aw + scale1 * bw;
            return out;
          }
          function quaternionToEuler(out, quat) {
            var qx = quat[0];
            var qy = quat[1];
            var qz = quat[2];
            var qw = quat[3];
            var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
            var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
            var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
            out[0] = heading / degToRads;
            out[1] = attitude / degToRads;
            out[2] = bank / degToRads;
          }
          function createQuaternion(values) {
            var heading = values[0] * degToRads;
            var attitude = values[1] * degToRads;
            var bank = values[2] * degToRads;
            var c1 = Math.cos(heading / 2);
            var c2 = Math.cos(attitude / 2);
            var c3 = Math.cos(bank / 2);
            var s1 = Math.sin(heading / 2);
            var s2 = Math.sin(attitude / 2);
            var s3 = Math.sin(bank / 2);
            var w = c1 * c2 * c3 - s1 * s2 * s3;
            var x = s1 * s2 * c3 + c1 * c2 * s3;
            var y = s1 * c2 * c3 + c1 * s2 * s3;
            var z = c1 * s2 * c3 - s1 * c2 * s3;
            return [x, y, z, w];
          }
          function getValueAtCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
              if (this._caching.lastFrame >= frameNum) {
                this._caching._lastKeyframeIndex = -1;
                this._caching.lastIndex = 0;
              }
              var renderResult = this.interpolateValue(frameNum, this._caching);
              this.pv = renderResult;
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
          }
          function setVValue(val) {
            var multipliedValue;
            if (this.propType === "unidimensional") {
              multipliedValue = val * this.mult;
              if (mathAbs(this.v - multipliedValue) > 1e-5) {
                this.v = multipliedValue;
                this._mdf = true;
              }
            } else {
              var i = 0;
              var len = this.v.length;
              while (i < len) {
                multipliedValue = val[i] * this.mult;
                if (mathAbs(this.v[i] - multipliedValue) > 1e-5) {
                  this.v[i] = multipliedValue;
                  this._mdf = true;
                }
                i += 1;
              }
            }
          }
          function processEffectsSequence() {
            if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
              return;
            }
            if (this.lock) {
              this.setVValue(this.pv);
              return;
            }
            this.lock = true;
            this._mdf = this._isFirstFrame;
            var i;
            var len = this.effectsSequence.length;
            var finalValue = this.kf ? this.pv : this.data.k;
            for (i = 0; i < len; i += 1) {
              finalValue = this.effectsSequence[i](finalValue);
            }
            this.setVValue(finalValue);
            this._isFirstFrame = false;
            this.lock = false;
            this.frameId = this.elem.globalData.frameId;
          }
          function addEffect(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
          }
          function ValueProperty(elem, data, mult, container) {
            this.propType = "unidimensional";
            this.mult = mult || 1;
            this.data = data;
            this.v = mult ? data.k * mult : data.k;
            this.pv = data.k;
            this._mdf = false;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.k = false;
            this.kf = false;
            this.vel = 0;
            this.effectsSequence = [];
            this._isFirstFrame = true;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.addEffect = addEffect;
          }
          function MultiDimensionalProperty(elem, data, mult, container) {
            this.propType = "multidimensional";
            this.mult = mult || 1;
            this.data = data;
            this._mdf = false;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.k = false;
            this.kf = false;
            this.frameId = -1;
            var i;
            var len = data.k.length;
            this.v = createTypedArray("float32", len);
            this.pv = createTypedArray("float32", len);
            this.vel = createTypedArray("float32", len);
            for (i = 0; i < len; i += 1) {
              this.v[i] = data.k[i] * this.mult;
              this.pv[i] = data.k[i];
            }
            this._isFirstFrame = true;
            this.effectsSequence = [];
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.addEffect = addEffect;
          }
          function KeyframedValueProperty(elem, data, mult, container) {
            this.propType = "unidimensional";
            this.keyframes = data.k;
            this.keyframesMetadata = [];
            this.offsetTime = elem.data.st;
            this.frameId = -1;
            this._caching = {
              lastFrame: initFrame,
              lastIndex: 0,
              value: 0,
              _lastKeyframeIndex: -1
            };
            this.k = true;
            this.kf = true;
            this.data = data;
            this.mult = mult || 1;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.v = initFrame;
            this.pv = initFrame;
            this._isFirstFrame = true;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.interpolateValue = interpolateValue;
            this.effectsSequence = [getValueAtCurrentTime.bind(this)];
            this.addEffect = addEffect;
          }
          function KeyframedMultidimensionalProperty(elem, data, mult, container) {
            this.propType = "multidimensional";
            var i;
            var len = data.k.length;
            var s;
            var e;
            var to;
            var ti;
            for (i = 0; i < len - 1; i += 1) {
              if (data.k[i].to && data.k[i].s && data.k[i + 1] && data.k[i + 1].s) {
                s = data.k[i].s;
                e = data.k[i + 1].s;
                to = data.k[i].to;
                ti = data.k[i].ti;
                if (s.length === 2 && !(s[0] === e[0] && s[1] === e[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], s[0] + to[0], s[1] + to[1]) && bez.pointOnLine2D(s[0], s[1], e[0], e[1], e[0] + ti[0], e[1] + ti[1]) || s.length === 3 && !(s[0] === e[0] && s[1] === e[1] && s[2] === e[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], s[0] + to[0], s[1] + to[1], s[2] + to[2]) && bez.pointOnLine3D(s[0], s[1], s[2], e[0], e[1], e[2], e[0] + ti[0], e[1] + ti[1], e[2] + ti[2])) {
                  data.k[i].to = null;
                  data.k[i].ti = null;
                }
                if (s[0] === e[0] && s[1] === e[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                  if (s.length === 2 || s[2] === e[2] && to[2] === 0 && ti[2] === 0) {
                    data.k[i].to = null;
                    data.k[i].ti = null;
                  }
                }
              }
            }
            this.effectsSequence = [getValueAtCurrentTime.bind(this)];
            this.data = data;
            this.keyframes = data.k;
            this.keyframesMetadata = [];
            this.offsetTime = elem.data.st;
            this.k = true;
            this.kf = true;
            this._isFirstFrame = true;
            this.mult = mult || 1;
            this.elem = elem;
            this.container = container;
            this.comp = elem.comp;
            this.getValue = processEffectsSequence;
            this.setVValue = setVValue;
            this.interpolateValue = interpolateValue;
            this.frameId = -1;
            var arrLen = data.k[0].s.length;
            this.v = createTypedArray("float32", arrLen);
            this.pv = createTypedArray("float32", arrLen);
            for (i = 0; i < arrLen; i += 1) {
              this.v[i] = initFrame;
              this.pv[i] = initFrame;
            }
            this._caching = { lastFrame: initFrame, lastIndex: 0, value: createTypedArray("float32", arrLen) };
            this.addEffect = addEffect;
          }
          function getProp(elem, data, type, mult, container) {
            var p;
            if (!data.k.length) {
              p = new ValueProperty(elem, data, mult, container);
            } else if (typeof data.k[0] === "number") {
              p = new MultiDimensionalProperty(elem, data, mult, container);
            } else {
              switch (type) {
                case 0:
                  p = new KeyframedValueProperty(elem, data, mult, container);
                  break;
                case 1:
                  p = new KeyframedMultidimensionalProperty(elem, data, mult, container);
                  break;
                default:
                  break;
              }
            }
            if (p.effectsSequence.length) {
              container.addDynamicProperty(p);
            }
            return p;
          }
          var ob = {
            getProp
          };
          return ob;
        }();
        var TransformPropertyFactory = function() {
          var defaultVector = [0, 0];
          function applyToMatrix(mat) {
            var _mdf = this._mdf;
            this.iterateDynamicProperties();
            this._mdf = this._mdf || _mdf;
            if (this.a) {
              mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }
            if (this.s) {
              mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }
            if (this.sk) {
              mat.skewFromAxis(-this.sk.v, this.sa.v);
            }
            if (this.r) {
              mat.rotate(-this.r.v);
            } else {
              mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }
            if (this.data.p.s) {
              if (this.data.p.z) {
                mat.translate(this.px.v, this.py.v, -this.pz.v);
              } else {
                mat.translate(this.px.v, this.py.v, 0);
              }
            } else {
              mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
          }
          function processKeys(forceRender) {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            if (this._isDirty) {
              this.precalculateMatrix();
              this._isDirty = false;
            }
            this.iterateDynamicProperties();
            if (this._mdf || forceRender) {
              var frameRate;
              this.v.cloneFromProps(this.pre.props);
              if (this.appliedTransformations < 1) {
                this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
              }
              if (this.appliedTransformations < 2) {
                this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
              }
              if (this.sk && this.appliedTransformations < 3) {
                this.v.skewFromAxis(-this.sk.v, this.sa.v);
              }
              if (this.r && this.appliedTransformations < 4) {
                this.v.rotate(-this.r.v);
              } else if (!this.r && this.appliedTransformations < 4) {
                this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
              }
              if (this.autoOriented) {
                var v1;
                var v2;
                frameRate = this.elem.globalData.frameRate;
                if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                  if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                    v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                    v2 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                  } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                    v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                    v2 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
                  } else {
                    v1 = this.p.pv;
                    v2 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                  }
                } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                  v1 = [];
                  v2 = [];
                  var px = this.px;
                  var py = this.py;
                  if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                    v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                    v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                    v2[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                    v2[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
                  } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                    v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                    v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                    v2[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                    v2[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                  } else {
                    v1 = [px.pv, py.pv];
                    v2[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                    v2[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                  }
                } else {
                  v2 = defaultVector;
                  v1 = v2;
                }
                this.v.rotate(-Math.atan2(v1[1] - v2[1], v1[0] - v2[0]));
              }
              if (this.data.p && this.data.p.s) {
                if (this.data.p.z) {
                  this.v.translate(this.px.v, this.py.v, -this.pz.v);
                } else {
                  this.v.translate(this.px.v, this.py.v, 0);
                }
              } else {
                this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
              }
            }
            this.frameId = this.elem.globalData.frameId;
          }
          function precalculateMatrix() {
            if (!this.a.k) {
              this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
              this.appliedTransformations = 1;
            } else {
              return;
            }
            if (!this.s.effectsSequence.length) {
              this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
              this.appliedTransformations = 2;
            } else {
              return;
            }
            if (this.sk) {
              if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
                this.pre.skewFromAxis(-this.sk.v, this.sa.v);
                this.appliedTransformations = 3;
              } else {
                return;
              }
            }
            if (this.r) {
              if (!this.r.effectsSequence.length) {
                this.pre.rotate(-this.r.v);
                this.appliedTransformations = 4;
              }
            } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
              this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
              this.appliedTransformations = 4;
            }
          }
          function autoOrient() {
          }
          function addDynamicProperty(prop) {
            this._addDynamicProperty(prop);
            this.elem.addDynamicProperty(prop);
            this._isDirty = true;
          }
          function TransformProperty(elem, data, container) {
            this.elem = elem;
            this.frameId = -1;
            this.propType = "transform";
            this.data = data;
            this.v = new Matrix();
            this.pre = new Matrix();
            this.appliedTransformations = 0;
            this.initDynamicPropertyContainer(container || elem);
            if (data.p && data.p.s) {
              this.px = PropertyFactory.getProp(elem, data.p.x, 0, 0, this);
              this.py = PropertyFactory.getProp(elem, data.p.y, 0, 0, this);
              if (data.p.z) {
                this.pz = PropertyFactory.getProp(elem, data.p.z, 0, 0, this);
              }
            } else {
              this.p = PropertyFactory.getProp(elem, data.p || { k: [0, 0, 0] }, 1, 0, this);
            }
            if (data.rx) {
              this.rx = PropertyFactory.getProp(elem, data.rx, 0, degToRads, this);
              this.ry = PropertyFactory.getProp(elem, data.ry, 0, degToRads, this);
              this.rz = PropertyFactory.getProp(elem, data.rz, 0, degToRads, this);
              if (data.or.k[0].ti) {
                var i;
                var len = data.or.k.length;
                for (i = 0; i < len; i += 1) {
                  data.or.k[i].to = null;
                  data.or.k[i].ti = null;
                }
              }
              this.or = PropertyFactory.getProp(elem, data.or, 1, degToRads, this);
              this.or.sh = true;
            } else {
              this.r = PropertyFactory.getProp(elem, data.r || { k: 0 }, 0, degToRads, this);
            }
            if (data.sk) {
              this.sk = PropertyFactory.getProp(elem, data.sk, 0, degToRads, this);
              this.sa = PropertyFactory.getProp(elem, data.sa, 0, degToRads, this);
            }
            this.a = PropertyFactory.getProp(elem, data.a || { k: [0, 0, 0] }, 1, 0, this);
            this.s = PropertyFactory.getProp(elem, data.s || { k: [100, 100, 100] }, 1, 0.01, this);
            if (data.o) {
              this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, elem);
            } else {
              this.o = { _mdf: false, v: 1 };
            }
            this._isDirty = true;
            if (!this.dynamicProperties.length) {
              this.getValue(true);
            }
          }
          TransformProperty.prototype = {
            applyToMatrix,
            getValue: processKeys,
            precalculateMatrix,
            autoOrient
          };
          extendPrototype([DynamicPropertyContainer], TransformProperty);
          TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
          TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
          function getTransformProperty(elem, data, container) {
            return new TransformProperty(elem, data, container);
          }
          return {
            getTransformProperty
          };
        }();
        function ShapePath() {
          this.c = false;
          this._length = 0;
          this._maxLength = 8;
          this.v = createSizedArray(this._maxLength);
          this.o = createSizedArray(this._maxLength);
          this.i = createSizedArray(this._maxLength);
        }
        ShapePath.prototype.setPathData = function(closed, len) {
          this.c = closed;
          this.setLength(len);
          var i = 0;
          while (i < len) {
            this.v[i] = pointPool.newElement();
            this.o[i] = pointPool.newElement();
            this.i[i] = pointPool.newElement();
            i += 1;
          }
        };
        ShapePath.prototype.setLength = function(len) {
          while (this._maxLength < len) {
            this.doubleArrayLength();
          }
          this._length = len;
        };
        ShapePath.prototype.doubleArrayLength = function() {
          this.v = this.v.concat(createSizedArray(this._maxLength));
          this.i = this.i.concat(createSizedArray(this._maxLength));
          this.o = this.o.concat(createSizedArray(this._maxLength));
          this._maxLength *= 2;
        };
        ShapePath.prototype.setXYAt = function(x, y, type, pos, replace) {
          var arr;
          this._length = Math.max(this._length, pos + 1);
          if (this._length >= this._maxLength) {
            this.doubleArrayLength();
          }
          switch (type) {
            case "v":
              arr = this.v;
              break;
            case "i":
              arr = this.i;
              break;
            case "o":
              arr = this.o;
              break;
            default:
              arr = [];
              break;
          }
          if (!arr[pos] || arr[pos] && !replace) {
            arr[pos] = pointPool.newElement();
          }
          arr[pos][0] = x;
          arr[pos][1] = y;
        };
        ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {
          this.setXYAt(vX, vY, "v", pos, replace);
          this.setXYAt(oX, oY, "o", pos, replace);
          this.setXYAt(iX, iY, "i", pos, replace);
        };
        ShapePath.prototype.reverse = function() {
          var newPath = new ShapePath();
          newPath.setPathData(this.c, this._length);
          var vertices = this.v;
          var outPoints = this.o;
          var inPoints = this.i;
          var init = 0;
          if (this.c) {
            newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
            init = 1;
          }
          var cnt = this._length - 1;
          var len = this._length;
          var i;
          for (i = init; i < len; i += 1) {
            newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i, false);
            cnt -= 1;
          }
          return newPath;
        };
        var ShapePropertyFactory = function() {
          var initFrame = -999999;
          function interpolateShape(frameNum, previousValue, caching) {
            var iterationIndex = caching.lastIndex;
            var keyPropS;
            var keyPropE;
            var isHold;
            var j;
            var k;
            var jLen;
            var kLen;
            var perc;
            var vertexValue;
            var kf = this.keyframes;
            if (frameNum < kf[0].t - this.offsetTime) {
              keyPropS = kf[0].s[0];
              isHold = true;
              iterationIndex = 0;
            } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
              keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
              isHold = true;
            } else {
              var i = iterationIndex;
              var len = kf.length - 1;
              var flag = true;
              var keyData;
              var nextKeyData;
              var keyframeMetadata;
              while (flag) {
                keyData = kf[i];
                nextKeyData = kf[i + 1];
                if (nextKeyData.t - this.offsetTime > frameNum) {
                  break;
                }
                if (i < len - 1) {
                  i += 1;
                } else {
                  flag = false;
                }
              }
              keyframeMetadata = this.keyframesMetadata[i] || {};
              isHold = keyData.h === 1;
              iterationIndex = i;
              if (!isHold) {
                if (frameNum >= nextKeyData.t - this.offsetTime) {
                  perc = 1;
                } else if (frameNum < keyData.t - this.offsetTime) {
                  perc = 0;
                } else {
                  var fnc;
                  if (keyframeMetadata.__fnct) {
                    fnc = keyframeMetadata.__fnct;
                  } else {
                    fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                    keyframeMetadata.__fnct = fnc;
                  }
                  perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
                }
                keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
              }
              keyPropS = keyData.s[0];
            }
            jLen = previousValue._length;
            kLen = keyPropS.i[0].length;
            caching.lastIndex = iterationIndex;
            for (j = 0; j < jLen; j += 1) {
              for (k = 0; k < kLen; k += 1) {
                vertexValue = isHold ? keyPropS.i[j][k] : keyPropS.i[j][k] + (keyPropE.i[j][k] - keyPropS.i[j][k]) * perc;
                previousValue.i[j][k] = vertexValue;
                vertexValue = isHold ? keyPropS.o[j][k] : keyPropS.o[j][k] + (keyPropE.o[j][k] - keyPropS.o[j][k]) * perc;
                previousValue.o[j][k] = vertexValue;
                vertexValue = isHold ? keyPropS.v[j][k] : keyPropS.v[j][k] + (keyPropE.v[j][k] - keyPropS.v[j][k]) * perc;
                previousValue.v[j][k] = vertexValue;
              }
            }
          }
          function interpolateShapeCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            var lastFrame = this._caching.lastFrame;
            if (!(lastFrame !== initFrame && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
              this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
              this.interpolateShape(frameNum, this.pv, this._caching);
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
          }
          function resetShape() {
            this.paths = this.localShapeCollection;
          }
          function shapesEqual(shape1, shape2) {
            if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
              return false;
            }
            var i;
            var len = shape1._length;
            for (i = 0; i < len; i += 1) {
              if (shape1.v[i][0] !== shape2.v[i][0] || shape1.v[i][1] !== shape2.v[i][1] || shape1.o[i][0] !== shape2.o[i][0] || shape1.o[i][1] !== shape2.o[i][1] || shape1.i[i][0] !== shape2.i[i][0] || shape1.i[i][1] !== shape2.i[i][1]) {
                return false;
              }
            }
            return true;
          }
          function setVValue(newPath) {
            if (!shapesEqual(this.v, newPath)) {
              this.v = shapePool.clone(newPath);
              this.localShapeCollection.releaseShapes();
              this.localShapeCollection.addShape(this.v);
              this._mdf = true;
              this.paths = this.localShapeCollection;
            }
          }
          function processEffectsSequence() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            if (!this.effectsSequence.length) {
              this._mdf = false;
              return;
            }
            if (this.lock) {
              this.setVValue(this.pv);
              return;
            }
            this.lock = true;
            this._mdf = false;
            var finalValue;
            if (this.kf) {
              finalValue = this.pv;
            } else if (this.data.ks) {
              finalValue = this.data.ks.k;
            } else {
              finalValue = this.data.pt.k;
            }
            var i;
            var len = this.effectsSequence.length;
            for (i = 0; i < len; i += 1) {
              finalValue = this.effectsSequence[i](finalValue);
            }
            this.setVValue(finalValue);
            this.lock = false;
            this.frameId = this.elem.globalData.frameId;
          }
          function ShapeProperty(elem, data, type) {
            this.propType = "shape";
            this.comp = elem.comp;
            this.container = elem;
            this.elem = elem;
            this.data = data;
            this.k = false;
            this.kf = false;
            this._mdf = false;
            var pathData = type === 3 ? data.pt.k : data.ks.k;
            this.v = shapePool.clone(pathData);
            this.pv = shapePool.clone(this.v);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.reset = resetShape;
            this.effectsSequence = [];
          }
          function addEffect(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
          }
          ShapeProperty.prototype.interpolateShape = interpolateShape;
          ShapeProperty.prototype.getValue = processEffectsSequence;
          ShapeProperty.prototype.setVValue = setVValue;
          ShapeProperty.prototype.addEffect = addEffect;
          function KeyframedShapeProperty(elem, data, type) {
            this.propType = "shape";
            this.comp = elem.comp;
            this.elem = elem;
            this.container = elem;
            this.offsetTime = elem.data.st;
            this.keyframes = type === 3 ? data.pt.k : data.ks.k;
            this.keyframesMetadata = [];
            this.k = true;
            this.kf = true;
            var len = this.keyframes[0].s[0].i.length;
            this.v = shapePool.newElement();
            this.v.setPathData(this.keyframes[0].s[0].c, len);
            this.pv = shapePool.clone(this.v);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.lastFrame = initFrame;
            this.reset = resetShape;
            this._caching = { lastFrame: initFrame, lastIndex: 0 };
            this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
          }
          KeyframedShapeProperty.prototype.getValue = processEffectsSequence;
          KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
          KeyframedShapeProperty.prototype.setVValue = setVValue;
          KeyframedShapeProperty.prototype.addEffect = addEffect;
          var EllShapeProperty = function() {
            var cPoint = roundCorner;
            function EllShapePropertyFactory(elem, data) {
              this.v = shapePool.newElement();
              this.v.setPathData(true, 4);
              this.localShapeCollection = shapeCollectionPool.newShapeCollection();
              this.paths = this.localShapeCollection;
              this.localShapeCollection.addShape(this.v);
              this.d = data.d;
              this.elem = elem;
              this.comp = elem.comp;
              this.frameId = -1;
              this.initDynamicPropertyContainer(elem);
              this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
              this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.k = false;
                this.convertEllToPath();
              }
            }
            EllShapePropertyFactory.prototype = {
              reset: resetShape,
              getValue: function() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if (this._mdf) {
                  this.convertEllToPath();
                }
              },
              convertEllToPath: function() {
                var p0 = this.p.v[0];
                var p1 = this.p.v[1];
                var s0 = this.s.v[0] / 2;
                var s1 = this.s.v[1] / 2;
                var _cw = this.d !== 3;
                var _v = this.v;
                _v.v[0][0] = p0;
                _v.v[0][1] = p1 - s1;
                _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.v[1][1] = p1;
                _v.v[2][0] = p0;
                _v.v[2][1] = p1 + s1;
                _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.v[3][1] = p1;
                _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                _v.i[0][1] = p1 - s1;
                _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.i[1][1] = p1 - s1 * cPoint;
                _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                _v.i[2][1] = p1 + s1;
                _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.i[3][1] = p1 + s1 * cPoint;
                _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                _v.o[0][1] = p1 - s1;
                _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.o[1][1] = p1 + s1 * cPoint;
                _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                _v.o[2][1] = p1 + s1;
                _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.o[3][1] = p1 - s1 * cPoint;
              }
            };
            extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
            return EllShapePropertyFactory;
          }();
          var StarShapeProperty = function() {
            function StarShapePropertyFactory(elem, data) {
              this.v = shapePool.newElement();
              this.v.setPathData(true, 0);
              this.elem = elem;
              this.comp = elem.comp;
              this.data = data;
              this.frameId = -1;
              this.d = data.d;
              this.initDynamicPropertyContainer(elem);
              if (data.sy === 1) {
                this.ir = PropertyFactory.getProp(elem, data.ir, 0, 0, this);
                this.is = PropertyFactory.getProp(elem, data.is, 0, 0.01, this);
                this.convertToPath = this.convertStarToPath;
              } else {
                this.convertToPath = this.convertPolygonToPath;
              }
              this.pt = PropertyFactory.getProp(elem, data.pt, 0, 0, this);
              this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
              this.r = PropertyFactory.getProp(elem, data.r, 0, degToRads, this);
              this.or = PropertyFactory.getProp(elem, data.or, 0, 0, this);
              this.os = PropertyFactory.getProp(elem, data.os, 0, 0.01, this);
              this.localShapeCollection = shapeCollectionPool.newShapeCollection();
              this.localShapeCollection.addShape(this.v);
              this.paths = this.localShapeCollection;
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.k = false;
                this.convertToPath();
              }
            }
            StarShapePropertyFactory.prototype = {
              reset: resetShape,
              getValue: function() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if (this._mdf) {
                  this.convertToPath();
                }
              },
              convertStarToPath: function() {
                var numPts = Math.floor(this.pt.v) * 2;
                var angle = Math.PI * 2 / numPts;
                var longFlag = true;
                var longRad = this.or.v;
                var shortRad = this.ir.v;
                var longRound = this.os.v;
                var shortRound = this.is.v;
                var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
                var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
                var i;
                var rad;
                var roundness;
                var perimSegment;
                var currentAng = -Math.PI / 2;
                currentAng += this.r.v;
                var dir = this.data.d === 3 ? -1 : 1;
                this.v._length = 0;
                for (i = 0; i < numPts; i += 1) {
                  rad = longFlag ? longRad : shortRad;
                  roundness = longFlag ? longRound : shortRound;
                  perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                  var x = rad * Math.cos(currentAng);
                  var y = rad * Math.sin(currentAng);
                  var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                  var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                  x += +this.p.v[0];
                  y += +this.p.v[1];
                  this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                  longFlag = !longFlag;
                  currentAng += angle * dir;
                }
              },
              convertPolygonToPath: function() {
                var numPts = Math.floor(this.pt.v);
                var angle = Math.PI * 2 / numPts;
                var rad = this.or.v;
                var roundness = this.os.v;
                var perimSegment = 2 * Math.PI * rad / (numPts * 4);
                var i;
                var currentAng = -Math.PI * 0.5;
                var dir = this.data.d === 3 ? -1 : 1;
                currentAng += this.r.v;
                this.v._length = 0;
                for (i = 0; i < numPts; i += 1) {
                  var x = rad * Math.cos(currentAng);
                  var y = rad * Math.sin(currentAng);
                  var ox = x === 0 && y === 0 ? 0 : y / Math.sqrt(x * x + y * y);
                  var oy = x === 0 && y === 0 ? 0 : -x / Math.sqrt(x * x + y * y);
                  x += +this.p.v[0];
                  y += +this.p.v[1];
                  this.v.setTripleAt(x, y, x - ox * perimSegment * roundness * dir, y - oy * perimSegment * roundness * dir, x + ox * perimSegment * roundness * dir, y + oy * perimSegment * roundness * dir, i, true);
                  currentAng += angle * dir;
                }
                this.paths.length = 0;
                this.paths[0] = this.v;
              }
            };
            extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
            return StarShapePropertyFactory;
          }();
          var RectShapeProperty = function() {
            function RectShapePropertyFactory(elem, data) {
              this.v = shapePool.newElement();
              this.v.c = true;
              this.localShapeCollection = shapeCollectionPool.newShapeCollection();
              this.localShapeCollection.addShape(this.v);
              this.paths = this.localShapeCollection;
              this.elem = elem;
              this.comp = elem.comp;
              this.frameId = -1;
              this.d = data.d;
              this.initDynamicPropertyContainer(elem);
              this.p = PropertyFactory.getProp(elem, data.p, 1, 0, this);
              this.s = PropertyFactory.getProp(elem, data.s, 1, 0, this);
              this.r = PropertyFactory.getProp(elem, data.r, 0, 0, this);
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.k = false;
                this.convertRectToPath();
              }
            }
            RectShapePropertyFactory.prototype = {
              convertRectToPath: function() {
                var p0 = this.p.v[0];
                var p1 = this.p.v[1];
                var v0 = this.s.v[0] / 2;
                var v1 = this.s.v[1] / 2;
                var round = bmMin(v0, v1, this.r.v);
                var cPoint = round * (1 - roundCorner);
                this.v._length = 0;
                if (this.d === 2 || this.d === 1) {
                  this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                  this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);
                  if (round !== 0) {
                    this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                    this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                    this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                    this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                  } else {
                    this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                    this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                  }
                } else {
                  this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);
                  if (round !== 0) {
                    this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                    this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                    this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                    this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                    this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                  } else {
                    this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                    this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                    this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
                  }
                }
              },
              getValue: function() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if (this._mdf) {
                  this.convertRectToPath();
                }
              },
              reset: resetShape
            };
            extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
            return RectShapePropertyFactory;
          }();
          function getShapeProp(elem, data, type) {
            var prop;
            if (type === 3 || type === 4) {
              var dataProp = type === 3 ? data.pt : data.ks;
              var keys = dataProp.k;
              if (keys.length) {
                prop = new KeyframedShapeProperty(elem, data, type);
              } else {
                prop = new ShapeProperty(elem, data, type);
              }
            } else if (type === 5) {
              prop = new RectShapeProperty(elem, data);
            } else if (type === 6) {
              prop = new EllShapeProperty(elem, data);
            } else if (type === 7) {
              prop = new StarShapeProperty(elem, data);
            }
            if (prop.k) {
              elem.addDynamicProperty(prop);
            }
            return prop;
          }
          function getConstructorFunction() {
            return ShapeProperty;
          }
          function getKeyframedConstructorFunction() {
            return KeyframedShapeProperty;
          }
          var ob = {};
          ob.getShapeProp = getShapeProp;
          ob.getConstructorFunction = getConstructorFunction;
          ob.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
          return ob;
        }();
        var ShapeModifiers = function() {
          var ob = {};
          var modifiers = {};
          ob.registerModifier = registerModifier;
          ob.getModifier = getModifier;
          function registerModifier(nm, factory) {
            if (!modifiers[nm]) {
              modifiers[nm] = factory;
            }
          }
          function getModifier(nm, elem, data) {
            return new modifiers[nm](elem, data);
          }
          return ob;
        }();
        function ShapeModifier() {
        }
        ShapeModifier.prototype.initModifierProperties = function() {
        };
        ShapeModifier.prototype.addShapeToModifier = function() {
        };
        ShapeModifier.prototype.addShape = function(data) {
          if (!this.closed) {
            data.sh.container.addDynamicProperty(data.sh);
            var shapeData = { shape: data.sh, data, localShapeCollection: shapeCollectionPool.newShapeCollection() };
            this.shapes.push(shapeData);
            this.addShapeToModifier(shapeData);
            if (this._isAnimated) {
              data.setAsAnimated();
            }
          }
        };
        ShapeModifier.prototype.init = function(elem, data) {
          this.shapes = [];
          this.elem = elem;
          this.initDynamicPropertyContainer(elem);
          this.initModifierProperties(elem, data);
          this.frameId = initialDefaultFrame;
          this.closed = false;
          this.k = false;
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.getValue(true);
          }
        };
        ShapeModifier.prototype.processKeys = function() {
          if (this.elem.globalData.frameId === this.frameId) {
            return;
          }
          this.frameId = this.elem.globalData.frameId;
          this.iterateDynamicProperties();
        };
        extendPrototype([DynamicPropertyContainer], ShapeModifier);
        function TrimModifier() {
        }
        extendPrototype([ShapeModifier], TrimModifier);
        TrimModifier.prototype.initModifierProperties = function(elem, data) {
          this.s = PropertyFactory.getProp(elem, data.s, 0, 0.01, this);
          this.e = PropertyFactory.getProp(elem, data.e, 0, 0.01, this);
          this.o = PropertyFactory.getProp(elem, data.o, 0, 0, this);
          this.sValue = 0;
          this.eValue = 0;
          this.getValue = this.processKeys;
          this.m = data.m;
          this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
        };
        TrimModifier.prototype.addShapeToModifier = function(shapeData) {
          shapeData.pathsData = [];
        };
        TrimModifier.prototype.calculateShapeEdges = function(s, e, shapeLength, addedLength, totalModifierLength) {
          var segments = [];
          if (e <= 1) {
            segments.push({
              s,
              e
            });
          } else if (s >= 1) {
            segments.push({
              s: s - 1,
              e: e - 1
            });
          } else {
            segments.push({
              s,
              e: 1
            });
            segments.push({
              s: 0,
              e: e - 1
            });
          }
          var shapeSegments = [];
          var i;
          var len = segments.length;
          var segmentOb;
          for (i = 0; i < len; i += 1) {
            segmentOb = segments[i];
            if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
              var shapeS;
              var shapeE;
              if (segmentOb.s * totalModifierLength <= addedLength) {
                shapeS = 0;
              } else {
                shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
              }
              if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
                shapeE = 1;
              } else {
                shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
              }
              shapeSegments.push([shapeS, shapeE]);
            }
          }
          if (!shapeSegments.length) {
            shapeSegments.push([0, 0]);
          }
          return shapeSegments;
        };
        TrimModifier.prototype.releasePathsData = function(pathsData) {
          var i;
          var len = pathsData.length;
          for (i = 0; i < len; i += 1) {
            segmentsLengthPool.release(pathsData[i]);
          }
          pathsData.length = 0;
          return pathsData;
        };
        TrimModifier.prototype.processShapes = function(_isFirstFrame) {
          var s;
          var e;
          if (this._mdf || _isFirstFrame) {
            var o = this.o.v % 360 / 360;
            if (o < 0) {
              o += 1;
            }
            if (this.s.v > 1) {
              s = 1 + o;
            } else if (this.s.v < 0) {
              s = 0 + o;
            } else {
              s = this.s.v + o;
            }
            if (this.e.v > 1) {
              e = 1 + o;
            } else if (this.e.v < 0) {
              e = 0 + o;
            } else {
              e = this.e.v + o;
            }
            if (s > e) {
              var _s = s;
              s = e;
              e = _s;
            }
            s = Math.round(s * 1e4) * 1e-4;
            e = Math.round(e * 1e4) * 1e-4;
            this.sValue = s;
            this.eValue = e;
          } else {
            s = this.sValue;
            e = this.eValue;
          }
          var shapePaths;
          var i;
          var len = this.shapes.length;
          var j;
          var jLen;
          var pathsData;
          var pathData;
          var totalShapeLength;
          var totalModifierLength = 0;
          if (e === s) {
            for (i = 0; i < len; i += 1) {
              this.shapes[i].localShapeCollection.releaseShapes();
              this.shapes[i].shape._mdf = true;
              this.shapes[i].shape.paths = this.shapes[i].localShapeCollection;
              if (this._mdf) {
                this.shapes[i].pathsData.length = 0;
              }
            }
          } else if (!(e === 1 && s === 0 || e === 0 && s === 1)) {
            var segments = [];
            var shapeData;
            var localShapeCollection;
            for (i = 0; i < len; i += 1) {
              shapeData = this.shapes[i];
              if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
                shapeData.shape.paths = shapeData.localShapeCollection;
              } else {
                shapePaths = shapeData.shape.paths;
                jLen = shapePaths._length;
                totalShapeLength = 0;
                if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                  totalShapeLength = shapeData.totalShapeLength;
                } else {
                  pathsData = this.releasePathsData(shapeData.pathsData);
                  for (j = 0; j < jLen; j += 1) {
                    pathData = bez.getSegmentsLength(shapePaths.shapes[j]);
                    pathsData.push(pathData);
                    totalShapeLength += pathData.totalLength;
                  }
                  shapeData.totalShapeLength = totalShapeLength;
                  shapeData.pathsData = pathsData;
                }
                totalModifierLength += totalShapeLength;
                shapeData.shape._mdf = true;
              }
            }
            var shapeS = s;
            var shapeE = e;
            var addedLength = 0;
            var edges;
            for (i = len - 1; i >= 0; i -= 1) {
              shapeData = this.shapes[i];
              if (shapeData.shape._mdf) {
                localShapeCollection = shapeData.localShapeCollection;
                localShapeCollection.releaseShapes();
                if (this.m === 2 && len > 1) {
                  edges = this.calculateShapeEdges(s, e, shapeData.totalShapeLength, addedLength, totalModifierLength);
                  addedLength += shapeData.totalShapeLength;
                } else {
                  edges = [[shapeS, shapeE]];
                }
                jLen = edges.length;
                for (j = 0; j < jLen; j += 1) {
                  shapeS = edges[j][0];
                  shapeE = edges[j][1];
                  segments.length = 0;
                  if (shapeE <= 1) {
                    segments.push({
                      s: shapeData.totalShapeLength * shapeS,
                      e: shapeData.totalShapeLength * shapeE
                    });
                  } else if (shapeS >= 1) {
                    segments.push({
                      s: shapeData.totalShapeLength * (shapeS - 1),
                      e: shapeData.totalShapeLength * (shapeE - 1)
                    });
                  } else {
                    segments.push({
                      s: shapeData.totalShapeLength * shapeS,
                      e: shapeData.totalShapeLength
                    });
                    segments.push({
                      s: 0,
                      e: shapeData.totalShapeLength * (shapeE - 1)
                    });
                  }
                  var newShapesData = this.addShapes(shapeData, segments[0]);
                  if (segments[0].s !== segments[0].e) {
                    if (segments.length > 1) {
                      var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                      if (lastShapeInCollection.c) {
                        var lastShape = newShapesData.pop();
                        this.addPaths(newShapesData, localShapeCollection);
                        newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                      } else {
                        this.addPaths(newShapesData, localShapeCollection);
                        newShapesData = this.addShapes(shapeData, segments[1]);
                      }
                    }
                    this.addPaths(newShapesData, localShapeCollection);
                  }
                }
                shapeData.shape.paths = localShapeCollection;
              }
            }
          } else if (this._mdf) {
            for (i = 0; i < len; i += 1) {
              this.shapes[i].pathsData.length = 0;
              this.shapes[i].shape._mdf = true;
            }
          }
        };
        TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
          var i;
          var len = newPaths.length;
          for (i = 0; i < len; i += 1) {
            localShapeCollection.addShape(newPaths[i]);
          }
        };
        TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
          shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
          shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
          if (newShape) {
            shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
          }
          shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
        };
        TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
          shapePath.setXYAt(points[1], points[5], "o", pos);
          shapePath.setXYAt(points[2], points[6], "i", pos + 1);
          if (newShape) {
            shapePath.setXYAt(points[0], points[4], "v", pos);
          }
          shapePath.setXYAt(points[3], points[7], "v", pos + 1);
        };
        TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
          var pathsData = shapeData.pathsData;
          var shapePaths = shapeData.shape.paths.shapes;
          var i;
          var len = shapeData.shape.paths._length;
          var j;
          var jLen;
          var addedLength = 0;
          var currentLengthData;
          var segmentCount;
          var lengths;
          var segment;
          var shapes = [];
          var initPos;
          var newShape = true;
          if (!shapePath) {
            shapePath = shapePool.newElement();
            segmentCount = 0;
            initPos = 0;
          } else {
            segmentCount = shapePath._length;
            initPos = shapePath._length;
          }
          shapes.push(shapePath);
          for (i = 0; i < len; i += 1) {
            lengths = pathsData[i].lengths;
            shapePath.c = shapePaths[i].c;
            jLen = shapePaths[i].c ? lengths.length : lengths.length + 1;
            for (j = 1; j < jLen; j += 1) {
              currentLengthData = lengths[j - 1];
              if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
                addedLength += currentLengthData.addedLength;
                shapePath.c = false;
              } else if (addedLength > shapeSegment.e) {
                shapePath.c = false;
                break;
              } else {
                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                  this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[j], shapePaths[i].v[j], shapePath, segmentCount, newShape);
                  newShape = false;
                } else {
                  segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[j], shapePaths[i].o[j - 1], shapePaths[i].i[j], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j - 1]);
                  this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                  newShape = false;
                  shapePath.c = false;
                }
                addedLength += currentLengthData.addedLength;
                segmentCount += 1;
              }
            }
            if (shapePaths[i].c && lengths.length) {
              currentLengthData = lengths[j - 1];
              if (addedLength <= shapeSegment.e) {
                var segmentLength = lengths[j - 1].addedLength;
                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                  this.addSegment(shapePaths[i].v[j - 1], shapePaths[i].o[j - 1], shapePaths[i].i[0], shapePaths[i].v[0], shapePath, segmentCount, newShape);
                  newShape = false;
                } else {
                  segment = bez.getNewSegment(shapePaths[i].v[j - 1], shapePaths[i].v[0], shapePaths[i].o[j - 1], shapePaths[i].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j - 1]);
                  this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                  newShape = false;
                  shapePath.c = false;
                }
              } else {
                shapePath.c = false;
              }
              addedLength += currentLengthData.addedLength;
              segmentCount += 1;
            }
            if (shapePath._length) {
              shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], "i", initPos);
              shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], "o", shapePath._length - 1);
            }
            if (addedLength > shapeSegment.e) {
              break;
            }
            if (i < len - 1) {
              shapePath = shapePool.newElement();
              newShape = true;
              shapes.push(shapePath);
              segmentCount = 0;
            }
          }
          return shapes;
        };
        ShapeModifiers.registerModifier("tm", TrimModifier);
        function RoundCornersModifier() {
        }
        extendPrototype([ShapeModifier], RoundCornersModifier);
        RoundCornersModifier.prototype.initModifierProperties = function(elem, data) {
          this.getValue = this.processKeys;
          this.rd = PropertyFactory.getProp(elem, data.r, 0, null, this);
          this._isAnimated = !!this.rd.effectsSequence.length;
        };
        RoundCornersModifier.prototype.processPath = function(path, round) {
          var clonedPath = shapePool.newElement();
          clonedPath.c = path.c;
          var i;
          var len = path._length;
          var currentV;
          var currentI;
          var currentO;
          var closerV;
          var distance;
          var newPosPerc;
          var index2 = 0;
          var vX;
          var vY;
          var oX;
          var oY;
          var iX;
          var iY;
          for (i = 0; i < len; i += 1) {
            currentV = path.v[i];
            currentO = path.o[i];
            currentI = path.i[i];
            if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
              if ((i === 0 || i === len - 1) && !path.c) {
                clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index2);
                index2 += 1;
              } else {
                if (i === 0) {
                  closerV = path.v[len - 1];
                } else {
                  closerV = path.v[i - 1];
                }
                distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                vX = iX;
                iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
                vY = iY;
                oX = vX - (vX - currentV[0]) * roundCorner;
                oY = vY - (vY - currentV[1]) * roundCorner;
                clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
                index2 += 1;
                if (i === len - 1) {
                  closerV = path.v[0];
                } else {
                  closerV = path.v[i + 1];
                }
                distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                vX = oX;
                oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
                vY = oY;
                iX = vX - (vX - currentV[0]) * roundCorner;
                iY = vY - (vY - currentV[1]) * roundCorner;
                clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
                index2 += 1;
              }
            } else {
              clonedPath.setTripleAt(path.v[i][0], path.v[i][1], path.o[i][0], path.o[i][1], path.i[i][0], path.i[i][1], index2);
              index2 += 1;
            }
          }
          return clonedPath;
        };
        RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
          var shapePaths;
          var i;
          var len = this.shapes.length;
          var j;
          var jLen;
          var rd = this.rd.v;
          if (rd !== 0) {
            var shapeData;
            var localShapeCollection;
            for (i = 0; i < len; i += 1) {
              shapeData = this.shapes[i];
              localShapeCollection = shapeData.localShapeCollection;
              if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for (j = 0; j < jLen; j += 1) {
                  localShapeCollection.addShape(this.processPath(shapePaths[j], rd));
                }
              }
              shapeData.shape.paths = shapeData.localShapeCollection;
            }
          }
          if (!this.dynamicProperties.length) {
            this._mdf = false;
          }
        };
        ShapeModifiers.registerModifier("rd", RoundCornersModifier);
        function PuckerAndBloatModifier() {
        }
        extendPrototype([ShapeModifier], PuckerAndBloatModifier);
        PuckerAndBloatModifier.prototype.initModifierProperties = function(elem, data) {
          this.getValue = this.processKeys;
          this.amount = PropertyFactory.getProp(elem, data.a, 0, null, this);
          this._isAnimated = !!this.amount.effectsSequence.length;
        };
        PuckerAndBloatModifier.prototype.processPath = function(path, amount) {
          var percent = amount / 100;
          var centerPoint = [0, 0];
          var pathLength = path._length;
          var i = 0;
          for (i = 0; i < pathLength; i += 1) {
            centerPoint[0] += path.v[i][0];
            centerPoint[1] += path.v[i][1];
          }
          centerPoint[0] /= pathLength;
          centerPoint[1] /= pathLength;
          var clonedPath = shapePool.newElement();
          clonedPath.c = path.c;
          var vX;
          var vY;
          var oX;
          var oY;
          var iX;
          var iY;
          for (i = 0; i < pathLength; i += 1) {
            vX = path.v[i][0] + (centerPoint[0] - path.v[i][0]) * percent;
            vY = path.v[i][1] + (centerPoint[1] - path.v[i][1]) * percent;
            oX = path.o[i][0] + (centerPoint[0] - path.o[i][0]) * -percent;
            oY = path.o[i][1] + (centerPoint[1] - path.o[i][1]) * -percent;
            iX = path.i[i][0] + (centerPoint[0] - path.i[i][0]) * -percent;
            iY = path.i[i][1] + (centerPoint[1] - path.i[i][1]) * -percent;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i);
          }
          return clonedPath;
        };
        PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {
          var shapePaths;
          var i;
          var len = this.shapes.length;
          var j;
          var jLen;
          var amount = this.amount.v;
          if (amount !== 0) {
            var shapeData;
            var localShapeCollection;
            for (i = 0; i < len; i += 1) {
              shapeData = this.shapes[i];
              localShapeCollection = shapeData.localShapeCollection;
              if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for (j = 0; j < jLen; j += 1) {
                  localShapeCollection.addShape(this.processPath(shapePaths[j], amount));
                }
              }
              shapeData.shape.paths = shapeData.localShapeCollection;
            }
          }
          if (!this.dynamicProperties.length) {
            this._mdf = false;
          }
        };
        ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
        function RepeaterModifier() {
        }
        extendPrototype([ShapeModifier], RepeaterModifier);
        RepeaterModifier.prototype.initModifierProperties = function(elem, data) {
          this.getValue = this.processKeys;
          this.c = PropertyFactory.getProp(elem, data.c, 0, null, this);
          this.o = PropertyFactory.getProp(elem, data.o, 0, null, this);
          this.tr = TransformPropertyFactory.getTransformProperty(elem, data.tr, this);
          this.so = PropertyFactory.getProp(elem, data.tr.so, 0, 0.01, this);
          this.eo = PropertyFactory.getProp(elem, data.tr.eo, 0, 0.01, this);
          this.data = data;
          if (!this.dynamicProperties.length) {
            this.getValue(true);
          }
          this._isAnimated = !!this.dynamicProperties.length;
          this.pMatrix = new Matrix();
          this.rMatrix = new Matrix();
          this.sMatrix = new Matrix();
          this.tMatrix = new Matrix();
          this.matrix = new Matrix();
        };
        RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform, perc, inv) {
          var dir = inv ? -1 : 1;
          var scaleX = transform.s.v[0] + (1 - transform.s.v[0]) * (1 - perc);
          var scaleY = transform.s.v[1] + (1 - transform.s.v[1]) * (1 - perc);
          pMatrix.translate(transform.p.v[0] * dir * perc, transform.p.v[1] * dir * perc, transform.p.v[2]);
          rMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
          rMatrix.rotate(-transform.r.v * dir * perc);
          rMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
          sMatrix.translate(-transform.a.v[0], -transform.a.v[1], transform.a.v[2]);
          sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
          sMatrix.translate(transform.a.v[0], transform.a.v[1], transform.a.v[2]);
        };
        RepeaterModifier.prototype.init = function(elem, arr, pos, elemsData) {
          this.elem = elem;
          this.arr = arr;
          this.pos = pos;
          this.elemsData = elemsData;
          this._currentCopies = 0;
          this._elements = [];
          this._groups = [];
          this.frameId = -1;
          this.initDynamicPropertyContainer(elem);
          this.initModifierProperties(elem, arr[pos]);
          while (pos > 0) {
            pos -= 1;
            this._elements.unshift(arr[pos]);
          }
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.getValue(true);
          }
        };
        RepeaterModifier.prototype.resetElements = function(elements) {
          var i;
          var len = elements.length;
          for (i = 0; i < len; i += 1) {
            elements[i]._processed = false;
            if (elements[i].ty === "gr") {
              this.resetElements(elements[i].it);
            }
          }
        };
        RepeaterModifier.prototype.cloneElements = function(elements) {
          var newElements = JSON.parse(JSON.stringify(elements));
          this.resetElements(newElements);
          return newElements;
        };
        RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
          var i;
          var len = elements.length;
          for (i = 0; i < len; i += 1) {
            elements[i]._render = renderFlag;
            if (elements[i].ty === "gr") {
              this.changeGroupRender(elements[i].it, renderFlag);
            }
          }
        };
        RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
          var items;
          var itemsTransform;
          var i;
          var dir;
          var cont;
          var hasReloaded = false;
          if (this._mdf || _isFirstFrame) {
            var copies = Math.ceil(this.c.v);
            if (this._groups.length < copies) {
              while (this._groups.length < copies) {
                var group = {
                  it: this.cloneElements(this._elements),
                  ty: "gr"
                };
                group.it.push({
                  a: { a: 0, ix: 1, k: [0, 0] },
                  nm: "Transform",
                  o: { a: 0, ix: 7, k: 100 },
                  p: { a: 0, ix: 2, k: [0, 0] },
                  r: { a: 1, ix: 6, k: [{ s: 0, e: 0, t: 0 }, { s: 0, e: 0, t: 1 }] },
                  s: { a: 0, ix: 3, k: [100, 100] },
                  sa: { a: 0, ix: 5, k: 0 },
                  sk: { a: 0, ix: 4, k: 0 },
                  ty: "tr"
                });
                this.arr.splice(0, 0, group);
                this._groups.splice(0, 0, group);
                this._currentCopies += 1;
              }
              this.elem.reloadShapes();
              hasReloaded = true;
            }
            cont = 0;
            var renderFlag;
            for (i = 0; i <= this._groups.length - 1; i += 1) {
              renderFlag = cont < copies;
              this._groups[i]._render = renderFlag;
              this.changeGroupRender(this._groups[i].it, renderFlag);
              if (!renderFlag) {
                var elems = this.elemsData[i].it;
                var transformData = elems[elems.length - 1];
                if (transformData.transform.op.v !== 0) {
                  transformData.transform.op._mdf = true;
                  transformData.transform.op.v = 0;
                } else {
                  transformData.transform.op._mdf = false;
                }
              }
              cont += 1;
            }
            this._currentCopies = copies;
            var offset = this.o.v;
            var offsetModulo = offset % 1;
            var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
            var pProps = this.pMatrix.props;
            var rProps = this.rMatrix.props;
            var sProps = this.sMatrix.props;
            this.pMatrix.reset();
            this.rMatrix.reset();
            this.sMatrix.reset();
            this.tMatrix.reset();
            this.matrix.reset();
            var iteration = 0;
            if (offset > 0) {
              while (iteration < roundOffset) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                iteration += 1;
              }
              if (offsetModulo) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
                iteration += offsetModulo;
              }
            } else if (offset < 0) {
              while (iteration > roundOffset) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
                iteration -= 1;
              }
              if (offsetModulo) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
                iteration -= offsetModulo;
              }
            }
            i = this.data.m === 1 ? 0 : this._currentCopies - 1;
            dir = this.data.m === 1 ? 1 : -1;
            cont = this._currentCopies;
            var j;
            var jLen;
            while (cont) {
              items = this.elemsData[i].it;
              itemsTransform = items[items.length - 1].transform.mProps.v.props;
              jLen = itemsTransform.length;
              items[items.length - 1].transform.mProps._mdf = true;
              items[items.length - 1].transform.op._mdf = true;
              items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1));
              if (iteration !== 0) {
                if (i !== 0 && dir === 1 || i !== this._currentCopies - 1 && dir === -1) {
                  this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                }
                this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
                this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
                this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
                for (j = 0; j < jLen; j += 1) {
                  itemsTransform[j] = this.matrix.props[j];
                }
                this.matrix.reset();
              } else {
                this.matrix.reset();
                for (j = 0; j < jLen; j += 1) {
                  itemsTransform[j] = this.matrix.props[j];
                }
              }
              iteration += 1;
              cont -= 1;
              i += dir;
            }
          } else {
            cont = this._currentCopies;
            i = 0;
            dir = 1;
            while (cont) {
              items = this.elemsData[i].it;
              itemsTransform = items[items.length - 1].transform.mProps.v.props;
              items[items.length - 1].transform.mProps._mdf = false;
              items[items.length - 1].transform.op._mdf = false;
              cont -= 1;
              i += dir;
            }
          }
          return hasReloaded;
        };
        RepeaterModifier.prototype.addShape = function() {
        };
        ShapeModifiers.registerModifier("rp", RepeaterModifier);
        function ShapeCollection() {
          this._length = 0;
          this._maxLength = 4;
          this.shapes = createSizedArray(this._maxLength);
        }
        ShapeCollection.prototype.addShape = function(shapeData) {
          if (this._length === this._maxLength) {
            this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
            this._maxLength *= 2;
          }
          this.shapes[this._length] = shapeData;
          this._length += 1;
        };
        ShapeCollection.prototype.releaseShapes = function() {
          var i;
          for (i = 0; i < this._length; i += 1) {
            shapePool.release(this.shapes[i]);
          }
          this._length = 0;
        };
        function DashProperty(elem, data, renderer2, container) {
          this.elem = elem;
          this.frameId = -1;
          this.dataProps = createSizedArray(data.length);
          this.renderer = renderer2;
          this.k = false;
          this.dashStr = "";
          this.dashArray = createTypedArray("float32", data.length ? data.length - 1 : 0);
          this.dashoffset = createTypedArray("float32", 1);
          this.initDynamicPropertyContainer(container);
          var i;
          var len = data.length || 0;
          var prop;
          for (i = 0; i < len; i += 1) {
            prop = PropertyFactory.getProp(elem, data[i].v, 0, 0, this);
            this.k = prop.k || this.k;
            this.dataProps[i] = { n: data[i].n, p: prop };
          }
          if (!this.k) {
            this.getValue(true);
          }
          this._isAnimated = this.k;
        }
        DashProperty.prototype.getValue = function(forceRender) {
          if (this.elem.globalData.frameId === this.frameId && !forceRender) {
            return;
          }
          this.frameId = this.elem.globalData.frameId;
          this.iterateDynamicProperties();
          this._mdf = this._mdf || forceRender;
          if (this._mdf) {
            var i = 0;
            var len = this.dataProps.length;
            if (this.renderer === "svg") {
              this.dashStr = "";
            }
            for (i = 0; i < len; i += 1) {
              if (this.dataProps[i].n !== "o") {
                if (this.renderer === "svg") {
                  this.dashStr += " " + this.dataProps[i].p.v;
                } else {
                  this.dashArray[i] = this.dataProps[i].p.v;
                }
              } else {
                this.dashoffset[0] = this.dataProps[i].p.v;
              }
            }
          }
        };
        extendPrototype([DynamicPropertyContainer], DashProperty);
        function GradientProperty(elem, data, container) {
          this.data = data;
          this.c = createTypedArray("uint8c", data.p * 4);
          var cLength = data.k.k[0].s ? data.k.k[0].s.length - data.p * 4 : data.k.k.length - data.p * 4;
          this.o = createTypedArray("float32", cLength);
          this._cmdf = false;
          this._omdf = false;
          this._collapsable = this.checkCollapsable();
          this._hasOpacity = cLength;
          this.initDynamicPropertyContainer(container);
          this.prop = PropertyFactory.getProp(elem, data.k, 1, null, this);
          this.k = this.prop.k;
          this.getValue(true);
        }
        GradientProperty.prototype.comparePoints = function(values, points) {
          var i = 0;
          var len = this.o.length / 2;
          var diff;
          while (i < len) {
            diff = Math.abs(values[i * 4] - values[points * 4 + i * 2]);
            if (diff > 0.01) {
              return false;
            }
            i += 1;
          }
          return true;
        };
        GradientProperty.prototype.checkCollapsable = function() {
          if (this.o.length / 2 !== this.c.length / 4) {
            return false;
          }
          if (this.data.k.k[0].s) {
            var i = 0;
            var len = this.data.k.k.length;
            while (i < len) {
              if (!this.comparePoints(this.data.k.k[i].s, this.data.p)) {
                return false;
              }
              i += 1;
            }
          } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
            return false;
          }
          return true;
        };
        GradientProperty.prototype.getValue = function(forceRender) {
          this.prop.getValue();
          this._mdf = false;
          this._cmdf = false;
          this._omdf = false;
          if (this.prop._mdf || forceRender) {
            var i;
            var len = this.data.p * 4;
            var mult;
            var val;
            for (i = 0; i < len; i += 1) {
              mult = i % 4 === 0 ? 100 : 255;
              val = Math.round(this.prop.v[i] * mult);
              if (this.c[i] !== val) {
                this.c[i] = val;
                this._cmdf = !forceRender;
              }
            }
            if (this.o.length) {
              len = this.prop.v.length;
              for (i = this.data.p * 4; i < len; i += 1) {
                mult = i % 2 === 0 ? 100 : 1;
                val = i % 2 === 0 ? Math.round(this.prop.v[i] * 100) : this.prop.v[i];
                if (this.o[i - this.data.p * 4] !== val) {
                  this.o[i - this.data.p * 4] = val;
                  this._omdf = !forceRender;
                }
              }
            }
            this._mdf = !forceRender;
          }
        };
        extendPrototype([DynamicPropertyContainer], GradientProperty);
        var buildShapeString = function(pathNodes, length, closed, mat) {
          if (length === 0) {
            return "";
          }
          var _o = pathNodes.o;
          var _i = pathNodes.i;
          var _v = pathNodes.v;
          var i;
          var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
          for (i = 1; i < length; i += 1) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[i][0], _i[i][1]) + " " + mat.applyToPointStringified(_v[i][0], _v[i][1]);
          }
          if (closed && length) {
            shapeString += " C" + mat.applyToPointStringified(_o[i - 1][0], _o[i - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
            shapeString += "z";
          }
          return shapeString;
        };
        var audioControllerFactory = function() {
          function AudioController(audioFactory) {
            this.audios = [];
            this.audioFactory = audioFactory;
            this._volume = 1;
            this._isMuted = false;
          }
          AudioController.prototype = {
            addAudio: function(audio) {
              this.audios.push(audio);
            },
            pause: function() {
              var i;
              var len = this.audios.length;
              for (i = 0; i < len; i += 1) {
                this.audios[i].pause();
              }
            },
            resume: function() {
              var i;
              var len = this.audios.length;
              for (i = 0; i < len; i += 1) {
                this.audios[i].resume();
              }
            },
            setRate: function(rateValue) {
              var i;
              var len = this.audios.length;
              for (i = 0; i < len; i += 1) {
                this.audios[i].setRate(rateValue);
              }
            },
            createAudio: function(assetPath) {
              if (this.audioFactory) {
                return this.audioFactory(assetPath);
              }
              if (Howl) {
                return new Howl({
                  src: [assetPath]
                });
              }
              return {
                isPlaying: false,
                play: function() {
                  this.isPlaying = true;
                },
                seek: function() {
                  this.isPlaying = false;
                },
                playing: function() {
                },
                rate: function() {
                },
                setVolume: function() {
                }
              };
            },
            setAudioFactory: function(audioFactory) {
              this.audioFactory = audioFactory;
            },
            setVolume: function(value) {
              this._volume = value;
              this._updateVolume();
            },
            mute: function() {
              this._isMuted = true;
              this._updateVolume();
            },
            unmute: function() {
              this._isMuted = false;
              this._updateVolume();
            },
            getVolume: function() {
              return this._volume;
            },
            _updateVolume: function() {
              var i;
              var len = this.audios.length;
              for (i = 0; i < len; i += 1) {
                this.audios[i].volume(this._volume * (this._isMuted ? 0 : 1));
              }
            }
          };
          return function() {
            return new AudioController();
          };
        }();
        var ImagePreloader = function() {
          var proxyImage = function() {
            var canvas = createTag("canvas");
            canvas.width = 1;
            canvas.height = 1;
            var ctx = canvas.getContext("2d");
            ctx.fillStyle = "rgba(0,0,0,0)";
            ctx.fillRect(0, 0, 1, 1);
            return canvas;
          }();
          function imageLoaded() {
            this.loadedAssets += 1;
            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
              if (this.imagesLoadedCb) {
                this.imagesLoadedCb(null);
              }
            }
          }
          function footageLoaded() {
            this.loadedFootagesCount += 1;
            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
              if (this.imagesLoadedCb) {
                this.imagesLoadedCb(null);
              }
            }
          }
          function getAssetsPath(assetData, assetsPath, originalPath) {
            var path = "";
            if (assetData.e) {
              path = assetData.p;
            } else if (assetsPath) {
              var imagePath = assetData.p;
              if (imagePath.indexOf("images/") !== -1) {
                imagePath = imagePath.split("/")[1];
              }
              path = assetsPath + imagePath;
            } else {
              path = originalPath;
              path += assetData.u ? assetData.u : "";
              path += assetData.p;
            }
            return path;
          }
          function testImageLoaded(img) {
            var _count = 0;
            var intervalId = setInterval(function() {
              var box = img.getBBox();
              if (box.width || _count > 500) {
                this._imageLoaded();
                clearInterval(intervalId);
              }
              _count += 1;
            }.bind(this), 50);
          }
          function createImageData(assetData) {
            var path = getAssetsPath(assetData, this.assetsPath, this.path);
            var img = createNS("image");
            if (isSafari) {
              this.testImageLoaded(img);
            } else {
              img.addEventListener("load", this._imageLoaded, false);
            }
            img.addEventListener("error", function() {
              ob.img = proxyImage;
              this._imageLoaded();
            }.bind(this), false);
            img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
            if (this._elementHelper.append) {
              this._elementHelper.append(img);
            } else {
              this._elementHelper.appendChild(img);
            }
            var ob = {
              img,
              assetData
            };
            return ob;
          }
          function createImgData(assetData) {
            var path = getAssetsPath(assetData, this.assetsPath, this.path);
            var img = createTag("img");
            img.crossOrigin = "anonymous";
            img.addEventListener("load", this._imageLoaded, false);
            img.addEventListener("error", function() {
              ob.img = proxyImage;
              this._imageLoaded();
            }.bind(this), false);
            img.src = path;
            var ob = {
              img,
              assetData
            };
            return ob;
          }
          function createFootageData(data) {
            var ob = {
              assetData: data
            };
            var path = getAssetsPath(data, this.assetsPath, this.path);
            dataManager.loadData(path, function(footageData) {
              ob.img = footageData;
              this._footageLoaded();
            }.bind(this), function() {
              ob.img = {};
              this._footageLoaded();
            }.bind(this));
            return ob;
          }
          function loadAssets(assets, cb) {
            this.imagesLoadedCb = cb;
            var i;
            var len = assets.length;
            for (i = 0; i < len; i += 1) {
              if (!assets[i].layers) {
                if (!assets[i].t || assets[i].t === "seq") {
                  this.totalImages += 1;
                  this.images.push(this._createImageData(assets[i]));
                } else if (assets[i].t === 3) {
                  this.totalFootages += 1;
                  this.images.push(this.createFootageData(assets[i]));
                }
              }
            }
          }
          function setPath(path) {
            this.path = path || "";
          }
          function setAssetsPath(path) {
            this.assetsPath = path || "";
          }
          function getAsset(assetData) {
            var i = 0;
            var len = this.images.length;
            while (i < len) {
              if (this.images[i].assetData === assetData) {
                return this.images[i].img;
              }
              i += 1;
            }
            return null;
          }
          function destroy() {
            this.imagesLoadedCb = null;
            this.images.length = 0;
          }
          function loadedImages() {
            return this.totalImages === this.loadedAssets;
          }
          function loadedFootages() {
            return this.totalFootages === this.loadedFootagesCount;
          }
          function setCacheType(type, elementHelper) {
            if (type === "svg") {
              this._elementHelper = elementHelper;
              this._createImageData = this.createImageData.bind(this);
            } else {
              this._createImageData = this.createImgData.bind(this);
            }
          }
          function ImagePreloaderFactory() {
            this._imageLoaded = imageLoaded.bind(this);
            this._footageLoaded = footageLoaded.bind(this);
            this.testImageLoaded = testImageLoaded.bind(this);
            this.createFootageData = createFootageData.bind(this);
            this.assetsPath = "";
            this.path = "";
            this.totalImages = 0;
            this.totalFootages = 0;
            this.loadedAssets = 0;
            this.loadedFootagesCount = 0;
            this.imagesLoadedCb = null;
            this.images = [];
          }
          ImagePreloaderFactory.prototype = {
            loadAssets,
            setAssetsPath,
            setPath,
            loadedImages,
            loadedFootages,
            destroy,
            getAsset,
            createImgData,
            createImageData,
            imageLoaded,
            footageLoaded,
            setCacheType
          };
          return ImagePreloaderFactory;
        }();
        var featureSupport = function() {
          var ob = {
            maskType: true
          };
          if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
            ob.maskType = false;
          }
          return ob;
        }();
        var filtersFactory = function() {
          var ob = {};
          ob.createFilter = createFilter;
          ob.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
          function createFilter(filId, skipCoordinates) {
            var fil = createNS("filter");
            fil.setAttribute("id", filId);
            if (skipCoordinates !== true) {
              fil.setAttribute("filterUnits", "objectBoundingBox");
              fil.setAttribute("x", "0%");
              fil.setAttribute("y", "0%");
              fil.setAttribute("width", "100%");
              fil.setAttribute("height", "100%");
            }
            return fil;
          }
          function createAlphaToLuminanceFilter() {
            var feColorMatrix = createNS("feColorMatrix");
            feColorMatrix.setAttribute("type", "matrix");
            feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
            feColorMatrix.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1");
            return feColorMatrix;
          }
          return ob;
        }();
        function TextAnimatorProperty(textData, renderType, elem) {
          this._isFirstFrame = true;
          this._hasMaskedPath = false;
          this._frameId = -1;
          this._textData = textData;
          this._renderType = renderType;
          this._elem = elem;
          this._animatorsData = createSizedArray(this._textData.a.length);
          this._pathData = {};
          this._moreOptions = {
            alignment: {}
          };
          this.renderedLetters = [];
          this.lettersChangedFlag = false;
          this.initDynamicPropertyContainer(elem);
        }
        TextAnimatorProperty.prototype.searchProperties = function() {
          var i;
          var len = this._textData.a.length;
          var animatorProps;
          var getProp = PropertyFactory.getProp;
          for (i = 0; i < len; i += 1) {
            animatorProps = this._textData.a[i];
            this._animatorsData[i] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
          }
          if (this._textData.p && "m" in this._textData.p) {
            this._pathData = {
              a: getProp(this._elem, this._textData.p.a, 0, 0, this),
              f: getProp(this._elem, this._textData.p.f, 0, 0, this),
              l: getProp(this._elem, this._textData.p.l, 0, 0, this),
              r: getProp(this._elem, this._textData.p.r, 0, 0, this),
              p: getProp(this._elem, this._textData.p.p, 0, 0, this),
              m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
            };
            this._hasMaskedPath = true;
          } else {
            this._hasMaskedPath = false;
          }
          this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
        };
        TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
          this.lettersChangedFlag = lettersChangedFlag;
          if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
            return;
          }
          this._isFirstFrame = false;
          var alignment = this._moreOptions.alignment.v;
          var animators = this._animatorsData;
          var textData = this._textData;
          var matrixHelper = this.mHelper;
          var renderType = this._renderType;
          var renderedLettersCount = this.renderedLetters.length;
          var xPos;
          var yPos;
          var i;
          var len;
          var letters = documentData.l;
          var pathInfo;
          var currentLength;
          var currentPoint;
          var segmentLength;
          var flag;
          var pointInd;
          var segmentInd;
          var prevPoint;
          var points;
          var segments;
          var partialLength;
          var totalLength;
          var perc;
          var tanAngle;
          var mask;
          if (this._hasMaskedPath) {
            mask = this._pathData.m;
            if (!this._pathData.n || this._pathData._mdf) {
              var paths = mask.v;
              if (this._pathData.r.v) {
                paths = paths.reverse();
              }
              pathInfo = {
                tLength: 0,
                segments: []
              };
              len = paths._length - 1;
              var bezierData;
              totalLength = 0;
              for (i = 0; i < len; i += 1) {
                bezierData = bez.buildBezierData(
                  paths.v[i],
                  paths.v[i + 1],
                  [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
                  [paths.i[i + 1][0] - paths.v[i + 1][0], paths.i[i + 1][1] - paths.v[i + 1][1]]
                );
                pathInfo.tLength += bezierData.segmentLength;
                pathInfo.segments.push(bezierData);
                totalLength += bezierData.segmentLength;
              }
              i = len;
              if (mask.v.c) {
                bezierData = bez.buildBezierData(
                  paths.v[i],
                  paths.v[0],
                  [paths.o[i][0] - paths.v[i][0], paths.o[i][1] - paths.v[i][1]],
                  [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]
                );
                pathInfo.tLength += bezierData.segmentLength;
                pathInfo.segments.push(bezierData);
                totalLength += bezierData.segmentLength;
              }
              this._pathData.pi = pathInfo;
            }
            pathInfo = this._pathData.pi;
            currentLength = this._pathData.f.v;
            segmentInd = 0;
            pointInd = 1;
            segmentLength = 0;
            flag = true;
            segments = pathInfo.segments;
            if (currentLength < 0 && mask.v.c) {
              if (pathInfo.tLength < Math.abs(currentLength)) {
                currentLength = -Math.abs(currentLength) % pathInfo.tLength;
              }
              segmentInd = segments.length - 1;
              points = segments[segmentInd].points;
              pointInd = points.length - 1;
              while (currentLength < 0) {
                currentLength += points[pointInd].partialLength;
                pointInd -= 1;
                if (pointInd < 0) {
                  segmentInd -= 1;
                  points = segments[segmentInd].points;
                  pointInd = points.length - 1;
                }
              }
            }
            points = segments[segmentInd].points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
          }
          len = letters.length;
          xPos = 0;
          yPos = 0;
          var yOff = documentData.finalSize * 1.2 * 0.714;
          var firstLine = true;
          var animatorProps;
          var animatorSelector;
          var j;
          var jLen;
          var letterValue;
          jLen = animators.length;
          var mult;
          var ind = -1;
          var offf;
          var xPathPos;
          var yPathPos;
          var initPathPos = currentLength;
          var initSegmentInd = segmentInd;
          var initPointInd = pointInd;
          var currentLine = -1;
          var elemOpacity;
          var sc;
          var sw;
          var fc;
          var k;
          var letterSw;
          var letterSc;
          var letterFc;
          var letterM = "";
          var letterP = this.defaultPropsArray;
          var letterO;
          if (documentData.j === 2 || documentData.j === 1) {
            var animatorJustifyOffset = 0;
            var animatorFirstCharOffset = 0;
            var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
            var lastIndex = 0;
            var isNewLine = true;
            for (i = 0; i < len; i += 1) {
              if (letters[i].n) {
                if (animatorJustifyOffset) {
                  animatorJustifyOffset += animatorFirstCharOffset;
                }
                while (lastIndex < i) {
                  letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                  lastIndex += 1;
                }
                animatorJustifyOffset = 0;
                isNewLine = true;
              } else {
                for (j = 0; j < jLen; j += 1) {
                  animatorProps = animators[j].a;
                  if (animatorProps.t.propType) {
                    if (isNewLine && documentData.j === 2) {
                      animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                    }
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                    if (mult.length) {
                      animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                    } else {
                      animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                    }
                  }
                }
                isNewLine = false;
              }
            }
            if (animatorJustifyOffset) {
              animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i) {
              letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
              lastIndex += 1;
            }
          }
          for (i = 0; i < len; i += 1) {
            matrixHelper.reset();
            elemOpacity = 1;
            if (letters[i].n) {
              xPos = 0;
              yPos += documentData.yOffset;
              yPos += firstLine ? 1 : 0;
              currentLength = initPathPos;
              firstLine = false;
              if (this._hasMaskedPath) {
                segmentInd = initSegmentInd;
                pointInd = initPointInd;
                points = segments[segmentInd].points;
                prevPoint = points[pointInd - 1];
                currentPoint = points[pointInd];
                partialLength = currentPoint.partialLength;
                segmentLength = 0;
              }
              letterM = "";
              letterFc = "";
              letterSw = "";
              letterO = "";
              letterP = this.defaultPropsArray;
            } else {
              if (this._hasMaskedPath) {
                if (currentLine !== letters[i].line) {
                  switch (documentData.j) {
                    case 1:
                      currentLength += totalLength - documentData.lineWidths[letters[i].line];
                      break;
                    case 2:
                      currentLength += (totalLength - documentData.lineWidths[letters[i].line]) / 2;
                      break;
                    default:
                      break;
                  }
                  currentLine = letters[i].line;
                }
                if (ind !== letters[i].ind) {
                  if (letters[ind]) {
                    currentLength += letters[ind].extra;
                  }
                  currentLength += letters[i].an / 2;
                  ind = letters[i].ind;
                }
                currentLength += alignment[0] * letters[i].an * 5e-3;
                var animatorOffset = 0;
                for (j = 0; j < jLen; j += 1) {
                  animatorProps = animators[j].a;
                  if (animatorProps.p.propType) {
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                    if (mult.length) {
                      animatorOffset += animatorProps.p.v[0] * mult[0];
                    } else {
                      animatorOffset += animatorProps.p.v[0] * mult;
                    }
                  }
                  if (animatorProps.a.propType) {
                    animatorSelector = animators[j].s;
                    mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                    if (mult.length) {
                      animatorOffset += animatorProps.a.v[0] * mult[0];
                    } else {
                      animatorOffset += animatorProps.a.v[0] * mult;
                    }
                  }
                }
                flag = true;
                if (this._pathData.a.v) {
                  currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
                  currentLength += this._pathData.f.v;
                }
                while (flag) {
                  if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                    perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                    xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                    yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                    matrixHelper.translate(-alignment[0] * letters[i].an * 5e-3, -(alignment[1] * yOff) * 0.01);
                    flag = false;
                  } else if (points) {
                    segmentLength += currentPoint.partialLength;
                    pointInd += 1;
                    if (pointInd >= points.length) {
                      pointInd = 0;
                      segmentInd += 1;
                      if (!segments[segmentInd]) {
                        if (mask.v.c) {
                          pointInd = 0;
                          segmentInd = 0;
                          points = segments[segmentInd].points;
                        } else {
                          segmentLength -= currentPoint.partialLength;
                          points = null;
                        }
                      } else {
                        points = segments[segmentInd].points;
                      }
                    }
                    if (points) {
                      prevPoint = currentPoint;
                      currentPoint = points[pointInd];
                      partialLength = currentPoint.partialLength;
                    }
                  }
                }
                offf = letters[i].an / 2 - letters[i].add;
                matrixHelper.translate(-offf, 0, 0);
              } else {
                offf = letters[i].an / 2 - letters[i].add;
                matrixHelper.translate(-offf, 0, 0);
                matrixHelper.translate(-alignment[0] * letters[i].an * 5e-3, -alignment[1] * yOff * 0.01, 0);
              }
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                if (animatorProps.t.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                  if (xPos !== 0 || documentData.j !== 0) {
                    if (this._hasMaskedPath) {
                      if (mult.length) {
                        currentLength += animatorProps.t.v * mult[0];
                      } else {
                        currentLength += animatorProps.t.v * mult;
                      }
                    } else if (mult.length) {
                      xPos += animatorProps.t.v * mult[0];
                    } else {
                      xPos += animatorProps.t.v * mult;
                    }
                  }
                }
              }
              if (documentData.strokeWidthAnim) {
                sw = documentData.sw || 0;
              }
              if (documentData.strokeColorAnim) {
                if (documentData.sc) {
                  sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
                } else {
                  sc = [0, 0, 0];
                }
              }
              if (documentData.fillColorAnim && documentData.fc) {
                fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
              }
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                if (animatorProps.a.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                  if (mult.length) {
                    matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                  } else {
                    matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                  }
                }
              }
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                if (animatorProps.s.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                  if (mult.length) {
                    matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
                  } else {
                    matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
                  }
                }
              }
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                animatorSelector = animators[j].s;
                mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                if (animatorProps.sk.propType) {
                  if (mult.length) {
                    matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                  } else {
                    matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                  }
                }
                if (animatorProps.r.propType) {
                  if (mult.length) {
                    matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                  } else {
                    matrixHelper.rotateZ(-animatorProps.r.v * mult);
                  }
                }
                if (animatorProps.ry.propType) {
                  if (mult.length) {
                    matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                  } else {
                    matrixHelper.rotateY(animatorProps.ry.v * mult);
                  }
                }
                if (animatorProps.rx.propType) {
                  if (mult.length) {
                    matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                  } else {
                    matrixHelper.rotateX(animatorProps.rx.v * mult);
                  }
                }
                if (animatorProps.o.propType) {
                  if (mult.length) {
                    elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
                  } else {
                    elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
                  }
                }
                if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                  if (mult.length) {
                    sw += animatorProps.sw.v * mult[0];
                  } else {
                    sw += animatorProps.sw.v * mult;
                  }
                }
                if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                  for (k = 0; k < 3; k += 1) {
                    if (mult.length) {
                      sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult[0];
                    } else {
                      sc[k] += (animatorProps.sc.v[k] - sc[k]) * mult;
                    }
                  }
                }
                if (documentData.fillColorAnim && documentData.fc) {
                  if (animatorProps.fc.propType) {
                    for (k = 0; k < 3; k += 1) {
                      if (mult.length) {
                        fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult[0];
                      } else {
                        fc[k] += (animatorProps.fc.v[k] - fc[k]) * mult;
                      }
                    }
                  }
                  if (animatorProps.fh.propType) {
                    if (mult.length) {
                      fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                    } else {
                      fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                    }
                  }
                  if (animatorProps.fs.propType) {
                    if (mult.length) {
                      fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                    } else {
                      fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                    }
                  }
                  if (animatorProps.fb.propType) {
                    if (mult.length) {
                      fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                    } else {
                      fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                    }
                  }
                }
              }
              for (j = 0; j < jLen; j += 1) {
                animatorProps = animators[j].a;
                if (animatorProps.p.propType) {
                  animatorSelector = animators[j].s;
                  mult = animatorSelector.getMult(letters[i].anIndexes[j], textData.a[j].s.totalChars);
                  if (this._hasMaskedPath) {
                    if (mult.length) {
                      matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                    } else {
                      matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                    }
                  } else if (mult.length) {
                    matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                  } else {
                    matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                  }
                }
              }
              if (documentData.strokeWidthAnim) {
                letterSw = sw < 0 ? 0 : sw;
              }
              if (documentData.strokeColorAnim) {
                letterSc = "rgb(" + Math.round(sc[0] * 255) + "," + Math.round(sc[1] * 255) + "," + Math.round(sc[2] * 255) + ")";
              }
              if (documentData.fillColorAnim && documentData.fc) {
                letterFc = "rgb(" + Math.round(fc[0] * 255) + "," + Math.round(fc[1] * 255) + "," + Math.round(fc[2] * 255) + ")";
              }
              if (this._hasMaskedPath) {
                matrixHelper.translate(0, -documentData.ls);
                matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
                if (this._pathData.p.v) {
                  tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                  var rot = Math.atan(tanAngle) * 180 / Math.PI;
                  if (currentPoint.point[0] < prevPoint.point[0]) {
                    rot += 180;
                  }
                  matrixHelper.rotate(-rot * Math.PI / 180);
                }
                matrixHelper.translate(xPathPos, yPathPos, 0);
                currentLength -= alignment[0] * letters[i].an * 5e-3;
                if (letters[i + 1] && ind !== letters[i + 1].ind) {
                  currentLength += letters[i].an / 2;
                  currentLength += documentData.tr * 1e-3 * documentData.finalSize;
                }
              } else {
                matrixHelper.translate(xPos, yPos, 0);
                if (documentData.ps) {
                  matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
                }
                switch (documentData.j) {
                  case 1:
                    matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]), 0, 0);
                    break;
                  case 2:
                    matrixHelper.translate(letters[i].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i].line]) / 2, 0, 0);
                    break;
                  default:
                    break;
                }
                matrixHelper.translate(0, -documentData.ls);
                matrixHelper.translate(offf, 0, 0);
                matrixHelper.translate(alignment[0] * letters[i].an * 5e-3, alignment[1] * yOff * 0.01, 0);
                xPos += letters[i].l + documentData.tr * 1e-3 * documentData.finalSize;
              }
              if (renderType === "html") {
                letterM = matrixHelper.toCSS();
              } else if (renderType === "svg") {
                letterM = matrixHelper.to2dCSS();
              } else {
                letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
              }
              letterO = elemOpacity;
            }
            if (renderedLettersCount <= i) {
              letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
              this.renderedLetters.push(letterValue);
              renderedLettersCount += 1;
              this.lettersChangedFlag = true;
            } else {
              letterValue = this.renderedLetters[i];
              this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
            }
          }
        };
        TextAnimatorProperty.prototype.getValue = function() {
          if (this._elem.globalData.frameId === this._frameId) {
            return;
          }
          this._frameId = this._elem.globalData.frameId;
          this.iterateDynamicProperties();
        };
        TextAnimatorProperty.prototype.mHelper = new Matrix();
        TextAnimatorProperty.prototype.defaultPropsArray = [];
        extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
        function TextAnimatorDataProperty(elem, animatorProps, container) {
          var defaultData = { propType: false };
          var getProp = PropertyFactory.getProp;
          var textAnimatorAnimatables = animatorProps.a;
          this.a = {
            r: textAnimatorAnimatables.r ? getProp(elem, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
            rx: textAnimatorAnimatables.rx ? getProp(elem, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
            ry: textAnimatorAnimatables.ry ? getProp(elem, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
            sk: textAnimatorAnimatables.sk ? getProp(elem, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
            sa: textAnimatorAnimatables.sa ? getProp(elem, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
            s: textAnimatorAnimatables.s ? getProp(elem, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
            a: textAnimatorAnimatables.a ? getProp(elem, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
            o: textAnimatorAnimatables.o ? getProp(elem, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
            p: textAnimatorAnimatables.p ? getProp(elem, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
            sw: textAnimatorAnimatables.sw ? getProp(elem, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
            sc: textAnimatorAnimatables.sc ? getProp(elem, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
            fc: textAnimatorAnimatables.fc ? getProp(elem, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
            fh: textAnimatorAnimatables.fh ? getProp(elem, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
            fs: textAnimatorAnimatables.fs ? getProp(elem, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
            fb: textAnimatorAnimatables.fb ? getProp(elem, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
            t: textAnimatorAnimatables.t ? getProp(elem, textAnimatorAnimatables.t, 0, 0, container) : defaultData
          };
          this.s = TextSelectorProp.getTextSelectorProp(elem, animatorProps.s, container);
          this.s.t = animatorProps.s.t;
        }
        function LetterProps(o, sw, sc, fc, m, p) {
          this.o = o;
          this.sw = sw;
          this.sc = sc;
          this.fc = fc;
          this.m = m;
          this.p = p;
          this._mdf = {
            o: true,
            sw: !!sw,
            sc: !!sc,
            fc: !!fc,
            m: true,
            p: true
          };
        }
        LetterProps.prototype.update = function(o, sw, sc, fc, m, p) {
          this._mdf.o = false;
          this._mdf.sw = false;
          this._mdf.sc = false;
          this._mdf.fc = false;
          this._mdf.m = false;
          this._mdf.p = false;
          var updated = false;
          if (this.o !== o) {
            this.o = o;
            this._mdf.o = true;
            updated = true;
          }
          if (this.sw !== sw) {
            this.sw = sw;
            this._mdf.sw = true;
            updated = true;
          }
          if (this.sc !== sc) {
            this.sc = sc;
            this._mdf.sc = true;
            updated = true;
          }
          if (this.fc !== fc) {
            this.fc = fc;
            this._mdf.fc = true;
            updated = true;
          }
          if (this.m !== m) {
            this.m = m;
            this._mdf.m = true;
            updated = true;
          }
          if (p.length && (this.p[0] !== p[0] || this.p[1] !== p[1] || this.p[4] !== p[4] || this.p[5] !== p[5] || this.p[12] !== p[12] || this.p[13] !== p[13])) {
            this.p = p;
            this._mdf.p = true;
            updated = true;
          }
          return updated;
        };
        function TextProperty(elem, data) {
          this._frameId = initialDefaultFrame;
          this.pv = "";
          this.v = "";
          this.kf = false;
          this._isFirstFrame = true;
          this._mdf = false;
          this.data = data;
          this.elem = elem;
          this.comp = this.elem.comp;
          this.keysIndex = 0;
          this.canResize = false;
          this.minimumFontSize = 1;
          this.effectsSequence = [];
          this.currentData = {
            ascent: 0,
            boxWidth: this.defaultBoxWidth,
            f: "",
            fStyle: "",
            fWeight: "",
            fc: "",
            j: "",
            justifyOffset: "",
            l: [],
            lh: 0,
            lineWidths: [],
            ls: "",
            of: "",
            s: "",
            sc: "",
            sw: 0,
            t: 0,
            tr: 0,
            sz: 0,
            ps: null,
            fillColorAnim: false,
            strokeColorAnim: false,
            strokeWidthAnim: false,
            yOffset: 0,
            finalSize: 0,
            finalText: [],
            finalLineHeight: 0,
            __complete: false
          };
          this.copyData(this.currentData, this.data.d.k[0].s);
          if (!this.searchProperty()) {
            this.completeTextData(this.currentData);
          }
        }
        TextProperty.prototype.defaultBoxWidth = [0, 0];
        TextProperty.prototype.copyData = function(obj, data) {
          for (var s in data) {
            if (Object.prototype.hasOwnProperty.call(data, s)) {
              obj[s] = data[s];
            }
          }
          return obj;
        };
        TextProperty.prototype.setCurrentData = function(data) {
          if (!data.__complete) {
            this.completeTextData(data);
          }
          this.currentData = data;
          this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
          this._mdf = true;
        };
        TextProperty.prototype.searchProperty = function() {
          return this.searchKeyframes();
        };
        TextProperty.prototype.searchKeyframes = function() {
          this.kf = this.data.d.k.length > 1;
          if (this.kf) {
            this.addEffect(this.getKeyframeValue.bind(this));
          }
          return this.kf;
        };
        TextProperty.prototype.addEffect = function(effectFunction) {
          this.effectsSequence.push(effectFunction);
          this.elem.addDynamicProperty(this);
        };
        TextProperty.prototype.getValue = function(_finalValue) {
          if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
            return;
          }
          this.currentData.t = this.data.d.k[this.keysIndex].s.t;
          var currentValue = this.currentData;
          var currentIndex = this.keysIndex;
          if (this.lock) {
            this.setCurrentData(this.currentData);
            return;
          }
          this.lock = true;
          this._mdf = false;
          var i;
          var len = this.effectsSequence.length;
          var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
          for (i = 0; i < len; i += 1) {
            if (currentIndex !== this.keysIndex) {
              finalValue = this.effectsSequence[i](finalValue, finalValue.t);
            } else {
              finalValue = this.effectsSequence[i](this.currentData, finalValue.t);
            }
          }
          if (currentValue !== finalValue) {
            this.setCurrentData(finalValue);
          }
          this.v = this.currentData;
          this.pv = this.v;
          this.lock = false;
          this.frameId = this.elem.globalData.frameId;
        };
        TextProperty.prototype.getKeyframeValue = function() {
          var textKeys = this.data.d.k;
          var frameNum = this.elem.comp.renderedFrame;
          var i = 0;
          var len = textKeys.length;
          while (i <= len - 1) {
            if (i === len - 1 || textKeys[i + 1].t > frameNum) {
              break;
            }
            i += 1;
          }
          if (this.keysIndex !== i) {
            this.keysIndex = i;
          }
          return this.data.d.k[this.keysIndex].s;
        };
        TextProperty.prototype.buildFinalText = function(text) {
          var charactersArray = [];
          var i = 0;
          var len = text.length;
          var charCode;
          var secondCharCode;
          var shouldCombine = false;
          while (i < len) {
            charCode = text.charCodeAt(i);
            if (FontManager.isCombinedCharacter(charCode)) {
              charactersArray[charactersArray.length - 1] += text.charAt(i);
            } else if (charCode >= 55296 && charCode <= 56319) {
              secondCharCode = text.charCodeAt(i + 1);
              if (secondCharCode >= 56320 && secondCharCode <= 57343) {
                if (shouldCombine || FontManager.isModifier(charCode, secondCharCode)) {
                  charactersArray[charactersArray.length - 1] += text.substr(i, 2);
                  shouldCombine = false;
                } else {
                  charactersArray.push(text.substr(i, 2));
                }
                i += 1;
              } else {
                charactersArray.push(text.charAt(i));
              }
            } else if (charCode > 56319) {
              secondCharCode = text.charCodeAt(i + 1);
              if (FontManager.isZeroWidthJoiner(charCode, secondCharCode)) {
                shouldCombine = true;
                charactersArray[charactersArray.length - 1] += text.substr(i, 2);
                i += 1;
              } else {
                charactersArray.push(text.charAt(i));
              }
            } else if (FontManager.isZeroWidthJoiner(charCode)) {
              charactersArray[charactersArray.length - 1] += text.charAt(i);
              shouldCombine = true;
            } else {
              charactersArray.push(text.charAt(i));
            }
            i += 1;
          }
          return charactersArray;
        };
        TextProperty.prototype.completeTextData = function(documentData) {
          documentData.__complete = true;
          var fontManager = this.elem.globalData.fontManager;
          var data = this.data;
          var letters = [];
          var i;
          var len;
          var newLineFlag;
          var index2 = 0;
          var val;
          var anchorGrouping = data.m.g;
          var currentSize = 0;
          var currentPos = 0;
          var currentLine = 0;
          var lineWidths = [];
          var lineWidth = 0;
          var maxLineWidth = 0;
          var j;
          var jLen;
          var fontData = fontManager.getFontByName(documentData.f);
          var charData;
          var cLength = 0;
          var fontProps = getFontProperties(fontData);
          documentData.fWeight = fontProps.weight;
          documentData.fStyle = fontProps.style;
          documentData.finalSize = documentData.s;
          documentData.finalText = this.buildFinalText(documentData.t);
          len = documentData.finalText.length;
          documentData.finalLineHeight = documentData.lh;
          var trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
          var charCode;
          if (documentData.sz) {
            var flag = true;
            var boxWidth = documentData.sz[0];
            var boxHeight = documentData.sz[1];
            var currentHeight;
            var finalText;
            while (flag) {
              finalText = this.buildFinalText(documentData.t);
              currentHeight = 0;
              lineWidth = 0;
              len = finalText.length;
              trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
              var lastSpaceIndex = -1;
              for (i = 0; i < len; i += 1) {
                charCode = finalText[i].charCodeAt(0);
                newLineFlag = false;
                if (finalText[i] === " ") {
                  lastSpaceIndex = i;
                } else if (charCode === 13 || charCode === 3) {
                  lineWidth = 0;
                  newLineFlag = true;
                  currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                }
                if (fontManager.chars) {
                  charData = fontManager.getCharData(finalText[i], fontData.fStyle, fontData.fFamily);
                  cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
                } else {
                  cLength = fontManager.measureText(finalText[i], documentData.f, documentData.finalSize);
                }
                if (lineWidth + cLength > boxWidth && finalText[i] !== " ") {
                  if (lastSpaceIndex === -1) {
                    len += 1;
                  } else {
                    i = lastSpaceIndex;
                  }
                  currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                  finalText.splice(i, lastSpaceIndex === i ? 1 : 0, "\r");
                  lastSpaceIndex = -1;
                  lineWidth = 0;
                } else {
                  lineWidth += cLength;
                  lineWidth += trackingOffset;
                }
              }
              currentHeight += fontData.ascent * documentData.finalSize / 100;
              if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
                documentData.finalSize -= 1;
                documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
              } else {
                documentData.finalText = finalText;
                len = documentData.finalText.length;
                flag = false;
              }
            }
          }
          lineWidth = -trackingOffset;
          cLength = 0;
          var uncollapsedSpaces = 0;
          var currentChar;
          for (i = 0; i < len; i += 1) {
            newLineFlag = false;
            currentChar = documentData.finalText[i];
            charCode = currentChar.charCodeAt(0);
            if (charCode === 13 || charCode === 3) {
              uncollapsedSpaces = 0;
              lineWidths.push(lineWidth);
              maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
              lineWidth = -2 * trackingOffset;
              val = "";
              newLineFlag = true;
              currentLine += 1;
            } else {
              val = currentChar;
            }
            if (fontManager.chars) {
              charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
              cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
              cLength = fontManager.measureText(val, documentData.f, documentData.finalSize);
            }
            if (currentChar === " ") {
              uncollapsedSpaces += cLength + trackingOffset;
            } else {
              lineWidth += cLength + trackingOffset + uncollapsedSpaces;
              uncollapsedSpaces = 0;
            }
            letters.push({
              l: cLength,
              an: cLength,
              add: currentSize,
              n: newLineFlag,
              anIndexes: [],
              val,
              line: currentLine,
              animatorJustifyOffset: 0
            });
            if (anchorGrouping == 2) {
              currentSize += cLength;
              if (val === "" || val === " " || i === len - 1) {
                if (val === "" || val === " ") {
                  currentSize -= cLength;
                }
                while (currentPos <= i) {
                  letters[currentPos].an = currentSize;
                  letters[currentPos].ind = index2;
                  letters[currentPos].extra = cLength;
                  currentPos += 1;
                }
                index2 += 1;
                currentSize = 0;
              }
            } else if (anchorGrouping == 3) {
              currentSize += cLength;
              if (val === "" || i === len - 1) {
                if (val === "") {
                  currentSize -= cLength;
                }
                while (currentPos <= i) {
                  letters[currentPos].an = currentSize;
                  letters[currentPos].ind = index2;
                  letters[currentPos].extra = cLength;
                  currentPos += 1;
                }
                currentSize = 0;
                index2 += 1;
              }
            } else {
              letters[index2].ind = index2;
              letters[index2].extra = 0;
              index2 += 1;
            }
          }
          documentData.l = letters;
          maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
          lineWidths.push(lineWidth);
          if (documentData.sz) {
            documentData.boxWidth = documentData.sz[0];
            documentData.justifyOffset = 0;
          } else {
            documentData.boxWidth = maxLineWidth;
            switch (documentData.j) {
              case 1:
                documentData.justifyOffset = -documentData.boxWidth;
                break;
              case 2:
                documentData.justifyOffset = -documentData.boxWidth / 2;
                break;
              default:
                documentData.justifyOffset = 0;
            }
          }
          documentData.lineWidths = lineWidths;
          var animators = data.a;
          var animatorData;
          var letterData;
          jLen = animators.length;
          var based;
          var ind;
          var indexes = [];
          for (j = 0; j < jLen; j += 1) {
            animatorData = animators[j];
            if (animatorData.a.sc) {
              documentData.strokeColorAnim = true;
            }
            if (animatorData.a.sw) {
              documentData.strokeWidthAnim = true;
            }
            if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
              documentData.fillColorAnim = true;
            }
            ind = 0;
            based = animatorData.s.b;
            for (i = 0; i < len; i += 1) {
              letterData = letters[i];
              letterData.anIndexes[j] = ind;
              if (based == 1 && letterData.val !== "" || based == 2 && letterData.val !== "" && letterData.val !== " " || based == 3 && (letterData.n || letterData.val == " " || i == len - 1) || based == 4 && (letterData.n || i == len - 1)) {
                if (animatorData.s.rn === 1) {
                  indexes.push(ind);
                }
                ind += 1;
              }
            }
            data.a[j].s.totalChars = ind;
            var currentInd = -1;
            var newInd;
            if (animatorData.s.rn === 1) {
              for (i = 0; i < len; i += 1) {
                letterData = letters[i];
                if (currentInd != letterData.anIndexes[j]) {
                  currentInd = letterData.anIndexes[j];
                  newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
                }
                letterData.anIndexes[j] = newInd;
              }
            }
          }
          documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
          documentData.ls = documentData.ls || 0;
          documentData.ascent = fontData.ascent * documentData.finalSize / 100;
        };
        TextProperty.prototype.updateDocumentData = function(newData, index2) {
          index2 = index2 === void 0 ? this.keysIndex : index2;
          var dData = this.copyData({}, this.data.d.k[index2].s);
          dData = this.copyData(dData, newData);
          this.data.d.k[index2].s = dData;
          this.recalculate(index2);
          this.elem.addDynamicProperty(this);
        };
        TextProperty.prototype.recalculate = function(index2) {
          var dData = this.data.d.k[index2].s;
          dData.__complete = false;
          this.keysIndex = 0;
          this._isFirstFrame = true;
          this.getValue(dData);
        };
        TextProperty.prototype.canResizeFont = function(_canResize) {
          this.canResize = _canResize;
          this.recalculate(this.keysIndex);
          this.elem.addDynamicProperty(this);
        };
        TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
          this.minimumFontSize = Math.floor(_fontValue) || 1;
          this.recalculate(this.keysIndex);
          this.elem.addDynamicProperty(this);
        };
        var TextSelectorProp = function() {
          var max = Math.max;
          var min = Math.min;
          var floor = Math.floor;
          function TextSelectorPropFactory(elem, data) {
            this._currentTextLength = -1;
            this.k = false;
            this.data = data;
            this.elem = elem;
            this.comp = elem.comp;
            this.finalS = 0;
            this.finalE = 0;
            this.initDynamicPropertyContainer(elem);
            this.s = PropertyFactory.getProp(elem, data.s || { k: 0 }, 0, 0, this);
            if ("e" in data) {
              this.e = PropertyFactory.getProp(elem, data.e, 0, 0, this);
            } else {
              this.e = { v: 100 };
            }
            this.o = PropertyFactory.getProp(elem, data.o || { k: 0 }, 0, 0, this);
            this.xe = PropertyFactory.getProp(elem, data.xe || { k: 0 }, 0, 0, this);
            this.ne = PropertyFactory.getProp(elem, data.ne || { k: 0 }, 0, 0, this);
            this.sm = PropertyFactory.getProp(elem, data.sm || { k: 100 }, 0, 0, this);
            this.a = PropertyFactory.getProp(elem, data.a, 0, 0.01, this);
            if (!this.dynamicProperties.length) {
              this.getValue();
            }
          }
          TextSelectorPropFactory.prototype = {
            getMult: function(ind) {
              if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
                this.getValue();
              }
              var x1 = 0;
              var y1 = 0;
              var x2 = 1;
              var y2 = 1;
              if (this.ne.v > 0) {
                x1 = this.ne.v / 100;
              } else {
                y1 = -this.ne.v / 100;
              }
              if (this.xe.v > 0) {
                x2 = 1 - this.xe.v / 100;
              } else {
                y2 = 1 + this.xe.v / 100;
              }
              var easer = BezierFactory.getBezierEasing(x1, y1, x2, y2).get;
              var mult = 0;
              var s = this.finalS;
              var e = this.finalE;
              var type = this.data.sh;
              if (type === 2) {
                if (e === s) {
                  mult = ind >= e ? 1 : 0;
                } else {
                  mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                }
                mult = easer(mult);
              } else if (type === 3) {
                if (e === s) {
                  mult = ind >= e ? 0 : 1;
                } else {
                  mult = 1 - max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                }
                mult = easer(mult);
              } else if (type === 4) {
                if (e === s) {
                  mult = 0;
                } else {
                  mult = max(0, min(0.5 / (e - s) + (ind - s) / (e - s), 1));
                  if (mult < 0.5) {
                    mult *= 2;
                  } else {
                    mult = 1 - 2 * (mult - 0.5);
                  }
                }
                mult = easer(mult);
              } else if (type === 5) {
                if (e === s) {
                  mult = 0;
                } else {
                  var tot = e - s;
                  ind = min(max(0, ind + 0.5 - s), e - s);
                  var x = -tot / 2 + ind;
                  var a = tot / 2;
                  mult = Math.sqrt(1 - x * x / (a * a));
                }
                mult = easer(mult);
              } else if (type === 6) {
                if (e === s) {
                  mult = 0;
                } else {
                  ind = min(max(0, ind + 0.5 - s), e - s);
                  mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e - s))) / 2;
                }
                mult = easer(mult);
              } else {
                if (ind >= floor(s)) {
                  if (ind - s < 0) {
                    mult = max(0, min(min(e, 1) - (s - ind), 1));
                  } else {
                    mult = max(0, min(e - ind, 1));
                  }
                }
                mult = easer(mult);
              }
              if (this.sm.v !== 100) {
                var smoothness = this.sm.v * 0.01;
                if (smoothness === 0) {
                  smoothness = 1e-8;
                }
                var threshold = 0.5 - smoothness * 0.5;
                if (mult < threshold) {
                  mult = 0;
                } else {
                  mult = (mult - threshold) / smoothness;
                  if (mult > 1) {
                    mult = 1;
                  }
                }
              }
              return mult * this.a.v;
            },
            getValue: function(newCharsFlag) {
              this.iterateDynamicProperties();
              this._mdf = newCharsFlag || this._mdf;
              this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
              if (newCharsFlag && this.data.r === 2) {
                this.e.v = this._currentTextLength;
              }
              var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
              var o = this.o.v / divisor;
              var s = this.s.v / divisor + o;
              var e = this.e.v / divisor + o;
              if (s > e) {
                var _s = s;
                s = e;
                e = _s;
              }
              this.finalS = s;
              this.finalE = e;
            }
          };
          extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
          function getTextSelectorProp(elem, data, arr) {
            return new TextSelectorPropFactory(elem, data, arr);
          }
          return {
            getTextSelectorProp
          };
        }();
        var poolFactory = function() {
          return function(initialLength, _create, _release) {
            var _length = 0;
            var _maxLength = initialLength;
            var pool = createSizedArray(_maxLength);
            var ob = {
              newElement,
              release
            };
            function newElement() {
              var element;
              if (_length) {
                _length -= 1;
                element = pool[_length];
              } else {
                element = _create();
              }
              return element;
            }
            function release(element) {
              if (_length === _maxLength) {
                pool = pooling.double(pool);
                _maxLength *= 2;
              }
              if (_release) {
                _release(element);
              }
              pool[_length] = element;
              _length += 1;
            }
            return ob;
          };
        }();
        var pooling = function() {
          function double(arr) {
            return arr.concat(createSizedArray(arr.length));
          }
          return {
            double
          };
        }();
        var pointPool = function() {
          function create() {
            return createTypedArray("float32", 2);
          }
          return poolFactory(8, create);
        }();
        var shapePool = function() {
          function create() {
            return new ShapePath();
          }
          function release(shapePath) {
            var len = shapePath._length;
            var i;
            for (i = 0; i < len; i += 1) {
              pointPool.release(shapePath.v[i]);
              pointPool.release(shapePath.i[i]);
              pointPool.release(shapePath.o[i]);
              shapePath.v[i] = null;
              shapePath.i[i] = null;
              shapePath.o[i] = null;
            }
            shapePath._length = 0;
            shapePath.c = false;
          }
          function clone(shape) {
            var cloned = factory.newElement();
            var i;
            var len = shape._length === void 0 ? shape.v.length : shape._length;
            cloned.setLength(len);
            cloned.c = shape.c;
            for (i = 0; i < len; i += 1) {
              cloned.setTripleAt(shape.v[i][0], shape.v[i][1], shape.o[i][0], shape.o[i][1], shape.i[i][0], shape.i[i][1], i);
            }
            return cloned;
          }
          var factory = poolFactory(4, create, release);
          factory.clone = clone;
          return factory;
        }();
        var shapeCollectionPool = function() {
          var ob = {
            newShapeCollection,
            release
          };
          var _length = 0;
          var _maxLength = 4;
          var pool = createSizedArray(_maxLength);
          function newShapeCollection() {
            var shapeCollection;
            if (_length) {
              _length -= 1;
              shapeCollection = pool[_length];
            } else {
              shapeCollection = new ShapeCollection();
            }
            return shapeCollection;
          }
          function release(shapeCollection) {
            var i;
            var len = shapeCollection._length;
            for (i = 0; i < len; i += 1) {
              shapePool.release(shapeCollection.shapes[i]);
            }
            shapeCollection._length = 0;
            if (_length === _maxLength) {
              pool = pooling.double(pool);
              _maxLength *= 2;
            }
            pool[_length] = shapeCollection;
            _length += 1;
          }
          return ob;
        }();
        var segmentsLengthPool = function() {
          function create() {
            return {
              lengths: [],
              totalLength: 0
            };
          }
          function release(element) {
            var i;
            var len = element.lengths.length;
            for (i = 0; i < len; i += 1) {
              bezierLengthPool.release(element.lengths[i]);
            }
            element.lengths.length = 0;
          }
          return poolFactory(8, create, release);
        }();
        var bezierLengthPool = function() {
          function create() {
            return {
              addedLength: 0,
              percents: createTypedArray("float32", defaultCurveSegments),
              lengths: createTypedArray("float32", defaultCurveSegments)
            };
          }
          return poolFactory(8, create);
        }();
        var markerParser = function() {
          function parsePayloadLines(payload) {
            var lines = payload.split("\r\n");
            var keys = {};
            var line;
            var keysCount = 0;
            for (var i = 0; i < lines.length; i += 1) {
              line = lines[i].split(":");
              if (line.length === 2) {
                keys[line[0]] = line[1].trim();
                keysCount += 1;
              }
            }
            if (keysCount === 0) {
              throw new Error();
            }
            return keys;
          }
          return function(_markers) {
            var markers = [];
            for (var i = 0; i < _markers.length; i += 1) {
              var _marker = _markers[i];
              var markerData = {
                time: _marker.tm,
                duration: _marker.dr
              };
              try {
                markerData.payload = JSON.parse(_markers[i].cm);
              } catch (_) {
                try {
                  markerData.payload = parsePayloadLines(_markers[i].cm);
                } catch (__) {
                  markerData.payload = {
                    name: _markers[i]
                  };
                }
              }
              markers.push(markerData);
            }
            return markers;
          };
        }();
        function BaseRenderer() {
        }
        BaseRenderer.prototype.checkLayers = function(num) {
          var i;
          var len = this.layers.length;
          var data;
          this.completeLayers = true;
          for (i = len - 1; i >= 0; i -= 1) {
            if (!this.elements[i]) {
              data = this.layers[i];
              if (data.ip - data.st <= num - this.layers[i].st && data.op - data.st > num - this.layers[i].st) {
                this.buildItem(i);
              }
            }
            this.completeLayers = this.elements[i] ? this.completeLayers : false;
          }
          this.checkPendingElements();
        };
        BaseRenderer.prototype.createItem = function(layer) {
          switch (layer.ty) {
            case 2:
              return this.createImage(layer);
            case 0:
              return this.createComp(layer);
            case 1:
              return this.createSolid(layer);
            case 3:
              return this.createNull(layer);
            case 4:
              return this.createShape(layer);
            case 5:
              return this.createText(layer);
            case 6:
              return this.createAudio(layer);
            case 13:
              return this.createCamera(layer);
            case 15:
              return this.createFootage(layer);
            default:
              return this.createNull(layer);
          }
        };
        BaseRenderer.prototype.createCamera = function() {
          throw new Error("You're using a 3d camera. Try the html renderer.");
        };
        BaseRenderer.prototype.createAudio = function(data) {
          return new AudioElement(data, this.globalData, this);
        };
        BaseRenderer.prototype.createFootage = function(data) {
          return new FootageElement(data, this.globalData, this);
        };
        BaseRenderer.prototype.buildAllItems = function() {
          var i;
          var len = this.layers.length;
          for (i = 0; i < len; i += 1) {
            this.buildItem(i);
          }
          this.checkPendingElements();
        };
        BaseRenderer.prototype.includeLayers = function(newLayers) {
          this.completeLayers = false;
          var i;
          var len = newLayers.length;
          var j;
          var jLen = this.layers.length;
          for (i = 0; i < len; i += 1) {
            j = 0;
            while (j < jLen) {
              if (this.layers[j].id === newLayers[i].id) {
                this.layers[j] = newLayers[i];
                break;
              }
              j += 1;
            }
          }
        };
        BaseRenderer.prototype.setProjectInterface = function(pInterface) {
          this.globalData.projectInterface = pInterface;
        };
        BaseRenderer.prototype.initItems = function() {
          if (!this.globalData.progressiveLoad) {
            this.buildAllItems();
          }
        };
        BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
          var elements = this.elements;
          var layers = this.layers;
          var i = 0;
          var len = layers.length;
          while (i < len) {
            if (layers[i].ind == parentName) {
              if (!elements[i] || elements[i] === true) {
                this.buildItem(i);
                this.addPendingElement(element);
              } else {
                hierarchy.push(elements[i]);
                elements[i].setAsParent();
                if (layers[i].parent !== void 0) {
                  this.buildElementParenting(element, layers[i].parent, hierarchy);
                } else {
                  element.setHierarchy(hierarchy);
                }
              }
            }
            i += 1;
          }
        };
        BaseRenderer.prototype.addPendingElement = function(element) {
          this.pendingElements.push(element);
        };
        BaseRenderer.prototype.searchExtraCompositions = function(assets) {
          var i;
          var len = assets.length;
          for (i = 0; i < len; i += 1) {
            if (assets[i].xt) {
              var comp = this.createComp(assets[i]);
              comp.initExpressions();
              this.globalData.projectInterface.registerComposition(comp);
            }
          }
        };
        BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
          this.globalData.fontManager = new FontManager();
          this.globalData.fontManager.addChars(animData.chars);
          this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
          this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
          this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
          this.globalData.imageLoader = this.animationItem.imagePreloader;
          this.globalData.audioController = this.animationItem.audioController;
          this.globalData.frameId = 0;
          this.globalData.frameRate = animData.fr;
          this.globalData.nm = animData.nm;
          this.globalData.compSize = {
            w: animData.w,
            h: animData.h
          };
        };
        function SVGRenderer(animationItem, config) {
          this.animationItem = animationItem;
          this.layers = null;
          this.renderedFrame = -1;
          this.svgElement = createNS("svg");
          var ariaLabel = "";
          if (config && config.title) {
            var titleElement = createNS("title");
            var titleId = createElementID();
            titleElement.setAttribute("id", titleId);
            titleElement.textContent = config.title;
            this.svgElement.appendChild(titleElement);
            ariaLabel += titleId;
          }
          if (config && config.description) {
            var descElement = createNS("desc");
            var descId = createElementID();
            descElement.setAttribute("id", descId);
            descElement.textContent = config.description;
            this.svgElement.appendChild(descElement);
            ariaLabel += " " + descId;
          }
          if (ariaLabel) {
            this.svgElement.setAttribute("aria-labelledby", ariaLabel);
          }
          var defs = createNS("defs");
          this.svgElement.appendChild(defs);
          var maskElement = createNS("g");
          this.svgElement.appendChild(maskElement);
          this.layerElement = maskElement;
          this.renderConfig = {
            preserveAspectRatio: config && config.preserveAspectRatio || "xMidYMid meet",
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
            contentVisibility: config && config.contentVisibility || "visible",
            progressiveLoad: config && config.progressiveLoad || false,
            hideOnTransparent: !(config && config.hideOnTransparent === false),
            viewBoxOnly: config && config.viewBoxOnly || false,
            viewBoxSize: config && config.viewBoxSize || false,
            className: config && config.className || "",
            id: config && config.id || "",
            focusable: config && config.focusable,
            filterSize: {
              width: config && config.filterSize && config.filterSize.width || "100%",
              height: config && config.filterSize && config.filterSize.height || "100%",
              x: config && config.filterSize && config.filterSize.x || "0%",
              y: config && config.filterSize && config.filterSize.y || "0%"
            }
          };
          this.globalData = {
            _mdf: false,
            frameNum: -1,
            defs,
            renderConfig: this.renderConfig
          };
          this.elements = [];
          this.pendingElements = [];
          this.destroyed = false;
          this.rendererType = "svg";
        }
        extendPrototype([BaseRenderer], SVGRenderer);
        SVGRenderer.prototype.createNull = function(data) {
          return new NullElement(data, this.globalData, this);
        };
        SVGRenderer.prototype.createShape = function(data) {
          return new SVGShapeElement(data, this.globalData, this);
        };
        SVGRenderer.prototype.createText = function(data) {
          return new SVGTextLottieElement(data, this.globalData, this);
        };
        SVGRenderer.prototype.createImage = function(data) {
          return new IImageElement(data, this.globalData, this);
        };
        SVGRenderer.prototype.createComp = function(data) {
          return new SVGCompElement(data, this.globalData, this);
        };
        SVGRenderer.prototype.createSolid = function(data) {
          return new ISolidElement(data, this.globalData, this);
        };
        SVGRenderer.prototype.configAnimation = function(animData) {
          this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
          if (this.renderConfig.viewBoxSize) {
            this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize);
          } else {
            this.svgElement.setAttribute("viewBox", "0 0 " + animData.w + " " + animData.h);
          }
          if (!this.renderConfig.viewBoxOnly) {
            this.svgElement.setAttribute("width", animData.w);
            this.svgElement.setAttribute("height", animData.h);
            this.svgElement.style.width = "100%";
            this.svgElement.style.height = "100%";
            this.svgElement.style.transform = "translate3d(0,0,0)";
            this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
          }
          if (this.renderConfig.className) {
            this.svgElement.setAttribute("class", this.renderConfig.className);
          }
          if (this.renderConfig.id) {
            this.svgElement.setAttribute("id", this.renderConfig.id);
          }
          if (this.renderConfig.focusable !== void 0) {
            this.svgElement.setAttribute("focusable", this.renderConfig.focusable);
          }
          this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio);
          this.animationItem.wrapper.appendChild(this.svgElement);
          var defs = this.globalData.defs;
          this.setupGlobalData(animData, defs);
          this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
          this.data = animData;
          var maskElement = createNS("clipPath");
          var rect = createNS("rect");
          rect.setAttribute("width", animData.w);
          rect.setAttribute("height", animData.h);
          rect.setAttribute("x", 0);
          rect.setAttribute("y", 0);
          var maskId = createElementID();
          maskElement.setAttribute("id", maskId);
          maskElement.appendChild(rect);
          this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#" + maskId + ")");
          defs.appendChild(maskElement);
          this.layers = animData.layers;
          this.elements = createSizedArray(animData.layers.length);
        };
        SVGRenderer.prototype.destroy = function() {
          if (this.animationItem.wrapper) {
            this.animationItem.wrapper.innerText = "";
          }
          this.layerElement = null;
          this.globalData.defs = null;
          var i;
          var len = this.layers ? this.layers.length : 0;
          for (i = 0; i < len; i += 1) {
            if (this.elements[i]) {
              this.elements[i].destroy();
            }
          }
          this.elements.length = 0;
          this.destroyed = true;
          this.animationItem = null;
        };
        SVGRenderer.prototype.updateContainerSize = function() {
        };
        SVGRenderer.prototype.buildItem = function(pos) {
          var elements = this.elements;
          if (elements[pos] || this.layers[pos].ty === 99) {
            return;
          }
          elements[pos] = true;
          var element = this.createItem(this.layers[pos]);
          elements[pos] = element;
          if (expressionsPlugin) {
            if (this.layers[pos].ty === 0) {
              this.globalData.projectInterface.registerComposition(element);
            }
            element.initExpressions();
          }
          this.appendElementInPos(element, pos);
          if (this.layers[pos].tt) {
            if (!this.elements[pos - 1] || this.elements[pos - 1] === true) {
              this.buildItem(pos - 1);
              this.addPendingElement(element);
            } else {
              element.setMatte(elements[pos - 1].layerId);
            }
          }
        };
        SVGRenderer.prototype.checkPendingElements = function() {
          while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
            if (element.data.tt) {
              var i = 0;
              var len = this.elements.length;
              while (i < len) {
                if (this.elements[i] === element) {
                  element.setMatte(this.elements[i - 1].layerId);
                  break;
                }
                i += 1;
              }
            }
          }
        };
        SVGRenderer.prototype.renderFrame = function(num) {
          if (this.renderedFrame === num || this.destroyed) {
            return;
          }
          if (num === null) {
            num = this.renderedFrame;
          } else {
            this.renderedFrame = num;
          }
          this.globalData.frameNum = num;
          this.globalData.frameId += 1;
          this.globalData.projectInterface.currentFrame = num;
          this.globalData._mdf = false;
          var i;
          var len = this.layers.length;
          if (!this.completeLayers) {
            this.checkLayers(num);
          }
          for (i = len - 1; i >= 0; i -= 1) {
            if (this.completeLayers || this.elements[i]) {
              this.elements[i].prepareFrame(num - this.layers[i].st);
            }
          }
          if (this.globalData._mdf) {
            for (i = 0; i < len; i += 1) {
              if (this.completeLayers || this.elements[i]) {
                this.elements[i].renderFrame();
              }
            }
          }
        };
        SVGRenderer.prototype.appendElementInPos = function(element, pos) {
          var newElement = element.getBaseElement();
          if (!newElement) {
            return;
          }
          var i = 0;
          var nextElement;
          while (i < pos) {
            if (this.elements[i] && this.elements[i] !== true && this.elements[i].getBaseElement()) {
              nextElement = this.elements[i].getBaseElement();
            }
            i += 1;
          }
          if (nextElement) {
            this.layerElement.insertBefore(newElement, nextElement);
          } else {
            this.layerElement.appendChild(newElement);
          }
        };
        SVGRenderer.prototype.hide = function() {
          this.layerElement.style.display = "none";
        };
        SVGRenderer.prototype.show = function() {
          this.layerElement.style.display = "block";
        };
        function MaskElement(data, element, globalData) {
          this.data = data;
          this.element = element;
          this.globalData = globalData;
          this.storedData = [];
          this.masksProperties = this.data.masksProperties || [];
          this.maskElement = null;
          var defs = this.globalData.defs;
          var i;
          var len = this.masksProperties ? this.masksProperties.length : 0;
          this.viewData = createSizedArray(len);
          this.solidPath = "";
          var path;
          var properties = this.masksProperties;
          var count = 0;
          var currentMasks = [];
          var j;
          var jLen;
          var layerId = createElementID();
          var rect;
          var expansor;
          var feMorph;
          var x;
          var maskType = "clipPath";
          var maskRef = "clip-path";
          for (i = 0; i < len; i += 1) {
            if (properties[i].mode !== "a" && properties[i].mode !== "n" || properties[i].inv || properties[i].o.k !== 100 || properties[i].o.x) {
              maskType = "mask";
              maskRef = "mask";
            }
            if ((properties[i].mode === "s" || properties[i].mode === "i") && count === 0) {
              rect = createNS("rect");
              rect.setAttribute("fill", "#ffffff");
              rect.setAttribute("width", this.element.comp.data.w || 0);
              rect.setAttribute("height", this.element.comp.data.h || 0);
              currentMasks.push(rect);
            } else {
              rect = null;
            }
            path = createNS("path");
            if (properties[i].mode === "n") {
              this.viewData[i] = {
                op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                elem: path,
                lastPath: ""
              };
              defs.appendChild(path);
            } else {
              count += 1;
              path.setAttribute("fill", properties[i].mode === "s" ? "#000000" : "#ffffff");
              path.setAttribute("clip-rule", "nonzero");
              var filterID;
              if (properties[i].x.k !== 0) {
                maskType = "mask";
                maskRef = "mask";
                x = PropertyFactory.getProp(this.element, properties[i].x, 0, null, this.element);
                filterID = createElementID();
                expansor = createNS("filter");
                expansor.setAttribute("id", filterID);
                feMorph = createNS("feMorphology");
                feMorph.setAttribute("operator", "erode");
                feMorph.setAttribute("in", "SourceGraphic");
                feMorph.setAttribute("radius", "0");
                expansor.appendChild(feMorph);
                defs.appendChild(expansor);
                path.setAttribute("stroke", properties[i].mode === "s" ? "#000000" : "#ffffff");
              } else {
                feMorph = null;
                x = null;
              }
              this.storedData[i] = {
                elem: path,
                x,
                expan: feMorph,
                lastPath: "",
                lastOperator: "",
                filterId: filterID,
                lastRadius: 0
              };
              if (properties[i].mode === "i") {
                jLen = currentMasks.length;
                var g = createNS("g");
                for (j = 0; j < jLen; j += 1) {
                  g.appendChild(currentMasks[j]);
                }
                var mask = createNS("mask");
                mask.setAttribute("mask-type", "alpha");
                mask.setAttribute("id", layerId + "_" + count);
                mask.appendChild(path);
                defs.appendChild(mask);
                g.setAttribute("mask", "url(" + locationHref + "#" + layerId + "_" + count + ")");
                currentMasks.length = 0;
                currentMasks.push(g);
              } else {
                currentMasks.push(path);
              }
              if (properties[i].inv && !this.solidPath) {
                this.solidPath = this.createLayerSolidPath();
              }
              this.viewData[i] = {
                elem: path,
                lastPath: "",
                op: PropertyFactory.getProp(this.element, properties[i].o, 0, 0.01, this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element, properties[i], 3),
                invRect: rect
              };
              if (!this.viewData[i].prop.k) {
                this.drawPath(properties[i], this.viewData[i].prop.v, this.viewData[i]);
              }
            }
          }
          this.maskElement = createNS(maskType);
          len = currentMasks.length;
          for (i = 0; i < len; i += 1) {
            this.maskElement.appendChild(currentMasks[i]);
          }
          if (count > 0) {
            this.maskElement.setAttribute("id", layerId);
            this.element.maskedElement.setAttribute(maskRef, "url(" + locationHref + "#" + layerId + ")");
            defs.appendChild(this.maskElement);
          }
          if (this.viewData.length) {
            this.element.addRenderableComponent(this);
          }
        }
        MaskElement.prototype.getMaskProperty = function(pos) {
          return this.viewData[pos].prop;
        };
        MaskElement.prototype.renderFrame = function(isFirstFrame) {
          var finalMat = this.element.finalTransform.mat;
          var i;
          var len = this.masksProperties.length;
          for (i = 0; i < len; i += 1) {
            if (this.viewData[i].prop._mdf || isFirstFrame) {
              this.drawPath(this.masksProperties[i], this.viewData[i].prop.v, this.viewData[i]);
            }
            if (this.viewData[i].op._mdf || isFirstFrame) {
              this.viewData[i].elem.setAttribute("fill-opacity", this.viewData[i].op.v);
            }
            if (this.masksProperties[i].mode !== "n") {
              if (this.viewData[i].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
                this.viewData[i].invRect.setAttribute("transform", finalMat.getInverseMatrix().to2dCSS());
              }
              if (this.storedData[i].x && (this.storedData[i].x._mdf || isFirstFrame)) {
                var feMorph = this.storedData[i].expan;
                if (this.storedData[i].x.v < 0) {
                  if (this.storedData[i].lastOperator !== "erode") {
                    this.storedData[i].lastOperator = "erode";
                    this.storedData[i].elem.setAttribute("filter", "url(" + locationHref + "#" + this.storedData[i].filterId + ")");
                  }
                  feMorph.setAttribute("radius", -this.storedData[i].x.v);
                } else {
                  if (this.storedData[i].lastOperator !== "dilate") {
                    this.storedData[i].lastOperator = "dilate";
                    this.storedData[i].elem.setAttribute("filter", null);
                  }
                  this.storedData[i].elem.setAttribute("stroke-width", this.storedData[i].x.v * 2);
                }
              }
            }
          }
        };
        MaskElement.prototype.getMaskelement = function() {
          return this.maskElement;
        };
        MaskElement.prototype.createLayerSolidPath = function() {
          var path = "M0,0 ";
          path += " h" + this.globalData.compSize.w;
          path += " v" + this.globalData.compSize.h;
          path += " h-" + this.globalData.compSize.w;
          path += " v-" + this.globalData.compSize.h + " ";
          return path;
        };
        MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
          var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
          var i;
          var len;
          len = pathNodes._length;
          for (i = 1; i < len; i += 1) {
            pathString += " C" + pathNodes.o[i - 1][0] + "," + pathNodes.o[i - 1][1] + " " + pathNodes.i[i][0] + "," + pathNodes.i[i][1] + " " + pathNodes.v[i][0] + "," + pathNodes.v[i][1];
          }
          if (pathNodes.c && len > 1) {
            pathString += " C" + pathNodes.o[i - 1][0] + "," + pathNodes.o[i - 1][1] + " " + pathNodes.i[0][0] + "," + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
          }
          if (viewData.lastPath !== pathString) {
            var pathShapeValue = "";
            if (viewData.elem) {
              if (pathNodes.c) {
                pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
              }
              viewData.elem.setAttribute("d", pathShapeValue);
            }
            viewData.lastPath = pathString;
          }
        };
        MaskElement.prototype.destroy = function() {
          this.element = null;
          this.globalData = null;
          this.maskElement = null;
          this.data = null;
          this.masksProperties = null;
        };
        function HierarchyElement() {
        }
        HierarchyElement.prototype = {
          /**
             * @function
             * Initializes hierarchy properties
             *
             */
          initHierarchy: function() {
            this.hierarchy = [];
            this._isParent = false;
            this.checkParenting();
          },
          /**
             * @function
             * Sets layer's hierarchy.
             * @param {array} hierarch
             * layer's parent list
             *
             */
          setHierarchy: function(hierarchy) {
            this.hierarchy = hierarchy;
          },
          /**
             * @function
             * Sets layer as parent.
             *
             */
          setAsParent: function() {
            this._isParent = true;
          },
          /**
             * @function
             * Searches layer's parenting chain
             *
             */
          checkParenting: function() {
            if (this.data.parent !== void 0) {
              this.comp.buildElementParenting(this, this.data.parent, []);
            }
          }
        };
        function FrameElement() {
        }
        FrameElement.prototype = {
          /**
             * @function
             * Initializes frame related properties.
             *
             */
          initFrame: function() {
            this._isFirstFrame = false;
            this.dynamicProperties = [];
            this._mdf = false;
          },
          /**
             * @function
             * Calculates all dynamic values
             *
             * @param {number} num
             * current frame number in Layer's time
             * @param {boolean} isVisible
             * if layers is currently in range
             *
             */
          prepareProperties: function(num, isVisible) {
            var i;
            var len = this.dynamicProperties.length;
            for (i = 0; i < len; i += 1) {
              if (isVisible || this._isParent && this.dynamicProperties[i].propType === "transform") {
                this.dynamicProperties[i].getValue();
                if (this.dynamicProperties[i]._mdf) {
                  this.globalData._mdf = true;
                  this._mdf = true;
                }
              }
            }
          },
          addDynamicProperty: function(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
              this.dynamicProperties.push(prop);
            }
          }
        };
        function TransformElement() {
        }
        TransformElement.prototype = {
          initTransform: function() {
            this.finalTransform = {
              mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : { o: 0 },
              _matMdf: false,
              _opMdf: false,
              mat: new Matrix()
            };
            if (this.data.ao) {
              this.finalTransform.mProp.autoOriented = true;
            }
            if (this.data.ty !== 11) {
            }
          },
          renderTransform: function() {
            this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
            this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
            if (this.hierarchy) {
              var mat;
              var finalMat = this.finalTransform.mat;
              var i = 0;
              var len = this.hierarchy.length;
              if (!this.finalTransform._matMdf) {
                while (i < len) {
                  if (this.hierarchy[i].finalTransform.mProp._mdf) {
                    this.finalTransform._matMdf = true;
                    break;
                  }
                  i += 1;
                }
              }
              if (this.finalTransform._matMdf) {
                mat = this.finalTransform.mProp.v.props;
                finalMat.cloneFromProps(mat);
                for (i = 0; i < len; i += 1) {
                  mat = this.hierarchy[i].finalTransform.mProp.v.props;
                  finalMat.transform(mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]);
                }
              }
            }
          },
          globalToLocal: function(pt) {
            var transforms = [];
            transforms.push(this.finalTransform);
            var flag = true;
            var comp = this.comp;
            while (flag) {
              if (comp.finalTransform) {
                if (comp.data.hasMask) {
                  transforms.splice(0, 0, comp.finalTransform);
                }
                comp = comp.comp;
              } else {
                flag = false;
              }
            }
            var i;
            var len = transforms.length;
            var ptNew;
            for (i = 0; i < len; i += 1) {
              ptNew = transforms[i].mat.applyToPointArray(0, 0, 0);
              pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
            }
            return pt;
          },
          mHelper: new Matrix()
        };
        function RenderableElement() {
        }
        RenderableElement.prototype = {
          initRenderable: function() {
            this.isInRange = false;
            this.hidden = false;
            this.isTransparent = false;
            this.renderableComponents = [];
          },
          addRenderableComponent: function(component) {
            if (this.renderableComponents.indexOf(component) === -1) {
              this.renderableComponents.push(component);
            }
          },
          removeRenderableComponent: function(component) {
            if (this.renderableComponents.indexOf(component) !== -1) {
              this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
            }
          },
          prepareRenderableFrame: function(num) {
            this.checkLayerLimits(num);
          },
          checkTransparency: function() {
            if (this.finalTransform.mProp.o.v <= 0) {
              if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
                this.isTransparent = true;
                this.hide();
              }
            } else if (this.isTransparent) {
              this.isTransparent = false;
              this.show();
            }
          },
          /**
             * @function
             * Initializes frame related properties.
             *
             * @param {number} num
             * current frame number in Layer's time
             *
             */
          checkLayerLimits: function(num) {
            if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
              if (this.isInRange !== true) {
                this.globalData._mdf = true;
                this._mdf = true;
                this.isInRange = true;
                this.show();
              }
            } else if (this.isInRange !== false) {
              this.globalData._mdf = true;
              this.isInRange = false;
              this.hide();
            }
          },
          renderRenderable: function() {
            var i;
            var len = this.renderableComponents.length;
            for (i = 0; i < len; i += 1) {
              this.renderableComponents[i].renderFrame(this._isFirstFrame);
            }
          },
          sourceRectAtTime: function() {
            return {
              top: 0,
              left: 0,
              width: 100,
              height: 100
            };
          },
          getLayerSize: function() {
            if (this.data.ty === 5) {
              return { w: this.data.textData.width, h: this.data.textData.height };
            }
            return { w: this.data.width, h: this.data.height };
          }
        };
        function RenderableDOMElement() {
        }
        (function() {
          var _prototype = {
            initElement: function(data, globalData, comp) {
              this.initFrame();
              this.initBaseData(data, globalData, comp);
              this.initTransform(data, globalData, comp);
              this.initHierarchy();
              this.initRenderable();
              this.initRendererElement();
              this.createContainerElements();
              this.createRenderableComponents();
              this.createContent();
              this.hide();
            },
            hide: function() {
              if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                var elem = this.baseElement || this.layerElement;
                elem.style.display = "none";
                this.hidden = true;
              }
            },
            show: function() {
              if (this.isInRange && !this.isTransparent) {
                if (!this.data.hd) {
                  var elem = this.baseElement || this.layerElement;
                  elem.style.display = "block";
                }
                this.hidden = false;
                this._isFirstFrame = true;
              }
            },
            renderFrame: function() {
              if (this.data.hd || this.hidden) {
                return;
              }
              this.renderTransform();
              this.renderRenderable();
              this.renderElement();
              this.renderInnerContent();
              if (this._isFirstFrame) {
                this._isFirstFrame = false;
              }
            },
            renderInnerContent: function() {
            },
            prepareFrame: function(num) {
              this._mdf = false;
              this.prepareRenderableFrame(num);
              this.prepareProperties(num, this.isInRange);
              this.checkTransparency();
            },
            destroy: function() {
              this.innerElem = null;
              this.destroyBaseElement();
            }
          };
          extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
        })();
        function ProcessedElement(element, position) {
          this.elem = element;
          this.pos = position;
        }
        function SVGStyleData(data, level) {
          this.data = data;
          this.type = data.ty;
          this.d = "";
          this.lvl = level;
          this._mdf = false;
          this.closed = data.hd === true;
          this.pElem = createNS("path");
          this.msElem = null;
        }
        SVGStyleData.prototype.reset = function() {
          this.d = "";
          this._mdf = false;
        };
        function SVGShapeData(transformers, level, shape) {
          this.caches = [];
          this.styles = [];
          this.transformers = transformers;
          this.lStr = "";
          this.sh = shape;
          this.lvl = level;
          this._isAnimated = !!shape.k;
          var i = 0;
          var len = transformers.length;
          while (i < len) {
            if (transformers[i].mProps.dynamicProperties.length) {
              this._isAnimated = true;
              break;
            }
            i += 1;
          }
        }
        SVGShapeData.prototype.setAsAnimated = function() {
          this._isAnimated = true;
        };
        function SVGTransformData(mProps, op, container) {
          this.transform = {
            mProps,
            op,
            container
          };
          this.elements = [];
          this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
        }
        function SVGStrokeStyleData(elem, data, styleOb) {
          this.initDynamicPropertyContainer(elem);
          this.getValue = this.iterateDynamicProperties;
          this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
          this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
          this.d = new DashProperty(elem, data.d || {}, "svg", this);
          this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
          this.style = styleOb;
          this._isAnimated = !!this._isAnimated;
        }
        extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
        function SVGFillStyleData(elem, data, styleOb) {
          this.initDynamicPropertyContainer(elem);
          this.getValue = this.iterateDynamicProperties;
          this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
          this.c = PropertyFactory.getProp(elem, data.c, 1, 255, this);
          this.style = styleOb;
        }
        extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
        function SVGGradientFillStyleData(elem, data, styleOb) {
          this.initDynamicPropertyContainer(elem);
          this.getValue = this.iterateDynamicProperties;
          this.initGradientData(elem, data, styleOb);
        }
        SVGGradientFillStyleData.prototype.initGradientData = function(elem, data, styleOb) {
          this.o = PropertyFactory.getProp(elem, data.o, 0, 0.01, this);
          this.s = PropertyFactory.getProp(elem, data.s, 1, null, this);
          this.e = PropertyFactory.getProp(elem, data.e, 1, null, this);
          this.h = PropertyFactory.getProp(elem, data.h || { k: 0 }, 0, 0.01, this);
          this.a = PropertyFactory.getProp(elem, data.a || { k: 0 }, 0, degToRads, this);
          this.g = new GradientProperty(elem, data.g, this);
          this.style = styleOb;
          this.stops = [];
          this.setGradientData(styleOb.pElem, data);
          this.setGradientOpacity(data, styleOb);
          this._isAnimated = !!this._isAnimated;
        };
        SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data) {
          var gradientId = createElementID();
          var gfill = createNS(data.t === 1 ? "linearGradient" : "radialGradient");
          gfill.setAttribute("id", gradientId);
          gfill.setAttribute("spreadMethod", "pad");
          gfill.setAttribute("gradientUnits", "userSpaceOnUse");
          var stops = [];
          var stop;
          var j;
          var jLen;
          jLen = data.g.p * 4;
          for (j = 0; j < jLen; j += 4) {
            stop = createNS("stop");
            gfill.appendChild(stop);
            stops.push(stop);
          }
          pathElement.setAttribute(data.ty === "gf" ? "fill" : "stroke", "url(" + locationHref + "#" + gradientId + ")");
          this.gf = gfill;
          this.cst = stops;
        };
        SVGGradientFillStyleData.prototype.setGradientOpacity = function(data, styleOb) {
          if (this.g._hasOpacity && !this.g._collapsable) {
            var stop;
            var j;
            var jLen;
            var mask = createNS("mask");
            var maskElement = createNS("path");
            mask.appendChild(maskElement);
            var opacityId = createElementID();
            var maskId = createElementID();
            mask.setAttribute("id", maskId);
            var opFill = createNS(data.t === 1 ? "linearGradient" : "radialGradient");
            opFill.setAttribute("id", opacityId);
            opFill.setAttribute("spreadMethod", "pad");
            opFill.setAttribute("gradientUnits", "userSpaceOnUse");
            jLen = data.g.k.k[0].s ? data.g.k.k[0].s.length : data.g.k.k.length;
            var stops = this.stops;
            for (j = data.g.p * 4; j < jLen; j += 2) {
              stop = createNS("stop");
              stop.setAttribute("stop-color", "rgb(255,255,255)");
              opFill.appendChild(stop);
              stops.push(stop);
            }
            maskElement.setAttribute(data.ty === "gf" ? "fill" : "stroke", "url(" + locationHref + "#" + opacityId + ")");
            if (data.ty === "gs") {
              maskElement.setAttribute("stroke-linecap", lineCapEnum[data.lc || 2]);
              maskElement.setAttribute("stroke-linejoin", lineJoinEnum[data.lj || 2]);
              if (data.lj === 1) {
                maskElement.setAttribute("stroke-miterlimit", data.ml);
              }
            }
            this.of = opFill;
            this.ms = mask;
            this.ost = stops;
            this.maskId = maskId;
            styleOb.msElem = maskElement;
          }
        };
        extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
        function SVGGradientStrokeStyleData(elem, data, styleOb) {
          this.initDynamicPropertyContainer(elem);
          this.getValue = this.iterateDynamicProperties;
          this.w = PropertyFactory.getProp(elem, data.w, 0, null, this);
          this.d = new DashProperty(elem, data.d || {}, "svg", this);
          this.initGradientData(elem, data, styleOb);
          this._isAnimated = !!this._isAnimated;
        }
        extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
        function ShapeGroupData() {
          this.it = [];
          this.prevViewData = [];
          this.gr = createNS("g");
        }
        var SVGElementsRenderer = function() {
          var _identityMatrix = new Matrix();
          var _matrixHelper = new Matrix();
          var ob = {
            createRenderFunction
          };
          function createRenderFunction(data) {
            switch (data.ty) {
              case "fl":
                return renderFill;
              case "gf":
                return renderGradient;
              case "gs":
                return renderGradientStroke;
              case "st":
                return renderStroke;
              case "sh":
              case "el":
              case "rc":
              case "sr":
                return renderPath;
              case "tr":
                return renderContentTransform;
              default:
                return null;
            }
          }
          function renderContentTransform(styleData, itemData, isFirstFrame) {
            if (isFirstFrame || itemData.transform.op._mdf) {
              itemData.transform.container.setAttribute("opacity", itemData.transform.op.v);
            }
            if (isFirstFrame || itemData.transform.mProps._mdf) {
              itemData.transform.container.setAttribute("transform", itemData.transform.mProps.v.to2dCSS());
            }
          }
          function renderPath(styleData, itemData, isFirstFrame) {
            var j;
            var jLen;
            var pathStringTransformed;
            var redraw;
            var pathNodes;
            var l;
            var lLen = itemData.styles.length;
            var lvl = itemData.lvl;
            var paths;
            var mat;
            var props;
            var iterations;
            var k;
            for (l = 0; l < lLen; l += 1) {
              redraw = itemData.sh._mdf || isFirstFrame;
              if (itemData.styles[l].lvl < lvl) {
                mat = _matrixHelper.reset();
                iterations = lvl - itemData.styles[l].lvl;
                k = itemData.transformers.length - 1;
                while (!redraw && iterations > 0) {
                  redraw = itemData.transformers[k].mProps._mdf || redraw;
                  iterations -= 1;
                  k -= 1;
                }
                if (redraw) {
                  iterations = lvl - itemData.styles[l].lvl;
                  k = itemData.transformers.length - 1;
                  while (iterations > 0) {
                    props = itemData.transformers[k].mProps.v.props;
                    mat.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
                    iterations -= 1;
                    k -= 1;
                  }
                }
              } else {
                mat = _identityMatrix;
              }
              paths = itemData.sh.paths;
              jLen = paths._length;
              if (redraw) {
                pathStringTransformed = "";
                for (j = 0; j < jLen; j += 1) {
                  pathNodes = paths.shapes[j];
                  if (pathNodes && pathNodes._length) {
                    pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                  }
                }
                itemData.caches[l] = pathStringTransformed;
              } else {
                pathStringTransformed = itemData.caches[l];
              }
              itemData.styles[l].d += styleData.hd === true ? "" : pathStringTransformed;
              itemData.styles[l]._mdf = redraw || itemData.styles[l]._mdf;
            }
          }
          function renderFill(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;
            if (itemData.c._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("fill", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
            }
            if (itemData.o._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
            }
          }
          function renderGradientStroke(styleData, itemData, isFirstFrame) {
            renderGradient(styleData, itemData, isFirstFrame);
            renderStroke(styleData, itemData, isFirstFrame);
          }
          function renderGradient(styleData, itemData, isFirstFrame) {
            var gfill = itemData.gf;
            var hasOpacity = itemData.g._hasOpacity;
            var pt1 = itemData.s.v;
            var pt2 = itemData.e.v;
            if (itemData.o._mdf || isFirstFrame) {
              var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
              itemData.style.pElem.setAttribute(attr, itemData.o.v);
            }
            if (itemData.s._mdf || isFirstFrame) {
              var attr1 = styleData.t === 1 ? "x1" : "cx";
              var attr2 = attr1 === "x1" ? "y1" : "cy";
              gfill.setAttribute(attr1, pt1[0]);
              gfill.setAttribute(attr2, pt1[1]);
              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute(attr1, pt1[0]);
                itemData.of.setAttribute(attr2, pt1[1]);
              }
            }
            var stops;
            var i;
            var len;
            var stop;
            if (itemData.g._cmdf || isFirstFrame) {
              stops = itemData.cst;
              var cValues = itemData.g.c;
              len = stops.length;
              for (i = 0; i < len; i += 1) {
                stop = stops[i];
                stop.setAttribute("offset", cValues[i * 4] + "%");
                stop.setAttribute("stop-color", "rgb(" + cValues[i * 4 + 1] + "," + cValues[i * 4 + 2] + "," + cValues[i * 4 + 3] + ")");
              }
            }
            if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
              var oValues = itemData.g.o;
              if (itemData.g._collapsable) {
                stops = itemData.cst;
              } else {
                stops = itemData.ost;
              }
              len = stops.length;
              for (i = 0; i < len; i += 1) {
                stop = stops[i];
                if (!itemData.g._collapsable) {
                  stop.setAttribute("offset", oValues[i * 2] + "%");
                }
                stop.setAttribute("stop-opacity", oValues[i * 2 + 1]);
              }
            }
            if (styleData.t === 1) {
              if (itemData.e._mdf || isFirstFrame) {
                gfill.setAttribute("x2", pt2[0]);
                gfill.setAttribute("y2", pt2[1]);
                if (hasOpacity && !itemData.g._collapsable) {
                  itemData.of.setAttribute("x2", pt2[0]);
                  itemData.of.setAttribute("y2", pt2[1]);
                }
              }
            } else {
              var rad;
              if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                gfill.setAttribute("r", rad);
                if (hasOpacity && !itemData.g._collapsable) {
                  itemData.of.setAttribute("r", rad);
                }
              }
              if (itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
                if (!rad) {
                  rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                }
                var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
                var percent = itemData.h.v;
                if (percent >= 1) {
                  percent = 0.99;
                } else if (percent <= -1) {
                  percent = -0.99;
                }
                var dist = rad * percent;
                var x = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                var y = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                gfill.setAttribute("fx", x);
                gfill.setAttribute("fy", y);
                if (hasOpacity && !itemData.g._collapsable) {
                  itemData.of.setAttribute("fx", x);
                  itemData.of.setAttribute("fy", y);
                }
              }
            }
          }
          function renderStroke(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;
            var d = itemData.d;
            if (d && (d._mdf || isFirstFrame) && d.dashStr) {
              styleElem.pElem.setAttribute("stroke-dasharray", d.dashStr);
              styleElem.pElem.setAttribute("stroke-dashoffset", d.dashoffset[0]);
            }
            if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
              styleElem.pElem.setAttribute("stroke", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
            }
            if (itemData.o._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
            }
            if (itemData.w._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
              if (styleElem.msElem) {
                styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
              }
            }
          }
          return ob;
        }();
        function ShapeTransformManager() {
          this.sequences = {};
          this.sequenceList = [];
          this.transform_key_count = 0;
        }
        ShapeTransformManager.prototype = {
          addTransformSequence: function(transforms) {
            var i;
            var len = transforms.length;
            var key = "_";
            for (i = 0; i < len; i += 1) {
              key += transforms[i].transform.key + "_";
            }
            var sequence = this.sequences[key];
            if (!sequence) {
              sequence = {
                transforms: [].concat(transforms),
                finalTransform: new Matrix(),
                _mdf: false
              };
              this.sequences[key] = sequence;
              this.sequenceList.push(sequence);
            }
            return sequence;
          },
          processSequence: function(sequence, isFirstFrame) {
            var i = 0;
            var len = sequence.transforms.length;
            var _mdf = isFirstFrame;
            while (i < len && !isFirstFrame) {
              if (sequence.transforms[i].transform.mProps._mdf) {
                _mdf = true;
                break;
              }
              i += 1;
            }
            if (_mdf) {
              var props;
              sequence.finalTransform.reset();
              for (i = len - 1; i >= 0; i -= 1) {
                props = sequence.transforms[i].transform.mProps.v.props;
                sequence.finalTransform.transform(props[0], props[1], props[2], props[3], props[4], props[5], props[6], props[7], props[8], props[9], props[10], props[11], props[12], props[13], props[14], props[15]);
              }
            }
            sequence._mdf = _mdf;
          },
          processSequences: function(isFirstFrame) {
            var i;
            var len = this.sequenceList.length;
            for (i = 0; i < len; i += 1) {
              this.processSequence(this.sequenceList[i], isFirstFrame);
            }
          },
          getNewKey: function() {
            this.transform_key_count += 1;
            return "_" + this.transform_key_count;
          }
        };
        function BaseElement() {
        }
        BaseElement.prototype = {
          checkMasks: function() {
            if (!this.data.hasMask) {
              return false;
            }
            var i = 0;
            var len = this.data.masksProperties.length;
            while (i < len) {
              if (this.data.masksProperties[i].mode !== "n" && this.data.masksProperties[i].cl !== false) {
                return true;
              }
              i += 1;
            }
            return false;
          },
          initExpressions: function() {
            this.layerInterface = LayerExpressionInterface(this);
            if (this.data.hasMask && this.maskManager) {
              this.layerInterface.registerMaskInterface(this.maskManager);
            }
            var effectsInterface = EffectsExpressionInterface.createEffectsInterface(this, this.layerInterface);
            this.layerInterface.registerEffectsInterface(effectsInterface);
            if (this.data.ty === 0 || this.data.xt) {
              this.compInterface = CompExpressionInterface(this);
            } else if (this.data.ty === 4) {
              this.layerInterface.shapeInterface = ShapeExpressionInterface(this.shapesData, this.itemsData, this.layerInterface);
              this.layerInterface.content = this.layerInterface.shapeInterface;
            } else if (this.data.ty === 5) {
              this.layerInterface.textInterface = TextExpressionInterface(this);
              this.layerInterface.text = this.layerInterface.textInterface;
            }
          },
          setBlendMode: function() {
            var blendModeValue = getBlendMode(this.data.bm);
            var elem = this.baseElement || this.layerElement;
            elem.style["mix-blend-mode"] = blendModeValue;
          },
          initBaseData: function(data, globalData, comp) {
            this.globalData = globalData;
            this.comp = comp;
            this.data = data;
            this.layerId = createElementID();
            if (!this.data.sr) {
              this.data.sr = 1;
            }
            this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
          },
          getType: function() {
            return this.type;
          },
          sourceRectAtTime: function() {
          }
        };
        function NullElement(data, globalData, comp) {
          this.initFrame();
          this.initBaseData(data, globalData, comp);
          this.initFrame();
          this.initTransform(data, globalData, comp);
          this.initHierarchy();
        }
        NullElement.prototype.prepareFrame = function(num) {
          this.prepareProperties(num, true);
        };
        NullElement.prototype.renderFrame = function() {
        };
        NullElement.prototype.getBaseElement = function() {
          return null;
        };
        NullElement.prototype.destroy = function() {
        };
        NullElement.prototype.sourceRectAtTime = function() {
        };
        NullElement.prototype.hide = function() {
        };
        extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
        function SVGBaseElement() {
        }
        SVGBaseElement.prototype = {
          initRendererElement: function() {
            this.layerElement = createNS("g");
          },
          createContainerElements: function() {
            this.matteElement = createNS("g");
            this.transformedElement = this.layerElement;
            this.maskedElement = this.layerElement;
            this._sizeChanged = false;
            var layerElementParent = null;
            var filId;
            var fil;
            var gg;
            if (this.data.td) {
              if (this.data.td == 3 || this.data.td == 1) {
                var masker = createNS("mask");
                masker.setAttribute("id", this.layerId);
                masker.setAttribute("mask-type", this.data.td == 3 ? "luminance" : "alpha");
                masker.appendChild(this.layerElement);
                layerElementParent = masker;
                this.globalData.defs.appendChild(masker);
                if (!featureSupport.maskType && this.data.td == 1) {
                  masker.setAttribute("mask-type", "luminance");
                  filId = createElementID();
                  fil = filtersFactory.createFilter(filId);
                  this.globalData.defs.appendChild(fil);
                  fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                  gg = createNS("g");
                  gg.appendChild(this.layerElement);
                  layerElementParent = gg;
                  masker.appendChild(gg);
                  gg.setAttribute("filter", "url(" + locationHref + "#" + filId + ")");
                }
              } else if (this.data.td == 2) {
                var maskGroup = createNS("mask");
                maskGroup.setAttribute("id", this.layerId);
                maskGroup.setAttribute("mask-type", "alpha");
                var maskGrouper = createNS("g");
                maskGroup.appendChild(maskGrouper);
                filId = createElementID();
                fil = filtersFactory.createFilter(filId);
                var feCTr = createNS("feComponentTransfer");
                feCTr.setAttribute("in", "SourceGraphic");
                fil.appendChild(feCTr);
                var feFunc = createNS("feFuncA");
                feFunc.setAttribute("type", "table");
                feFunc.setAttribute("tableValues", "1.0 0.0");
                feCTr.appendChild(feFunc);
                this.globalData.defs.appendChild(fil);
                var alphaRect = createNS("rect");
                alphaRect.setAttribute("width", this.comp.data.w);
                alphaRect.setAttribute("height", this.comp.data.h);
                alphaRect.setAttribute("x", "0");
                alphaRect.setAttribute("y", "0");
                alphaRect.setAttribute("fill", "#ffffff");
                alphaRect.setAttribute("opacity", "0");
                maskGrouper.setAttribute("filter", "url(" + locationHref + "#" + filId + ")");
                maskGrouper.appendChild(alphaRect);
                maskGrouper.appendChild(this.layerElement);
                layerElementParent = maskGrouper;
                if (!featureSupport.maskType) {
                  maskGroup.setAttribute("mask-type", "luminance");
                  fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                  gg = createNS("g");
                  maskGrouper.appendChild(alphaRect);
                  gg.appendChild(this.layerElement);
                  layerElementParent = gg;
                  maskGrouper.appendChild(gg);
                }
                this.globalData.defs.appendChild(maskGroup);
              }
            } else if (this.data.tt) {
              this.matteElement.appendChild(this.layerElement);
              layerElementParent = this.matteElement;
              this.baseElement = this.matteElement;
            } else {
              this.baseElement = this.layerElement;
            }
            if (this.data.ln) {
              this.layerElement.setAttribute("id", this.data.ln);
            }
            if (this.data.cl) {
              this.layerElement.setAttribute("class", this.data.cl);
            }
            if (this.data.ty === 0 && !this.data.hd) {
              var cp = createNS("clipPath");
              var pt = createNS("path");
              pt.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
              var clipId = createElementID();
              cp.setAttribute("id", clipId);
              cp.appendChild(pt);
              this.globalData.defs.appendChild(cp);
              if (this.checkMasks()) {
                var cpGroup = createNS("g");
                cpGroup.setAttribute("clip-path", "url(" + locationHref + "#" + clipId + ")");
                cpGroup.appendChild(this.layerElement);
                this.transformedElement = cpGroup;
                if (layerElementParent) {
                  layerElementParent.appendChild(this.transformedElement);
                } else {
                  this.baseElement = this.transformedElement;
                }
              } else {
                this.layerElement.setAttribute("clip-path", "url(" + locationHref + "#" + clipId + ")");
              }
            }
            if (this.data.bm !== 0) {
              this.setBlendMode();
            }
          },
          renderElement: function() {
            if (this.finalTransform._matMdf) {
              this.transformedElement.setAttribute("transform", this.finalTransform.mat.to2dCSS());
            }
            if (this.finalTransform._opMdf) {
              this.transformedElement.setAttribute("opacity", this.finalTransform.mProp.o.v);
            }
          },
          destroyBaseElement: function() {
            this.layerElement = null;
            this.matteElement = null;
            this.maskManager.destroy();
          },
          getBaseElement: function() {
            if (this.data.hd) {
              return null;
            }
            return this.baseElement;
          },
          createRenderableComponents: function() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
            this.renderableEffectsManager = new SVGEffects(this);
          },
          setMatte: function(id) {
            if (!this.matteElement) {
              return;
            }
            this.matteElement.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
          }
        };
        function IShapeElement() {
        }
        IShapeElement.prototype = {
          addShapeToModifiers: function(data) {
            var i;
            var len = this.shapeModifiers.length;
            for (i = 0; i < len; i += 1) {
              this.shapeModifiers[i].addShape(data);
            }
          },
          isShapeInAnimatedModifiers: function(data) {
            var i = 0;
            var len = this.shapeModifiers.length;
            while (i < len) {
              if (this.shapeModifiers[i].isAnimatedWithShape(data)) {
                return true;
              }
            }
            return false;
          },
          renderModifiers: function() {
            if (!this.shapeModifiers.length) {
              return;
            }
            var i;
            var len = this.shapes.length;
            for (i = 0; i < len; i += 1) {
              this.shapes[i].sh.reset();
            }
            len = this.shapeModifiers.length;
            var shouldBreakProcess;
            for (i = len - 1; i >= 0; i -= 1) {
              shouldBreakProcess = this.shapeModifiers[i].processShapes(this._isFirstFrame);
              if (shouldBreakProcess) {
                break;
              }
            }
          },
          searchProcessedElement: function(elem) {
            var elements = this.processedElements;
            var i = 0;
            var len = elements.length;
            while (i < len) {
              if (elements[i].elem === elem) {
                return elements[i].pos;
              }
              i += 1;
            }
            return 0;
          },
          addProcessedElement: function(elem, pos) {
            var elements = this.processedElements;
            var i = elements.length;
            while (i) {
              i -= 1;
              if (elements[i].elem === elem) {
                elements[i].pos = pos;
                return;
              }
            }
            elements.push(new ProcessedElement(elem, pos));
          },
          prepareFrame: function(num) {
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
          }
        };
        function ITextElement() {
        }
        ITextElement.prototype.initElement = function(data, globalData, comp) {
          this.lettersChangedFlag = true;
          this.initFrame();
          this.initBaseData(data, globalData, comp);
          this.textProperty = new TextProperty(this, data.t, this.dynamicProperties);
          this.textAnimator = new TextAnimatorProperty(data.t, this.renderType, this);
          this.initTransform(data, globalData, comp);
          this.initHierarchy();
          this.initRenderable();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          this.createContent();
          this.hide();
          this.textAnimator.searchProperties(this.dynamicProperties);
        };
        ITextElement.prototype.prepareFrame = function(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
          if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
            this.buildNewText();
            this.textProperty._isFirstFrame = false;
            this.textProperty._mdf = false;
          }
        };
        ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
          var j;
          var jLen = shapes.length;
          var pathNodes;
          var shapeStr = "";
          for (j = 0; j < jLen; j += 1) {
            pathNodes = shapes[j].ks.k;
            shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
          }
          return shapeStr;
        };
        ITextElement.prototype.updateDocumentData = function(newData, index2) {
          this.textProperty.updateDocumentData(newData, index2);
        };
        ITextElement.prototype.canResizeFont = function(_canResize) {
          this.textProperty.canResizeFont(_canResize);
        };
        ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
          this.textProperty.setMinimumFontSize(_fontSize);
        };
        ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
          if (documentData.ps) {
            matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
          }
          matrixHelper.translate(0, -documentData.ls, 0);
          switch (documentData.j) {
            case 1:
              matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
              break;
            case 2:
              matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
              break;
            default:
              break;
          }
          matrixHelper.translate(xPos, yPos, 0);
        };
        ITextElement.prototype.buildColor = function(colorData) {
          return "rgb(" + Math.round(colorData[0] * 255) + "," + Math.round(colorData[1] * 255) + "," + Math.round(colorData[2] * 255) + ")";
        };
        ITextElement.prototype.emptyProp = new LetterProps();
        ITextElement.prototype.destroy = function() {
        };
        function ICompElement() {
        }
        extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
        ICompElement.prototype.initElement = function(data, globalData, comp) {
          this.initFrame();
          this.initBaseData(data, globalData, comp);
          this.initTransform(data, globalData, comp);
          this.initRenderable();
          this.initHierarchy();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          if (this.data.xt || !globalData.progressiveLoad) {
            this.buildAllItems();
          }
          this.hide();
        };
        ICompElement.prototype.prepareFrame = function(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
          if (!this.isInRange && !this.data.xt) {
            return;
          }
          if (!this.tm._placeholder) {
            var timeRemapped = this.tm.v;
            if (timeRemapped === this.data.op) {
              timeRemapped = this.data.op - 1;
            }
            this.renderedFrame = timeRemapped;
          } else {
            this.renderedFrame = num / this.data.sr;
          }
          var i;
          var len = this.elements.length;
          if (!this.completeLayers) {
            this.checkLayers(this.renderedFrame);
          }
          for (i = len - 1; i >= 0; i -= 1) {
            if (this.completeLayers || this.elements[i]) {
              this.elements[i].prepareFrame(this.renderedFrame - this.layers[i].st);
              if (this.elements[i]._mdf) {
                this._mdf = true;
              }
            }
          }
        };
        ICompElement.prototype.renderInnerContent = function() {
          var i;
          var len = this.layers.length;
          for (i = 0; i < len; i += 1) {
            if (this.completeLayers || this.elements[i]) {
              this.elements[i].renderFrame();
            }
          }
        };
        ICompElement.prototype.setElements = function(elems) {
          this.elements = elems;
        };
        ICompElement.prototype.getElements = function() {
          return this.elements;
        };
        ICompElement.prototype.destroyElements = function() {
          var i;
          var len = this.layers.length;
          for (i = 0; i < len; i += 1) {
            if (this.elements[i]) {
              this.elements[i].destroy();
            }
          }
        };
        ICompElement.prototype.destroy = function() {
          this.destroyElements();
          this.destroyBaseElement();
        };
        function IImageElement(data, globalData, comp) {
          this.assetData = globalData.getAssetData(data.refId);
          this.initElement(data, globalData, comp);
          this.sourceRect = {
            top: 0,
            left: 0,
            width: this.assetData.w,
            height: this.assetData.h
          };
        }
        extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
        IImageElement.prototype.createContent = function() {
          var assetPath = this.globalData.getAssetsPath(this.assetData);
          this.innerElem = createNS("image");
          this.innerElem.setAttribute("width", this.assetData.w + "px");
          this.innerElem.setAttribute("height", this.assetData.h + "px");
          this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
          this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
          this.layerElement.appendChild(this.innerElem);
        };
        IImageElement.prototype.sourceRectAtTime = function() {
          return this.sourceRect;
        };
        function ISolidElement(data, globalData, comp) {
          this.initElement(data, globalData, comp);
        }
        extendPrototype([IImageElement], ISolidElement);
        ISolidElement.prototype.createContent = function() {
          var rect = createNS("rect");
          rect.setAttribute("width", this.data.sw);
          rect.setAttribute("height", this.data.sh);
          rect.setAttribute("fill", this.data.sc);
          this.layerElement.appendChild(rect);
        };
        function AudioElement(data, globalData, comp) {
          this.initFrame();
          this.initRenderable();
          this.assetData = globalData.getAssetData(data.refId);
          this.initBaseData(data, globalData, comp);
          this._isPlaying = false;
          this._canPlay = false;
          var assetPath = this.globalData.getAssetsPath(this.assetData);
          this.audio = this.globalData.audioController.createAudio(assetPath);
          this._currentTime = 0;
          this.globalData.audioController.addAudio(this);
          this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : { _placeholder: true };
        }
        AudioElement.prototype.prepareFrame = function(num) {
          this.prepareRenderableFrame(num, true);
          this.prepareProperties(num, true);
          if (!this.tm._placeholder) {
            var timeRemapped = this.tm.v;
            this._currentTime = timeRemapped;
          } else {
            this._currentTime = num / this.data.sr;
          }
        };
        extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
        AudioElement.prototype.renderFrame = function() {
          if (this.isInRange && this._canPlay) {
            if (!this._isPlaying) {
              this.audio.play();
              this.audio.seek(this._currentTime / this.globalData.frameRate);
              this._isPlaying = true;
            } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
              this.audio.seek(this._currentTime / this.globalData.frameRate);
            }
          }
        };
        AudioElement.prototype.show = function() {
        };
        AudioElement.prototype.hide = function() {
          this.audio.pause();
          this._isPlaying = false;
        };
        AudioElement.prototype.pause = function() {
          this.audio.pause();
          this._isPlaying = false;
          this._canPlay = false;
        };
        AudioElement.prototype.resume = function() {
          this._canPlay = true;
        };
        AudioElement.prototype.setRate = function(rateValue) {
          this.audio.rate(rateValue);
        };
        AudioElement.prototype.volume = function(volumeValue) {
          this.audio.volume(volumeValue);
        };
        AudioElement.prototype.getBaseElement = function() {
          return null;
        };
        AudioElement.prototype.destroy = function() {
        };
        AudioElement.prototype.sourceRectAtTime = function() {
        };
        AudioElement.prototype.initExpressions = function() {
        };
        function SVGCompElement(data, globalData, comp) {
          this.layers = data.layers;
          this.supports3d = true;
          this.completeLayers = false;
          this.pendingElements = [];
          this.elements = this.layers ? createSizedArray(this.layers.length) : [];
          this.initElement(data, globalData, comp);
          this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : { _placeholder: true };
        }
        extendPrototype([SVGRenderer, ICompElement, SVGBaseElement], SVGCompElement);
        function SVGTextLottieElement(data, globalData, comp) {
          this.textSpans = [];
          this.renderType = "svg";
          this.initElement(data, globalData, comp);
        }
        extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
        SVGTextLottieElement.prototype.createContent = function() {
          if (this.data.singleShape && !this.globalData.fontManager.chars) {
            this.textContainer = createNS("text");
          }
        };
        SVGTextLottieElement.prototype.buildTextContents = function(textArray) {
          var i = 0;
          var len = textArray.length;
          var textContents = [];
          var currentTextContent = "";
          while (i < len) {
            if (textArray[i] === String.fromCharCode(13) || textArray[i] === String.fromCharCode(3)) {
              textContents.push(currentTextContent);
              currentTextContent = "";
            } else {
              currentTextContent += textArray[i];
            }
            i += 1;
          }
          textContents.push(currentTextContent);
          return textContents;
        };
        SVGTextLottieElement.prototype.buildNewText = function() {
          var i;
          var len;
          var documentData = this.textProperty.currentData;
          this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
          if (documentData.fc) {
            this.layerElement.setAttribute("fill", this.buildColor(documentData.fc));
          } else {
            this.layerElement.setAttribute("fill", "rgba(0,0,0,0)");
          }
          if (documentData.sc) {
            this.layerElement.setAttribute("stroke", this.buildColor(documentData.sc));
            this.layerElement.setAttribute("stroke-width", documentData.sw);
          }
          this.layerElement.setAttribute("font-size", documentData.finalSize);
          var fontData = this.globalData.fontManager.getFontByName(documentData.f);
          if (fontData.fClass) {
            this.layerElement.setAttribute("class", fontData.fClass);
          } else {
            this.layerElement.setAttribute("font-family", fontData.fFamily);
            var fWeight = documentData.fWeight;
            var fStyle = documentData.fStyle;
            this.layerElement.setAttribute("font-style", fStyle);
            this.layerElement.setAttribute("font-weight", fWeight);
          }
          this.layerElement.setAttribute("aria-label", documentData.t);
          var letters = documentData.l || [];
          var usesGlyphs = !!this.globalData.fontManager.chars;
          len = letters.length;
          var tSpan;
          var matrixHelper = this.mHelper;
          var shapes;
          var shapeStr = "";
          var singleShape = this.data.singleShape;
          var xPos = 0;
          var yPos = 0;
          var firstLine = true;
          var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
          if (singleShape && !usesGlyphs && !documentData.sz) {
            var tElement = this.textContainer;
            var justify = "start";
            switch (documentData.j) {
              case 1:
                justify = "end";
                break;
              case 2:
                justify = "middle";
                break;
              default:
                justify = "start";
                break;
            }
            tElement.setAttribute("text-anchor", justify);
            tElement.setAttribute("letter-spacing", trackingOffset);
            var textContent = this.buildTextContents(documentData.finalText);
            len = textContent.length;
            yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
            for (i = 0; i < len; i += 1) {
              tSpan = this.textSpans[i] || createNS("tspan");
              tSpan.textContent = textContent[i];
              tSpan.setAttribute("x", 0);
              tSpan.setAttribute("y", yPos);
              tSpan.style.display = "inherit";
              tElement.appendChild(tSpan);
              this.textSpans[i] = tSpan;
              yPos += documentData.finalLineHeight;
            }
            this.layerElement.appendChild(tElement);
          } else {
            var cachedSpansLength = this.textSpans.length;
            var shapeData;
            var charData;
            for (i = 0; i < len; i += 1) {
              if (!usesGlyphs || !singleShape || i === 0) {
                tSpan = cachedSpansLength > i ? this.textSpans[i] : createNS(usesGlyphs ? "path" : "text");
                if (cachedSpansLength <= i) {
                  tSpan.setAttribute("stroke-linecap", "butt");
                  tSpan.setAttribute("stroke-linejoin", "round");
                  tSpan.setAttribute("stroke-miterlimit", "4");
                  this.textSpans[i] = tSpan;
                  this.layerElement.appendChild(tSpan);
                }
                tSpan.style.display = "inherit";
              }
              matrixHelper.reset();
              matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
              if (singleShape) {
                if (letters[i].n) {
                  xPos = -trackingOffset;
                  yPos += documentData.yOffset;
                  yPos += firstLine ? 1 : 0;
                  firstLine = false;
                }
                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i].line, xPos, yPos);
                xPos += letters[i].l || 0;
                xPos += trackingOffset;
              }
              if (usesGlyphs) {
                charData = this.globalData.fontManager.getCharData(documentData.finalText[i], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                shapeData = charData && charData.data || {};
                shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
                if (!singleShape) {
                  tSpan.setAttribute("d", this.createPathShape(matrixHelper, shapes));
                } else {
                  shapeStr += this.createPathShape(matrixHelper, shapes);
                }
              } else {
                if (singleShape) {
                  tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
                }
                tSpan.textContent = letters[i].val;
                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
              }
            }
            if (singleShape && tSpan) {
              tSpan.setAttribute("d", shapeStr);
            }
          }
          while (i < this.textSpans.length) {
            this.textSpans[i].style.display = "none";
            i += 1;
          }
          this._sizeChanged = true;
        };
        SVGTextLottieElement.prototype.sourceRectAtTime = function() {
          this.prepareFrame(this.comp.renderedFrame - this.data.st);
          this.renderInnerContent();
          if (this._sizeChanged) {
            this._sizeChanged = false;
            var textBox = this.layerElement.getBBox();
            this.bbox = {
              top: textBox.y,
              left: textBox.x,
              width: textBox.width,
              height: textBox.height
            };
          }
          return this.bbox;
        };
        SVGTextLottieElement.prototype.renderInnerContent = function() {
          if (!this.data.singleShape) {
            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
            if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
              this._sizeChanged = true;
              var i;
              var len;
              var renderedLetters = this.textAnimator.renderedLetters;
              var letters = this.textProperty.currentData.l;
              len = letters.length;
              var renderedLetter;
              var textSpan;
              for (i = 0; i < len; i += 1) {
                if (!letters[i].n) {
                  renderedLetter = renderedLetters[i];
                  textSpan = this.textSpans[i];
                  if (renderedLetter._mdf.m) {
                    textSpan.setAttribute("transform", renderedLetter.m);
                  }
                  if (renderedLetter._mdf.o) {
                    textSpan.setAttribute("opacity", renderedLetter.o);
                  }
                  if (renderedLetter._mdf.sw) {
                    textSpan.setAttribute("stroke-width", renderedLetter.sw);
                  }
                  if (renderedLetter._mdf.sc) {
                    textSpan.setAttribute("stroke", renderedLetter.sc);
                  }
                  if (renderedLetter._mdf.fc) {
                    textSpan.setAttribute("fill", renderedLetter.fc);
                  }
                }
              }
            }
          }
        };
        function SVGShapeElement(data, globalData, comp) {
          this.shapes = [];
          this.shapesData = data.shapes;
          this.stylesList = [];
          this.shapeModifiers = [];
          this.itemsData = [];
          this.processedElements = [];
          this.animatedContents = [];
          this.initElement(data, globalData, comp);
          this.prevViewData = [];
        }
        extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
        SVGShapeElement.prototype.initSecondaryElement = function() {
        };
        SVGShapeElement.prototype.identityMatrix = new Matrix();
        SVGShapeElement.prototype.buildExpressionInterface = function() {
        };
        SVGShapeElement.prototype.createContent = function() {
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
          this.filterUniqueShapes();
        };
        SVGShapeElement.prototype.filterUniqueShapes = function() {
          var i;
          var len = this.shapes.length;
          var shape;
          var j;
          var jLen = this.stylesList.length;
          var style;
          var tempShapes = [];
          var areAnimated = false;
          for (j = 0; j < jLen; j += 1) {
            style = this.stylesList[j];
            areAnimated = false;
            tempShapes.length = 0;
            for (i = 0; i < len; i += 1) {
              shape = this.shapes[i];
              if (shape.styles.indexOf(style) !== -1) {
                tempShapes.push(shape);
                areAnimated = shape._isAnimated || areAnimated;
              }
            }
            if (tempShapes.length > 1 && areAnimated) {
              this.setShapesAsAnimated(tempShapes);
            }
          }
        };
        SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
          var i;
          var len = shapes.length;
          for (i = 0; i < len; i += 1) {
            shapes[i].setAsAnimated();
          }
        };
        SVGShapeElement.prototype.createStyleElement = function(data, level) {
          var elementData;
          var styleOb = new SVGStyleData(data, level);
          var pathElement = styleOb.pElem;
          if (data.ty === "st") {
            elementData = new SVGStrokeStyleData(this, data, styleOb);
          } else if (data.ty === "fl") {
            elementData = new SVGFillStyleData(this, data, styleOb);
          } else if (data.ty === "gf" || data.ty === "gs") {
            var GradientConstructor = data.ty === "gf" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
            elementData = new GradientConstructor(this, data, styleOb);
            this.globalData.defs.appendChild(elementData.gf);
            if (elementData.maskId) {
              this.globalData.defs.appendChild(elementData.ms);
              this.globalData.defs.appendChild(elementData.of);
              pathElement.setAttribute("mask", "url(" + locationHref + "#" + elementData.maskId + ")");
            }
          }
          if (data.ty === "st" || data.ty === "gs") {
            pathElement.setAttribute("stroke-linecap", lineCapEnum[data.lc || 2]);
            pathElement.setAttribute("stroke-linejoin", lineJoinEnum[data.lj || 2]);
            pathElement.setAttribute("fill-opacity", "0");
            if (data.lj === 1) {
              pathElement.setAttribute("stroke-miterlimit", data.ml);
            }
          }
          if (data.r === 2) {
            pathElement.setAttribute("fill-rule", "evenodd");
          }
          if (data.ln) {
            pathElement.setAttribute("id", data.ln);
          }
          if (data.cl) {
            pathElement.setAttribute("class", data.cl);
          }
          if (data.bm) {
            pathElement.style["mix-blend-mode"] = getBlendMode(data.bm);
          }
          this.stylesList.push(styleOb);
          this.addToAnimatedContents(data, elementData);
          return elementData;
        };
        SVGShapeElement.prototype.createGroupElement = function(data) {
          var elementData = new ShapeGroupData();
          if (data.ln) {
            elementData.gr.setAttribute("id", data.ln);
          }
          if (data.cl) {
            elementData.gr.setAttribute("class", data.cl);
          }
          if (data.bm) {
            elementData.gr.style["mix-blend-mode"] = getBlendMode(data.bm);
          }
          return elementData;
        };
        SVGShapeElement.prototype.createTransformElement = function(data, container) {
          var transformProperty = TransformPropertyFactory.getTransformProperty(this, data, this);
          var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
          this.addToAnimatedContents(data, elementData);
          return elementData;
        };
        SVGShapeElement.prototype.createShapeElement = function(data, ownTransformers, level) {
          var ty = 4;
          if (data.ty === "rc") {
            ty = 5;
          } else if (data.ty === "el") {
            ty = 6;
          } else if (data.ty === "sr") {
            ty = 7;
          }
          var shapeProperty = ShapePropertyFactory.getShapeProp(this, data, ty, this);
          var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
          this.shapes.push(elementData);
          this.addShapeToModifiers(elementData);
          this.addToAnimatedContents(data, elementData);
          return elementData;
        };
        SVGShapeElement.prototype.addToAnimatedContents = function(data, element) {
          var i = 0;
          var len = this.animatedContents.length;
          while (i < len) {
            if (this.animatedContents[i].element === element) {
              return;
            }
            i += 1;
          }
          this.animatedContents.push({
            fn: SVGElementsRenderer.createRenderFunction(data),
            element,
            data
          });
        };
        SVGShapeElement.prototype.setElementStyles = function(elementData) {
          var arr = elementData.styles;
          var j;
          var jLen = this.stylesList.length;
          for (j = 0; j < jLen; j += 1) {
            if (!this.stylesList[j].closed) {
              arr.push(this.stylesList[j]);
            }
          }
        };
        SVGShapeElement.prototype.reloadShapes = function() {
          this._isFirstFrame = true;
          var i;
          var len = this.itemsData.length;
          for (i = 0; i < len; i += 1) {
            this.prevViewData[i] = this.itemsData[i];
          }
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
          this.filterUniqueShapes();
          len = this.dynamicProperties.length;
          for (i = 0; i < len; i += 1) {
            this.dynamicProperties[i].getValue();
          }
          this.renderModifiers();
        };
        SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container, level, transformers, render) {
          var ownTransformers = [].concat(transformers);
          var i;
          var len = arr.length - 1;
          var j;
          var jLen;
          var ownStyles = [];
          var ownModifiers = [];
          var currentTransform;
          var modifier;
          var processedPos;
          for (i = len; i >= 0; i -= 1) {
            processedPos = this.searchProcessedElement(arr[i]);
            if (!processedPos) {
              arr[i]._render = render;
            } else {
              itemsData[i] = prevViewData[processedPos - 1];
            }
            if (arr[i].ty === "fl" || arr[i].ty === "st" || arr[i].ty === "gf" || arr[i].ty === "gs") {
              if (!processedPos) {
                itemsData[i] = this.createStyleElement(arr[i], level);
              } else {
                itemsData[i].style.closed = false;
              }
              if (arr[i]._render) {
                if (itemsData[i].style.pElem.parentNode !== container) {
                  container.appendChild(itemsData[i].style.pElem);
                }
              }
              ownStyles.push(itemsData[i].style);
            } else if (arr[i].ty === "gr") {
              if (!processedPos) {
                itemsData[i] = this.createGroupElement(arr[i]);
              } else {
                jLen = itemsData[i].it.length;
                for (j = 0; j < jLen; j += 1) {
                  itemsData[i].prevViewData[j] = itemsData[i].it[j];
                }
              }
              this.searchShapes(arr[i].it, itemsData[i].it, itemsData[i].prevViewData, itemsData[i].gr, level + 1, ownTransformers, render);
              if (arr[i]._render) {
                if (itemsData[i].gr.parentNode !== container) {
                  container.appendChild(itemsData[i].gr);
                }
              }
            } else if (arr[i].ty === "tr") {
              if (!processedPos) {
                itemsData[i] = this.createTransformElement(arr[i], container);
              }
              currentTransform = itemsData[i].transform;
              ownTransformers.push(currentTransform);
            } else if (arr[i].ty === "sh" || arr[i].ty === "rc" || arr[i].ty === "el" || arr[i].ty === "sr") {
              if (!processedPos) {
                itemsData[i] = this.createShapeElement(arr[i], ownTransformers, level);
              }
              this.setElementStyles(itemsData[i]);
            } else if (arr[i].ty === "tm" || arr[i].ty === "rd" || arr[i].ty === "ms" || arr[i].ty === "pb") {
              if (!processedPos) {
                modifier = ShapeModifiers.getModifier(arr[i].ty);
                modifier.init(this, arr[i]);
                itemsData[i] = modifier;
                this.shapeModifiers.push(modifier);
              } else {
                modifier = itemsData[i];
                modifier.closed = false;
              }
              ownModifiers.push(modifier);
            } else if (arr[i].ty === "rp") {
              if (!processedPos) {
                modifier = ShapeModifiers.getModifier(arr[i].ty);
                itemsData[i] = modifier;
                modifier.init(this, arr, i, itemsData);
                this.shapeModifiers.push(modifier);
                render = false;
              } else {
                modifier = itemsData[i];
                modifier.closed = true;
              }
              ownModifiers.push(modifier);
            }
            this.addProcessedElement(arr[i], i + 1);
          }
          len = ownStyles.length;
          for (i = 0; i < len; i += 1) {
            ownStyles[i].closed = true;
          }
          len = ownModifiers.length;
          for (i = 0; i < len; i += 1) {
            ownModifiers[i].closed = true;
          }
        };
        SVGShapeElement.prototype.renderInnerContent = function() {
          this.renderModifiers();
          var i;
          var len = this.stylesList.length;
          for (i = 0; i < len; i += 1) {
            this.stylesList[i].reset();
          }
          this.renderShape();
          for (i = 0; i < len; i += 1) {
            if (this.stylesList[i]._mdf || this._isFirstFrame) {
              if (this.stylesList[i].msElem) {
                this.stylesList[i].msElem.setAttribute("d", this.stylesList[i].d);
                this.stylesList[i].d = "M0 0" + this.stylesList[i].d;
              }
              this.stylesList[i].pElem.setAttribute("d", this.stylesList[i].d || "M0 0");
            }
          }
        };
        SVGShapeElement.prototype.renderShape = function() {
          var i;
          var len = this.animatedContents.length;
          var animatedContent;
          for (i = 0; i < len; i += 1) {
            animatedContent = this.animatedContents[i];
            if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
              animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
            }
          }
        };
        SVGShapeElement.prototype.destroy = function() {
          this.destroyBaseElement();
          this.shapesData = null;
          this.itemsData = null;
        };
        function SVGTintFilter(filter, filterManager) {
          this.filterManager = filterManager;
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
          feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
          feColorMatrix.setAttribute("result", "f1");
          filter.appendChild(feColorMatrix);
          feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
          feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
          feColorMatrix.setAttribute("result", "f2");
          filter.appendChild(feColorMatrix);
          this.matrixFilter = feColorMatrix;
          if (filterManager.effectElements[2].p.v !== 100 || filterManager.effectElements[2].p.k) {
            var feMerge = createNS("feMerge");
            filter.appendChild(feMerge);
            var feMergeNode;
            feMergeNode = createNS("feMergeNode");
            feMergeNode.setAttribute("in", "SourceGraphic");
            feMerge.appendChild(feMergeNode);
            feMergeNode = createNS("feMergeNode");
            feMergeNode.setAttribute("in", "f2");
            feMerge.appendChild(feMergeNode);
          }
        }
        SVGTintFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var colorBlack = this.filterManager.effectElements[0].p.v;
            var colorWhite = this.filterManager.effectElements[1].p.v;
            var opacity = this.filterManager.effectElements[2].p.v / 100;
            this.matrixFilter.setAttribute("values", colorWhite[0] - colorBlack[0] + " 0 0 0 " + colorBlack[0] + " " + (colorWhite[1] - colorBlack[1]) + " 0 0 0 " + colorBlack[1] + " " + (colorWhite[2] - colorBlack[2]) + " 0 0 0 " + colorBlack[2] + " 0 0 0 " + opacity + " 0");
          }
        };
        function SVGFillFilter(filter, filterManager) {
          this.filterManager = filterManager;
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
          feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
          filter.appendChild(feColorMatrix);
          this.matrixFilter = feColorMatrix;
        }
        SVGFillFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var color = this.filterManager.effectElements[2].p.v;
            var opacity = this.filterManager.effectElements[6].p.v;
            this.matrixFilter.setAttribute("values", "0 0 0 0 " + color[0] + " 0 0 0 0 " + color[1] + " 0 0 0 0 " + color[2] + " 0 0 0 " + opacity + " 0");
          }
        };
        function SVGGaussianBlurEffect(filter, filterManager) {
          filter.setAttribute("x", "-100%");
          filter.setAttribute("y", "-100%");
          filter.setAttribute("width", "300%");
          filter.setAttribute("height", "300%");
          this.filterManager = filterManager;
          var feGaussianBlur = createNS("feGaussianBlur");
          filter.appendChild(feGaussianBlur);
          this.feGaussianBlur = feGaussianBlur;
        }
        SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var kBlurrinessToSigma = 0.3;
            var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;
            var dimensions = this.filterManager.effectElements[1].p.v;
            var sigmaX = dimensions == 3 ? 0 : sigma;
            var sigmaY = dimensions == 2 ? 0 : sigma;
            this.feGaussianBlur.setAttribute("stdDeviation", sigmaX + " " + sigmaY);
            var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? "wrap" : "duplicate";
            this.feGaussianBlur.setAttribute("edgeMode", edgeMode);
          }
        };
        function SVGStrokeEffect(elem, filterManager) {
          this.initialized = false;
          this.filterManager = filterManager;
          this.elem = elem;
          this.paths = [];
        }
        SVGStrokeEffect.prototype.initialize = function() {
          var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
          var path;
          var groupPath;
          var i;
          var len;
          if (this.filterManager.effectElements[1].p.v === 1) {
            len = this.elem.maskManager.masksProperties.length;
            i = 0;
          } else {
            i = this.filterManager.effectElements[0].p.v - 1;
            len = i + 1;
          }
          groupPath = createNS("g");
          groupPath.setAttribute("fill", "none");
          groupPath.setAttribute("stroke-linecap", "round");
          groupPath.setAttribute("stroke-dashoffset", 1);
          for (i; i < len; i += 1) {
            path = createNS("path");
            groupPath.appendChild(path);
            this.paths.push({ p: path, m: i });
          }
          if (this.filterManager.effectElements[10].p.v === 3) {
            var mask = createNS("mask");
            var id = createElementID();
            mask.setAttribute("id", id);
            mask.setAttribute("mask-type", "alpha");
            mask.appendChild(groupPath);
            this.elem.globalData.defs.appendChild(mask);
            var g = createNS("g");
            g.setAttribute("mask", "url(" + locationHref + "#" + id + ")");
            while (elemChildren[0]) {
              g.appendChild(elemChildren[0]);
            }
            this.elem.layerElement.appendChild(g);
            this.masker = mask;
            groupPath.setAttribute("stroke", "#fff");
          } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (this.filterManager.effectElements[10].p.v === 2) {
              elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
              while (elemChildren.length) {
                this.elem.layerElement.removeChild(elemChildren[0]);
              }
            }
            this.elem.layerElement.appendChild(groupPath);
            this.elem.layerElement.removeAttribute("mask");
            groupPath.setAttribute("stroke", "#fff");
          }
          this.initialized = true;
          this.pathMasker = groupPath;
        };
        SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
          if (!this.initialized) {
            this.initialize();
          }
          var i;
          var len = this.paths.length;
          var mask;
          var path;
          for (i = 0; i < len; i += 1) {
            if (this.paths[i].m !== -1) {
              mask = this.elem.maskManager.viewData[this.paths[i].m];
              path = this.paths[i].p;
              if (forceRender || this.filterManager._mdf || mask.prop._mdf) {
                path.setAttribute("d", mask.lastPath);
              }
              if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask.prop._mdf) {
                var dasharrayValue;
                if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                  var s = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                  var e = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                  var l = path.getTotalLength();
                  dasharrayValue = "0 0 0 " + l * s + " ";
                  var lineLength = l * (e - s);
                  var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                  var units = Math.floor(lineLength / segment);
                  var j;
                  for (j = 0; j < units; j += 1) {
                    dasharrayValue += "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + " ";
                  }
                  dasharrayValue += "0 " + l * 10 + " 0 0";
                } else {
                  dasharrayValue = "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                }
                path.setAttribute("stroke-dasharray", dasharrayValue);
              }
            }
          }
          if (forceRender || this.filterManager.effectElements[4].p._mdf) {
            this.pathMasker.setAttribute("stroke-width", this.filterManager.effectElements[4].p.v * 2);
          }
          if (forceRender || this.filterManager.effectElements[6].p._mdf) {
            this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v);
          }
          if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (forceRender || this.filterManager.effectElements[3].p._mdf) {
              var color = this.filterManager.effectElements[3].p.v;
              this.pathMasker.setAttribute("stroke", "rgb(" + bmFloor(color[0] * 255) + "," + bmFloor(color[1] * 255) + "," + bmFloor(color[2] * 255) + ")");
            }
          }
        };
        function SVGTritoneFilter(filter, filterManager) {
          this.filterManager = filterManager;
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
          feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
          feColorMatrix.setAttribute("result", "f1");
          filter.appendChild(feColorMatrix);
          var feComponentTransfer = createNS("feComponentTransfer");
          feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
          filter.appendChild(feComponentTransfer);
          this.matrixFilter = feComponentTransfer;
          var feFuncR = createNS("feFuncR");
          feFuncR.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFuncR);
          this.feFuncR = feFuncR;
          var feFuncG = createNS("feFuncG");
          feFuncG.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFuncG);
          this.feFuncG = feFuncG;
          var feFuncB = createNS("feFuncB");
          feFuncB.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFuncB);
          this.feFuncB = feFuncB;
        }
        SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var color1 = this.filterManager.effectElements[0].p.v;
            var color2 = this.filterManager.effectElements[1].p.v;
            var color3 = this.filterManager.effectElements[2].p.v;
            var tableR = color3[0] + " " + color2[0] + " " + color1[0];
            var tableG = color3[1] + " " + color2[1] + " " + color1[1];
            var tableB = color3[2] + " " + color2[2] + " " + color1[2];
            this.feFuncR.setAttribute("tableValues", tableR);
            this.feFuncG.setAttribute("tableValues", tableG);
            this.feFuncB.setAttribute("tableValues", tableB);
          }
        };
        function SVGProLevelsFilter(filter, filterManager) {
          this.filterManager = filterManager;
          var effectElements = this.filterManager.effectElements;
          var feComponentTransfer = createNS("feComponentTransfer");
          if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
            this.feFuncR = this.createFeFunc("feFuncR", feComponentTransfer);
          }
          if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
            this.feFuncG = this.createFeFunc("feFuncG", feComponentTransfer);
          }
          if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
            this.feFuncB = this.createFeFunc("feFuncB", feComponentTransfer);
          }
          if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
            this.feFuncA = this.createFeFunc("feFuncA", feComponentTransfer);
          }
          if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
            feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
            filter.appendChild(feComponentTransfer);
            feComponentTransfer = createNS("feComponentTransfer");
          }
          if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
            feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
            filter.appendChild(feComponentTransfer);
            this.feFuncRComposed = this.createFeFunc("feFuncR", feComponentTransfer);
            this.feFuncGComposed = this.createFeFunc("feFuncG", feComponentTransfer);
            this.feFuncBComposed = this.createFeFunc("feFuncB", feComponentTransfer);
          }
        }
        SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
          var feFunc = createNS(type);
          feFunc.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFunc);
          return feFunc;
        };
        SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
          var cnt = 0;
          var segments = 256;
          var perc;
          var min = Math.min(inputBlack, inputWhite);
          var max = Math.max(inputBlack, inputWhite);
          var table = Array.call(null, { length: segments });
          var colorValue;
          var pos = 0;
          var outputDelta = outputWhite - outputBlack;
          var inputDelta = inputWhite - inputBlack;
          while (cnt <= 256) {
            perc = cnt / 256;
            if (perc <= min) {
              colorValue = inputDelta < 0 ? outputWhite : outputBlack;
            } else if (perc >= max) {
              colorValue = inputDelta < 0 ? outputBlack : outputWhite;
            } else {
              colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
            }
            table[pos] = colorValue;
            pos += 1;
            cnt += 256 / (segments - 1);
          }
          return table.join(" ");
        };
        SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var val;
            var effectElements = this.filterManager.effectElements;
            if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
              val = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
              this.feFuncRComposed.setAttribute("tableValues", val);
              this.feFuncGComposed.setAttribute("tableValues", val);
              this.feFuncBComposed.setAttribute("tableValues", val);
            }
            if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
              val = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
              this.feFuncR.setAttribute("tableValues", val);
            }
            if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
              val = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
              this.feFuncG.setAttribute("tableValues", val);
            }
            if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
              val = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
              this.feFuncB.setAttribute("tableValues", val);
            }
            if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
              val = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
              this.feFuncA.setAttribute("tableValues", val);
            }
          }
        };
        function SVGDropShadowEffect(filter, filterManager) {
          var filterSize = filterManager.container.globalData.renderConfig.filterSize;
          filter.setAttribute("x", filterSize.x);
          filter.setAttribute("y", filterSize.y);
          filter.setAttribute("width", filterSize.width);
          filter.setAttribute("height", filterSize.height);
          this.filterManager = filterManager;
          var feGaussianBlur = createNS("feGaussianBlur");
          feGaussianBlur.setAttribute("in", "SourceAlpha");
          feGaussianBlur.setAttribute("result", "drop_shadow_1");
          feGaussianBlur.setAttribute("stdDeviation", "0");
          this.feGaussianBlur = feGaussianBlur;
          filter.appendChild(feGaussianBlur);
          var feOffset = createNS("feOffset");
          feOffset.setAttribute("dx", "25");
          feOffset.setAttribute("dy", "0");
          feOffset.setAttribute("in", "drop_shadow_1");
          feOffset.setAttribute("result", "drop_shadow_2");
          this.feOffset = feOffset;
          filter.appendChild(feOffset);
          var feFlood = createNS("feFlood");
          feFlood.setAttribute("flood-color", "#00ff00");
          feFlood.setAttribute("flood-opacity", "1");
          feFlood.setAttribute("result", "drop_shadow_3");
          this.feFlood = feFlood;
          filter.appendChild(feFlood);
          var feComposite = createNS("feComposite");
          feComposite.setAttribute("in", "drop_shadow_3");
          feComposite.setAttribute("in2", "drop_shadow_2");
          feComposite.setAttribute("operator", "in");
          feComposite.setAttribute("result", "drop_shadow_4");
          filter.appendChild(feComposite);
          var feMerge = createNS("feMerge");
          filter.appendChild(feMerge);
          var feMergeNode;
          feMergeNode = createNS("feMergeNode");
          feMerge.appendChild(feMergeNode);
          feMergeNode = createNS("feMergeNode");
          feMergeNode.setAttribute("in", "SourceGraphic");
          this.feMergeNode = feMergeNode;
          this.feMerge = feMerge;
          this.originalNodeAdded = false;
          feMerge.appendChild(feMergeNode);
        }
        SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            if (forceRender || this.filterManager.effectElements[4].p._mdf) {
              this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4);
            }
            if (forceRender || this.filterManager.effectElements[0].p._mdf) {
              var col = this.filterManager.effectElements[0].p.v;
              this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
            }
            if (forceRender || this.filterManager.effectElements[1].p._mdf) {
              this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255);
            }
            if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
              var distance = this.filterManager.effectElements[3].p.v;
              var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
              var x = distance * Math.cos(angle);
              var y = distance * Math.sin(angle);
              this.feOffset.setAttribute("dx", x);
              this.feOffset.setAttribute("dy", y);
            }
          }
        };
        var _svgMatteSymbols = [];
        function SVGMatte3Effect(filterElem, filterManager, elem) {
          this.initialized = false;
          this.filterManager = filterManager;
          this.filterElem = filterElem;
          this.elem = elem;
          elem.matteElement = createNS("g");
          elem.matteElement.appendChild(elem.layerElement);
          elem.matteElement.appendChild(elem.transformedElement);
          elem.baseElement = elem.matteElement;
        }
        SVGMatte3Effect.prototype.findSymbol = function(mask) {
          var i = 0;
          var len = _svgMatteSymbols.length;
          while (i < len) {
            if (_svgMatteSymbols[i] === mask) {
              return _svgMatteSymbols[i];
            }
            i += 1;
          }
          return null;
        };
        SVGMatte3Effect.prototype.replaceInParent = function(mask, symbolId) {
          var parentNode = mask.layerElement.parentNode;
          if (!parentNode) {
            return;
          }
          var children = parentNode.children;
          var i = 0;
          var len = children.length;
          while (i < len) {
            if (children[i] === mask.layerElement) {
              break;
            }
            i += 1;
          }
          var nextChild;
          if (i <= len - 2) {
            nextChild = children[i + 1];
          }
          var useElem = createNS("use");
          useElem.setAttribute("href", "#" + symbolId);
          if (nextChild) {
            parentNode.insertBefore(useElem, nextChild);
          } else {
            parentNode.appendChild(useElem);
          }
        };
        SVGMatte3Effect.prototype.setElementAsMask = function(elem, mask) {
          if (!this.findSymbol(mask)) {
            var symbolId = createElementID();
            var masker = createNS("mask");
            masker.setAttribute("id", mask.layerId);
            masker.setAttribute("mask-type", "alpha");
            _svgMatteSymbols.push(mask);
            var defs = elem.globalData.defs;
            defs.appendChild(masker);
            var symbol = createNS("symbol");
            symbol.setAttribute("id", symbolId);
            this.replaceInParent(mask, symbolId);
            symbol.appendChild(mask.layerElement);
            defs.appendChild(symbol);
            var useElem = createNS("use");
            useElem.setAttribute("href", "#" + symbolId);
            masker.appendChild(useElem);
            mask.data.hd = false;
            mask.show();
          }
          elem.setMatte(mask.layerId);
        };
        SVGMatte3Effect.prototype.initialize = function() {
          var ind = this.filterManager.effectElements[0].p.v;
          var elements = this.elem.comp.elements;
          var i = 0;
          var len = elements.length;
          while (i < len) {
            if (elements[i] && elements[i].data.ind === ind) {
              this.setElementAsMask(this.elem, elements[i]);
            }
            i += 1;
          }
          this.initialized = true;
        };
        SVGMatte3Effect.prototype.renderFrame = function() {
          if (!this.initialized) {
            this.initialize();
          }
        };
        function SVGEffects() {
        }
        var animationManager = function() {
          var moduleOb = {};
          var registeredAnimations = [];
          var initTime = 0;
          var len = 0;
          var playingAnimationsNum = 0;
          var _stopped = true;
          var _isFrozen = false;
          function removeElement(ev) {
            var i = 0;
            var animItem = ev.target;
            while (i < len) {
              if (registeredAnimations[i].animation === animItem) {
                registeredAnimations.splice(i, 1);
                i -= 1;
                len -= 1;
                if (!animItem.isPaused) {
                  subtractPlayingCount();
                }
              }
              i += 1;
            }
          }
          function registerAnimation(element, animationData2) {
            if (!element) {
              return null;
            }
            var i = 0;
            while (i < len) {
              if (registeredAnimations[i].elem === element && registeredAnimations[i].elem !== null) {
                return registeredAnimations[i].animation;
              }
              i += 1;
            }
            var animItem = new AnimationItem();
            setupAnimation(animItem, element);
            animItem.setData(element, animationData2);
            return animItem;
          }
          function getRegisteredAnimations() {
            var i;
            var lenAnims = registeredAnimations.length;
            var animations = [];
            for (i = 0; i < lenAnims; i += 1) {
              animations.push(registeredAnimations[i].animation);
            }
            return animations;
          }
          function addPlayingCount() {
            playingAnimationsNum += 1;
            activate();
          }
          function subtractPlayingCount() {
            playingAnimationsNum -= 1;
          }
          function setupAnimation(animItem, element) {
            animItem.addEventListener("destroy", removeElement);
            animItem.addEventListener("_active", addPlayingCount);
            animItem.addEventListener("_idle", subtractPlayingCount);
            registeredAnimations.push({ elem: element, animation: animItem });
            len += 1;
          }
          function loadAnimation2(params) {
            var animItem = new AnimationItem();
            setupAnimation(animItem, null);
            animItem.setParams(params);
            return animItem;
          }
          function setSpeed(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.setSpeed(val, animation);
            }
          }
          function setDirection(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.setDirection(val, animation);
            }
          }
          function play(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.play(animation);
            }
          }
          function resume(nowTime) {
            var elapsedTime = nowTime - initTime;
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.advanceTime(elapsedTime);
            }
            initTime = nowTime;
            if (playingAnimationsNum && !_isFrozen) {
              window2.requestAnimationFrame(resume);
            } else {
              _stopped = true;
            }
          }
          function first(nowTime) {
            initTime = nowTime;
            window2.requestAnimationFrame(resume);
          }
          function pause(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.pause(animation);
            }
          }
          function goToAndStop(value, isFrame, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.goToAndStop(value, isFrame, animation);
            }
          }
          function stop(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.stop(animation);
            }
          }
          function togglePause(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.togglePause(animation);
            }
          }
          function destroy(animation) {
            var i;
            for (i = len - 1; i >= 0; i -= 1) {
              registeredAnimations[i].animation.destroy(animation);
            }
          }
          function searchAnimations2(animationData2, standalone2, renderer2) {
            var animElements = [].concat(
              [].slice.call(document.getElementsByClassName("lottie")),
              [].slice.call(document.getElementsByClassName("bodymovin"))
            );
            var i;
            var lenAnims = animElements.length;
            for (i = 0; i < lenAnims; i += 1) {
              if (renderer2) {
                animElements[i].setAttribute("data-bm-type", renderer2);
              }
              registerAnimation(animElements[i], animationData2);
            }
            if (standalone2 && lenAnims === 0) {
              if (!renderer2) {
                renderer2 = "svg";
              }
              var body = document.getElementsByTagName("body")[0];
              body.innerText = "";
              var div = createTag("div");
              div.style.width = "100%";
              div.style.height = "100%";
              div.setAttribute("data-bm-type", renderer2);
              body.appendChild(div);
              registerAnimation(div, animationData2);
            }
          }
          function resize() {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.resize();
            }
          }
          function activate() {
            if (!_isFrozen && playingAnimationsNum) {
              if (_stopped) {
                window2.requestAnimationFrame(first);
                _stopped = false;
              }
            }
          }
          function freeze() {
            _isFrozen = true;
          }
          function unfreeze() {
            _isFrozen = false;
            activate();
          }
          function setVolume(val, animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.setVolume(val, animation);
            }
          }
          function mute(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.mute(animation);
            }
          }
          function unmute(animation) {
            var i;
            for (i = 0; i < len; i += 1) {
              registeredAnimations[i].animation.unmute(animation);
            }
          }
          moduleOb.registerAnimation = registerAnimation;
          moduleOb.loadAnimation = loadAnimation2;
          moduleOb.setSpeed = setSpeed;
          moduleOb.setDirection = setDirection;
          moduleOb.play = play;
          moduleOb.pause = pause;
          moduleOb.stop = stop;
          moduleOb.togglePause = togglePause;
          moduleOb.searchAnimations = searchAnimations2;
          moduleOb.resize = resize;
          moduleOb.goToAndStop = goToAndStop;
          moduleOb.destroy = destroy;
          moduleOb.freeze = freeze;
          moduleOb.unfreeze = unfreeze;
          moduleOb.setVolume = setVolume;
          moduleOb.mute = mute;
          moduleOb.unmute = unmute;
          moduleOb.getRegisteredAnimations = getRegisteredAnimations;
          return moduleOb;
        }();
        var AnimationItem = function() {
          this._cbs = [];
          this.name = "";
          this.path = "";
          this.isLoaded = false;
          this.currentFrame = 0;
          this.currentRawFrame = 0;
          this.firstFrame = 0;
          this.totalFrames = 0;
          this.frameRate = 0;
          this.frameMult = 0;
          this.playSpeed = 1;
          this.playDirection = 1;
          this.playCount = 0;
          this.animationData = {};
          this.assets = [];
          this.isPaused = true;
          this.autoplay = false;
          this.loop = true;
          this.renderer = null;
          this.animationID = createElementID();
          this.assetsPath = "";
          this.timeCompleted = 0;
          this.segmentPos = 0;
          this.isSubframeEnabled = subframeEnabled;
          this.segments = [];
          this._idle = true;
          this._completedLoop = false;
          this.projectInterface = ProjectInterface();
          this.imagePreloader = new ImagePreloader();
          this.audioController = audioControllerFactory();
          this.markers = [];
          this.configAnimation = this.configAnimation.bind(this);
          this.onSetupError = this.onSetupError.bind(this);
          this.onSegmentComplete = this.onSegmentComplete.bind(this);
        };
        extendPrototype([BaseEvent], AnimationItem);
        AnimationItem.prototype.setParams = function(params) {
          if (params.wrapper || params.container) {
            this.wrapper = params.wrapper || params.container;
          }
          var animType = "svg";
          if (params.animType) {
            animType = params.animType;
          } else if (params.renderer) {
            animType = params.renderer;
          }
          switch (animType) {
            case "canvas":
              this.renderer = new CanvasRenderer(this, params.rendererSettings);
              break;
            case "svg":
              this.renderer = new SVGRenderer(this, params.rendererSettings);
              break;
            default:
              this.renderer = new HybridRenderer(this, params.rendererSettings);
              break;
          }
          this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
          this.renderer.setProjectInterface(this.projectInterface);
          this.animType = animType;
          if (params.loop === "" || params.loop === null || params.loop === void 0 || params.loop === true) {
            this.loop = true;
          } else if (params.loop === false) {
            this.loop = false;
          } else {
            this.loop = parseInt(params.loop, 10);
          }
          this.autoplay = "autoplay" in params ? params.autoplay : true;
          this.name = params.name ? params.name : "";
          this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, "autoloadSegments") ? params.autoloadSegments : true;
          this.assetsPath = params.assetsPath;
          this.initialSegment = params.initialSegment;
          if (params.audioFactory) {
            this.audioController.setAudioFactory(params.audioFactory);
          }
          if (params.animationData) {
            this.setupAnimation(params.animationData);
          } else if (params.path) {
            if (params.path.lastIndexOf("\\") !== -1) {
              this.path = params.path.substr(0, params.path.lastIndexOf("\\") + 1);
            } else {
              this.path = params.path.substr(0, params.path.lastIndexOf("/") + 1);
            }
            this.fileName = params.path.substr(params.path.lastIndexOf("/") + 1);
            this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json"));
            dataManager.loadAnimation(
              params.path,
              this.configAnimation,
              this.onSetupError
            );
          }
        };
        AnimationItem.prototype.onSetupError = function() {
          this.trigger("data_failed");
        };
        AnimationItem.prototype.setupAnimation = function(data) {
          dataManager.completeAnimation(
            data,
            this.configAnimation
          );
        };
        AnimationItem.prototype.setData = function(wrapper, animationData2) {
          if (animationData2) {
            if (typeof animationData2 !== "object") {
              animationData2 = JSON.parse(animationData2);
            }
          }
          var params = {
            wrapper,
            animationData: animationData2
          };
          var wrapperAttributes = wrapper.attributes;
          params.path = wrapperAttributes.getNamedItem("data-animation-path") ? wrapperAttributes.getNamedItem("data-animation-path").value : wrapperAttributes.getNamedItem("data-bm-path") ? wrapperAttributes.getNamedItem("data-bm-path").value : wrapperAttributes.getNamedItem("bm-path") ? wrapperAttributes.getNamedItem("bm-path").value : "";
          params.animType = wrapperAttributes.getNamedItem("data-anim-type") ? wrapperAttributes.getNamedItem("data-anim-type").value : wrapperAttributes.getNamedItem("data-bm-type") ? wrapperAttributes.getNamedItem("data-bm-type").value : wrapperAttributes.getNamedItem("bm-type") ? wrapperAttributes.getNamedItem("bm-type").value : wrapperAttributes.getNamedItem("data-bm-renderer") ? wrapperAttributes.getNamedItem("data-bm-renderer").value : wrapperAttributes.getNamedItem("bm-renderer") ? wrapperAttributes.getNamedItem("bm-renderer").value : "canvas";
          var loop = wrapperAttributes.getNamedItem("data-anim-loop") ? wrapperAttributes.getNamedItem("data-anim-loop").value : wrapperAttributes.getNamedItem("data-bm-loop") ? wrapperAttributes.getNamedItem("data-bm-loop").value : wrapperAttributes.getNamedItem("bm-loop") ? wrapperAttributes.getNamedItem("bm-loop").value : "";
          if (loop === "false") {
            params.loop = false;
          } else if (loop === "true") {
            params.loop = true;
          } else if (loop !== "") {
            params.loop = parseInt(loop, 10);
          }
          var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay") ? wrapperAttributes.getNamedItem("data-anim-autoplay").value : wrapperAttributes.getNamedItem("data-bm-autoplay") ? wrapperAttributes.getNamedItem("data-bm-autoplay").value : wrapperAttributes.getNamedItem("bm-autoplay") ? wrapperAttributes.getNamedItem("bm-autoplay").value : true;
          params.autoplay = autoplay !== "false";
          params.name = wrapperAttributes.getNamedItem("data-name") ? wrapperAttributes.getNamedItem("data-name").value : wrapperAttributes.getNamedItem("data-bm-name") ? wrapperAttributes.getNamedItem("data-bm-name").value : wrapperAttributes.getNamedItem("bm-name") ? wrapperAttributes.getNamedItem("bm-name").value : "";
          var prerender = wrapperAttributes.getNamedItem("data-anim-prerender") ? wrapperAttributes.getNamedItem("data-anim-prerender").value : wrapperAttributes.getNamedItem("data-bm-prerender") ? wrapperAttributes.getNamedItem("data-bm-prerender").value : wrapperAttributes.getNamedItem("bm-prerender") ? wrapperAttributes.getNamedItem("bm-prerender").value : "";
          if (prerender === "false") {
            params.prerender = false;
          }
          this.setParams(params);
        };
        AnimationItem.prototype.includeLayers = function(data) {
          if (data.op > this.animationData.op) {
            this.animationData.op = data.op;
            this.totalFrames = Math.floor(data.op - this.animationData.ip);
          }
          var layers = this.animationData.layers;
          var i;
          var len = layers.length;
          var newLayers = data.layers;
          var j;
          var jLen = newLayers.length;
          for (j = 0; j < jLen; j += 1) {
            i = 0;
            while (i < len) {
              if (layers[i].id === newLayers[j].id) {
                layers[i] = newLayers[j];
                break;
              }
              i += 1;
            }
          }
          if (data.chars || data.fonts) {
            this.renderer.globalData.fontManager.addChars(data.chars);
            this.renderer.globalData.fontManager.addFonts(data.fonts, this.renderer.globalData.defs);
          }
          if (data.assets) {
            len = data.assets.length;
            for (i = 0; i < len; i += 1) {
              this.animationData.assets.push(data.assets[i]);
            }
          }
          this.animationData.__complete = false;
          dataManager.completeAnimation(
            this.animationData,
            this.onSegmentComplete
          );
        };
        AnimationItem.prototype.onSegmentComplete = function(data) {
          this.animationData = data;
          if (expressionsPlugin) {
            expressionsPlugin.initExpressions(this);
          }
          this.loadNextSegment();
        };
        AnimationItem.prototype.loadNextSegment = function() {
          var segments = this.animationData.segments;
          if (!segments || segments.length === 0 || !this.autoloadSegments) {
            this.trigger("data_ready");
            this.timeCompleted = this.totalFrames;
            return;
          }
          var segment = segments.shift();
          this.timeCompleted = segment.time * this.frameRate;
          var segmentPath = this.path + this.fileName + "_" + this.segmentPos + ".json";
          this.segmentPos += 1;
          dataManager.loadData(segmentPath, this.includeLayers.bind(this), function() {
            this.trigger("data_failed");
          }.bind(this));
        };
        AnimationItem.prototype.loadSegments = function() {
          var segments = this.animationData.segments;
          if (!segments) {
            this.timeCompleted = this.totalFrames;
          }
          this.loadNextSegment();
        };
        AnimationItem.prototype.imagesLoaded = function() {
          this.trigger("loaded_images");
          this.checkLoaded();
        };
        AnimationItem.prototype.preloadImages = function() {
          this.imagePreloader.setAssetsPath(this.assetsPath);
          this.imagePreloader.setPath(this.path);
          this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
        };
        AnimationItem.prototype.configAnimation = function(animData) {
          if (!this.renderer) {
            return;
          }
          try {
            this.animationData = animData;
            if (this.initialSegment) {
              this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
              this.firstFrame = Math.round(this.initialSegment[0]);
            } else {
              this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
              this.firstFrame = Math.round(this.animationData.ip);
            }
            this.renderer.configAnimation(animData);
            if (!animData.assets) {
              animData.assets = [];
            }
            this.assets = this.animationData.assets;
            this.frameRate = this.animationData.fr;
            this.frameMult = this.animationData.fr / 1e3;
            this.renderer.searchExtraCompositions(animData.assets);
            this.markers = markerParser(animData.markers || []);
            this.trigger("config_ready");
            this.preloadImages();
            this.loadSegments();
            this.updaFrameModifier();
            this.waitForFontsLoaded();
            if (this.isPaused) {
              this.audioController.pause();
            }
          } catch (error) {
            this.triggerConfigError(error);
          }
        };
        AnimationItem.prototype.waitForFontsLoaded = function() {
          if (!this.renderer) {
            return;
          }
          if (this.renderer.globalData.fontManager.isLoaded) {
            this.checkLoaded();
          } else {
            setTimeout(this.waitForFontsLoaded.bind(this), 20);
          }
        };
        AnimationItem.prototype.checkLoaded = function() {
          if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== "canvas") && this.imagePreloader.loadedFootages()) {
            this.isLoaded = true;
            if (expressionsPlugin) {
              expressionsPlugin.initExpressions(this);
            }
            this.renderer.initItems();
            setTimeout(function() {
              this.trigger("DOMLoaded");
            }.bind(this), 0);
            this.gotoFrame();
            if (this.autoplay) {
              this.play();
            }
          }
        };
        AnimationItem.prototype.resize = function() {
          this.renderer.updateContainerSize();
        };
        AnimationItem.prototype.setSubframe = function(flag) {
          this.isSubframeEnabled = !!flag;
        };
        AnimationItem.prototype.gotoFrame = function() {
          this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
          if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
            this.currentFrame = this.timeCompleted;
          }
          this.trigger("enterFrame");
          this.renderFrame();
          this.trigger("drawnFrame");
        };
        AnimationItem.prototype.renderFrame = function() {
          if (this.isLoaded === false || !this.renderer) {
            return;
          }
          try {
            this.renderer.renderFrame(this.currentFrame + this.firstFrame);
          } catch (error) {
            this.triggerRenderFrameError(error);
          }
        };
        AnimationItem.prototype.play = function(name) {
          if (name && this.name !== name) {
            return;
          }
          if (this.isPaused === true) {
            this.isPaused = false;
            this.audioController.resume();
            if (this._idle) {
              this._idle = false;
              this.trigger("_active");
            }
          }
        };
        AnimationItem.prototype.pause = function(name) {
          if (name && this.name !== name) {
            return;
          }
          if (this.isPaused === false) {
            this.isPaused = true;
            this._idle = true;
            this.trigger("_idle");
            this.audioController.pause();
          }
        };
        AnimationItem.prototype.togglePause = function(name) {
          if (name && this.name !== name) {
            return;
          }
          if (this.isPaused === true) {
            this.play();
          } else {
            this.pause();
          }
        };
        AnimationItem.prototype.stop = function(name) {
          if (name && this.name !== name) {
            return;
          }
          this.pause();
          this.playCount = 0;
          this._completedLoop = false;
          this.setCurrentRawFrameValue(0);
        };
        AnimationItem.prototype.getMarkerData = function(markerName) {
          var marker;
          for (var i = 0; i < this.markers.length; i += 1) {
            marker = this.markers[i];
            if (marker.payload && marker.payload.name === markerName) {
              return marker;
            }
          }
          return null;
        };
        AnimationItem.prototype.goToAndStop = function(value, isFrame, name) {
          if (name && this.name !== name) {
            return;
          }
          var numValue = Number(value);
          if (isNaN(numValue)) {
            var marker = this.getMarkerData(value);
            if (marker) {
              this.goToAndStop(marker.time, true);
            }
          } else if (isFrame) {
            this.setCurrentRawFrameValue(value);
          } else {
            this.setCurrentRawFrameValue(value * this.frameModifier);
          }
          this.pause();
        };
        AnimationItem.prototype.goToAndPlay = function(value, isFrame, name) {
          if (name && this.name !== name) {
            return;
          }
          var numValue = Number(value);
          if (isNaN(numValue)) {
            var marker = this.getMarkerData(value);
            if (marker) {
              if (!marker.duration) {
                this.goToAndStop(marker.time, true);
              } else {
                this.playSegments([marker.time, marker.time + marker.duration], true);
              }
            }
          } else {
            this.goToAndStop(numValue, isFrame, name);
          }
          this.play();
        };
        AnimationItem.prototype.advanceTime = function(value) {
          if (this.isPaused === true || this.isLoaded === false) {
            return;
          }
          var nextValue = this.currentRawFrame + value * this.frameModifier;
          var _isComplete = false;
          if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
            if (!this.loop || this.playCount === this.loop) {
              if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
                _isComplete = true;
                nextValue = this.totalFrames - 1;
              }
            } else if (nextValue >= this.totalFrames) {
              this.playCount += 1;
              if (!this.checkSegments(nextValue % this.totalFrames)) {
                this.setCurrentRawFrameValue(nextValue % this.totalFrames);
                this._completedLoop = true;
                this.trigger("loopComplete");
              }
            } else {
              this.setCurrentRawFrameValue(nextValue);
            }
          } else if (nextValue < 0) {
            if (!this.checkSegments(nextValue % this.totalFrames)) {
              if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
                this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
                if (!this._completedLoop) {
                  this._completedLoop = true;
                } else {
                  this.trigger("loopComplete");
                }
              } else {
                _isComplete = true;
                nextValue = 0;
              }
            }
          } else {
            this.setCurrentRawFrameValue(nextValue);
          }
          if (_isComplete) {
            this.setCurrentRawFrameValue(nextValue);
            this.pause();
            this.trigger("complete");
          }
        };
        AnimationItem.prototype.adjustSegment = function(arr, offset) {
          this.playCount = 0;
          if (arr[1] < arr[0]) {
            if (this.frameModifier > 0) {
              if (this.playSpeed < 0) {
                this.setSpeed(-this.playSpeed);
              } else {
                this.setDirection(-1);
              }
            }
            this.totalFrames = arr[0] - arr[1];
            this.timeCompleted = this.totalFrames;
            this.firstFrame = arr[1];
            this.setCurrentRawFrameValue(this.totalFrames - 1e-3 - offset);
          } else if (arr[1] > arr[0]) {
            if (this.frameModifier < 0) {
              if (this.playSpeed < 0) {
                this.setSpeed(-this.playSpeed);
              } else {
                this.setDirection(1);
              }
            }
            this.totalFrames = arr[1] - arr[0];
            this.timeCompleted = this.totalFrames;
            this.firstFrame = arr[0];
            this.setCurrentRawFrameValue(1e-3 + offset);
          }
          this.trigger("segmentStart");
        };
        AnimationItem.prototype.setSegment = function(init, end) {
          var pendingFrame = -1;
          if (this.isPaused) {
            if (this.currentRawFrame + this.firstFrame < init) {
              pendingFrame = init;
            } else if (this.currentRawFrame + this.firstFrame > end) {
              pendingFrame = end - init;
            }
          }
          this.firstFrame = init;
          this.totalFrames = end - init;
          this.timeCompleted = this.totalFrames;
          if (pendingFrame !== -1) {
            this.goToAndStop(pendingFrame, true);
          }
        };
        AnimationItem.prototype.playSegments = function(arr, forceFlag) {
          if (forceFlag) {
            this.segments.length = 0;
          }
          if (typeof arr[0] === "object") {
            var i;
            var len = arr.length;
            for (i = 0; i < len; i += 1) {
              this.segments.push(arr[i]);
            }
          } else {
            this.segments.push(arr);
          }
          if (this.segments.length && forceFlag) {
            this.adjustSegment(this.segments.shift(), 0);
          }
          if (this.isPaused) {
            this.play();
          }
        };
        AnimationItem.prototype.resetSegments = function(forceFlag) {
          this.segments.length = 0;
          this.segments.push([this.animationData.ip, this.animationData.op]);
          if (forceFlag) {
            this.checkSegments(0);
          }
        };
        AnimationItem.prototype.checkSegments = function(offset) {
          if (this.segments.length) {
            this.adjustSegment(this.segments.shift(), offset);
            return true;
          }
          return false;
        };
        AnimationItem.prototype.destroy = function(name) {
          if (name && this.name !== name || !this.renderer) {
            return;
          }
          this.renderer.destroy();
          this.imagePreloader.destroy();
          this.trigger("destroy");
          this._cbs = null;
          this.onEnterFrame = null;
          this.onLoopComplete = null;
          this.onComplete = null;
          this.onSegmentStart = null;
          this.onDestroy = null;
          this.renderer = null;
          this.renderer = null;
          this.imagePreloader = null;
          this.projectInterface = null;
        };
        AnimationItem.prototype.setCurrentRawFrameValue = function(value) {
          this.currentRawFrame = value;
          this.gotoFrame();
        };
        AnimationItem.prototype.setSpeed = function(val) {
          this.playSpeed = val;
          this.updaFrameModifier();
        };
        AnimationItem.prototype.setDirection = function(val) {
          this.playDirection = val < 0 ? -1 : 1;
          this.updaFrameModifier();
        };
        AnimationItem.prototype.setVolume = function(val, name) {
          if (name && this.name !== name) {
            return;
          }
          this.audioController.setVolume(val);
        };
        AnimationItem.prototype.getVolume = function() {
          return this.audioController.getVolume();
        };
        AnimationItem.prototype.mute = function(name) {
          if (name && this.name !== name) {
            return;
          }
          this.audioController.mute();
        };
        AnimationItem.prototype.unmute = function(name) {
          if (name && this.name !== name) {
            return;
          }
          this.audioController.unmute();
        };
        AnimationItem.prototype.updaFrameModifier = function() {
          this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
          this.audioController.setRate(this.playSpeed * this.playDirection);
        };
        AnimationItem.prototype.getPath = function() {
          return this.path;
        };
        AnimationItem.prototype.getAssetsPath = function(assetData) {
          var path = "";
          if (assetData.e) {
            path = assetData.p;
          } else if (this.assetsPath) {
            var imagePath = assetData.p;
            if (imagePath.indexOf("images/") !== -1) {
              imagePath = imagePath.split("/")[1];
            }
            path = this.assetsPath + imagePath;
          } else {
            path = this.path;
            path += assetData.u ? assetData.u : "";
            path += assetData.p;
          }
          return path;
        };
        AnimationItem.prototype.getAssetData = function(id) {
          var i = 0;
          var len = this.assets.length;
          while (i < len) {
            if (id === this.assets[i].id) {
              return this.assets[i];
            }
            i += 1;
          }
          return null;
        };
        AnimationItem.prototype.hide = function() {
          this.renderer.hide();
        };
        AnimationItem.prototype.show = function() {
          this.renderer.show();
        };
        AnimationItem.prototype.getDuration = function(isFrame) {
          return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
        };
        AnimationItem.prototype.trigger = function(name) {
          if (this._cbs && this._cbs[name]) {
            switch (name) {
              case "enterFrame":
              case "drawnFrame":
                this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));
                break;
              case "loopComplete":
                this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
                break;
              case "complete":
                this.triggerEvent(name, new BMCompleteEvent(name, this.frameMult));
                break;
              case "segmentStart":
                this.triggerEvent(name, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
                break;
              case "destroy":
                this.triggerEvent(name, new BMDestroyEvent(name, this));
                break;
              default:
                this.triggerEvent(name);
            }
          }
          if (name === "enterFrame" && this.onEnterFrame) {
            this.onEnterFrame.call(this, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameMult));
          }
          if (name === "loopComplete" && this.onLoopComplete) {
            this.onLoopComplete.call(this, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
          }
          if (name === "complete" && this.onComplete) {
            this.onComplete.call(this, new BMCompleteEvent(name, this.frameMult));
          }
          if (name === "segmentStart" && this.onSegmentStart) {
            this.onSegmentStart.call(this, new BMSegmentStartEvent(name, this.firstFrame, this.totalFrames));
          }
          if (name === "destroy" && this.onDestroy) {
            this.onDestroy.call(this, new BMDestroyEvent(name, this));
          }
        };
        AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {
          var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
          this.triggerEvent("error", error);
          if (this.onError) {
            this.onError.call(this, error);
          }
        };
        AnimationItem.prototype.triggerConfigError = function(nativeError) {
          var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
          this.triggerEvent("error", error);
          if (this.onError) {
            this.onError.call(this, error);
          }
        };
        function EffectsManager() {
          this.effectElements = [];
        }
        var lottie = {};
        function setLocationHref(href) {
          locationHref = href;
        }
        function searchAnimations() {
          if (standalone === true) {
            animationManager.searchAnimations(animationData, standalone, renderer);
          } else {
            animationManager.searchAnimations();
          }
        }
        function setSubframeRendering(flag) {
          subframeEnabled = flag;
        }
        function setIDPrefix(prefix) {
          idPrefix = prefix;
        }
        function loadAnimation(params) {
          if (standalone === true) {
            params.animationData = JSON.parse(animationData);
          }
          return animationManager.loadAnimation(params);
        }
        function setQuality(value) {
          if (typeof value === "string") {
            switch (value) {
              case "high":
                defaultCurveSegments = 200;
                break;
              default:
              case "medium":
                defaultCurveSegments = 50;
                break;
              case "low":
                defaultCurveSegments = 10;
                break;
            }
          } else if (!isNaN(value) && value > 1) {
            defaultCurveSegments = value;
          }
          if (defaultCurveSegments >= 50) {
            roundValues(false);
          } else {
            roundValues(true);
          }
        }
        function inBrowser() {
          return typeof navigator !== "undefined";
        }
        function installPlugin(type, plugin) {
          if (type === "expressions") {
            expressionsPlugin = plugin;
          }
        }
        function getFactory(name) {
          switch (name) {
            case "propertyFactory":
              return PropertyFactory;
            case "shapePropertyFactory":
              return ShapePropertyFactory;
            case "matrix":
              return Matrix;
            default:
              return null;
          }
        }
        lottie.play = animationManager.play;
        lottie.pause = animationManager.pause;
        lottie.setLocationHref = setLocationHref;
        lottie.togglePause = animationManager.togglePause;
        lottie.setSpeed = animationManager.setSpeed;
        lottie.setDirection = animationManager.setDirection;
        lottie.stop = animationManager.stop;
        lottie.searchAnimations = searchAnimations;
        lottie.registerAnimation = animationManager.registerAnimation;
        lottie.loadAnimation = loadAnimation;
        lottie.setSubframeRendering = setSubframeRendering;
        lottie.resize = animationManager.resize;
        lottie.goToAndStop = animationManager.goToAndStop;
        lottie.destroy = animationManager.destroy;
        lottie.setQuality = setQuality;
        lottie.inBrowser = inBrowser;
        lottie.installPlugin = installPlugin;
        lottie.freeze = animationManager.freeze;
        lottie.unfreeze = animationManager.unfreeze;
        lottie.setVolume = animationManager.setVolume;
        lottie.mute = animationManager.mute;
        lottie.unmute = animationManager.unmute;
        lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
        lottie.useWebWorker = function(flag) {
          _useWebWorker = flag;
        };
        lottie.setIDPrefix = setIDPrefix;
        lottie.__getFactory = getFactory;
        lottie.version = "5.8.1";
        function checkReady() {
          if (document.readyState === "complete") {
            clearInterval(readyStateCheckInterval);
            searchAnimations();
          }
        }
        function getQueryVariable(variable) {
          var vars = queryString.split("&");
          for (var i = 0; i < vars.length; i += 1) {
            var pair = vars[i].split("=");
            if (decodeURIComponent(pair[0]) == variable) {
              return decodeURIComponent(pair[1]);
            }
          }
          return null;
        }
        var standalone = "__[STANDALONE]__";
        var animationData = "__[ANIMATIONDATA]__";
        var renderer = "";
        var queryString;
        if (standalone) {
          var scripts = document.getElementsByTagName("script");
          var index = scripts.length - 1;
          var myScript = scripts[index] || {
            src: ""
          };
          queryString = myScript.src.replace(/^[^\?]+\??/, "");
          renderer = getQueryVariable("renderer");
        }
        var readyStateCheckInterval = setInterval(checkReady, 100);
        return lottie;
      });
    }
  });

  // node_modules/@perawallet/connect/dist/App-38248cd1.js
  var require_App_38248cd1 = __commonJS({
    "node_modules/@perawallet/connect/dist/App-38248cd1.js"() {
      "use strict";
      var e = require_index_d147afec();
      var n = require_qr_code_styling();
      var t = require_lottie_web_light();
      function a(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      init_esm10(), require_cjs4(), require_es5();
      var o = a(n);
      var l = a(t);
      function i(n2 = true) {
        let t2 = e.PERA_WALLET_APP_DEEP_LINK;
        const a2 = e.detectBrowser();
        return n2 && a2 && (t2 = `${t2}?browser=${encodeURIComponent(a2)}`), t2;
      }
      function r(e2, n2) {
        void 0 === n2 && (n2 = {});
        var t2 = n2.insertAt;
        if (e2 && "undefined" != typeof document) {
          var a2 = document.head || document.getElementsByTagName("head")[0], o2 = document.createElement("style");
          o2.type = "text/css", "top" === t2 && a2.firstChild ? a2.insertBefore(o2, a2.firstChild) : a2.appendChild(o2), o2.styleSheet ? o2.styleSheet.cssText = e2 : o2.appendChild(document.createTextNode(e2));
        }
      }
      var d = ".pera-wallet-modal-header {\n  position: absolute;\n  top: -44px;\n  right: 0px;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.pera-wallet-modal-header--mobile {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  position: static;\n}\n.pera-wallet-modal-header--mobile .pera-wallet-modal-header__close-button {\n  width: 24px;\n  height: 24px;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border: unset;\n  box-shadow: unset;\n}\n\n.pera-wallet-modal-header__brand {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  letter-spacing: -0.1px;\n  color: #ffffff;\n}\n\n.pera-wallet-modal-header__brand-text {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.pera-wallet-modal-header__version-number {\n  color: #9d9dae;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 18px;\n  letter-spacing: 0.01;\n}\n\n.pera-wallet-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  height: 48px;\n  padding: 14px;\n  border: none;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-size: 14px;\n}\n\n.pera-wallet-modal-header__close-button {\n  width: 32px;\n  height: 32px;\n  margin: 0;\n  padding: 0;\n  background: rgba(44, 53, 89, 0.1);\n  border-radius: 8px;\n}\n\n.pera-wallet-modal-header__close-button__close-icon {\n  width: 20px;\n  height: 20px;\n}";
      r(d);
      function c() {
        return document.documentElement.clientWidth <= 767;
      }
      function p() {
        document.documentElement.style.setProperty("--vh", 0.01 * window.innerHeight + "px");
      }
      var s = document.createElement("template");
      var m = e.isMobile() ? "pera-wallet-modal-header pera-wallet-modal-header--mobile" : "pera-wallet-modal-header pera-wallet-modal-header--desktop";
      s.innerHTML = `
  <div class="${m}">
      ${c() && e.isMobile() ? "" : `<div class="pera-wallet-modal-header__brand">
              <img src="data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='24' height='24' rx='4.8' fill='%23FFEE55'/%3e%3cpath d='M13.0408 5.92462C13.413 7.46693 13.2872 8.8236 12.7597 8.95482C12.2322 9.08605 11.5028 7.94214 11.1306 6.39983C10.7583 4.85752 10.8842 3.50085 11.4117 3.36963C11.9391 3.2384 12.6685 4.38231 13.0408 5.92462Z' fill='black'/%3e%3cpath d='M19.1876 7.25063C18.3632 6.37689 16.7231 6.61371 15.5243 7.77959C14.3254 8.94547 14.0219 10.5989 14.8463 11.4727C15.6707 12.3464 17.3108 12.1096 18.5097 10.9437C19.7085 9.77781 20.012 8.12438 19.1876 7.25063Z' fill='black'/%3e%3cpath d='M12.6308 20.6297C13.1583 20.4985 13.2656 19.0651 12.8705 17.4281C12.4754 15.7911 11.7275 14.5705 11.2 14.7017C10.6725 14.8329 10.5652 16.2663 10.9603 17.9033C11.3554 19.5403 12.1033 20.7609 12.6308 20.6297Z' fill='black'/%3e%3cpath d='M7.25371 8.05056C8.77551 8.49933 9.8875 9.28664 9.73741 9.80906C9.58731 10.3315 8.23197 10.3912 6.71016 9.94242C5.18836 9.49364 4.07637 8.70633 4.22646 8.18391C4.37656 7.66149 5.7319 7.60178 7.25371 8.05056Z' fill='black'/%3e%3cpath d='M17.1309 13.9497C18.7461 14.4261 19.9338 15.2357 19.7837 15.7581C19.6336 16.2806 18.2025 16.3179 16.5873 15.8416C14.9721 15.3653 13.7844 14.5556 13.9345 14.0332C14.0846 13.5108 15.5157 13.4734 17.1309 13.9497Z' fill='black'/%3e%3cpath d='M8.96609 12.8536C8.5887 12.4624 7.35088 13.0318 6.20133 14.1253C5.05177 15.2188 4.42581 16.4225 4.80319 16.8137C5.18058 17.2048 6.4184 16.6355 7.56796 15.542C8.71751 14.4484 9.34347 13.2448 8.96609 12.8536Z' fill='black'/%3e%3c/svg%3e" />

              <div class="pera-wallet-modal-header__brand-text">
                <span>Pera Connect</span>

                <span class="pera-wallet-modal-header__version-number">v1.3.3</span>
              </div>
            </div>
            `} 

      <button
        id="pera-wallet-modal-header-close-button"
        class="pera-wallet-button pera-wallet-modal-header__close-button">
        <img
          class="pera-wallet-modal-header__close-button__close-icon"
          src="${c() && e.isMobile() ? "data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18 6L12 12M12 12L6 18M12 12L18 18M12 12L6 6' stroke='%232C3559' stroke-width='2'/%3e%3c/svg%3e" : "data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18 6L12 12M12 12L6 18M12 12L18 18M12 12L6 6' stroke='white' stroke-width='2'/%3e%3c/svg%3e"}"
        />
      </button>
    </div>
`;
      var w = class extends HTMLElement {
        constructor() {
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const e2 = document.createElement("style");
            e2.textContent = d, this.shadowRoot.append(s.content.cloneNode(true), e2), this.onClose();
          }
        }
        onClose() {
          var n2;
          const t2 = null === (n2 = this.shadowRoot) || void 0 === n2 ? void 0 : n2.getElementById("pera-wallet-modal-header-close-button"), a2 = this.getAttribute("modal-id");
          t2 && a2 === e.PERA_WALLET_REDIRECT_MODAL_ID && t2.addEventListener("click", () => {
            e.removeModalWrapperFromDOM(e.PERA_WALLET_REDIRECT_MODAL_ID);
          });
        }
      };
      var h = "data:image/svg+xml,%3csvg fill='none' height='80' width='80' xmlns='http://www.w3.org/2000/svg'%3e%3cpath clip-rule='evenodd' d='M39.9 80V68.99h-9.8V80h-.2V68.99h-3.5a6.503 6.503 0 0 1-6.247-4.7 6.514 6.514 0 0 1-4.445-4.444 6.503 6.503 0 0 1-4.695-6.246v-3.5H0v-.2h11.013v-9.8H0v-.2h11.013v-9.8H0v-.2h11.013v-3.5a6.503 6.503 0 0 1 4.694-6.246 6.513 6.513 0 0 1 4.447-4.447 6.503 6.503 0 0 1 6.246-4.696h3.5V0h.2v11.011h9.8V0h.2v11.011h9.8V0h.2v11.011h3.5a6.503 6.503 0 0 1 6.247 4.697 6.514 6.514 0 0 1 4.443 4.444 6.503 6.503 0 0 1 4.701 6.248v3.5H80v.2H68.991v9.8H80v.2H68.991v9.8H80v.2H68.991v3.5a6.503 6.503 0 0 1-4.701 6.248 6.514 6.514 0 0 1-4.443 4.442 6.503 6.503 0 0 1-6.247 4.7h-3.5V80h-.2V68.99h-9.8V80zm28.89-40.1a28.728 28.728 0 0 0-1.746-9.8h-2.5v9.8h4.247zm-4.246.2h4.247a28.729 28.729 0 0 1-1.747 9.8h-2.5zm-.2-.2v-9.8H60.1v9.8zm-4.244.2h4.244v9.8H60.1zm-.2-.2a19.807 19.807 0 0 0-2.633-9.8H50.1v9.8zm-9.8.2h9.8a19.807 19.807 0 0 1-2.633 9.8H50.1zm-.2-.2v-9.8h-9.8v9.8zm-9.8.2h9.8v9.8h-9.8zm-.2-.2v-9.8h-9.8v9.8zm-9.8.2h9.8v9.8h-9.8zm-.2-.2v-9.8h-7.167a19.807 19.807 0 0 0-2.633 9.8zm-9.8.2h9.8v9.8h-7.167a19.807 19.807 0 0 1-2.633-9.8zm-.2-.2v-9.8h-4.245v9.8zm-4.245.2H19.9v9.8h-4.245zm-.2-.2v-9.8H12.96a28.726 28.726 0 0 0-1.748 9.8h4.242zm-4.242.2h4.242v9.8H12.96a28.726 28.726 0 0 1-1.748-9.8zm0 13.5v-3.5h1.608a28.876 28.876 0 0 0 2.634 5.327v2.617c0 .543.066 1.07.192 1.575a6.303 6.303 0 0 1-4.434-6.019zm4.242 1.449a28.674 28.674 0 0 1-2.42-4.949h2.42zm.2.32V50.1H19.9v9.8h-.702a28.915 28.915 0 0 1-3.543-4.53zM20.1 59.9v-9.8h2.518a20.2 20.2 0 0 0 7.282 7.282V59.9zm0-10h2.403a19.966 19.966 0 0 1-2.403-7.053zm9.8 7.25a20 20 0 0 1-7.05-7.05h7.05zm.2.117V50.1h9.8v9.8a19.807 19.807 0 0 1-9.8-2.633zm10 2.633v-9.8h9.8v7.167a19.807 19.807 0 0 1-9.8 2.633zm10-2.75V50.1h7.05a20 20 0 0 1-7.05 7.05zm0 .232a20.2 20.2 0 0 0 7.282-7.282H59.9v9.8h-9.8zm7.397-7.482H59.9v-7.053a19.966 19.966 0 0 1-2.403 7.053zm2.603 10v-9.8h4.244v5.28a28.91 28.91 0 0 1-3.538 4.52zm4.444-4.841V50.1h2.426a28.67 28.67 0 0 1-2.426 4.959zm0 .378a28.881 28.881 0 0 0 2.64-5.337h1.607v3.5a6.303 6.303 0 0 1-4.44 6.021 6.514 6.514 0 0 0 .193-1.577zm2.713-5.537h1.534v-6.477a28.817 28.817 0 0 1-1.534 6.477zm-56.044 0h1.535a28.807 28.807 0 0 1-1.535-6.477zm57.578-20v-3.5a6.303 6.303 0 0 0-4.44-6.02c.126.504.193 1.031.193 1.575v2.608a28.877 28.877 0 0 1 2.639 5.337zm-1.534.2h1.534v6.477a28.815 28.815 0 0 0-1.534-6.477zm-.288-.2a28.673 28.673 0 0 0-2.425-4.958V29.9zm-2.625 0v-5.279a28.911 28.911 0 0 0-3.538-4.521H60.1v9.8zm-4.444 0v-9.8h-9.8v2.518a20.2 20.2 0 0 1 7.282 7.282zm-2.403.2H59.9v7.053a19.966 19.966 0 0 0-2.403-7.053zm-.347-.2a20 20 0 0 0-7.05-7.05v7.05zm-7.25 0v-7.167a19.807 19.807 0 0 0-9.8-2.633v9.8zm-10 0v-9.8a19.807 19.807 0 0 0-9.8 2.633V29.9zm-10 0v-7.05a20 20 0 0 0-7.05 7.05zm-7.282 0a20.2 20.2 0 0 1 7.282-7.282V20.1h-9.8v9.8zm-2.518.2h2.403a19.966 19.966 0 0 0-2.403 7.053zm-.2-.2v-9.8h-.701a28.915 28.915 0 0 0-3.544 4.53v5.27zm-4.445 0v-4.948a28.665 28.665 0 0 0-2.42 4.948zm-2.634 0a28.874 28.874 0 0 1 2.634-5.327v-2.618c0-.543.066-1.07.191-1.574a6.303 6.303 0 0 0-4.433 6.019v3.5zm-1.608.2h1.535a28.81 28.81 0 0 0-1.535 6.477zM36.58 68.79H30.1v-1.536c2.06.749 4.23 1.27 6.479 1.535zm3.321-.001a28.726 28.726 0 0 1-9.8-1.748v-2.497h9.8zm-10-1.822v-2.423h-4.953a28.678 28.678 0 0 0 4.953 2.423zm10-2.623h-9.8V60.1h9.8zm-10 0V60.1h-9.8v.702a28.915 28.915 0 0 0 4.526 3.542H29.9zm7.254-4.444H30.1v-2.403a19.966 19.966 0 0 0 7.053 2.403zm0-39.8a19.966 19.966 0 0 0-7.054 2.403V20.1h7.053zm2.746-.2h-9.8v-4.245h9.8zm-10 0v-4.245h-5.27a28.907 28.907 0 0 0-4.53 3.544v.701zm10-4.445h-9.8V12.96a28.729 28.729 0 0 1 9.8-1.749zm-10 0v-2.421a28.668 28.668 0 0 0-4.95 2.42h4.95zm6.679-4.244a28.81 28.81 0 0 0-6.479 1.536V11.21h6.479zm-6.679 1.61v-1.61h-3.5a6.303 6.303 0 0 0-6.02 4.436 6.514 6.514 0 0 1 1.575-.192h2.617A28.877 28.877 0 0 1 29.9 12.82zm0 55.968V67.18a28.878 28.878 0 0 1-5.331-2.636h-2.614c-.543 0-1.07-.067-1.575-.192a6.303 6.303 0 0 0 6.02 4.437zm20.2 0h3.5a6.303 6.303 0 0 0 6.02-4.438 6.513 6.513 0 0 1-1.576.193h-2.608a28.879 28.879 0 0 1-5.336 2.638zm-.2-1.534v1.534h-6.475a28.808 28.808 0 0 0 6.475-1.534zm.2-.287a28.671 28.671 0 0 0 4.957-2.424H50.1v2.424zm-.2-2.424v2.499a28.728 28.728 0 0 1-9.8 1.746v-4.245zm.2-.2h5.278a28.914 28.914 0 0 0 4.522-3.538V60.1h-9.8zm-.2-4.244v4.244h-9.8V60.1zm0-2.603V59.9h-7.053a19.966 19.966 0 0 0 7.053-2.403zm0-37.397v2.403a19.966 19.966 0 0 0-7.053-2.403H49.9zm.2-.2h9.8v-.705a28.911 28.911 0 0 0-4.526-3.54H50.1V19.9zm-.2-4.245V19.9h-9.8v-4.245h9.8zm.2-.2h4.954a28.676 28.676 0 0 0-4.954-2.423zm-.2-2.497v2.497h-9.8V11.21a28.75 28.75 0 0 1 9.8 1.747zm.2-.14a28.877 28.877 0 0 1 5.332 2.637h2.612c.543 0 1.071.066 1.576.192a6.303 6.303 0 0 0-6.02-4.436h-3.5zm-.2-1.607v1.534a28.812 28.812 0 0 0-6.475-1.534H49.9zm-34.245 44.53v2.303c0 .567.075 1.117.215 1.64a6.309 6.309 0 0 0 1.643.216h1.41a29.118 29.118 0 0 1-3.268-4.16zm3.458 4.359h-1.6a6.513 6.513 0 0 1-1.578-.193 6.315 6.315 0 0 0 4.157 4.157 6.517 6.517 0 0 1-.192-1.575v-1.602a29.35 29.35 0 0 1-.787-.787zm.787.509a29.029 29.029 0 0 1-.508-.509h.508zm.2.469v1.411c0 .567.075 1.117.215 1.64.523.14 1.073.215 1.64.215h2.3a29.118 29.118 0 0 1-4.155-3.266zm35.649 3.266h2.295c.567 0 1.117-.075 1.64-.216a6.286 6.286 0 0 0 .216-1.639v-1.407a29.116 29.116 0 0 1-4.151 3.262zm4.35-3.454v1.598a6.53 6.53 0 0 1-.192 1.574 6.314 6.314 0 0 0 4.155-4.154 6.509 6.509 0 0 1-1.572.191h-1.6a29.08 29.08 0 0 1-.791.791zm.982-.991h1.41c.565 0 1.114-.075 1.636-.215a6.31 6.31 0 0 0 .216-1.641V55.75a29.113 29.113 0 0 1-3.262 4.15zm3.262-35.65v-2.295c0-.568-.075-1.117-.216-1.64a6.307 6.307 0 0 0-1.637-.215h-1.41a29.112 29.112 0 0 1 3.263 4.15zM60.89 19.9h1.6c.542 0 1.069.066 1.573.192a6.314 6.314 0 0 0-4.156-4.157 6.51 6.51 0 0 1 .192 1.576v1.598c.269.259.532.522.79.791zm-.991-.981V17.51a6.31 6.31 0 0 0-.216-1.64 6.308 6.308 0 0 0-1.64-.216h-2.299a29.108 29.108 0 0 1 4.155 3.264zm-35.641-3.264h-2.304a6.31 6.31 0 0 0-1.639.215 6.306 6.306 0 0 0-.216 1.641v1.412a29.115 29.115 0 0 1 4.159-3.268zM19.9 19.113v-1.602c0-.543.067-1.072.193-1.577a6.315 6.315 0 0 0-4.159 4.16 6.518 6.518 0 0 1 1.58-.194h1.6c.257-.267.519-.53.786-.787zm-.508.787h.508v-.508c-.171.167-.34.337-.508.508zm-.47.2h-1.409a6.31 6.31 0 0 0-1.643.216 6.308 6.308 0 0 0-.215 1.639v2.305a29.107 29.107 0 0 1 3.268-4.16zm41.178-.712c.173.168.344.34.512.512H60.1zm.513 40.712c-.169.173-.34.344-.513.513V60.1z' fill='%2394a3b8' fill-rule='evenodd'/%3e%3crect fill='black' height='80' rx='16' width='80'/%3e%3cpath d='M43.47 19.752c1.24 5.14.821 9.663-.937 10.1-1.758.438-4.19-3.375-5.43-8.517-1.241-5.14-.822-9.663.936-10.1 1.759-.438 4.19 3.376 5.43 8.517zm20.49 4.42c-2.749-2.913-8.216-2.123-12.212 1.763s-5.008 9.398-2.26 12.31 8.215 2.123 12.211-1.763 5.008-9.398 2.26-12.31zM42.102 68.769c1.758-.438 2.116-5.216.8-10.673-1.318-5.456-3.81-9.525-5.57-9.088-1.757.438-2.115 5.216-.798 10.672 1.317 5.457 3.81 9.526 5.568 9.089zM24.18 26.838c5.073 1.496 8.78 4.12 8.28 5.862-.5 1.741-5.019 1.94-10.091.444-5.073-1.496-8.78-4.12-8.28-5.861.501-1.742 5.019-1.941 10.092-.445zm32.924 19.664c5.384 1.588 9.343 4.286 8.843 6.028-.5 1.741-5.27 1.866-10.654.278-5.385-1.588-9.343-4.286-8.843-6.028.5-1.741 5.27-1.866 10.654-.278zm-27.216-3.654c-1.258-1.304-5.384.594-9.215 4.24-3.832 3.644-5.919 7.656-4.66 8.96 1.257 1.304 5.383-.594 9.215-4.239s5.918-7.657 4.66-8.96z' fill='%23fe5'/%3e%3c/svg%3e";
      var g = ".pera-wallet-download-qr-code-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: fit-content;\n  margin: 26px auto 0;\n  padding: 10px;\n  box-shadow: 0px 20px 60px rgba(26, 35, 91, 0.15), 0px 4px 12px rgba(26, 35, 91, 0.05), 0px 1px 4px rgba(26, 35, 91, 0.06);\n  border-radius: 24px;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-download-qr-code-wrapper {\n    margin-top: 51px;\n  }\n}";
      r(g);
      var f = document.createElement("template");
      f.innerHTML = '\n  <div id="pera-wallet-download-qr-code-wrapper" class="pera-wallet-download-qr-code-wrapper"></div>  \n';
      var x = class extends HTMLElement {
        constructor() {
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const e2 = document.createElement("style");
            e2.textContent = g, this.shadowRoot.append(f.content.cloneNode(true), e2);
          }
        }
        connectedCallback() {
          var n2;
          const t2 = new o.default({ width: 205, height: 205, type: "svg", data: e.PERA_DOWNLOAD_URL, image: h, dotsOptions: { color: "#000", type: "extra-rounded" }, imageOptions: { crossOrigin: "anonymous", margin: 10 }, cornersSquareOptions: { type: "extra-rounded" }, cornersDotOptions: { type: "dot" } }), a2 = null === (n2 = this.shadowRoot) || void 0 === n2 ? void 0 : n2.getElementById("pera-wallet-download-qr-code-wrapper");
          a2 && t2.append(a2);
        }
      };
      var u = "data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M8.5 19L15.5 12L8.5 5' stroke='%233C3C49' stroke-width='2'/%3e%3c/svg%3e";
      var _ = ".pera-wallet-connect-modal-desktop-mode {\n  display: grid;\n  grid-template-columns: 205px auto;\n  gap: 70px;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view {\n  display: block;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-item--active .pera-wallet-accordion-item__content {\n  height: 364px;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view--web-wallet-not-avaliable .pera-wallet-accordion-item--web-wallet {\n  display: none;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view--web-wallet-not-avaliable .pera-wallet-accordion-item .pera-wallet-accordion-toggle {\n  padding: 26px 24px 12px;\n  border-radius: 24px 24px 0 0;\n  transition: all ease-in 0.2s;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view--web-wallet-not-avaliable .pera-wallet-accordion-item .pera-wallet-accordion-item__content {\n  height: 434px;\n  border-radius: 0 0 24px 24px;\n  transition: height ease-in 0.2s;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view--web-wallet-not-avaliable .pera-wallet-accordion-item .pera-wallet-accordion-icon {\n  transform: rotate(90deg);\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__default-view--web-wallet-not-avaliable .pera-wallet-connect-modal-desktop-mode__download-pera-description {\n  margin-top: 50px;\n}\n.pera-wallet-connect-modal-desktop-mode--default .pera-wallet-connect-modal-desktop-mode__download-view {\n  display: none;\n}\n.pera-wallet-connect-modal-desktop-mode--download .pera-wallet-connect-modal-desktop-mode__default-view {\n  display: none;\n}\n.pera-wallet-connect-modal-desktop-mode--download .pera-wallet-connect-modal-desktop-mode__download-view {\n  display: block;\n}\n.pera-wallet-connect-modal-desktop-mode--download .pera-wallet-connect-modal-desktop-mode__download-view .pera-wallet-connect-modal-download-pera-view__footer a {\n  display: flex;\n  cursor: pointer;\n}\n.pera-wallet-connect-modal-desktop-mode--compact {\n  grid-template-columns: unset;\n  gap: unset;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__web-wallet {\n  padding: 28px 40px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__web-wallet .pera-wallet-connect-modal-desktop-mode__web-wallet__logo-wrapper {\n  box-shadow: unset;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__web-wallet .pera-wallet-connect-modal-desktop-mode__web-wallet__description {\n  margin-bottom: 16px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__web-wallet .pera-wallet-connect-modal-desktop-mode__web-wallet__launch-button {\n  width: 172px;\n  height: 40px;\n  margin: 0 auto;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__web-wallet-iframe {\n  height: 100%;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view {\n  overflow: hidden;\n  border-radius: 24px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-item {\n  margin-bottom: 0;\n  border-radius: 0;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-item:not(:last-child) {\n  border-bottom: 1px solid #e6e8ee;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-item #pera-wallet-iframe {\n  height: 100%;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-toggle {\n  padding: 20px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-toggle__text, .pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-toggle__content-with-label__text {\n  color: #626268;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: -0.09px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-toggle__bold-color {\n  font-weight: 600;\n  color: #1a1a1a;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-accordion-item--active .pera-wallet-accordion-item__content {\n  height: 265px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-connect-modal-desktop-mode__download-pera-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 14px;\n  padding: 0 20px;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-connect-modal-desktop-mode__download-pera-description,\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-connect-modal-desktop-mode__download-pera-button {\n  margin: 0;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-connect-modal-desktop-mode__download-pera-button {\n  font-weight: 500;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-connect-qr-code-wrapper {\n  margin: 4px auto 0;\n  padding: 0;\n  box-shadow: unset;\n}\n.pera-wallet-connect-modal-desktop-mode--compact .pera-wallet-connect-modal-desktop-mode__default-view .pera-wallet-connect-qr-code-wrapper svg {\n  padding: 8px;\n  box-shadow: 0px 20px 60px rgba(26, 35, 91, 0.15), 0px 4px 12px rgba(26, 35, 91, 0.05), 0px 1px 4px rgba(26, 35, 91, 0.06);\n  border-radius: 12px;\n}\n.pera-wallet-connect-modal-desktop-mode--select-account {\n  width: 100%;\n  height: 100%;\n}\n.pera-wallet-connect-modal-desktop-mode--select-account.pera-wallet-connect-modal-desktop-mode--default {\n  overflow: hidden;\n}\n.pera-wallet-connect-modal-desktop-mode--select-account .pera-wallet-connect-modal-desktop-mode__web-wallet-iframe {\n  position: unset;\n}\n.pera-wallet-connect-modal-desktop-mode--select-account .pera-wallet-accordion {\n  overflow: hidden;\n}\n.pera-wallet-connect-modal-desktop-mode--select-account #pera-wallet-iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 3;\n  width: 100%;\n  height: 100%;\n  border-radius: 16px;\n}\n\n.pera-wallet-connect-modal-desktop-mode__accordion__description,\n.pera-wallet-connect-modal-desktop-mode__connect-button-wrapper {\n  padding: 0 40px 20px 64px;\n}\n\n.pera-wallet-connect-modal-desktop-mode__web-wallet {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: calc(100% - 88px);\n  padding: 48px 52px 40px;\n  margin: 0 auto;\n}\n\n.pera-wallet-connect-modal-desktop-mode__web-wallet__logo-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 72px;\n  height: 72px;\n  margin: 0 auto 16px;\n  background: #ffffff;\n  border-radius: 50%;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.1), 0px 10px 16px rgba(20, 37, 63, 0.06);\n}\n\n.pera-wallet-connect-modal-desktop-mode__web-wallet__description {\n  margin: 0 auto 32px;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.1px;\n  text-align: center;\n  color: #6a6a81;\n}\n\n.pera-wallet-connect-modal-desktop-mode__web-wallet__launch-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  padding: 14px 0;\n  color: #ffffff;\n  background-color: #6b46fe;\n  border-radius: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 20px;\n  letter-spacing: -0.1;\n  border: none;\n  outline: none;\n  cursor: pointer;\n}\n\n.pera-wallet-connect-modal-desktop-mode__web-wallet-iframe {\n  position: relative;\n  width: fit-content;\n  margin: 0 auto;\n}\n\n.pera-wallet-connect-modal-desktop-mode__connect-button {\n  display: block;\n  width: 100%;\n  height: 48px;\n  border: unset;\n  border-radius: 6px;\n  background-color: #333333;\n  color: white;\n  cursor: pointer;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-size: 13px;\n}\n\n.pera-wallet-connect-qr-code-wrapper {\n  width: fit-content;\n  margin: 24px auto 0;\n  padding: 10px;\n  box-shadow: 0px 20px 60px rgba(26, 35, 91, 0.15), 0px 4px 12px rgba(26, 35, 91, 0.05), 0px 1px 4px rgba(26, 35, 91, 0.06);\n  border-radius: 24px;\n}\n\n.pera-wallet-connect-modal-desktop-mode__download-pera-description {\n  color: #838aa6;\n  text-align: center;\n  margin: 32px 0 12px;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 20px;\n  letter-spacing: -0.04px;\n}\n\n.pera-wallet-connect-modal-desktop-mode__download-pera-button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin: 0 auto;\n  padding: 0;\n  color: #6b46fe;\n  background-color: transparent;\n  outline: none;\n  border: none;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n  letter-spacing: 0.01px;\n  cursor: pointer;\n}\n\n.pera-wallet-connect-modal-download-pera-view__back-button {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  margin-bottom: 14px;\n  padding: 12px 24px;\n  color: #3c3c49;\n  background-color: #ffffff;\n  outline: none;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24), 0px 3px 8px -1px rgba(50, 50, 71, 0.05);\n  border: unset;\n  border-radius: 24px;\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 24px;\n  letter-spacing: -0.1px;\n  cursor: pointer;\n}\n\n.pera-wallet-connect-modal-download-pera-view {\n  padding: 32px 37px 28px;\n  background-color: #ffffff;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24), 0px 3px 8px -1px rgba(50, 50, 71, 0.05);\n  border-radius: 24px;\n}\n\n.pera-wallet-connect-modal-download-pera-view__title {\n  margin-bottom: 8px;\n  color: #3c3c49;\n  font-weight: 600;\n  font-size: 15px;\n  line-height: 18px;\n  text-align: center;\n  letter-spacing: -0.13px;\n}\n\n.pera-wallet-connect-modal-download-pera-view__footer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 12px;\n  margin-top: 53px;\n}\n\n.pera-wallet-connect-modal-download-pera-view__footer__button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  padding: 8px 16px;\n  color: #6a6a81;\n  background-color: #ffffff;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24), 0px 3px 8px -1px rgba(50, 50, 71, 0.05);\n  text-decoration: none;\n  border-radius: 12px;\n  font-weight: 500;\n  font-size: 13px;\n  line-height: 200%;\n  letter-spacing: -0.04px;\n  cursor: pointer;\n}\n\n#pera-wallet-iframe {\n  width: 285px;\n  height: 376px;\n  margin: 0 auto;\n  border: none;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-connect-modal-desktop-mode {\n    grid-template-columns: 1fr;\n    gap: 24px;\n  }\n  .pera-wallet-connect-qr-code-wrapper {\n    margin-top: 16px;\n  }\n  .pera-wallet-connect-modal-download-pera-view {\n    padding: 24px;\n  }\n  .pera-wallet-download-qr-code-wrapper {\n    margin-top: 32px;\n  }\n  .pera-wallet-connect-modal-download-pera-view__footer {\n    margin-top: 40px;\n  }\n}";
      r(_);
      var b = ".pera-wallet-accordion-item {\n  background-color: #ffffff;\n  border-radius: 24px;\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.02), 0px 4px 12px rgba(0, 0, 0, 0.03);\n}\n.pera-wallet-accordion-item:not(:last-of-type) {\n  margin-bottom: 20px;\n}\n.pera-wallet-accordion-item:not(:last-of-type) .pera-wallet-accordion-panel {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.pera-wallet-accordion-item .pera-wallet-accordion-item__content {\n  height: 0;\n  overflow: hidden;\n  color: #69708d;\n  background-color: #ffffff;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 20px;\n  letter-spacing: -0.04px;\n  transition: height ease-in 0.2s;\n}\n.pera-wallet-accordion-item--active .pera-wallet-accordion-toggle {\n  padding: 26px 24px 12px;\n  border-radius: 24px 24px 0 0;\n  transition: all ease-in 0.2s;\n}\n.pera-wallet-accordion-item--active .pera-wallet-accordion-item__content {\n  border-radius: 0 0 24px 24px;\n  transition: height ease-in 0.2s;\n}\n.pera-wallet-accordion-item--active .pera-wallet-accordion-icon {\n  transform: rotate(90deg);\n}\n\n.pera-wallet-accordion-toggle {\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  padding: 12px 24px;\n  color: #2c3559;\n  background-color: #ffffff;\n  border: none;\n  border-radius: 24px;\n  outline: none;\n  cursor: pointer;\n  font-size: 16px;\n  line-height: 18px;\n  letter-spacing: -0.1px;\n  font-weight: 600;\n  transition: all ease-in 0.2s;\n}\n.pera-wallet-accordion-toggle__text, .pera-wallet-accordion-toggle__content-with-label__text {\n  color: #626268;\n}\n\n.pera-wallet-accordion-icon {\n  transition: all ease-in 0.2s;\n}\n\n.pera-wallet-accordion-toggle__bold-color {\n  color: #1A1A1A;\n  font-weight: 600;\n}\n\n.pera-wallet-accordion-toggle__content-with-label {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.pera-wallet-accordion-toggle__label {\n  padding: 4px 9px;\n  color: #1C786C;\n  background: #E0FAEE;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 600;\n  line-height: 18px;\n  letter-spacing: 0.01px;\n}\n\n.pera-wallet-accordion-toggle__button {\n  position: absolute;\n  z-index: 2;\n  width: 100%;\n  height: 100%;\n  background: transparent;\n  box-shadow: none;\n  outline: none;\n  border: none;\n  cursor: pointer;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-accordion-toggle {\n    font-size: 14px;\n    font-weight: 500;\n    line-height: 24px;\n    letter-spacing: -0.1px;\n  }\n}";
      r(b);
      var v = document.createElement("template");
      var C = document.createElement("style");
      var L = document.createElement("style");
      C.textContent = _, L.textContent = b;
      v.innerHTML = `
  <div id="pera-wallet-connect-modal-desktop-mode" class="pera-wallet-connect-modal-desktop-mode pera-wallet-connect-modal-desktop-mode--default">
      <pera-wallet-connect-modal-information-section></pera-wallet-connect-modal-information-section>

      <div class="pera-wallet-connect-modal-desktop-mode__default-view"></div>
       

      <div class="pera-wallet-connect-modal-desktop-mode__download-view">
        <button
          id="pera-wallet-connect-modal-download-pera-view-back-button"
          class="pera-wallet-connect-modal-download-pera-view__back-button">
          <img
            src="data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M10.7071 6.29387C11.0976 6.68439 11.0976 7.31756 10.7071 7.70808L7.41421 11.001L19 11.001C19.5523 11.001 20 11.4487 20 12.001C20 12.5533 19.5523 13.001 19 13.001L7.41421 13.001L10.7071 16.2939C11.0976 16.6844 11.0976 17.3176 10.7071 17.7081C10.3166 18.0986 9.68342 18.0986 9.29289 17.7081L4.29289 12.7081C4.10536 12.5205 4 12.2662 4 12.001C4 11.7358 4.10536 11.4814 4.29289 11.2939L9.29289 6.29387C9.68342 5.90335 10.3166 5.90335 10.7071 6.29387Z' fill='%233C3C49'/%3e%3c/svg%3e"
            alt="Back Arrow"
          />

          Back
        </button>

        <div class="pera-wallet-connect-modal-download-pera-view">
          <h1 class="pera-wallet-connect-modal-download-pera-view__title">
            Download Pera Wallet
          </h1>

          <pera-wallet-download-qr-code></pera-wallet-download-qr-code>

          <div class="pera-wallet-connect-modal-download-pera-view__footer">
            <a
              href="https://apps.apple.com/us/app/algorand-wallet/id1459898525"
              target="_blank"
              rel="noopener noreferrer">
              <img src="data:image/svg+xml,%3csvg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='40' height='40' rx='12' fill='black'/%3e%3cpath d='M25.6308 20.3011C25.6416 19.4664 25.8633 18.6481 26.2753 17.9221C26.6873 17.1962 27.2763 16.5863 27.9873 16.1491C27.5356 15.5039 26.9397 14.973 26.2469 14.5984C25.554 14.2239 24.7834 14.016 23.9963 13.9914C22.317 13.8151 20.6891 14.9962 19.8333 14.9962C18.9611 14.9962 17.6436 14.0089 16.2249 14.0381C15.3072 14.0677 14.4128 14.3346 13.6289 14.8126C12.8451 15.2906 12.1984 15.9636 11.7519 16.7659C9.81789 20.1144 11.2605 25.0354 13.1132 27.742C14.0401 29.0674 15.1233 30.5478 16.5408 30.4953C17.9278 30.4378 18.4458 29.6108 20.1202 29.6108C21.779 29.6108 22.265 30.4953 23.7112 30.4619C25.1995 30.4378 26.1372 29.1307 27.0316 27.7928C27.6976 26.8484 28.2101 25.8047 28.55 24.7003C27.6853 24.3345 26.9474 23.7224 26.4283 22.9401C25.9092 22.1578 25.6318 21.2399 25.6308 20.3011ZM22.8993 12.2113C23.7108 11.2371 24.1106 9.98492 24.0138 8.7207C22.7739 8.85092 21.6287 9.44347 20.8062 10.3803C20.404 10.838 20.096 11.3704 19.8998 11.9472C19.7035 12.5239 19.6229 13.1337 19.6625 13.7417C20.2826 13.7481 20.8961 13.6137 21.4568 13.3486C22.0175 13.0835 22.5107 12.6946 22.8993 12.2113Z' fill='white'/%3e%3c/svg%3e" alt="App Store icon" />
            </a>

            <a
              href="https://play.google.com/store/apps/details?id=com.algorand.android"
              target="_blank"
              rel="noopener noreferrer">
              <img src="data:image/svg+xml,%3csvg width='40' height='40' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='40' height='40' rx='12' fill='black'/%3e%3cpath d='M12.41 9.7719C12.1334 10.0219 11.9683 10.4388 11.9683 10.9922V10.8671V29.1294V29.0091C11.9683 29.5202 12.1099 29.9149 12.3497 30.169L12.4109 30.2277V30.228C12.6051 30.4035 12.854 30.4966 13.1393 30.4963C13.418 30.4963 13.7316 30.4073 14.0626 30.2194L26.0264 23.4107L30.1359 21.0717C30.6578 20.7748 30.9508 20.3917 30.9998 20.0014V19.9998C30.9508 19.6087 30.6578 19.2259 30.1359 18.9289L26.0261 16.5902L14.0627 9.78154C13.731 9.59325 13.4171 9.50391 13.1376 9.50391C12.8527 9.50391 12.6041 9.59677 12.41 9.7719H12.41Z' fill='%2300C1FF'/%3e%3cpath d='M12.411 30.2285L12.3497 30.1698C12.1099 29.9157 11.9683 29.5209 11.9683 29.0098V29.1301V10.8724V10.993C11.9683 10.4396 12.1334 10.0226 12.41 9.77268L22.622 20.0009L12.411 30.2285Z' fill='url(%23paint0_linear_173_14441)'/%3e%3cpath d='M26.0256 23.4102L22.6211 19.9996L26.0253 16.5896L30.1351 18.9283C30.657 19.2253 30.95 19.6081 30.9989 19.9993V20.0008C30.95 20.3911 30.657 20.7742 30.1351 21.0712L26.0256 23.4101' fill='url(%23paint1_linear_173_14441)'/%3e%3cpath d='M13.1374 30.4961C12.8522 30.4964 12.6033 30.4032 12.4092 30.2277V30.2275L22.6202 19.9999L26.0246 23.4104L14.0608 30.2191C13.7298 30.4071 13.4162 30.4961 13.1374 30.4961Z' fill='url(%23paint2_linear_173_14441)'/%3e%3cpath d='M22.6212 20.002L12.4092 9.7737C12.6033 9.59858 12.8519 9.50571 13.1368 9.50571C13.4163 9.50571 13.7302 9.59501 14.0618 9.78335L26.0253 16.592L22.6212 20.002' fill='url(%23paint3_linear_173_14441)'/%3e%3cpath d='M13.1394 30.6172C12.8542 30.6172 12.6049 30.524 12.4108 30.3486L12.4105 30.3489C12.4097 30.3481 12.4088 30.3473 12.4079 30.3466L12.3548 30.2947C12.3531 30.2931 12.3516 30.2912 12.3496 30.2893L12.4108 30.2279C12.6049 30.4034 12.8538 30.4966 13.1392 30.4962C13.4179 30.4962 13.7315 30.4073 14.0625 30.2193L26.0263 23.4106L26.1029 23.4874L26.0253 23.5316L14.0625 30.3398C13.7608 30.5111 13.4739 30.6004 13.2147 30.6153C13.1896 30.6165 13.1645 30.6171 13.1394 30.6172' fill='url(%23paint4_linear_173_14441)'/%3e%3cpath d='M12.3497 30.2891C12.1099 30.0349 11.9683 29.6406 11.9683 29.1292V29.0089C11.9683 29.52 12.1099 29.9146 12.3497 30.1688L12.4109 30.2275L12.3497 30.2891Z' fill='url(%23paint5_linear_173_14441)'/%3e%3cpath d='M26.1025 23.4882L26.0259 23.4114L30.1349 21.0727C30.6568 20.7758 30.9498 20.3927 30.9987 20.0025C30.9987 20.1457 30.9668 20.2889 30.9035 20.4282C30.7756 20.7091 30.5194 20.9744 30.135 21.1934L26.1025 23.4883' fill='url(%23paint6_linear_173_14441)'/%3e%3cpath d='M30.9991 20C30.9501 19.6089 30.6571 19.2261 30.1353 18.9291L26.0259 16.5907L26.1025 16.5139H26.1029L30.1353 18.8088C30.7106 19.1365 30.9987 19.5682 30.9991 20Z' fill='url(%23paint7_linear_173_14441)'/%3e%3cpath d='M11.9683 10.9922V10.8661C11.9683 10.8206 11.9695 10.7761 11.9718 10.7329V10.7309C11.9718 10.7303 11.9718 10.7297 11.972 10.729V10.7242C11.9969 10.284 12.1334 9.94066 12.3497 9.71139L12.4099 9.77198C12.1334 10.0219 11.9683 10.4388 11.9683 10.9922Z' fill='url(%23paint8_linear_173_14441)'/%3e%3cpath d='M26.026 16.5898L14.0625 9.78115C13.7308 9.59285 13.417 9.50355 13.1375 9.50355C12.8525 9.50355 12.6039 9.59642 12.4099 9.77154L12.3496 9.71091C12.3684 9.69096 12.388 9.67172 12.4082 9.65322C12.4089 9.65255 12.4099 9.65188 12.4105 9.65125C12.6031 9.47747 12.849 9.3846 13.1314 9.38293H13.1375C13.417 9.38293 13.7308 9.47227 14.0625 9.66064L26.1029 16.5128L26.1026 16.513L26.026 16.5898Z' fill='url(%23paint9_linear_173_14441)'/%3e%3cdefs%3e%3clinearGradient id='paint0_linear_173_14441' x1='18.4943' y1='10.6794' x2='9.69389' y2='19.494' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%2300A0FF'/%3e%3cstop offset='0.00657' stop-color='%2300A1FF'/%3e%3cstop offset='0.2601' stop-color='%2300BEFF'/%3e%3cstop offset='0.5122' stop-color='%2300D2FF'/%3e%3cstop offset='0.7604' stop-color='%2300DFFF'/%3e%3cstop offset='1' stop-color='%2300E3FF'/%3e%3c/linearGradient%3e%3clinearGradient id='paint1_linear_173_14441' x1='31.6348' y1='19.9407' x2='11.691' y2='19.9407' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23FFE000'/%3e%3cstop offset='0.4087' stop-color='%23FFBD00'/%3e%3cstop offset='0.7754' stop-color='orange'/%3e%3cstop offset='1' stop-color='%23FF9C00'/%3e%3c/linearGradient%3e%3clinearGradient id='paint2_linear_173_14441' x1='24.2172' y1='23.2425' x2='9.30414' y2='38.0705' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23FF3A44'/%3e%3cstop offset='1' stop-color='%23C31162'/%3e%3c/linearGradient%3e%3clinearGradient id='paint3_linear_173_14441' x1='9.77725' y1='8.25731' x2='16.4237' y2='14.876' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%2332A071'/%3e%3cstop offset='0.0685' stop-color='%232DA771'/%3e%3cstop offset='0.4762' stop-color='%2315CF74'/%3e%3cstop offset='0.8009' stop-color='%2306E775'/%3e%3cstop offset='1' stop-color='%2300F076'/%3e%3c/linearGradient%3e%3clinearGradient id='paint4_linear_173_14441' x1='24.2114' y1='25.6084' x2='12.2683' y2='37.5709' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23CC2E36'/%3e%3cstop offset='1' stop-color='%239C0E4E'/%3e%3c/linearGradient%3e%3clinearGradient id='paint5_linear_173_14441' x1='13.3285' y1='10.6804' x2='5.57625' y2='18.4453' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23008DE0'/%3e%3cstop offset='0.00657' stop-color='%23008DE0'/%3e%3cstop offset='0.2601' stop-color='%2300A7E0'/%3e%3cstop offset='0.5122' stop-color='%2300B8E0'/%3e%3cstop offset='0.7604' stop-color='%2300C4E0'/%3e%3cstop offset='1' stop-color='%2300C7E0'/%3e%3c/linearGradient%3e%3clinearGradient id='paint6_linear_173_14441' x1='31.6346' y1='20.0018' x2='11.6929' y2='20.0018' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23E0C500'/%3e%3cstop offset='0.4087' stop-color='%23E0A600'/%3e%3cstop offset='0.7754' stop-color='%23E09100'/%3e%3cstop offset='1' stop-color='%23E08900'/%3e%3c/linearGradient%3e%3clinearGradient id='paint7_linear_173_14441' x1='31.6349' y1='20.0008' x2='11.6933' y2='20.0008' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%23FFE840'/%3e%3cstop offset='0.4087' stop-color='%23FFCE40'/%3e%3cstop offset='0.7754' stop-color='%23FFBC40'/%3e%3cstop offset='1' stop-color='%23FFB540'/%3e%3c/linearGradient%3e%3clinearGradient id='paint8_linear_173_14441' x1='13.3201' y1='10.6927' x2='5.8533' y2='17.8475' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%2340B8FF'/%3e%3cstop offset='0.00657' stop-color='%2340B9FF'/%3e%3cstop offset='0.2601' stop-color='%2340CEFF'/%3e%3cstop offset='0.5122' stop-color='%2340DDFF'/%3e%3cstop offset='0.7604' stop-color='%2340E7FF'/%3e%3cstop offset='1' stop-color='%2340EAFF'/%3e%3c/linearGradient%3e%3clinearGradient id='paint9_linear_173_14441' x1='9.76302' y1='10.4182' x2='15.0961' y2='15.76' gradientUnits='userSpaceOnUse'%3e%3cstop stop-color='%2365B895'/%3e%3cstop offset='0.0685' stop-color='%2362BD95'/%3e%3cstop offset='0.4762' stop-color='%2350DB97'/%3e%3cstop offset='0.8009' stop-color='%2344ED98'/%3e%3cstop offset='1' stop-color='%2340F498'/%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e" alt="Play Store icon" />
            </a>

            <a
              class="pera-wallet-connect-modal-download-pera-view__footer__button"
              href="https://perawallet.s3-eu-west-3.amazonaws.com/android-releases/app-pera-prod-release-bitrise-signed.apk"
              target="_blank"
              rel="noopener noreferrer">
              <img src="data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M3 14V20C3 20.5523 3.44772 21 4 21H20C20.5523 21 21 20.5523 21 20V14' stroke='%232C3559' stroke-width='1.5'/%3e%3cpath d='M11.9998 16V3M11.9998 16L7.47803 11.4783M11.9998 16L16.5215 11.4783' stroke='%232C3559' stroke-width='1.5'/%3e%3c/svg%3e" alt="Download icon" />

              Download APK File
            </a>
          </div>
        </div>
      </div>
    </div>
  `;
      var k = class extends HTMLElement {
        constructor() {
          var e2;
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            this.shadowRoot.append(v.content.cloneNode(true), C, L), this.shadowRoot.addEventListener("click", (e3) => {
              this.handleAccordion(e3);
            });
            if ("true" === this.getAttribute("compact-mode")) {
              const e3 = this.shadowRoot.getElementById("pera-wallet-connect-modal-desktop-mode");
              null == e3 || e3.classList.add("pera-wallet-connect-modal-desktop-mode--compact");
            }
            const n2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.querySelector(".pera-wallet-connect-modal-desktop-mode__default-view"), t2 = "true" === this.getAttribute("promote-mobile"), { webWalletOption: a2, mobileWalletOption: o2 } = function(e3) {
              const n3 = `
  <div id="web-wallet-option" class="pera-wallet-accordion-item ${e3 ? "" : "pera-wallet-accordion-item--active"}  pera-wallet-accordion-item--web-wallet">
            <a class="pera-wallet-accordion-toggle">
              <button class="pera-wallet-accordion-toggle__button"></button>
  
              <img src="${u}" class="pera-wallet-accordion-icon" />
  
              <div class="pera-wallet-accordion-toggle__content-with-label">
                <div class="pera-wallet-accordion-toggle__content-with-label__text">
                  Connect With
  
                  <span class="pera-wallet-accordion-toggle__bold-color">
                    Pera Web
                  </span>
                </div>
  
                <span id="pera-web-new-label" class="pera-wallet-accordion-toggle__label">NEW</span>
              </div>
            </a>
  
            <div class="pera-wallet-accordion-item__content">
              <div class="pera-wallet-connect-modal-desktop-mode__web-wallet"><div>
              
              <div
                class="pera-wallet-connect-modal-desktop-mode__web-wallet__logo-wrapper">
                <img src="data:image/svg+xml,%3csvg width='44' height='44' viewBox='0 0 44 44' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3crect x='3.5' y='7.5' width='36' height='26' rx='5.5' stroke='%236B46FE' stroke-width='3'/%3e%3cpath d='M22.4973 14.5237C22.8556 16.041 22.7344 17.3757 22.2267 17.5048C21.719 17.6339 21.0169 16.5085 20.6586 14.9912C20.3003 13.4739 20.4214 12.1392 20.9292 12.0101C21.4369 11.881 22.1389 13.0064 22.4973 14.5237Z' fill='%236B46FE'/%3e%3cpath d='M28.4139 15.8282C27.6204 14.9686 26.0417 15.2016 24.8877 16.3486C23.7338 17.4956 23.4417 19.1222 24.2352 19.9818C25.0287 20.8414 26.6074 20.6084 27.7613 19.4614C28.9153 18.3144 29.2074 16.6878 28.4139 15.8282Z' fill='%236B46FE'/%3e%3cpath d='M22.1027 28.9905C22.6104 28.8614 22.7137 27.4512 22.3334 25.8407C21.9531 24.2303 21.2332 23.0294 20.7254 23.1585C20.2177 23.2876 20.1144 24.6978 20.4947 26.3083C20.875 27.9187 21.5949 29.1196 22.1027 28.9905Z' fill='%236B46FE'/%3e%3cpath d='M16.9269 16.6152C18.3917 17.0567 19.4621 17.8312 19.3176 18.3452C19.1731 18.8591 17.8686 18.9179 16.4037 18.4764C14.9389 18.0349 13.8686 17.2603 14.0131 16.7464C14.1575 16.2324 15.4621 16.1737 16.9269 16.6152Z' fill='%236B46FE'/%3e%3cpath d='M26.4342 22.4188C27.9889 22.8874 29.1322 23.6839 28.9877 24.1979C28.8432 24.7118 27.4657 24.7486 25.911 24.28C24.3563 23.8114 23.213 23.0148 23.3575 22.5009C23.502 21.9869 24.8795 21.9502 26.4342 22.4188Z' fill='%236B46FE'/%3e%3cpath d='M18.5752 21.3404C18.2119 20.9555 17.0205 21.5157 15.914 22.5915C14.8075 23.6673 14.2049 24.8514 14.5682 25.2363C14.9314 25.6211 16.1229 25.061 17.2294 23.9852C18.3359 22.9094 18.9384 21.7253 18.5752 21.3404Z' fill='%236B46FE'/%3e%3cpath d='M16 39C21 39.0001 23.5 39.0001 28 39' stroke='%236B46FE' stroke-width='3' stroke-linecap='round'/%3e%3c/svg%3e" />
              </div>
  
              <p
                class="pera-wallet-connect-modal-desktop-mode__web-wallet__description">
                Connect with Pera Web to continue
              </p>
            </div>
  
            <button
              id="pera-wallet-connect-web-wallet-launch-button"
              class="pera-wallet-connect-modal-desktop-mode__web-wallet__launch-button">
              Launch Pera Web
  
              <img src="data:image/svg+xml,%3csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M13.0892 9.41009C13.4147 9.73553 13.4147 10.2632 13.0892 10.5886L8.08924 15.5886C7.7638 15.914 7.23616 15.914 6.91072 15.5886C6.58529 15.2632 6.58529 14.7355 6.91072 14.4101L11.3215 9.99935L6.91073 5.5886C6.58529 5.26317 6.58529 4.73553 6.91073 4.41009C7.23616 4.08466 7.7638 4.08466 8.08924 4.41009L13.0892 9.41009Z' fill='white'/%3e%3c/svg%3e" />
            </button>
          </div>`, t3 = `
  <div id="mobile-wallet-option" class="pera-wallet-accordion-item ${e3 ? "pera-wallet-accordion-item--active" : ""}">
            <a class="pera-wallet-accordion-toggle">
            <button class="pera-wallet-accordion-toggle__button"></button>
  
              <img src="${u}" class="pera-wallet-accordion-icon" />
  
              <div class="pera-wallet-accordion-toggle__text">
                Connect with
  
                <span class="pera-wallet-accordion-toggle__bold-color">
                  Pera Mobile
                </span>
              </div>
            </a>
  
            <div class="pera-wallet-accordion-item__content">
              <div id="pera-wallet-connect-modal-connect-qr-code" class="pera-wallet-connect-qr-code-wrapper"></div>
  
              <div class="pera-wallet-connect-modal-desktop-mode__download-pera-container">
                <p
                  class="pera-wallet-connect-modal-desktop-mode__download-pera-description">
                    Don\u2019t have Pera Wallet app?
                </p>
  
                <button
                  id="pera-wallet-connect-modal-desktop-mode-download-pera-button"
                  class="pera-wallet-connect-modal-desktop-mode__download-pera-button">
                  <img src="data:image/svg+xml,%3csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3crect x='2' y='2' width='4.66667' height='4.66667' rx='1.2' stroke='%236B46FE' stroke-width='1.5'/%3e%3crect x='2' y='9.33203' width='4.66667' height='4.66667' rx='1.2' stroke='%236B46FE' stroke-width='1.5'/%3e%3crect x='9.33325' y='2' width='4.66667' height='4.66667' rx='1.2' stroke='%236B46FE' stroke-width='1.5'/%3e%3cpath d='M8.70581 9.5293H10.9411' stroke='%236B46FE' stroke-width='1.66667' stroke-linejoin='round'/%3e%3cpath d='M13.1765 12.668L14.6667 12.668' stroke='%236B46FE' stroke-width='1.66667' stroke-linejoin='round'/%3e%3cpath d='M13.1765 14L14.6667 14' stroke='%236B46FE' stroke-width='1.66667' stroke-linejoin='round'/%3e%3cpath d='M11.686 14L13.1762 14' stroke='%236B46FE' stroke-width='1.66667' stroke-linejoin='round'/%3e%3cpath d='M12.4314 9.5293H14.6667' stroke='%236B46FE' stroke-width='1.66667' stroke-linejoin='round'/%3e%3cpath d='M8.70581 10.2754H12.4313' stroke='%236B46FE' stroke-width='1.25' stroke-linejoin='round'/%3e%3cpath d='M10.196 11.7656H11.6862' stroke='%236B46FE' stroke-width='1.25' stroke-linejoin='round'/%3e%3cpath d='M10.196 12.5117H11.6862' stroke='%236B46FE' stroke-width='1.25' stroke-linejoin='round'/%3e%3cpath d='M8.70581 13.2539H10.196' stroke='%236B46FE' stroke-width='1.25' stroke-linejoin='round'/%3e%3cpath d='M8.70581 14H10.196' stroke='%236B46FE' stroke-width='1.25' stroke-linejoin='round'/%3e%3cpath d='M10.196 11.0195H12.4313' stroke='%236B46FE' stroke-width='1.25' stroke-linejoin='round'/%3e%3c/svg%3e" alt="QR Icon" />
  
                  Download Pera Wallet
                </button>
              </div>
            </div>
          </div>`;
              return { mobileWalletOption: document.createRange().createContextualFragment(t3), webWalletOption: document.createRange().createContextualFragment(n3) };
            }(t2);
            t2 ? (null == n2 || n2.appendChild(o2), null == n2 || n2.appendChild(a2)) : (null == n2 || n2.appendChild(a2), null == n2 || n2.appendChild(o2));
          }
        }
        connectedCallback() {
          var e2;
          const n2 = this.getAttribute("should-display-new-badge"), t2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-web-new-label");
          "false" === n2 && (null == t2 || t2.setAttribute("style", "display:none")), this.handleChangeView();
        }
        handleChangeView() {
          var e2, n2, t2;
          const a2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-wallet-connect-modal-desktop-mode-download-pera-button"), o2 = null === (n2 = this.shadowRoot) || void 0 === n2 ? void 0 : n2.getElementById("pera-wallet-connect-modal-download-pera-view-back-button"), l2 = null === (t2 = this.shadowRoot) || void 0 === t2 ? void 0 : t2.getElementById("pera-wallet-connect-web-wallet-launch-button");
          a2 && a2.addEventListener("click", () => {
            this.onClickDownload();
          }), o2 && o2.addEventListener("click", () => {
            this.onClickBack();
          }), l2 && l2.addEventListener("click", () => {
            this.webWalletConnect();
          }), this.renderQRCode(), this.checkWebWalletAvaliability();
        }
        webWalletConnect() {
          "true" === this.getAttribute("is-web-wallet-avaliable") && window.onWebWalletConnect();
        }
        handleAccordion(e2) {
          var n2, t2;
          if (e2.target instanceof Element) {
            if (!e2.target.classList.contains("pera-wallet-accordion-toggle__button"))
              return;
            if (this.shadowRoot && (null === (n2 = e2.target.parentElement) || void 0 === n2 ? void 0 : n2.parentElement)) {
              const n3 = null === (t2 = e2.target.parentElement) || void 0 === t2 ? void 0 : t2.parentElement;
              if (!n3)
                return;
              if (n3.classList.contains("pera-wallet-accordion-item--active"))
                return;
              const a2 = this.shadowRoot.querySelectorAll(".pera-wallet-accordion-item.pera-wallet-accordion-item--active");
              for (let e3 = 0; e3 < a2.length; e3++)
                a2[e3].classList.remove("pera-wallet-accordion-item--active");
              n3.classList.toggle("pera-wallet-accordion-item--active");
            }
          }
        }
        renderQRCode() {
          var e2;
          const n2 = this.getAttribute("uri");
          let t2 = "false" === this.getAttribute("is-web-wallet-avaliable") ? 250 : 205;
          if ("true" === this.getAttribute("compact-mode") && (t2 = 190), n2) {
            const a2 = new o.default({ width: t2, height: t2, type: "svg", data: n2, image: h, dotsOptions: { color: "#000", type: "extra-rounded" }, imageOptions: { crossOrigin: "anonymous", margin: 8 }, cornersSquareOptions: { type: "extra-rounded" }, cornersDotOptions: { type: "dot" } }), l2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-wallet-connect-modal-connect-qr-code");
            l2 && a2.append(l2);
          }
        }
        onClickDownload() {
          if (this.shadowRoot) {
            const e2 = this.shadowRoot.getElementById("pera-wallet-connect-modal-desktop-mode");
            e2 && (e2.classList.remove("pera-wallet-connect-modal-desktop-mode--default"), e2.classList.add("pera-wallet-connect-modal-desktop-mode--download"));
          }
        }
        onClickBack() {
          if (this.shadowRoot) {
            const e2 = this.shadowRoot.getElementById("pera-wallet-connect-modal-desktop-mode");
            e2 && (e2.classList.add("pera-wallet-connect-modal-desktop-mode--default"), e2.classList.remove("pera-wallet-connect-modal-desktop-mode--download"));
          }
        }
        checkWebWalletAvaliability() {
          var e2;
          if ("false" === this.getAttribute("is-web-wallet-avaliable")) {
            const n2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.querySelector(".pera-wallet-connect-modal-desktop-mode__default-view");
            null == n2 || n2.classList.add("pera-wallet-connect-modal-desktop-mode__default-view--web-wallet-not-avaliable");
          }
        }
      };
      var y = ".pera-wallet-connect-modal-touch-screen-mode {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 46px;\n  padding: 4px;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode--pending-message-view {\n  gap: 56px;\n  grid-template-rows: auto 48px;\n  height: 100%;\n  padding-bottom: 70px;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__launch-pera-wallet-button,\n.pera-wallet-connect-modal-touch-screen-mode__install-pera-wallet-button {\n  display: block;\n  padding: 14px;\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__launch-pera-wallet-button {\n  margin-bottom: 32px;\n  background-color: #6b46fe;\n  color: #ffffff;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__install-pera-wallet-button {\n  margin-bottom: 20px;\n  color: #6a6a81;\n  background-color: #ffffff;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24), 0px 3px 8px -1px rgba(50, 50, 71, 0.05);\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box {\n  position: relative;\n  margin-bottom: 32px;\n  border-top: 1px solid #e6e8ee;\n}\n\n.pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box__text {\n  position: absolute;\n  top: -25px;\n  right: calc(50% - 56px);\n  width: 116px;\n  color: #69708d;\n  background-color: #ffffff;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: -0.04px;\n  text-align: center;\n}";
      r(y);
      var M = document.createElement("template");
      var E = class extends HTMLElement {
        constructor() {
          var n2;
          if (super(), this.attachShadow({ mode: "open" }), M.innerHTML = '\n  <div class="pera-wallet-connect-modal-touch-screen-mode">\n    <pera-wallet-connect-modal-information-section></pera-wallet-connect-modal-information-section>\n\n    <div>\n      <a\n        id="pera-wallet-connect-modal-touch-screen-mode-launch-pera-wallet-button"\n        class="pera-wallet-connect-modal-touch-screen-mode__launch-pera-wallet-button"\n        rel="noopener noreferrer"\n        target="_blank">\n        Launch Pera Wallet\n      </a>\n\n      <div\n        class="pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box">\n        <p\n          class="pera-wallet-connect-modal-touch-screen-mode__new-to-pera-box__text"\n          >\n          New to Pera?\n        </p>\n      </div>\n\n      <a\n        href="https://perawallet.app/download/"\n        class="pera-wallet-connect-modal-touch-screen-mode__install-pera-wallet-button"\n        rel="noopener noreferrer"\n        target="_blank">\n        Install Pera Wallet\n      </a>\n    </div>\n  </div>\n', this.shadowRoot) {
            const t2 = document.createElement("style");
            t2.textContent = y, this.shadowRoot.append(M.content.cloneNode(true), t2);
            const a2 = null === (n2 = this.shadowRoot) || void 0 === n2 ? void 0 : n2.getElementById("pera-wallet-connect-modal-touch-screen-mode-launch-pera-wallet-button"), o2 = this.getAttribute("uri");
            a2 && o2 && (a2.setAttribute("href", function(n3) {
              let t3 = i(false);
              e.isIOS() && !t3.includes("-wc") && (t3 = t3.replace("://", "-wc://"));
              let a3 = `${t3}wc?uri=${encodeURIComponent(n3)}`;
              const o3 = e.detectBrowser();
              return e.isAndroid() && (a3 = n3), o3 && (a3 = `${a3}&browser=${encodeURIComponent(o3)}`), a3;
            }(o2)), a2.addEventListener("click", () => {
              this.onClickLaunch();
            }));
          }
        }
        onClickLaunch() {
          if (M.innerHTML = `
    <div class="pera-wallet-connect-modal-touch-screen-mode pera-wallet-connect-modal-touch-screen-mode--pending-message-view">
      <pera-wallet-connect-modal-pending-message-section should-use-sound="${this.getAttribute("should-use-sound")}"></pera-wallet-connect-modal-pending-message-section>
    </div>
  `, this.shadowRoot) {
            const e2 = document.createElement("style");
            e2.textContent = y, this.shadowRoot.innerHTML = "", this.shadowRoot.append(M.content.cloneNode(true), e2);
          }
        }
      };
      var z = '@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");\n.pera-wallet-modal {\n  --pera-wallet-modal-font-family: "Inter", sans-serif;\n  --pera-wallet-modal-compact-width: 380px;\n  --pera-wallet-modal-compact-height: 396px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 999999;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.pera-wallet-modal--select-account .pera-wallet-modal__body {\n  width: 480px;\n  height: 578px;\n  background-color: #ffffff;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body {\n  top: 40px;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  max-width: unset;\n  height: calc(100 * var(--vh));\n  padding: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.02), 0 4px 12px rgba(0, 0, 0, 0.03);\n  border-radius: 20px 20px 0px 0px;\n  animation: 0.3s PeraWalletConnectMobileSlideIn ease-out;\n  overflow-y: auto;\n  transform: unset;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body::before {\n  background-image: unset;\n}\n.pera-wallet-modal--compact:not(.pera-wallet-modal--mobile) .pera-wallet-modal__body {\n  width: var(--pera-wallet-modal-compact-width);\n  height: var(--pera-wallet-modal-compact-height);\n  padding: 0;\n}\n.pera-wallet-modal * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-modal ul,\n.pera-wallet-modal ol,\n.pera-wallet-modal li {\n  list-style-type: none;\n}\n\n.pera-wallet-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  height: 48px;\n  padding: 14px;\n  border: none;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-size: 14px;\n}\n\n.pera-wallet-modal__logo img {\n  display: block;\n  width: 32px;\n}\n\n.pera-wallet-modal__body {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  width: 700px;\n  max-width: calc(100vw - 80px);\n  padding: 28px;\n  background-color: #f3f3f7;\n  box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.08);\n  border-radius: 24px;\n  animation: 0.3s PeraWalletConnectSlideIn ease-out;\n  transform: translate(-50%, -50%);\n}\n.pera-wallet-modal__body::before {\n  --background-line: #1e0972 0 1.2px, transparent 0 calc(100% - 1.2px), #1e0972;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  content: "";\n  background-image: linear-gradient(var(--background-line)), linear-gradient(90deg, var(--background-line));\n  background-size: 116px 116px;\n  mix-blend-mode: overlay;\n  border-radius: 24px;\n  opacity: 0.8;\n  pointer-events: none;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-modal--desktop .pera-wallet-modal__body {\n    width: 100%;\n    max-width: calc(100vw - 32px);\n    padding: 24px;\n  }\n}\n@keyframes PeraWalletConnectSlideIn {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, calc(-50% + 24px));\n  }\n  100% {\n    opacity: 1;\n    transform: translate(-50%, -50%);\n  }\n}\n@keyframes PeraWalletConnectMobileSlideIn {\n  0% {\n    top: 30%;\n    opacity: 0;\n  }\n  100% {\n    top: 40px;\n    opacity: 1;\n  }\n}';
      r(z);
      var A = document.createElement("template");
      var Z = e.isMobile() ? `${e.PERA_WALLET_MODAL_CLASSNAME} ${e.PERA_WALLET_MODAL_CLASSNAME}--mobile` : `${e.PERA_WALLET_MODAL_CLASSNAME} ${e.PERA_WALLET_MODAL_CLASSNAME}--desktop`;
      var H = class extends HTMLElement {
        constructor() {
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const n2 = document.createElement("style");
            n2.textContent = z;
            "true" === this.getAttribute("compact-mode") && (Z = `${Z} ${e.PERA_WALLET_MODAL_CLASSNAME}--compact`), c() && e.isMobile() ? (A.innerHTML = `
        <div class="${Z}">
          <div class="pera-wallet-modal__body" part="body">
            <pera-wallet-modal-header modal-id="${e.PERA_WALLET_CONNECT_MODAL_ID}"></pera-wallet-modal-header/>
      
            <pera-wallet-modal-touch-screen-mode uri="${this.getAttribute("uri")}" should-use-sound="${this.getAttribute("should-use-sound")}"></pera-wallet-modal-touch-screen-mode>
          </div>
        </div>
      `, this.shadowRoot.append(A.content.cloneNode(true), n2)) : (A.innerHTML = `
          <div class="${Z}">
            <div class="pera-wallet-modal__body">
              <pera-wallet-modal-header modal-id="${e.PERA_WALLET_CONNECT_MODAL_ID}"></pera-wallet-modal-header/>
        
              <pera-wallet-modal-desktop-mode id="pera-wallet-modal-desktop-mode" uri="${this.getAttribute("uri")}" is-web-wallet-avaliable="${this.getAttribute("is-web-wallet-avaliable")}" should-display-new-badge="${this.getAttribute("should-display-new-badge")}" compact-mode="${this.getAttribute("compact-mode")}" promote-mobile="${this.getAttribute("promote-mobile")}"></pera-wallet-modal-desktop-mode>
            </div>
          </div>
        `, this.shadowRoot.append(A.content.cloneNode(true), n2));
          }
        }
      };
      var B = '@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");\n.pera-wallet-modal {\n  --pera-wallet-modal-font-family: "Inter", sans-serif;\n  --pera-wallet-modal-compact-width: 380px;\n  --pera-wallet-modal-compact-height: 396px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 999999;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.pera-wallet-modal--select-account .pera-wallet-modal__body {\n  width: 480px;\n  height: 578px;\n  background-color: #ffffff;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body {\n  top: 40px;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  max-width: unset;\n  height: calc(100 * var(--vh));\n  padding: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.02), 0 4px 12px rgba(0, 0, 0, 0.03);\n  border-radius: 20px 20px 0px 0px;\n  animation: 0.3s PeraWalletConnectMobileSlideIn ease-out;\n  overflow-y: auto;\n  transform: unset;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body::before {\n  background-image: unset;\n}\n.pera-wallet-modal--compact:not(.pera-wallet-modal--mobile) .pera-wallet-modal__body {\n  width: var(--pera-wallet-modal-compact-width);\n  height: var(--pera-wallet-modal-compact-height);\n  padding: 0;\n}\n.pera-wallet-modal * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-modal ul,\n.pera-wallet-modal ol,\n.pera-wallet-modal li {\n  list-style-type: none;\n}\n\n.pera-wallet-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  height: 48px;\n  padding: 14px;\n  border: none;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-size: 14px;\n}\n\n.pera-wallet-modal__logo img {\n  display: block;\n  width: 32px;\n}\n\n.pera-wallet-modal__body {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  width: 700px;\n  max-width: calc(100vw - 80px);\n  padding: 28px;\n  background-color: #f3f3f7;\n  box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.08);\n  border-radius: 24px;\n  animation: 0.3s PeraWalletConnectSlideIn ease-out;\n  transform: translate(-50%, -50%);\n}\n.pera-wallet-modal__body::before {\n  --background-line: #1e0972 0 1.2px, transparent 0 calc(100% - 1.2px), #1e0972;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  content: "";\n  background-image: linear-gradient(var(--background-line)), linear-gradient(90deg, var(--background-line));\n  background-size: 116px 116px;\n  mix-blend-mode: overlay;\n  border-radius: 24px;\n  opacity: 0.8;\n  pointer-events: none;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-modal--desktop .pera-wallet-modal__body {\n    width: 100%;\n    max-width: calc(100vw - 32px);\n    padding: 24px;\n  }\n}\n@keyframes PeraWalletConnectSlideIn {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, calc(-50% + 24px));\n  }\n  100% {\n    opacity: 1;\n    transform: translate(-50%, -50%);\n  }\n}\n@keyframes PeraWalletConnectMobileSlideIn {\n  0% {\n    top: 30%;\n    opacity: 0;\n  }\n  100% {\n    top: 40px;\n    opacity: 1;\n  }\n}\n.pera-wallet-redirect-modal {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 56px;\n  grid-template-rows: auto 48px;\n  height: 100%;\n  padding: 4px;\n  padding-bottom: 70px;\n}\n\n.pera-wallet-redirect-modal__content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.pera-wallet-redirect-modal__content__title {\n  margin: 20px 0 8px;\n  color: #3c3c49;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 22px;\n  letter-spacing: -0.26px;\n}\n\n.pera-wallet-redirect-modal__content__description,\n.pera-wallet-redirect-modal__content__install-pera-text {\n  color: #3c3c49;\n  max-width: 271px;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  letter-spacing: -0.09px;\n  text-align: center;\n}\n\n.pera-wallet-redirect-modal__content__description {\n  margin-bottom: 24px;\n}\n\n.pera-wallet-redirect-modal__content__install-pera-text__link {\n  color: #6b46fe;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  letter-spacing: -0.09px;\n  text-align: center;\n}\n\n.pera-wallet-redirect-modal__launch-pera-wallet-button {\n  display: block;\n  padding: 14px;\n  color: #ffffff;\n  background-color: #6b46fe;\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n}';
      r(B);
      var F = document.createElement("template");
      F.innerHTML = `
  <div class="pera-wallet-modal pera-wallet-modal--mobile">
    <div class="pera-wallet-modal__body">
      <pera-wallet-modal-header modal-id="${e.PERA_WALLET_REDIRECT_MODAL_ID}"></pera-wallet-modal-header/>

      <div class="pera-wallet-redirect-modal">
        <div class="pera-wallet-redirect-modal__content">
          <img src="data:image/svg+xml,%3csvg width='120' height='38' viewBox='0 0 120 38' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cg clip-path='url(%23clip0_38844_290434)'%3e%3cpath d='M103.739 28.6746H109.565' stroke='%236B46FE' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'/%3e%3cpath d='M112.25 37H100.75C97.5731 37 95 34.2336 95 30.8182V9.18182C95 5.76636 97.5731 3 100.75 3H112.25C115.427 3 118 5.76636 118 9.18182V30.8182C118 34.2336 115.427 37 112.25 37Z' fill='%236B46FE' fill-opacity='0.1' stroke='%236B46FE' stroke-width='3' stroke-linecap='round' stroke-linejoin='round'/%3e%3crect y='1' width='36' height='36' rx='7.76829' fill='%236B46FE' fill-opacity='0.1'/%3e%3cpath d='M19.6057 9.47351C20.1851 11.8819 19.9967 14.0022 19.1848 14.2093C18.373 14.4164 17.2452 12.6319 16.6658 10.2235C16.0864 7.81514 16.2748 5.69486 17.0867 5.48775C17.8985 5.28063 19.0263 7.06512 19.6057 9.47351Z' fill='%236B46FE'/%3e%3cpath d='M29.0775 11.5213C27.8045 10.1593 25.2795 10.5358 23.4378 12.3621C21.5961 14.1885 21.1352 16.7732 22.4083 18.1352C23.6814 19.4972 26.2064 19.1207 28.048 17.2943C29.8897 15.4679 30.3506 12.8832 29.0775 11.5213Z' fill='%236B46FE'/%3e%3cpath d='M19.0324 32.4518C19.8443 32.2446 20.0039 30.0045 19.3889 27.4483C18.774 24.8921 17.6173 22.9877 16.8055 23.1948C15.9937 23.402 15.834 25.6421 16.449 28.1983C17.064 30.7545 18.2206 32.6589 19.0324 32.4518Z' fill='%236B46FE'/%3e%3cpath d='M10.7016 12.818C13.0471 13.5132 14.7627 14.739 14.5336 15.5559C14.3045 16.3728 12.2175 16.4714 9.87199 15.7762C7.52653 15.0809 5.81087 13.8551 6.03996 13.0383C6.26906 12.2214 8.35615 12.1228 10.7016 12.818Z' fill='%236B46FE'/%3e%3cpath d='M25.9365 21.9967C28.4259 22.7346 30.2583 23.995 30.0292 24.8119C29.8001 25.6287 27.5963 25.6927 25.1069 24.9548C22.6174 24.2169 20.7851 22.9565 21.0141 22.1397C21.2432 21.3228 23.447 21.2588 25.9365 21.9967Z' fill='%236B46FE'/%3e%3cpath d='M13.3578 20.316C12.775 19.7063 10.8709 20.6007 9.10487 22.3139C7.33879 24.0271 6.37952 25.9102 6.96226 26.5199C7.54501 27.1297 9.4491 26.2352 11.2152 24.522C12.9813 22.8089 13.9405 20.9258 13.3578 20.316Z' fill='%236B46FE'/%3e%3cpath d='M70.2098 10L75.3049 15.0945L52 15.0945' stroke='%23D0CAE7' stroke-width='3'/%3e%3cpath d='M60.7902 29.5945L55.6951 24.5L79 24.5' stroke='%23D0CAE7' stroke-width='3'/%3e%3c/g%3e%3cdefs%3e%3cclipPath id='clip0_38844_290434'%3e%3crect width='120' height='38' fill='white'/%3e%3c/clipPath%3e%3c/defs%3e%3c/svg%3e" />

          <h1 class="pera-wallet-redirect-modal__content__title">
            Can't Launch Pera
          </h1>

          <p class="pera-wallet-redirect-modal__content__description">
            We couldn't redirect you to Pera Wallet automatically. Please try again.
          </p>

          <p class="pera-wallet-redirect-modal__content__install-pera-text">
            Don't have Pera Wallet installed yet?
            <br />
            
            <a
              id="pera-wallet-redirect-modal-download-pera-link"
              class="pera-wallet-redirect-modal__content__install-pera-text__link"
              href="https://perawallet.app/download/"
              rel="noopener noreferrer"
              target="_blank">
              Tap here to install.
            </a>
          </p>
        </div>

        <a
          id="pera-wallet-redirect-modal-launch-pera-link"
          class="pera-wallet-redirect-modal__launch-pera-wallet-button"
          rel="noopener noreferrer"
          target="_blank">
          Launch Pera Wallet
        </a>
      </div>
    </div>
  </div>
`;
      var R = class extends HTMLElement {
        constructor() {
          var e2, n2;
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const t2 = document.createElement("style");
            t2.textContent = B, this.shadowRoot.append(F.content.cloneNode(true), t2);
            const a2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-wallet-redirect-modal-download-pera-link");
            null == a2 || a2.addEventListener("click", () => {
              this.onClose();
            });
            const o2 = null === (n2 = this.shadowRoot) || void 0 === n2 ? void 0 : n2.getElementById("pera-wallet-redirect-modal-launch-pera-link");
            null == o2 || o2.addEventListener("click", () => {
              this.onClose(), window.open(i(), "_blank");
            });
          }
        }
        connectedCallback() {
          const e2 = window.open(i(), "_blank");
          e2 && !e2.closed && this.onClose();
        }
        onClose() {
          e.removeModalWrapperFromDOM(e.PERA_WALLET_REDIRECT_MODAL_ID);
        }
      };
      var I = "data:image/svg+xml,%3csvg width='32' height='35' viewBox='0 0 32 35' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18.2837 5.09271C19.0234 8.12325 18.7827 10.7913 17.7463 11.0519C16.7098 11.3126 15.27 9.06712 14.5304 6.03657C13.7908 3.00603 14.0315 0.337996 15.0679 0.0773547C16.1044 -0.183287 17.5441 2.06216 18.2837 5.09271Z' fill='%233C3C49'/%3e%3cpath d='M30.376 7.66915C28.7507 5.95537 25.5271 6.42918 23.1759 8.72745C20.8247 11.0257 20.2361 14.2781 21.8614 15.9919C23.4866 17.7057 26.7102 17.2319 29.0614 14.9336C31.4127 12.6354 32.0012 9.38294 30.376 7.66915Z' fill='%233C3C49'/%3e%3cpath d='M17.5511 34.0071C18.5876 33.7465 18.7914 30.9276 18.0064 27.711C17.2214 24.4945 15.7448 22.0982 14.7084 22.3589C13.6719 22.6195 13.4681 25.4383 14.2531 28.6549C15.0381 31.8715 16.5147 34.2677 17.5511 34.0071Z' fill='%233C3C49'/%3e%3cpath d='M6.91617 9.3015C9.9105 10.1763 12.1008 11.7187 11.8083 12.7466C11.5158 13.7745 8.85126 13.8986 5.85693 13.0239C2.8626 12.1491 0.672334 10.6067 0.964835 9.57881C1.25734 8.5509 3.92184 8.42674 6.91617 9.3015Z' fill='%233C3C49'/%3e%3cpath d='M26.3656 20.8508C29.5437 21.7793 31.883 23.3652 31.5905 24.3932C31.298 25.4211 28.4845 25.5017 25.3063 24.5732C22.1282 23.6448 19.7889 22.0588 20.0814 21.0309C20.3739 20.003 23.1874 19.9224 26.3656 20.8508Z' fill='%233C3C49'/%3e%3cpath d='M10.3069 18.7365C9.56299 17.9692 7.13209 19.0948 4.87736 21.2506C2.62264 23.4064 1.39791 25.776 2.14185 26.5432C2.8858 27.3105 5.3167 26.1849 7.57143 24.0291C9.82615 21.8733 11.0509 19.5037 10.3069 18.7365Z' fill='%233C3C49'/%3e%3c/svg%3e";
      var V = ".pera-wallet-connect-modal-information-section {\n  padding: 12px;\n  padding-right: 0;\n}\n.pera-wallet-connect-modal-information-section--mobile {\n  padding: 0;\n}\n.pera-wallet-connect-modal-information-section--mobile .pera-wallet-connect-modal-information-section__pera-icon {\n  margin-bottom: 16px;\n}\n.pera-wallet-connect-modal-information-section--mobile .pera-wallet-connect-modal-information-section__connect-pera-title {\n  margin-bottom: 8px;\n  color: #3c3c49;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 22px;\n  letter-spacing: -0.2px;\n}\n.pera-wallet-connect-modal-information-section--mobile .pera-wallet-connect-modal-information-section__title {\n  margin-bottom: 24px;\n  color: #3c3c49;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.09px;\n  font-weight: 400;\n}\n.pera-wallet-connect-modal-information-section--mobile .pera-wallet-connect-modal-information-section__features-item__icon-wrapper {\n  background-color: #f2f3f8;\n}\n.pera-wallet-connect-modal-information-section--mobile .pera-wallet-connect-modal-information-section__features-item__description {\n  color: #6a6a81;\n}\n.pera-wallet-connect-modal-information-section * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.pera-wallet-connect-modal-information-section__pera-icon {\n  margin-bottom: 32px;\n}\n\n.pera-wallet-connect-modal-information-section__title {\n  margin-bottom: 148px;\n  color: #3c3c49;\n  font-size: 20px;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: -0.5px;\n}\n\n.pera-wallet-connect-modal-information-section__secondary-title {\n  margin-bottom: 20px;\n  color: #9d9dae;\n  font-size: 11px;\n  font-weight: 600;\n  line-height: 18px;\n  letter-spacing: 0.06px;\n  text-transform: uppercase;\n}\n\n.pera-wallet-connect-modal-information-section__features-item {\n  display: grid;\n  align-items: center;\n  grid-template-columns: 36px auto;\n  gap: 16px;\n}\n.pera-wallet-connect-modal-information-section__features-item:not(:last-of-type) {\n  margin-bottom: 24px;\n}\n\n.pera-wallet-connect-modal-information-section__features-item__icon-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  background-color: #ffffff;\n  border-radius: 50%;\n}\n\n.pera-wallet-connect-modal-information-section__features-item__description {\n  color: #6a6a81;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 18px;\n  letter-spacing: 0.01px;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-connect-modal-information-section--desktop {\n    padding: 0;\n  }\n  .pera-wallet-connect-modal-information-section--desktop .pera-wallet-connect-modal-information-section__pera-icon {\n    margin-bottom: 12px;\n  }\n  .pera-wallet-connect-modal-information-section--desktop .pera-wallet-connect-modal-information-section__title {\n    margin-bottom: 24px;\n    font-size: 16px;\n    font-weight: 500;\n    line-height: 24px;\n    letter-spacing: -0.26px;\n  }\n  .pera-wallet-connect-modal-information-section--desktop .pera-wallet-connect-modal-information-section__features-item {\n    display: none;\n  }\n  .pera-wallet-connect-modal-information-section__secondary-title {\n    display: none;\n  }\n}";
      r(V);
      var W = document.createElement("template");
      var S = e.isMobile() ? "pera-wallet-connect-modal-information-section pera-wallet-connect-modal-information-section--mobile" : "pera-wallet-connect-modal-information-section pera-wallet-connect-modal-information-section--desktop";
      W.innerHTML = `
  <section class="${S}">
    <img
      id="pera-wallet-connect-modal-information-section-pera-icon"
      src="${I}"
      class="pera-wallet-connect-modal-information-section__pera-icon"
      alt="Pera Wallet Logo"
    />

    <h1 id="pera-wallet-connect-modal-information-section-connect-pera-mobile" class="pera-wallet-connect-modal-information-section__connect-pera-title">
        Connect to Pera Wallet
    </h1>

    <h1 class="pera-wallet-connect-modal-information-section__title">
      Simply the best Algorand wallet.
    </h1>

    <h2 id="pera-wallet-connect-modal-information-section-secondary-title" class="pera-wallet-connect-modal-information-section__secondary-title">
      Features
    </h2>

    <ul>
      <li class="pera-wallet-connect-modal-information-section__features-item">
        <div class="pera-wallet-connect-modal-information-section__features-item__icon-wrapper">
          <img src="data:image/svg+xml,%3csvg width='20' height='21' viewBox='0 0 20 21' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M2.5 10.1378C2.5 10.8378 3.025 11.6461 3.66667 11.9294L9.325 14.4461C9.75833 14.6378 10.25 14.6378 10.675 14.4461L16.3333 11.9294C16.975 11.6461 17.5 10.8378 17.5 10.1378M2.5 14.3044C2.5 15.0794 2.95833 15.7794 3.66667 16.0961L9.325 18.6128C9.75833 18.8044 10.25 18.8044 10.675 18.6128L16.3333 16.0961C17.0417 15.7794 17.5 15.0794 17.5 14.3044M10.8417 3.4043L15.7583 5.58763C17.175 6.21263 17.175 7.24596 15.7583 7.87096L10.8417 10.0543C10.2833 10.3043 9.36668 10.3043 8.80835 10.0543L3.89168 7.87096C2.47502 7.24596 2.47502 6.21263 3.89168 5.58763L8.80835 3.4043C9.36668 3.1543 10.2833 3.1543 10.8417 3.4043Z' stroke='%239D9DAE' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e" alt="Layer Icon" />
        </div>
        
        <p
          class="pera-wallet-connect-modal-information-section__features-item__description">
          Connect to any Algorand dApp securely
        </p>
      </li>

      <li class="pera-wallet-connect-modal-information-section__features-item">
        <div
          class="pera-wallet-connect-modal-information-section__features-item__icon-wrapper">
          <img src="data:image/svg+xml,%3csvg width='24' height='25' viewBox='0 0 24 25' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M9.58033 12.3109C9.28744 12.018 8.81257 12.018 8.51967 12.3109C8.22678 12.6038 8.22678 13.0787 8.51967 13.3716L9.58033 12.3109ZM10.66 14.4512L10.1297 14.9816C10.4226 15.2745 10.8974 15.2745 11.1903 14.9816L10.66 14.4512ZM15.4903 10.6816C15.7832 10.3887 15.7832 9.91381 15.4903 9.62092C15.1974 9.32803 14.7226 9.32803 14.4297 9.62092L15.4903 10.6816ZM19.84 8.09125C19.84 8.50546 20.1758 8.84125 20.59 8.84125C21.0042 8.84125 21.34 8.50546 21.34 8.09125H19.84ZM18.5 5.07125L18.2368 5.77355L18.2373 5.77375L18.5 5.07125ZM13.51 3.20125L13.7732 2.49894L13.7724 2.49866L13.51 3.20125ZM10.49 3.20125L10.2276 2.49865L10.2256 2.49941L10.49 3.20125ZM5.5 5.08125L5.76268 5.78375L5.76442 5.78309L5.5 5.08125ZM5.14 18.9612L4.69102 19.562L4.69135 19.5623L5.14 18.9612ZM9.44 22.1713L9.89069 21.5718L9.88866 21.5702L9.44 22.1713ZM14.58 22.1713L14.1313 21.5702L14.1293 21.5718L14.58 22.1713ZM18.88 18.9612L19.3287 19.5623L19.329 19.562L18.88 18.9612ZM21.36 8.09125C21.36 7.67704 21.0242 7.34125 20.61 7.34125C20.1958 7.34125 19.86 7.67704 19.86 8.09125H21.36ZM8.51967 13.3716L10.1297 14.9816L11.1903 13.9209L9.58033 12.3109L8.51967 13.3716ZM11.1903 14.9816L15.4903 10.6816L14.4297 9.62092L10.1297 13.9209L11.1903 14.9816ZM21.34 8.09125C21.34 7.29392 21.0398 6.50041 20.5931 5.85456C20.1463 5.20881 19.5097 4.64807 18.7627 4.36875L18.2373 5.77375C18.6403 5.92443 19.0487 6.25869 19.3595 6.70794C19.6702 7.15709 19.84 7.65858 19.84 8.09125H21.34ZM18.7632 4.36895L13.7732 2.49895L13.2468 3.90355L18.2368 5.77355L18.7632 4.36895ZM13.7724 2.49866C13.2479 2.30277 12.6051 2.21875 12 2.21875C11.3949 2.21875 10.7521 2.30277 10.2276 2.49866L10.7524 3.90384C11.0579 3.78973 11.5101 3.71875 12 3.71875C12.4899 3.71875 12.9421 3.78973 13.2476 3.90384L13.7724 2.49866ZM10.2256 2.49941L5.23558 4.37941L5.76442 5.78309L10.7544 3.90309L10.2256 2.49941ZM5.23733 4.37875C4.49043 4.65803 3.85398 5.2186 3.40741 5.86265C2.96095 6.50656 2.66 7.2978 2.66 8.09125H4.16C4.16 7.6647 4.32906 7.16594 4.64009 6.71735C4.95103 6.2689 5.35957 5.93447 5.76268 5.78375L5.23733 4.37875ZM2.66 8.09125V15.5212H4.16V8.09125H2.66ZM2.66 15.5212C2.66 16.2602 2.8989 17.059 3.24874 17.7545C3.59871 18.4503 4.09802 19.1188 4.69102 19.562L5.58899 18.3605C5.23198 18.0937 4.86629 17.6322 4.58877 17.0805C4.31111 16.5285 4.16 15.9623 4.16 15.5212H2.66ZM4.69135 19.5623L8.99135 22.7723L9.88866 21.5702L5.58866 18.3602L4.69135 19.5623ZM8.98932 22.7707C9.84721 23.4157 10.9462 23.7163 12.01 23.7163C13.0738 23.7163 14.1728 23.4157 15.0307 22.7707L14.1293 21.5718C13.5772 21.9868 12.8112 22.2163 12.01 22.2163C11.2088 22.2163 10.4428 21.9868 9.89068 21.5718L8.98932 22.7707ZM15.0287 22.7723L19.3287 19.5623L18.4313 18.3602L14.1313 21.5702L15.0287 22.7723ZM19.329 19.562C19.922 19.1188 20.4213 18.4503 20.7713 17.7545C21.1211 17.059 21.36 16.2602 21.36 15.5212H19.86C19.86 15.9623 19.7089 16.5285 19.4312 17.0805C19.1537 17.6322 18.788 18.0937 18.431 18.3605L19.329 19.562ZM21.36 15.5212V8.09125H19.86V15.5212H21.36Z' fill='%239D9DAE'/%3e%3c/svg%3e" alt="Tick Icon" />
        </div>

        <p
          class="pera-wallet-connect-modal-information-section__features-item__description">
          Your private keys are safely stored locally
        </p>
      </li>

      <li class="pera-wallet-connect-modal-information-section__features-item">
        <div
          class="pera-wallet-connect-modal-information-section__features-item__icon-wrapper">
          <img src="data:image/svg+xml,%3csvg width='20' height='21' viewBox='0 0 20 21' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M18.05 9.67014L17.3198 9.49894L18.05 9.67014ZM17.2333 13.1535L16.5031 12.9823L16.5029 12.9835L17.2333 13.1535ZM12.55 17.1285L12.6218 16.3818L12.6098 16.3809L12.55 17.1285ZM11.2 16.9035L11.376 16.1744L11.3737 16.1739L11.2 16.9035ZM9.8 16.5701L9.97372 15.8405L9.97324 15.8404L9.8 16.5701ZM6.06667 10.5451L6.79687 10.7163L6.79696 10.7159L6.06667 10.5451ZM6.88334 7.05347L6.15327 6.88169L6.15304 6.88267L6.88334 7.05347ZM7.5 5.22014L8.17303 5.55114L8.17523 5.54659L7.5 5.22014ZM12.9167 3.32014L12.744 4.05L12.7461 4.05049L12.9167 3.32014ZM14.3083 3.64514L14.4791 2.91485L14.4789 2.91479L14.3083 3.64514ZM10.5917 18.0285L10.359 17.3155L10.3572 17.3161L10.5917 18.0285ZM9.27501 18.4618L9.50516 19.1756L9.50947 19.1742L9.27501 18.4618ZM3.15001 15.3285L2.43654 15.5597L2.43672 15.5603L3.15001 15.3285ZM2.08334 12.0368L1.36953 12.267L1.36987 12.268L2.08334 12.0368ZM5.20834 5.91182L5.43849 6.62565L5.44281 6.62423L5.20834 5.91182ZM6.52501 5.47848L6.29831 4.76352L6.29055 4.76608L6.52501 5.47848ZM10.7177 7.35149C10.3162 7.24967 9.90818 7.49261 9.80635 7.89411C9.70453 8.29561 9.94746 8.70364 10.349 8.80546L10.7177 7.35149ZM14.3906 9.83046C14.7921 9.93229 15.2002 9.68935 15.302 9.28785C15.4038 8.88635 15.1609 8.47832 14.7594 8.37649L14.3906 9.83046ZM9.90211 10.5768C9.50076 10.4743 9.09238 10.7167 8.98996 11.118C8.88755 11.5194 9.12988 11.9278 9.53124 12.0302L9.90211 10.5768ZM11.9479 12.6469C12.3493 12.7493 12.7576 12.5069 12.8601 12.1056C12.9625 11.7042 12.7201 11.2958 12.3188 11.1934L11.9479 12.6469ZM17.3198 9.49894L16.5031 12.9823L17.9635 13.3247L18.7802 9.84133L17.3198 9.49894ZM16.5029 12.9835C16.168 14.4224 15.6979 15.2955 15.1165 15.793C14.5605 16.2688 13.7912 16.4944 12.6218 16.3819L12.4782 17.875C13.9088 18.0126 15.1312 17.7548 16.0918 16.9327C17.0271 16.1323 17.5986 14.8928 17.9638 13.3234L16.5029 12.9835ZM12.6098 16.3809C12.2388 16.3512 11.8281 16.2835 11.376 16.1744L11.024 17.6325C11.5386 17.7567 12.0279 17.8391 12.4902 17.8761L12.6098 16.3809ZM11.3737 16.1739L9.97372 15.8405L9.62629 17.2997L11.0263 17.6331L11.3737 16.1739ZM9.97324 15.8404C8.30732 15.4449 7.40652 14.876 6.96107 14.1588C6.51616 13.4425 6.40566 12.385 6.79687 10.7163L5.33647 10.3739C4.91101 12.1887 4.92968 13.7311 5.68685 14.9502C6.44349 16.1685 7.81769 16.8704 9.62676 17.2999L9.97324 15.8404ZM6.79696 10.7159L7.61363 7.22428L6.15304 6.88267L5.33638 10.3743L6.79696 10.7159ZM7.6134 7.22525C7.77277 6.54795 7.95691 5.99053 8.17301 5.55113L6.82699 4.88915C6.54309 5.46641 6.32724 6.14234 6.15327 6.88169L7.6134 7.22525ZM8.17523 5.54659C8.59604 4.67619 9.11898 4.20234 9.77488 3.97598C10.4657 3.73759 11.4133 3.73525 12.744 4.05L13.0893 2.59028C11.6367 2.2467 10.3635 2.18603 9.28554 2.55805C8.17269 2.94211 7.37896 3.74743 6.82478 4.89369L8.17523 5.54659ZM12.7461 4.05049L14.1378 4.37549L14.4789 2.91479L13.0872 2.58979L12.7461 4.05049ZM14.1375 4.37543C15.8111 4.76687 16.7126 5.33603 17.1575 6.05304C17.6023 6.77006 17.7112 7.82942 17.3198 9.49894L18.7802 9.84133C19.2054 8.02753 19.1893 6.48272 18.4321 5.26224C17.6749 4.04175 16.2972 3.34008 14.4791 2.91485L14.1375 4.37543ZM12.1294 16.5075C11.6911 16.8045 11.1123 17.0697 10.359 17.3155L10.8243 18.7415C11.6544 18.4706 12.3756 18.1525 12.9706 17.7494L12.1294 16.5075ZM10.3572 17.3161L9.04055 17.7494L9.50947 19.1742L10.8261 18.7409L10.3572 17.3161ZM9.04486 17.748C7.46037 18.2589 6.43607 18.2362 5.71663 17.8681C4.99693 17.4999 4.37829 16.6816 3.8633 15.0967L2.43672 15.5603C2.99673 17.2837 3.78642 18.5654 5.03339 19.2035C6.28062 19.8416 7.78131 19.7314 9.50516 19.1756L9.04486 17.748ZM3.86348 15.0973L2.79682 11.8056L1.36987 12.268L2.43654 15.5597L3.86348 15.0973ZM2.79716 11.8067C2.28607 10.2215 2.3068 9.19457 2.67362 8.4739C3.03983 7.75443 3.85506 7.13616 5.43849 6.62563L4.9782 5.198C3.25329 5.75414 1.97269 6.54421 1.33682 7.79348C0.701551 9.04157 0.813948 10.5438 1.36953 12.267L2.79716 11.8067ZM5.44281 6.62423L6.75947 6.19089L6.29055 4.76608L4.97388 5.19941L5.44281 6.62423ZM6.75169 6.19341C7.08205 6.08866 7.37424 6.00724 7.63942 5.95707L7.36058 4.48321C7.00909 4.54971 6.6513 4.65164 6.29833 4.76356L6.75169 6.19341ZM10.349 8.80546L14.3906 9.83046L14.7594 8.37649L10.7177 7.35149L10.349 8.80546ZM9.53124 12.0302L11.9479 12.6469L12.3188 11.1934L9.90211 10.5768L9.53124 12.0302Z' fill='%239D9DAE'/%3e%3c/svg%3e" alt="Note Icon" />
        </div>

        <p
          class="pera-wallet-connect-modal-information-section__features-item__description">
          View NFTs, buy and swap crypto and more
        </p>
      </li>
    </ul>
  </section>
`;
      var D = class extends HTMLElement {
        constructor() {
          var n2, t2, a2, o2;
          super(), this.attachShadow({ mode: "open" });
          const l2 = "true" === (null === (n2 = document.querySelector("pera-wallet-connect-modal")) || void 0 === n2 ? void 0 : n2.getAttribute("compact-mode"));
          if (this.shadowRoot && (!l2 && !e.isMobile() || e.isMobile())) {
            const n3 = document.createElement("style");
            n3.textContent = V, this.shadowRoot.append(W.content.cloneNode(true), n3), c() && e.isMobile() ? null === (t2 = this.shadowRoot.getElementById("pera-wallet-connect-modal-information-section-title")) || void 0 === t2 || t2.setAttribute("style", "display: none;") : (null === (a2 = this.shadowRoot.getElementById("pera-wallet-connect-modal-information-section-pera-icon")) || void 0 === a2 || a2.setAttribute("src", "data:image/svg+xml,%3csvg width='84' height='38' viewBox='0 0 84 38' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M19.806 8.62773C20.4416 11.2609 20.2268 13.5772 19.3262 13.8012C18.4256 14.0253 17.1803 12.0723 16.5448 9.43906C15.9092 6.80585 16.1241 4.48959 17.0246 4.26555C17.9252 4.04151 19.1705 5.99452 19.806 8.62773Z' fill='%233C3C49'/%3e%3cpath d='M30.3007 10.8917C28.8932 9.3999 26.0929 9.80424 24.0461 11.7948C21.9994 13.7853 21.4812 16.6082 22.8887 18.1C24.2962 19.5917 27.0964 19.1874 29.1432 17.1969C31.1899 15.2064 31.7082 12.3834 30.3007 10.8917Z' fill='%233C3C49'/%3e%3cpath d='M19.1061 33.734C20.0067 33.5099 20.1899 31.0627 19.5153 28.2678C18.8408 25.473 17.5639 23.3889 16.6633 23.613C15.7627 23.837 15.5795 26.2843 16.2541 29.0791C16.9286 31.874 18.2056 33.958 19.1061 33.734Z' fill='%233C3C49'/%3e%3cpath d='M9.92571 12.2574C12.5239 13.0236 14.4224 14.3678 14.1662 15.2597C13.9099 16.1517 11.5959 16.2536 8.99771 15.4874C6.3995 14.7212 4.50098 13.377 4.75724 12.4851C5.0135 11.5931 7.3275 11.4912 9.92571 12.2574Z' fill='%233C3C49'/%3e%3cpath d='M26.7892 22.3292C29.5469 23.1424 31.5747 24.5247 31.3184 25.4167C31.0621 26.3086 28.6189 26.3724 25.8612 25.5592C23.1035 24.7459 21.0757 23.3636 21.3319 22.4717C21.5882 21.5797 24.0315 21.5159 26.7892 22.3292Z' fill='%233C3C49'/%3e%3cpath d='M12.8493 20.4577C12.205 19.7898 10.0916 20.7619 8.12896 22.6289C6.16631 24.4959 5.09759 26.5509 5.7419 27.2188C6.38622 27.8867 8.49958 26.9146 10.4622 25.0476C12.4249 23.1806 13.4936 21.1256 12.8493 20.4577Z' fill='%233C3C49'/%3e%3cpath d='M41.691 12.5347V11.9635H39.3366V27.1957H41.691V23.0915C41.691 22.6472 41.691 22.2876 41.6482 21.801H41.691C42.5471 23.1973 44.0026 23.9377 45.7148 23.9377C48.6043 23.9377 51.1299 21.7587 51.1299 17.7179C51.1299 13.7617 48.6043 11.625 45.7148 11.625C44.0668 11.625 42.6113 12.3443 41.691 13.7617H41.6482C41.691 13.2963 41.691 12.9578 41.691 12.5347ZM45.1155 21.9279C42.9324 21.9068 41.6696 20.0662 41.6696 17.6967C41.6696 15.4542 42.9324 13.656 45.1155 13.6348C47.2559 13.6137 48.6685 15.2638 48.6685 17.7179C48.6685 20.2354 47.2559 21.9491 45.1155 21.9279Z' fill='%233C3C49'/%3e%3cpath d='M63.4932 16.7236C63.4932 13.8041 61.1388 11.625 57.9283 11.625C54.5037 11.625 52.1279 13.931 52.1279 17.7814C52.1279 21.4836 54.4609 23.9377 57.9283 23.9377C60.7749 23.9377 62.8939 22.2876 63.3862 20.0239H60.8177C60.4111 21.1663 59.2981 21.9279 57.9283 21.9279C56.1732 21.9279 54.889 20.6797 54.6107 18.6064H63.4932V16.7236ZM57.9283 13.6348C59.662 13.6348 60.8606 14.8195 61.1174 16.5332H54.6321C54.9318 14.883 56.1518 13.6348 57.9283 13.6348Z' fill='%233C3C49'/%3e%3cpath d='M65.224 23.5992H67.5784V17.0409C67.5784 14.7984 68.8198 13.6348 70.7462 13.6348H72.009V11.625H71.003C69.2693 11.625 68.1991 12.7674 67.5784 13.7617H67.5356V11.9635H65.224V23.5992Z' fill='%233C3C49'/%3e%3cpath d='M83.0154 21.5683C82.6944 21.5683 82.5445 21.3779 82.5445 20.9971V15.8773C82.5445 13.4233 81.3459 11.625 77.8144 11.625C74.3898 11.625 72.8273 13.3175 72.6561 15.7292H75.0105C75.1603 14.4176 76.2091 13.6348 77.8144 13.6348C79.1842 13.6348 80.1259 14.2272 80.1259 15.158C80.1259 15.9196 79.5909 16.3851 77.8358 16.3851H76.894C74.0901 16.3851 72.2066 17.5063 72.2066 20.0662C72.2066 22.753 74.1972 23.98 76.5301 23.98C78.2638 23.98 79.7407 23.2184 80.3186 21.5894C80.3828 22.7742 81.1747 23.5992 82.673 23.5992H84V21.5683H83.0154ZM80.1902 18.1833C80.1902 20.8067 78.7561 21.9491 76.9154 21.9491C75.3101 21.9491 74.668 21.0182 74.668 20.0662C74.668 19.1565 75.2245 18.416 76.9368 18.416H77.2793C78.9273 18.416 79.9547 17.8448 80.1688 16.8505H80.1902V18.1833Z' fill='%233C3C49'/%3e%3c/svg%3e"), null === (o2 = this.shadowRoot.getElementById("pera-wallet-connect-modal-information-section-connect-pera-mobile")) || void 0 === o2 || o2.setAttribute("style", "display: none;"));
          }
        }
      };
      var P = '@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");\n.pera-wallet-modal {\n  --pera-wallet-modal-font-family: "Inter", sans-serif;\n  --pera-wallet-modal-compact-width: 380px;\n  --pera-wallet-modal-compact-height: 396px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 999999;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.pera-wallet-modal--select-account .pera-wallet-modal__body {\n  width: 480px;\n  height: 578px;\n  background-color: #ffffff;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body {\n  top: 40px;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  max-width: unset;\n  height: calc(100 * var(--vh));\n  padding: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.02), 0 4px 12px rgba(0, 0, 0, 0.03);\n  border-radius: 20px 20px 0px 0px;\n  animation: 0.3s PeraWalletConnectMobileSlideIn ease-out;\n  overflow-y: auto;\n  transform: unset;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body::before {\n  background-image: unset;\n}\n.pera-wallet-modal--compact:not(.pera-wallet-modal--mobile) .pera-wallet-modal__body {\n  width: var(--pera-wallet-modal-compact-width);\n  height: var(--pera-wallet-modal-compact-height);\n  padding: 0;\n}\n.pera-wallet-modal * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-modal ul,\n.pera-wallet-modal ol,\n.pera-wallet-modal li {\n  list-style-type: none;\n}\n\n.pera-wallet-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  height: 48px;\n  padding: 14px;\n  border: none;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-size: 14px;\n}\n\n.pera-wallet-modal__logo img {\n  display: block;\n  width: 32px;\n}\n\n.pera-wallet-modal__body {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  width: 700px;\n  max-width: calc(100vw - 80px);\n  padding: 28px;\n  background-color: #f3f3f7;\n  box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.08);\n  border-radius: 24px;\n  animation: 0.3s PeraWalletConnectSlideIn ease-out;\n  transform: translate(-50%, -50%);\n}\n.pera-wallet-modal__body::before {\n  --background-line: #1e0972 0 1.2px, transparent 0 calc(100% - 1.2px), #1e0972;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  content: "";\n  background-image: linear-gradient(var(--background-line)), linear-gradient(90deg, var(--background-line));\n  background-size: 116px 116px;\n  mix-blend-mode: overlay;\n  border-radius: 24px;\n  opacity: 0.8;\n  pointer-events: none;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-modal--desktop .pera-wallet-modal__body {\n    width: 100%;\n    max-width: calc(100vw - 32px);\n    padding: 24px;\n  }\n}\n@keyframes PeraWalletConnectSlideIn {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, calc(-50% + 24px));\n  }\n  100% {\n    opacity: 1;\n    transform: translate(-50%, -50%);\n  }\n}\n@keyframes PeraWalletConnectMobileSlideIn {\n  0% {\n    top: 30%;\n    opacity: 0;\n  }\n  100% {\n    top: 40px;\n    opacity: 1;\n  }\n}\n.pera-wallet-connect-modal-pending-message-section {\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: auto 48px;\n  gap: 56px;\n  height: 100%;\n  padding: 4px;\n  padding-bottom: 70px;\n}\n\n.pera-wallet-connect-modal-pending-message {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  text-align: center;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view {\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  height: 100%;\n  margin-top: 10px;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__title {\n  margin: 16px 0 12px;\n  color: #3c3c49;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: -0.26px;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__description {\n  color: #6a6a81;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 24px;\n  letter-spacing: -0.01px;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__button {\n  display: block;\n  width: 100%;\n  padding: 14px;\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n  color: #ffffff;\n  background-color: #6b46fe;\n  border: none;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 20px;\n  padding: 16px;\n  background: #ffffff;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24), 0px 3px 8px -1px rgba(50, 50, 71, 0.05);\n  border-radius: 12px;\n  text-decoration: none;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__image {\n  width: 24px;\n  height: 24px;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__title-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 4px;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__title {\n  margin: 0;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 20px;\n  letter-spacing: -0.1px;\n  color: #3c3c49;\n}\n.pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__description {\n  /* stylelint-disable value-no-vendor-prefix */\n  /* stylelint-disable  property-no-vendor-prefix */\n  display: -webkit-box;\n  max-width: 100%;\n  -webkit-line-clamp: 2;\n  /* autoprefixer: ignore next */\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  /* stylelint-enable value-no-vendor-prefix */\n  /* stylelint-enable property-no-vendor-prefix */\n  margin: 0;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 18px;\n  letter-spacing: 0.01px;\n  color: #9d9dae;\n}\n\n.pera-wallet-connect-modal-pending-message__animation-wrapper {\n  width: 56px;\n  height: 56px;\n  background-color: #6b46fe;\n  border-radius: 50%;\n}\n\n.pera-wallet-connect-modal-pending-message__text {\n  max-width: 271px;\n  margin-top: 24px;\n  color: #3c3c49;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 28px;\n  letter-spacing: -0.26px;\n}\n\n.pera-wallet-connect-modal-pending-message__cancel-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 14px;\n  color: #6a6a81;\n  background-color: #ffffff;\n  box-shadow: 0px 0px 1px rgba(12, 26, 75, 0.24), 0px 3px 8px -1px rgba(50, 50, 71, 0.05);\n  border-radius: 12px;\n  text-decoration: none;\n  text-align: center;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: -0.09px;\n  font-weight: 500;\n  border: none;\n}';
      r(P);
      var T = document.createElement("template");
      T.innerHTML = '\n  <div class="pera-wallet-connect-modal-pending-message-section">\n    <div class="pera-wallet-connect-modal-pending-message">\n      <div id="pera-wallet-connect-modal-pending-message-animation-wrapper" class="pera-wallet-connect-modal-pending-message__animation-wrapper"></div>\n\n      <div class="pera-wallet-connect-modal-pending-message__text">\n        Please wait while we connect you to Pera Wallet\n      </div>\n    </div>\n\n    <button\n      id="pera-wallet-connect-modal-pending-message-cancel-button"\n      class="pera-wallet-button pera-wallet-connect-modal-pending-message__cancel-button">\n        Cancel\n    </button>\n  </div>\n\n  <div id="pera-wallet-connect-modal-pending-message-audio-wrapper"></div>\n';
      var O = `
  <div class="pera-wallet-connect-modal-pending-message--try-again-view">
    <div>
      <img src="${I}" alt="Pera Wallet Logo" />

      <h1 class="pera-wallet-connect-modal-pending-message--try-again-view__title">
        Couldn\u2019t establish connection
      </h1>

      <p class="pera-wallet-connect-modal-pending-message--try-again-view__description">
        Having issues? Before trying again, make sure to read the support article below and apply the possible solutions.
      </p>
    </div>

    <div>
      <a
        href="https://support.perawallet.app/en/article/resolving-walletconnect-issues-1tolptm/"
        target="_blank"
        rel="noopener noreferrer"
        class="pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor">
        <img
          class="pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__image"
          src="data:image/svg+xml,%3csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M8 22.3199C7.72 22.3199 7.42998 22.2499 7.16998 22.1099C6.59998 21.8099 6.25 21.2099 6.25 20.5699V19.15C3.23 18.84 1.25 16.6199 1.25 13.4399V7.43994C1.25 3.99994 3.56 1.68994 7 1.68994H17C20.44 1.68994 22.75 3.99994 22.75 7.43994V13.4399C22.75 16.8799 20.44 19.1899 17 19.1899H13.23L8.96997 22.03C8.67997 22.22 8.34 22.3199 8 22.3199ZM7 3.17993C4.42 3.17993 2.75 4.84993 2.75 7.42993V13.43C2.75 16.01 4.42 17.68 7 17.68C7.41 17.68 7.75 18.02 7.75 18.43V20.56C7.75 20.69 7.83 20.75 7.88 20.78C7.93001 20.81 8.03001 20.84 8.14001 20.77L12.59 17.81C12.71 17.73 12.86 17.68 13.01 17.68H17.01C19.59 17.68 21.26 16.01 21.26 13.43V7.42993C21.26 4.84993 19.59 3.17993 17.01 3.17993H7ZM11.9998 12.11C11.5898 12.11 11.2498 11.77 11.2498 11.36V11.15C11.2498 10.0038 12.0798 9.4336 12.4082 9.20798L12.4198 9.20001C12.7898 8.95001 12.9098 8.78002 12.9098 8.52002C12.9098 8.02002 12.4998 7.60999 11.9998 7.60999C11.4998 7.60999 11.0898 8.02002 11.0898 8.52002C11.0898 8.93002 10.7498 9.27002 10.3398 9.27002C9.92984 9.27002 9.58984 8.93002 9.58984 8.52002C9.58984 7.19002 10.6698 6.10999 11.9998 6.10999C13.3298 6.10999 14.4098 7.19002 14.4098 8.52002C14.4098 9.66002 13.5698 10.23 13.2598 10.44C12.8698 10.7 12.7498 10.87 12.7498 11.15V11.36C12.7498 11.78 12.4098 12.11 11.9998 12.11ZM11.25 13.85C11.25 14.26 11.58 14.6 12 14.6C12.42 14.6 12.75 14.26 12.75 13.85C12.75 13.44 12.41 13.1 12 13.1C11.59 13.1 11.25 13.44 11.25 13.85Z' fill='%236B46FE'/%3e%3c/svg%3e"
          alt="Help Icon"
        />

        <div>
          <div
            class="pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__title-wrapper">
            <h1
              class="pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__title">
                Resolving WalletConnect issues
            </h1>

            <img src="data:image/svg+xml,%3csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.3287 10.0983C10.9574 10.0983 10.6564 9.79734 10.6564 9.42604L10.6564 6.29525L5.14866 11.803C4.88611 12.0655 4.46044 12.0655 4.19789 11.803C3.93534 11.5404 3.93534 11.1147 4.19789 10.8522L9.70561 5.34447L6.57482 5.34447C6.20352 5.34447 5.90252 5.04347 5.90252 4.67218C5.90252 4.30088 6.20352 3.99988 6.57482 3.99988L11.3287 3.99988C11.507 3.99988 11.678 4.07071 11.8041 4.19679C11.9301 4.32287 12.001 4.49387 12.001 4.67218L12.001 9.42604C12.001 9.79734 11.7 10.0983 11.3287 10.0983Z' fill='%239D9DAE'/%3e%3c/svg%3e" alt="Send Icon"/>
          </div>

          <p
            class="pera-wallet-connect-modal-pending-message--try-again-view__resolving-anchor__description">
            Unfortunately there are several known issues related to WalletConnect that our team is working on. Some of these issues are related to the WalletConnect JavaScript implementation on the dApp ...
          </p>
        </div>
      </a>

      <button id="pera-wallet-connect-modal-pending-message-try-again-button" class="pera-wallet-connect-button pera-wallet-connect-modal-pending-message--try-again-view__button">
        Close & Try Again
      </button>
    </div>
  </div>
  `;
      var j = class extends HTMLElement {
        constructor() {
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const e2 = document.createElement("style");
            e2.textContent = P, this.shadowRoot.append(T.content.cloneNode(true), e2);
          }
        }
        connectedCallback() {
          var e2;
          const n2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-wallet-connect-modal-pending-message-cancel-button");
          null == n2 || n2.addEventListener("click", () => {
            this.onClose();
          }), this.addAudioForConnection(), this.renderLottieAnimation(), setTimeout(() => {
            var e3;
            if (T.innerHTML = O, this.shadowRoot) {
              const n3 = document.createElement("style");
              n3.textContent = P, this.shadowRoot.innerHTML = "", this.shadowRoot.append(T.content.cloneNode(true), n3);
              const t2 = null === (e3 = this.shadowRoot) || void 0 === e3 ? void 0 : e3.getElementById("pera-wallet-connect-modal-pending-message-try-again-button");
              null == t2 || t2.addEventListener("click", () => {
                this.onClose();
              });
            }
          }, 3e4);
        }
        onClose() {
          e.removeModalWrapperFromDOM(e.PERA_WALLET_CONNECT_MODAL_ID);
        }
        addAudioForConnection() {
          var n2;
          if ("true" === this.getAttribute("should-use-sound") && e.isIOS()) {
            const e2 = null === (n2 = this.shadowRoot) || void 0 === n2 ? void 0 : n2.getElementById("pera-wallet-connect-modal-pending-message-audio-wrapper"), t2 = document.createElement("audio");
            t2.src = "https://s3.amazonaws.com/wc.perawallet.app/audio.mp3", t2.autoplay = true, t2.loop = true, null == e2 || e2.appendChild(t2);
          }
        }
        renderLottieAnimation() {
          var e2;
          const n2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-wallet-connect-modal-pending-message-animation-wrapper");
          n2 && l.default.loadAnimation({ container: n2, renderer: "svg", loop: true, autoplay: true, path: "https://s3.amazonaws.com/wc.perawallet.app/static/pera-loader-animation.json" });
        }
      };
      var N = '.pera-wallet-sign-txn-toast {\n  --pera-wallet-sign-txn-toast-width: 422px;\n  --pera-wallet-sign-txn-toast-height: 134px;\n  --pera-wallet-sign-txn-toast-font-family: "Inter", sans-serif;\n  position: fixed;\n  bottom: 28px;\n  right: 35px;\n  z-index: 11;\n  overflow: hidden;\n  width: var(--pera-wallet-sign-txn-toast-width);\n  height: var(--pera-wallet-sign-txn-toast-height);\n  background: #edeffb;\n  border-radius: 8px;\n  animation: 0.2s PeraWalletSignTxnToastSlideIn ease-out;\n}\n.pera-wallet-sign-txn-toast * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-sign-txn-toast-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-sign-txn-toast ul,\n.pera-wallet-sign-txn-toast ol,\n.pera-wallet-sign-txn-toast li {\n  list-style-type: none;\n}\n\n.pera-wallet-sign-txn-toast__header__close-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  width: 20px;\n  height: 20px;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n}\n\n.pera-wallet-sign-txn-toast__content__lottie-animation {\n  position: absolute;\n  top: -75px;\n  left: -100px;\n  width: 368px;\n  height: 368px;\n}\n\n.pera-wallet-sign-txn-toast__content__description {\n  position: absolute;\n  top: 40px;\n  right: 48px;\n  max-width: 197px;\n  color: #3c3c49;\n  font-size: 14px;\n  line-height: 22px;\n  letter-spacing: -0.1px;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-sign-txn-toast {\n    display: none;\n  }\n}\n@keyframes PeraWalletSignTxnToastSlideIn {\n  0% {\n    bottom: 12px;\n    opacity: 0;\n  }\n  100% {\n    bottom: 26px;\n    opacity: 1;\n  }\n}';
      r(N);
      var $ = document.createElement("template");
      $.innerHTML = `
  <div class="pera-wallet-sign-txn-toast">
    <div class="pera-wallet-sign-txn-toast__header">
      <button
        id="pera-wallet-sign-txn-toast-close-button"
        class="pera-wallet-sign-txn-toast__header__close-button">
        <img src="data:image/svg+xml,%3csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M14.4107 4.41074L9.41074 9.41074L10.5893 10.5893L15.5893 5.58926L14.4107 4.41074ZM9.41074 9.41074L4.41074 14.4107L5.58926 15.5893L10.5893 10.5893L9.41074 9.41074ZM15.5893 14.4107L10.5893 9.41074L9.41074 10.5893L14.4107 15.5893L15.5893 14.4107ZM10.5893 9.41074L5.58926 4.41074L4.41074 5.58926L9.41074 10.5893L10.5893 9.41074Z' fill='%239099BD'/%3e%3c/svg%3e" />
      </button>
    </div>
    <div class="pera-wallet-sign-txn-toast__content">
      <div id="pera-wallet-sign-txn-toast-lottie-animation" style="width:368;height:368" class="pera-wallet-sign-txn-toast__content__lottie-animation"></div>
      <p class="pera-wallet-sign-txn-toast__content__description">
        Please launch <b>Pera Wallet</b> on your iOS or Android device to sign this transaction.
      </p>
    </div>
  </div>
`;
      var q = class extends HTMLElement {
        constructor() {
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const n2 = document.createElement("style");
            n2.textContent = N, this.shadowRoot.append($.content.cloneNode(true), n2);
            const t2 = this.shadowRoot.getElementById("pera-wallet-sign-txn-toast-close-button");
            null == t2 || t2.addEventListener("click", () => {
              e.removeModalWrapperFromDOM(e.PERA_WALLET_SIGN_TXN_TOAST_ID);
            }), this.renderLottieAnimation();
          }
        }
        renderLottieAnimation() {
          var e2;
          const n2 = null === (e2 = this.shadowRoot) || void 0 === e2 ? void 0 : e2.getElementById("pera-wallet-sign-txn-toast-lottie-animation");
          n2 && l.default.loadAnimation({ container: n2, renderer: "svg", loop: true, autoplay: true, path: "https://s3.amazonaws.com/wc.perawallet.app/static/sign-toast-animation.json" });
        }
      };
      var U = '@import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");\n.pera-wallet-modal {\n  --pera-wallet-modal-font-family: "Inter", sans-serif;\n  --pera-wallet-modal-compact-width: 380px;\n  --pera-wallet-modal-compact-height: 396px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 999999;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.pera-wallet-modal--select-account .pera-wallet-modal__body {\n  width: 480px;\n  height: 578px;\n  background-color: #ffffff;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body {\n  top: 40px;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  max-width: unset;\n  height: calc(100 * var(--vh));\n  padding: 20px;\n  background-color: #ffffff;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.02), 0 4px 12px rgba(0, 0, 0, 0.03);\n  border-radius: 20px 20px 0px 0px;\n  animation: 0.3s PeraWalletConnectMobileSlideIn ease-out;\n  overflow-y: auto;\n  transform: unset;\n}\n.pera-wallet-modal--mobile .pera-wallet-modal__body::before {\n  background-image: unset;\n}\n.pera-wallet-modal--compact:not(.pera-wallet-modal--mobile) .pera-wallet-modal__body {\n  width: var(--pera-wallet-modal-compact-width);\n  height: var(--pera-wallet-modal-compact-height);\n  padding: 0;\n}\n.pera-wallet-modal * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-smooth: antialiased;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.pera-wallet-modal ul,\n.pera-wallet-modal ol,\n.pera-wallet-modal li {\n  list-style-type: none;\n}\n\n.pera-wallet-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: auto;\n  height: 48px;\n  padding: 14px;\n  border: none;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n  font-family: var(--pera-wallet-modal-font-family);\n  font-size: 14px;\n}\n\n.pera-wallet-modal__logo img {\n  display: block;\n  width: 32px;\n}\n\n.pera-wallet-modal__body {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  width: 700px;\n  max-width: calc(100vw - 80px);\n  padding: 28px;\n  background-color: #f3f3f7;\n  box-shadow: 1px 2px 2px rgba(0, 0, 0, 0.08);\n  border-radius: 24px;\n  animation: 0.3s PeraWalletConnectSlideIn ease-out;\n  transform: translate(-50%, -50%);\n}\n.pera-wallet-modal__body::before {\n  --background-line: #1e0972 0 1.2px, transparent 0 calc(100% - 1.2px), #1e0972;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  content: "";\n  background-image: linear-gradient(var(--background-line)), linear-gradient(90deg, var(--background-line));\n  background-size: 116px 116px;\n  mix-blend-mode: overlay;\n  border-radius: 24px;\n  opacity: 0.8;\n  pointer-events: none;\n}\n\n@media (max-width: 767px) {\n  .pera-wallet-modal--desktop .pera-wallet-modal__body {\n    width: 100%;\n    max-width: calc(100vw - 32px);\n    padding: 24px;\n  }\n}\n@keyframes PeraWalletConnectSlideIn {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, calc(-50% + 24px));\n  }\n  100% {\n    opacity: 1;\n    transform: translate(-50%, -50%);\n  }\n}\n@keyframes PeraWalletConnectMobileSlideIn {\n  0% {\n    top: 30%;\n    opacity: 0;\n  }\n  100% {\n    top: 40px;\n    opacity: 1;\n  }\n}\n.pera-wallet-sign-txn-modal.pera-wallet-modal .pera-wallet-modal__body {\n  width: 480px;\n  height: 578px;\n  background-color: #ffffff;\n  background-image: unset;\n  padding: 0;\n}\n.pera-wallet-sign-txn-modal.pera-wallet-modal .pera-wallet-modal__body .pera-wallet-sign-txn-modal__body__content {\n  width: 100%;\n  height: 100%;\n}\n.pera-wallet-sign-txn-modal.pera-wallet-modal .pera-wallet-modal__body #pera-wallet-iframe {\n  width: 100%;\n  height: 100%;\n  border-radius: 16px;\n  margin: 0 auto;\n  border: none;\n}\n\n.pera-wallet-sign-txn-modal--compact.pera-wallet-modal .pera-wallet-modal__body {\n  width: var(--pera-wallet-modal-compact-width);\n  height: var(--pera-wallet-modal-compact-height);\n}';
      r(U);
      var G = document.createElement("template");
      G.innerHTML = `
  <div id="pera-wallet-sign-txn-modal" class="${e.PERA_WALLET_MODAL_CLASSNAME} pera-wallet-sign-txn-modal">
    <div class="pera-wallet-modal__body">
      <pera-wallet-modal-header modal-id="${e.PERA_WALLET_SIGN_TXN_MODAL_ID}"></pera-wallet-modal-header/>

      <div class="pera-wallet-sign-txn-modal__body__content" />
    </div>
  </div>
`;
      var Q = class extends HTMLElement {
        constructor() {
          if (super(), this.attachShadow({ mode: "open" }), this.shadowRoot) {
            const e2 = document.createElement("style");
            e2.textContent = U, this.shadowRoot.append(G.content.cloneNode(true), e2);
            if ("true" === this.getAttribute("compact-mode")) {
              const e3 = this.shadowRoot.getElementById("pera-wallet-sign-txn-modal");
              null == e3 || e3.classList.add("pera-wallet-sign-txn-modal--compact");
            }
          }
        }
      };
      window.addEventListener("DOMContentLoaded", () => {
        p();
      }), window.addEventListener("resize", () => {
        p();
      }), window.customElements.define("pera-wallet-connect-modal", H), window.customElements.define("pera-wallet-modal-desktop-mode", k), window.customElements.define("pera-wallet-modal-header", w), window.customElements.define("pera-wallet-modal-touch-screen-mode", E), window.customElements.define("pera-wallet-redirect-modal", R), window.customElements.define("pera-wallet-connect-modal-information-section", D), window.customElements.define("pera-wallet-connect-modal-pending-message-section", j), window.customElements.define("pera-wallet-sign-txn-toast", q), window.customElements.define("pera-wallet-sign-txn-modal", Q), window.customElements.define("pera-wallet-download-qr-code", x);
    }
  });

  // node_modules/@perawallet/connect/dist/index-d147afec.js
  var require_index_d147afec = __commonJS({
    "node_modules/@perawallet/connect/dist/index-d147afec.js"(exports) {
      "use strict";
      var e = (init_esm10(), __toCommonJS(esm_exports5));
      var t = require_cjs4();
      var n = require_es5();
      function o(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      var a = o(e);
      var r = o(t);
      var i = o(n);
      function s(e2, t2, n2, o2) {
        return new (n2 || (n2 = Promise))(function(a2, r2) {
          function i2(e3) {
            try {
              l2(o2.next(e3));
            } catch (e4) {
              r2(e4);
            }
          }
          function s2(e3) {
            try {
              l2(o2.throw(e3));
            } catch (e4) {
              r2(e4);
            }
          }
          function l2(e3) {
            var t3;
            e3.done ? a2(e3.value) : (t3 = e3.value, t3 instanceof n2 ? t3 : new n2(function(e4) {
              e4(t3);
            })).then(i2, s2);
          }
          l2((o2 = o2.apply(e2, t2 || [])).next());
        });
      }
      var l = class _l extends Error {
        constructor(e2, t2, ...n2) {
          super(...n2), Error.captureStackTrace && Error.captureStackTrace(this, _l), this.name = "PeraWalletConnectError", this.data = e2, this.message = t2;
        }
      };
      var c = new class {
        constructor(e2) {
          this.listener = void 0, this.channel = e2.channel;
        }
        setupListener({ onReceiveMessage: e2 }) {
          this.close(), this.listener = (t2) => {
            if ("object" == typeof t2.data)
              try {
                t2.data.channel === this.channel && e2(t2);
              } catch (e3) {
                console.error(e3);
              }
          }, window.addEventListener("message", this.listener);
        }
        sendMessage({ message: e2, targetWindow: t2, origin: n2, timeout: o2 = 1e3 }) {
          setTimeout(() => {
            const o3 = { channel: this.channel, message: e2 };
            t2.postMessage(o3, { targetOrigin: n2 || "*" });
          }, o2);
        }
        close() {
          this.listener && (window.removeEventListener("message", this.listener), this.listener = void 0);
        }
      }({ channel: "pera-web-wallet" });
      function d() {
        const e2 = document.querySelector('meta[name="name"]'), t2 = document.querySelector('meta[name="description"]');
        let { title: n2 } = document, o2 = "";
        return e2 instanceof HTMLMetaElement && (n2 = e2.content), t2 instanceof HTMLMetaElement && (o2 = t2.content), { title: n2, description: o2, url: window.location.origin, favicon: u()[0] };
      }
      function u() {
        const e2 = document.getElementsByTagName("link"), t2 = [];
        for (let n2 = 0; n2 < e2.length; n2++) {
          const o2 = e2[n2], a2 = o2.getAttribute("rel");
          if (a2 && a2.toLowerCase().indexOf("icon") > -1) {
            const e3 = o2.getAttribute("href");
            if (e3 && -1 === e3.toLowerCase().indexOf("https:") && -1 === e3.toLowerCase().indexOf("http:") && 0 !== e3.indexOf("//")) {
              let n3 = `${window.location.protocol}//${window.location.host}`;
              if (0 === e3.indexOf("/"))
                n3 += e3;
              else {
                const t3 = window.location.pathname.split("/");
                t3.pop();
                n3 += `${t3.join("/")}/${e3}`;
              }
              t2.push(n3);
            } else if (0 === (null == e3 ? void 0 : e3.indexOf("//"))) {
              const n3 = window.location.protocol + e3;
              t2.push(n3);
            } else
              e3 && t2.push(e3);
          }
        }
        return t2;
      }
      function p(e2) {
        return new Promise((t2, n2) => {
          try {
            const o2 = window.open(e2, "_blank");
            let a2 = 0;
            const r2 = setInterval(() => {
              if (a2 += 1, 50 === a2)
                return clearInterval(r2), void n2(new l({ type: "MESSAGE_NOT_RECEIVED" }, "Couldn't open Pera Wallet, please try again."));
              o2 && (true === o2.closed && (clearInterval(r2), n2(new l({ type: "OPERATION_CANCELLED" }, "Operation cancelled by user"))), c.sendMessage({ message: { type: "TAB_OPEN" }, origin: e2, targetWindow: o2 }));
            }, 700);
            c.setupListener({ onReceiveMessage: (e3) => {
              "TAB_OPEN_RECEIVED" === e3.data.message.type && (clearInterval(r2), t2(o2));
            } });
          } catch (e3) {
            n2(e3);
          }
        });
      }
      function h(e2) {
        const t2 = document.createElement("div");
        return t2.setAttribute("id", e2), document.body.appendChild(t2), t2;
      }
      function w() {
        h("pera-wallet-redirect-modal-wrapper").innerHTML = "<pera-wallet-redirect-modal></pera-wallet-redirect-modal>";
      }
      function g() {
        h("pera-wallet-sign-txn-toast-wrapper").innerHTML = "<pera-wallet-sign-txn-toast></pera-wallet-sign-txn-toast>";
      }
      function m(e2) {
        const t2 = document.getElementById(e2);
        t2 && t2.remove();
      }
      var v = "PeraWallet.Wallet";
      var f = "walletconnect";
      function b() {
        return "undefined" == typeof localStorage ? void 0 : localStorage;
      }
      function y(e2, t2) {
        var n2;
        null === (n2 = b()) || void 0 === n2 || n2.setItem(v, JSON.stringify({ type: t2 || "pera-wallet", accounts: e2, selectedAccount: e2[0] }));
      }
      function N() {
        var e2;
        const t2 = null === (e2 = b()) || void 0 === e2 ? void 0 : e2.getItem(v);
        return t2 ? JSON.parse(t2) : null;
      }
      function T() {
        return new Promise((e2, t2) => {
          var n2, o2;
          try {
            null === (n2 = b()) || void 0 === n2 || n2.removeItem(f), null === (o2 = b()) || void 0 === o2 || o2.removeItem(v), e2(void 0);
          } catch (e3) {
            t2(e3);
          }
        });
      }
      function A(e2) {
        const t2 = e2.slice();
        for (let e3 = t2.length - 1; e3 > 0; e3--) {
          const n2 = Math.floor(Math.random() * (e3 + 1));
          [t2[e3], t2[n2]] = [t2[n2], t2[e3]];
        }
        return t2;
      }
      function S() {
        return function(e2, t2 = {}) {
          return fetch(e2, t2).then((e3) => e3.json()).then((e3) => e3);
        }("https://wc.perawallet.app/config.json", { cache: "no-store" });
      }
      function _() {
        return s(this, void 0, void 0, function* () {
          let e2 = { bridgeURL: "", webWalletURL: "", isWebWalletAvailable: false, shouldDisplayNewBadge: false, shouldUseSound: true, silent: false, promoteMobile: false };
          try {
            const t2 = yield S();
            void 0 !== t2.web_wallet && t2.web_wallet_url && (e2.isWebWalletAvailable = t2.web_wallet), void 0 !== t2.display_new_badge && (e2.shouldDisplayNewBadge = t2.display_new_badge), void 0 !== t2.use_sound && (e2.shouldUseSound = t2.use_sound), void 0 !== t2.silent && (e2.silent = t2.silent), void 0 !== t2.promote_mobile && (e2.promoteMobile = t2.promote_mobile), e2 = Object.assign(Object.assign({}, e2), { bridgeURL: A(t2.servers || [])[0] || "", webWalletURL: t2.web_wallet_url || "" });
          } catch (e3) {
            console.log(e3);
          }
          return e2;
        });
      }
      function E(e2) {
        return Uint8Array.from(window.atob(e2), (e3) => e3.charCodeAt(0));
      }
      function C(e2, t2) {
        return { id: Date.now() * Math.pow(10, 3) + Math.floor(Math.random() * Math.pow(10, 3)), jsonrpc: "2.0", method: e2, params: t2 };
      }
      function I() {
        return "undefined" != typeof navigator;
      }
      function W() {
        return I() && /Android/i.test(navigator.userAgent);
      }
      function O() {
        return I() && /iPhone|iPod|Android/i.test(navigator.userAgent);
      }
      var L = W() ? "algorand://" : "perawallet-wc://";
      function M(e2) {
        return { ROOT: `https://${e2}`, CONNECT: `https://${e2}/connect`, TRANSACTION_SIGN: `https://${e2}/transaction/sign` };
      }
      function R({ method: e2, signTxnRequestParams: t2, signer: n2, chainId: o2, webWalletURL: a2, resolve: r2, reject: i2 }) {
        const d2 = M(a2);
        !function() {
          s(this, void 0, void 0, function* () {
            try {
              const a3 = yield p(d2.TRANSACTION_SIGN);
              if (a3) {
                let r3;
                "SIGN_TXN" === e2 ? r3 = { type: "SIGN_TXN", txn: t2 } : "SIGN_DATA" === e2 && n2 && o2 && (r3 = { type: "SIGN_DATA", data: t2, signer: n2, chainId: o2 }), r3 && c.sendMessage({ message: r3, origin: d2.TRANSACTION_SIGN, targetWindow: a3 });
              }
              const s2 = setInterval(() => {
                true === (null == a3 ? void 0 : a3.closed) && (i2(new l({ type: `${e2}_CANCELLED` }, "Transaction signing is cancelled by user.")), clearInterval(s2));
              }, 2e3);
              c.setupListener({ onReceiveMessage: (t3) => function({ event: e3, newPeraWalletTab: t4, method: n3, resolve: o3, reject: a4 }) {
                switch (e3.data.message.type) {
                  case "SIGN_TXN_CALLBACK":
                    null == t4 || t4.close(), o3(e3.data.message.signedTxns.map((e4) => E(e4.signedTxn)));
                    break;
                  case "SIGN_DATA_CALLBACK":
                    null == t4 || t4.close(), o3(e3.data.message.signedData.map((e4) => E(e4.signedData)));
                    break;
                  case "SIGN_TXN_NETWORK_MISMATCH":
                    a4(new l({ type: `${n3}_NETWORK_MISMATCH`, detail: e3.data.message.error }, e3.data.message.error || "Network mismatch"));
                    break;
                  case "SIGN_TXN_CALLBACK_ERROR":
                    null == t4 || t4.close(), a4(new l({ type: `${n3}_CANCELLED` }, e3.data.message.error));
                    break;
                  case "SESSION_DISCONNECTED":
                    null == t4 || t4.close(), T(), a4(new l({ type: "SESSION_DISCONNECTED", detail: e3.data.message.error }, e3.data.message.error));
                }
              }({ event: t3, newPeraWalletTab: a3, method: e2, resolve: r2, reject: i2 }) });
            } catch (e3) {
              i2(e3);
            }
          });
        }();
      }
      function P({ webWalletURL: e2, chainId: t2, resolve: n2, reject: o2 }) {
        const a2 = M(e2);
        return function() {
          return s(this, void 0, void 0, function* () {
            try {
              const e3 = yield p(a2.CONNECT);
              e3 && c.sendMessage({ message: { type: "CONNECT", data: Object.assign(Object.assign({}, d()), { chainId: t2 }) }, origin: a2.CONNECT, targetWindow: e3 });
              const i2 = setInterval(() => {
                true === (null == e3 ? void 0 : e3.closed) && (o2(new l({ type: "CONNECT_CANCELLED" }, "Connect is cancelled by user")), clearInterval(i2), r2());
              }, 2e3);
              c.setupListener({ onReceiveMessage: (t3) => function({ event: e4, newPeraWalletTab: t4, resolve: n3, reject: o3 }) {
                if (n3 && "CONNECT_CALLBACK" === e4.data.message.type) {
                  const o4 = e4.data.message.data.addresses;
                  y(o4, "pera-wallet-web"), n3(o4), m("pera-wallet-connect-modal-wrapper"), null == t4 || t4.close();
                } else
                  "CONNECT_NETWORK_MISMATCH" === e4.data.message.type && (o3(new l({ type: "CONNECT_NETWORK_MISMATCH", detail: e4.data.message.error }, e4.data.message.error || "Your wallet is connected to a different network to this dApp. Update your wallet to the correct network (MainNet or TestNet) to continue.")), m("pera-wallet-connect-modal-wrapper"), null == t4 || t4.close());
              }({ event: t3, newPeraWalletTab: e3, resolve: n2, reject: o2 }) });
            } catch (e3) {
              r2(), o2(e3);
            }
          });
        };
        function r2() {
          m("pera-wallet-connect-modal-wrapper");
        }
      }
      function D({ isWebWalletAvailable: e2, shouldDisplayNewBadge: t2, shouldUseSound: n2, compactMode: o2, promoteMobile: a2 }) {
        return { open: (r2 = { isWebWalletAvailable: e2, shouldDisplayNewBadge: t2, shouldUseSound: n2, compactMode: o2, promoteMobile: a2 }, (e3) => {
          if (!document.getElementById("pera-wallet-connect-modal-wrapper")) {
            const t3 = h("pera-wallet-connect-modal-wrapper"), n3 = `${e3}&algorand=true`, { isWebWalletAvailable: o3, shouldDisplayNewBadge: a3, shouldUseSound: i2, compactMode: s2, promoteMobile: l2 } = r2;
            t3.innerHTML = `<pera-wallet-connect-modal uri="${n3}" is-web-wallet-avaliable="${o3}" should-display-new-badge="${a3}" should-use-sound="${i2}" compact-mode="${s2}" promote-mobile="${l2}"></pera-wallet-connect-modal>`;
          }
        }), close: () => m("pera-wallet-connect-modal-wrapper") };
        var r2;
      }
      "undefined" != typeof window && (window.global = window, window.Buffer = window.Buffer || require_buffer2().Buffer, Promise.resolve().then(function() {
        return require_App_38248cd1();
      })), exports.PERA_DOWNLOAD_URL = "https://perawallet.app/download/", exports.PERA_WALLET_APP_DEEP_LINK = L, exports.PERA_WALLET_CONNECT_MODAL_ID = "pera-wallet-connect-modal-wrapper", exports.PERA_WALLET_MODAL_CLASSNAME = "pera-wallet-modal", exports.PERA_WALLET_REDIRECT_MODAL_ID = "pera-wallet-redirect-modal-wrapper", exports.PERA_WALLET_SIGN_TXN_MODAL_ID = "pera-wallet-sign-txn-modal-wrapper", exports.PERA_WALLET_SIGN_TXN_TOAST_ID = "pera-wallet-sign-txn-toast-wrapper", exports.PeraWalletConnect = class {
        constructor(e2) {
          this.bridge = (null == e2 ? void 0 : e2.bridge) || "", this.connector = null, this.shouldShowSignTxnToast = void 0 === (null == e2 ? void 0 : e2.shouldShowSignTxnToast) || e2.shouldShowSignTxnToast, this.chainId = null == e2 ? void 0 : e2.chainId, this.compactMode = (null == e2 ? void 0 : e2.compactMode) || false;
        }
        get platform() {
          return function() {
            const e2 = N();
            let t2 = null;
            return "pera-wallet" === (null == e2 ? void 0 : e2.type) ? t2 = "mobile" : "pera-wallet-web" === (null == e2 ? void 0 : e2.type) && (t2 = "web"), t2;
          }();
        }
        get isConnected() {
          var e2;
          return "mobile" === this.platform ? !!this.connector : "web" === this.platform && !!(null === (e2 = N()) || void 0 === e2 ? void 0 : e2.accounts.length);
        }
        connect() {
          return new Promise((e2, t2) => s(this, void 0, void 0, function* () {
            var n2;
            try {
              if (null === (n2 = this.connector) || void 0 === n2 ? void 0 : n2.connected)
                try {
                  yield this.connector.killSession();
                } catch (e3) {
                }
              const { isWebWalletAvailable: o2, bridgeURL: r2, webWalletURL: i2, shouldDisplayNewBadge: s2, shouldUseSound: c2, promoteMobile: d2 } = yield _(), u2 = P({ resolve: e2, reject: t2, webWalletURL: i2, chainId: this.chainId, isCompactMode: this.compactMode });
              o2 && (window.onWebWalletConnect = u2), this.connector = new a.default({ bridge: this.bridge || r2 || "https://bridge.walletconnect.org", qrcodeModal: D({ isWebWalletAvailable: o2, shouldDisplayNewBadge: s2, shouldUseSound: c2, compactMode: this.compactMode, promoteMobile: d2 }) }), yield this.connector.createSession({ chainId: this.chainId || 4160 }), function(e3, t3) {
                var n3, o3, a2, r3;
                const i3 = document.getElementById(e3), s3 = null === (o3 = null === (n3 = null == i3 ? void 0 : i3.querySelector(e3.replace("-wrapper", ""))) || void 0 === n3 ? void 0 : n3.shadowRoot) || void 0 === o3 ? void 0 : o3.querySelector(".pera-wallet-modal"), l2 = null === (r3 = null === (a2 = null == s3 ? void 0 : s3.querySelector("pera-wallet-modal-header")) || void 0 === a2 ? void 0 : a2.shadowRoot) || void 0 === r3 ? void 0 : r3.getElementById("pera-wallet-modal-header-close-button");
                null == l2 || l2.addEventListener("click", () => {
                  t3(), m(e3);
                });
              }("pera-wallet-connect-modal-wrapper", () => t2(new l({ type: "CONNECT_MODAL_CLOSED" }, "Connect modal is closed by user"))), this.connector.on("connect", (n3, o3) => {
                var a2, r3;
                n3 && t2(n3), e2((null === (a2 = this.connector) || void 0 === a2 ? void 0 : a2.accounts) || []), y((null === (r3 = this.connector) || void 0 === r3 ? void 0 : r3.accounts) || []);
              });
            } catch (e3) {
              console.log(e3), t2(new l({ type: "SESSION_CONNECT", detail: e3 }, e3.message || "There was an error while connecting to Pera Wallet"));
            }
          }));
        }
        reconnectSession() {
          return new Promise((e2, t2) => s(this, void 0, void 0, function* () {
            var n2, o2;
            try {
              const r2 = N();
              if (!r2)
                return void e2([]);
              if ("pera-wallet-web" === (null == r2 ? void 0 : r2.type)) {
                const { isWebWalletAvailable: n3 } = yield _();
                n3 ? e2(r2.accounts || []) : t2(new l({ type: "SESSION_RECONNECT", detail: "Pera Web is not available" }, "Pera Web is not available"));
              }
              this.connector && e2(this.connector.accounts || []), this.bridge = (null === (n2 = function() {
                var e3;
                const t3 = null === (e3 = b()) || void 0 === e3 ? void 0 : e3.getItem(f);
                return t3 ? JSON.parse(t3) : null;
              }()) || void 0 === n2 ? void 0 : n2.bridge) || "", this.bridge && (this.connector = new a.default({ bridge: this.bridge }), e2((null === (o2 = this.connector) || void 0 === o2 ? void 0 : o2.accounts) || [])), this.isConnected || e2([]);
            } catch (e3) {
              yield this.disconnect(), t2(new l({ type: "SESSION_RECONNECT", detail: e3 }, e3.message || "There was an error while reconnecting to Pera Wallet"));
            }
          }));
        }
        disconnect() {
          var e2;
          return s(this, void 0, void 0, function* () {
            let t2;
            this.isConnected && "mobile" === this.platform && (t2 = null === (e2 = this.connector) || void 0 === e2 ? void 0 : e2.killSession(), null == t2 || t2.then(() => {
              this.connector = null;
            })), yield T();
          });
        }
        signTransactionWithMobile(e2) {
          return s(this, void 0, void 0, function* () {
            const t2 = C("algo_signTxn", [e2]);
            try {
              try {
                const { silent: e3 } = yield _(), n2 = (yield this.connector.sendCustomRequest(t2, { forcePushNotification: !e3 })).filter(Boolean);
                return "string" == typeof n2[0] ? n2.map(E) : n2.map((e4) => Uint8Array.from(e4));
              } catch (e3) {
                return yield Promise.reject(new l({ type: "SIGN_TRANSACTIONS", detail: e3 }, e3.message || "Failed to sign transaction"));
              }
            } finally {
              m("pera-wallet-redirect-modal-wrapper"), m("pera-wallet-sign-txn-toast-wrapper");
            }
          });
        }
        signTransactionWithWeb(e2, t2) {
          return new Promise((n2, o2) => R({ signTxnRequestParams: e2, webWalletURL: t2, method: "SIGN_TXN", resolve: n2, reject: o2 }));
        }
        signDataWithMobile({ data: e2, signer: t2, chainId: n2 }) {
          return s(this, void 0, void 0, function* () {
            const o2 = C("algo_signData", e2.map((e3) => Object.assign(Object.assign({}, e3), { signer: t2, chainId: n2 })));
            try {
              try {
                const { silent: e3 } = yield _(), t3 = (yield this.connector.sendCustomRequest(o2, { forcePushNotification: !e3 })).filter(Boolean);
                return "string" == typeof t3[0] ? t3.map(E) : t3.map((e4) => Uint8Array.from(e4));
              } catch (e3) {
                return yield Promise.reject(new l({ type: "SIGN_TRANSACTIONS", detail: e3 }, e3.message || "Failed to sign transaction"));
              }
            } finally {
              m("pera-wallet-redirect-modal-wrapper"), m("pera-wallet-sign-txn-toast-wrapper");
            }
          });
        }
        signDataWithWeb({ data: e2, signer: t2, chainId: n2, webWalletURL: o2 }) {
          return new Promise((a2, r2) => R({ method: "SIGN_DATA", signTxnRequestParams: e2, signer: t2, chainId: n2, webWalletURL: o2, resolve: a2, reject: r2 }));
        }
        signTransaction(e2, t2) {
          return s(this, void 0, void 0, function* () {
            if ("mobile" === this.platform && (O() ? w() : !O() && this.shouldShowSignTxnToast && g(), !this.connector))
              throw new Error("PeraWalletConnect was not initialized correctly.");
            const n2 = e2.flatMap((e3) => e3.map((e4) => function(e5, t3) {
              let n3;
              t3 && !(e5.signers || []).includes(t3) && (n3 = []);
              const o2 = { txn: (a2 = e5.txn, Buffer.from(r.default.encodeUnsignedTransaction(a2)).toString("base64")) };
              var a2;
              return Array.isArray(n3) && (o2.signers = n3), e5.authAddr && (o2.authAddr = e5.authAddr), e5.message && (o2.message = e5.message), e5.msig && (o2.msig = e5.msig), o2;
            }(e4, t2)));
            if ("web" === this.platform) {
              const { webWalletURL: e3 } = yield _();
              return this.signTransactionWithWeb(n2, e3);
            }
            return this.signTransactionWithMobile(n2);
          });
        }
        signData(e2, t2) {
          return s(this, void 0, void 0, function* () {
            const n2 = this.chainId || 4160;
            if ("mobile" === this.platform && (O() ? w() : !O() && this.shouldShowSignTxnToast && g(), !this.connector))
              throw new Error("PeraWalletConnect was not initialized correctly.");
            if ("web" === this.platform) {
              const { webWalletURL: o3 } = yield _();
              return this.signDataWithWeb({ data: e2, signer: t2, chainId: n2, webWalletURL: o3 });
            }
            const o2 = e2.map((e3) => Object.assign(Object.assign({}, e3), { data: Buffer.from(e3.data).toString("base64") }));
            return this.signDataWithMobile({ data: o2, signer: t2, chainId: n2 });
          });
        }
      }, exports.closePeraWalletSignTxnToast = function() {
        m("pera-wallet-sign-txn-toast-wrapper");
      }, exports.detectBrowser = function() {
        if (!I())
          return null;
        const { userAgent: e2 } = navigator;
        let t2;
        return t2 = e2.match(/DuckDuckGo/i) ? "DuckDuckGo" : e2.match(/OPX/i) ? "Opera GX" : navigator.brave ? "Brave" : i.default.getParser(navigator.userAgent).getBrowserName(), t2;
      }, exports.isAndroid = W, exports.isIOS = function() {
        return I() && /iPhone|iPad|iPod/i.test(navigator.userAgent);
      }, exports.isMobile = O, exports.removeModalWrapperFromDOM = m;
    }
  });

  // node_modules/@perawallet/connect/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@perawallet/connect/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var e = require_index_d147afec();
      init_esm10(), require_cjs4(), require_es5(), exports.PeraWalletConnect = e.PeraWalletConnect, exports.closePeraWalletSignTxnToast = e.closePeraWalletSignTxnToast;
    }
  });

  // src/perawalletconnect.mjs
  var import_connect = __toESM(require_dist2(), 1);
  window.pera = {
    PeraWalletConnect: import_connect.PeraWalletConnect,
    closePeraWalletSignTxnToast: import_connect.closePeraWalletSignTxnToast
  };
})();
/*! Bundled license information:

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

js-sha512/src/sha512.js:
  (*
   * [js-sha512]{@link https://github.com/emn178/js-sha512}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2018
   * @license MIT
   *)

hi-base32/src/base32.js:
  (*
   * [hi-base32]{@link https://github.com/emn178/hi-base32}
   *
   * @version 0.5.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

@evanhahn/lottie-web-light/index.js:
  (*!
   Transformation Matrix v2.0
   (c) Epistemex 2014-2015
   www.epistemex.com
   By Ken Fyrstenberg
   Contributions by leeoniya.
   License: MIT, header required.
   *)
*/
